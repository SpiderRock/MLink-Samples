syntax = "proto3";

package spiderrock.protobuf;
option csharp_namespace = "SRProtobufCore";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "spiderrock_common.proto";

    
message AccessControlConfig {
    message PKey {
        
        AclType acl_type = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string acl_list = 100;
    google.protobuf.Timestamp timestamp = 103;
}


    
message AccountConfig {
    message PKey {
        
        string accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm acronym
    AccountType account_type = 103; // SR account type (omnibus accounts are expected to be flat at the end of the day)
    RunStatus run_status = 106;
    AccntStatus accnt_status = 109; // This accounts current status
    google.protobuf.Timestamp accnt_status_dttm = 112; // The Date/time this accounts status was changed
    string accnt_name = 115; // account name
    string omni_accnt = 118; // associated omnibus account (if any)	(must be an existing account with the same clientFirm and type=Omnibus)
    string rollup_accnt = 121; // rollup account (must be an existing account with the same clientFirm and type=Rollup)
    string source_accnt = 124; // SR side source account (must be an existing account with the same clientFirm and type=Rollup; only available when type=Clearing)
    string client_tags = 127; // (optional) user defined account tag(s) (eg. tag,tag,tag,tag) [max of 10,000 total chars (including seps)]
    string billing_schedule = 130; // overrides billingSchedule at clientFirm level
    RelationshipType stk_relationship = 133; // SR client relationship
    RelationshipType fut_relationship = 136;
    RelationshipType opt_relationship = 139;
    string accnt_route_code = 142; // accnt route code is the default route for this account
    string route_code_alt1 = 145; // alt flow allocation route (if routeAllocAlt1 > 0)
    float route_alloc_alt1 = 148; // percentage of flow to allocate to routeCodeAlt1
    string route_code_alt2 = 151; // alt flow allocation route will be used instead of the default route (if set)
    float route_alloc_alt2 = 154; // percentage of flow to allocate to routeCodeAlt2
    string risk_firm1 = 157; // clientFirm with ownership of riskGroup1 risk settings (usually 'SR')
    string risk_group1 = 160; // risk pool grouping code (slot #1) (usually subClientFirm, coreClientFirm, or sponsorClientFirm) [group that this accnt aggregates into]
    string risk_firm2 = 163; // clientFirm with ownership of riskGroup2 risk settings (usually coreClientFirm))
    string risk_group2 = 166; // risk pool grouping code (slot #2) (usually accnt) [group that this accnt aggregates into]
    string risk_firm3 = 169; // clientFirm with ownership of riskGroup3 risk settings [usually sponsorClientFirm]
    string risk_group3 = 172; // risk pool grouping code (slot #3) (coreClientFirm) [group that this accnt aggregates into]
    string client_accnt = 175; // client assigned "long" account string (optional) [used to map between client and SR account strings]
    YesNo require_alt_order_id = 178; // Parent order must have an AltOrderId to proceed
    YesNo nbbo_fix_drop_marking = 181; // Whether or not to markup the FIX drop with nbbo information
    SpdrStageType stage_type = 184; // if not NONE or StageModify then parent order must be a staged order [StageLock, StageReview]
    string review_ex_dest_stk = 187; // order routing string (if any) [StageReview Orders]
    string review_ex_dest_fut = 190; // order routing string (if any) [StageReview Orders]
    string review_ex_dest_opt = 193; // order routing string (if any) [StageReview Orders]
    FirmType firm_type = 196;
    OrderCapacity order_capacity = 199; // Order capacity
    OrderCapacity cust_order_capacity = 202; // Order capacity of Account at Customer's Firm
    FutClearingRange fut_clearing_range = 205;
    FutCustType fut_cust_type = 208;
    string pri_stk_agg_group = 211; // primary stk grouping code (for computing aggregate positions) [default = ClientFirm]
    string sec_stk_agg_group = 214; // secondary stk grouping code (for computing aggregate positions) [default = ""]
    string fut_agg_group = 217; // fut grouping code (for computing aggregate positions) [default = ClientFirm]
    string opt_agg_group = 220; // opt grouping code (for computing aggregate positions) [default = ClientFirm]
    string no_cross_group = 223; // no cross grouping code (accounts with the same nCrossGroup will not cross with themselves) [default = ClientFirm]
    YesNo is_low_velocity = 226; // if Yes all 390Rule counters will be computed even if not a PriorityCust
    YesNo user_short_marking = 229; // users are required to do the long/short marking on orders
    YesNo user_option_marking = 232; // users are required to do the open/close marking on orders
    YesNo require_locate = 235; // locate check enforced in SR systems
    YesNo require_extern_stk_pos = 238; // all equity sell orders require an ExternAggGroupReport (externSource = SRSE) record
    string locate_firm = 241; // default locate firm;  LocateResponse.locateFirm will be used instead (if it exists)
    CatAccntType cat_src_accnt_type_stk = 244; // CAT account holder type (stock trades)
    CatAccntType cat_src_accnt_type_opt = 247; // CAT account holder type (option trades)
    CatFirmType cat_src_firm_type_stk = 250; // CAT account holder type (stock trades)
    CatFirmType cat_src_firm_type_opt = 253; // CAT account holder type (option trades)
    AllocMethod alloc_method = 256; // method for delivery of the allocation instruction to the broker
    AllocMLegRule alloc_mLeg_rule = 259; // rule for how to send allocation instructions for mleg orders to the broker
    string alloc_accnt_stk = 262;
    string alloc_accnt_fut = 265;
    string alloc_accnt_opt = 268;
    string exec_broker_accnt_alloc = 271; // exec broker account (usually Account)
    string exec_broker_cl_firm_alloc = 274; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_broker_user_name_alloc = 277;
    string clearing_firm_name = 280; // string name (can be anything) [commonly used by position loaders] (not used in any FIX message)
    string clearing_firm_stk = 283; // stock clearing firm name or code [books and records only; not visible in fix templates]
    string clearing_accnt_stk = 286; // eg C233702
    string clearing_firm_fut = 289; // future clearing firm name or code [books and records only; not visible in fix templates]
    string clearing_accnt_fut = 292; // eg C233701
    string clearing_firm_opt = 295; // options clearing firm name or code [books and records only; not visible in fix templates]
    string clearing_accnt_opt = 298; // eg C233701
    string client_accnt_ids = 301; // all other accounts that affect this accounts position (eg. C233702, C233703).  Affects incoming FIX drops (and perhaps scripts).
    PositionSource stk_position_src = 304; // override default position rule
    PositionSource fut_position_src = 307; // override default position rule
    PositionSource opt_position_src = 310; // override default position rule
    ClearingLoadTime eqt_clearing_load_time = 313;
    ClearingLoadTime fut_clearing_load_time = 316;
    TiedPriceRounding tied_price_rounding = 319; // option limit price rounding rule: Loose = up to 1/4 tick extra; Strict = never exceed limit
    YesNo can_facilitate = 322; // account can be used to facilitate customer trades
    YesNo can_cross_internal = 325; // can cross by transfer within agg group
    YesNo can_request_liquidity = 328; // can request additional liquidity when taking
    YesNo can_iSOSweep_stk = 331; // can initiate ISO Sweep WaitTrigger Stk orders
    YesNo can_iSOSweep_opt = 334; // can initiate ISO Sweep WaitTrigger Opt orders
    AuctionResponder stk_auction_responder = 337; // can respond to stock auctions
    AuctionResponder fut_auction_responder = 340; // can respond to future auctions
    AuctionResponder opt_auction_responder = 343; // can respond to option auctions
    string opt_take_exch_list = 346; // exchange order for marketable orders eg: BATS,NYSE,CBOE
    string opt_make_exch_list = 349; // exchange order for non-marketable orders eg: BATS,NYSE,CBOE
    IncExchFee inc_stk_take_exch_fee = 352; // include exchange fee in stock probability based take limit calculations
    IncExchFee inc_fut_take_exch_fee = 355; // include exchange fee in future probability based take limit calculations
    IncExchFee inc_opt_take_exch_fee = 358; // include exchange fee in option probability and surface based take limit calculations
    IncExchFee inc_stk_make_exch_fee = 361; // include exchange fee in stock probability based make limit calculations
    IncExchFee inc_fut_make_exch_fee = 364; // include exchange fee in future probability based make limit calculations
    IncExchFee inc_opt_make_exch_fee = 367; // include exchange fee in option probability and surface based make limit calculations
    MakeExchRule stk_make_exch_rule = 370; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    MakeExchRule opt_make_exch_rule = 373; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    YesNo opt_can_make_c2 = 376; // ActiveMaker can send orders to C2	(default = No)
    YesNo opt_can_make_cBOE = 379; // ActiveMaker can send orders to CBOE (default = Yes)
    RoundRule stk_round_rule = 382; // Stock Price Rounding rule (Fuzzy = 90%, Exact = 100%)
    RoundRule fut_round_rule = 385; // Future Price Rounding rule (Fuzzy = 90%, Exact = 100%)
    RoundRule opt_round_rule = 388; // Option Price Rounding rule (Fuzzy = 90%, Exact = 100%)
    ExecMode opt_exec_mode = 391;
    ExecMode stk_exec_mode = 394;
    ExecMode fut_exec_mode = 397;
    YesNo cxl_on_halt = 400; // cancel parent orders if the item being traded (or underlier) is halted
    YesNo stk_split_zero = 403; // sell stock down to zero before selling short
    YesNo fut_split_zero = 406; // open/close future positions to zero before continuing
    YesNo opt_split_zero = 409; // open/close option positions to zero before continuing
    OddLotFlag stk_odd_lot_flag = 412; // RoundLotsOnly restricts most child order sizes to multiples of 100
    sfixed32 max_opt_child_orders_per_day = 415; // maximum number of option child orders allowed for this account per day (zero = no restriction)
    sfixed32 max_stk_brokers_per_day = 418; // maximum number of execution engine stock broker (default=10,000)
    sfixed32 max_fut_brokers_per_day = 421; // maximum number of execution engine future brokers (default=10,000)
    sfixed32 max_opt_brokers_per_day = 424; // maximum number of execution engine option brokers (default=10,000)
    sfixed32 risk_cxl_throttle = 427; // maximum risk throttle cancel rate (per second)
    RiskGroupControl risk_group_control = 430; // enables enhanced risk group controls, ParentCap.n means each parent order can be at most 1/n of the risk group limit, StrictLimits implies PC.4
    string brkr_ex_dest_stk = 433; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only] (eg. "EXCH:IEX" to force single exchange sweeping of NBBO)
    string brkr_ex_dest_fut = 436; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only]
    string brkr_ex_dest_opt = 439;
    string accnt_color = 442; // citrix account color string
    string sym_ctrl_accnt = 445; // eg. SR.1 [default = accnt]
    string theo_model = 448; // theo model (primary)
    string theo_model2 = 451; // theo model #2
    BetaSource beta_source = 454;
    HedgeDeltaRule hedge_delta_rule = 457; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (dynamic), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface (dynamic)) [AccountConfig.hedgeDelta]
    float binary_days = 460; // used to force delta calcs binary prior to expiration
    AwayExecControl away_exec_control = 463; // Whether to include Away Executions in EE risk counters
    string modified_by = 466; // user who last modified this record
    google.protobuf.Timestamp timestamp = 469; // timestamp of last modification
}


    
message AccountConfigGateway {
    message PKey {
        
        string accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    AccountType account_type = 100; // SR account type
    string omni_accnt = 103; // omnibus account (if any)  (must be an existing account with the same clientFirm and type=Omnibus)
    string rollup_accnt = 106; // rollup account (must be an existing account with the same clientFirm and type=Rollup)
    string source_accnt = 109; // SR side source account (must be an existing account with the same clientFirm and type=Rollup; only available when type=Clearing)
    string client_accnt = 112; // client assigned "long" account string (optional) [used to map between client and SR account strings]
    string accnt_name = 115; // account name (SR assigned)
    string client_tags = 118; // (optional) user defined account tag(s) (eg. tag,tag,tag,tag) [max of 10,000 total chars (including seps)]
    string accnt_route_code = 121; // accntRoute will be used instead of the default route (if set)
    string brkr_ex_dest_stk = 124; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only] (eg. "EXCH:IEX" to force single exchange sweeping of NBBO)
    string brkr_ex_dest_fut = 127; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only]
    string brkr_ex_dest_opt = 130; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only] (eg. "EXCH:MIAX" to force single exchange sweeping of NBBO)
    string exec_broker_accnt_alloc = 133; // exec broker account (usually Account<1>)
    string exec_broker_cl_firm_alloc = 136; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_broker_user_name_alloc = 139;
    string clearing_firm_name = 142; // string name (can be anything) [commonly used by position loaders] (not used in any FIX message)
    string clearing_firm_stk = 145; // stock clearing firm name or code [books and records only; visible in fix drop templates]
    string clearing_accnt_stk = 148; // eg C233702
    string clearing_firm_fut = 151; // future clearing firm name or code [books and records only; visible in fix drop templates]
    string clearing_accnt_fut = 154; // eg C233701
    string clearing_firm_opt = 157; // options clearing firm name or code [books and records only; visible in fix drop templates]
    string clearing_accnt_opt = 160; // eg C233701
    PositionSource stk_position_src = 163; // override default position rule
    PositionSource fut_position_src = 166; // override default position rule
    PositionSource opt_position_src = 169; // override default position rule
    string theo_model = 172; // theo model (primary)
    string theo_model2 = 175; // theo model #2
    string pri_stk_agg_group = 178; // primary stk grouping code (for computing aggregate positions) [default = ClientFirm]
    string sec_stk_agg_group = 181; // secondary stk grouping code (for computing aggregate positions) [default = ""]
    string opt_agg_group = 184; // opt grouping code (for computing aggregate positions) [default = ClientFirm]
    string fut_agg_group = 187; // fut grouping code (for computing aggregate positions) [default = ClientFirm]
    sfixed32 max_opt_child_orders_per_day = 190; // maximum number of option child orders allowed for this account per day (zero = no restriction)
    string route_table = 193; // route table name to use for *ALL* route types
    AllocMethod alloc_method = 196; // method for delivery of the allocation instruction to the broker
    string accnt_color = 199;
    AccntStatus accnt_status = 202; // This accounts current status
}


    
message AccountConfig_V7 {
    message PKey {
        
        string accnt = 10;
    }

    message ClearingFlip {
        
        string exch_str = 661; // eg: CBOEOPT (used to override clearing flip firm/account on a per-exchange basis)
        FlipType clearing_flip_type = 664; // either CMTA or Giveup
        string clearing_flip_firm = 667; // deliverTo firm Broker/MPID/CMTA/Give-up
        string clearing_flip_accnt = 670; // deliverTo accnt additional detail (sub-accnt)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    AccountType account_type = 100; // SR account type
    SpdrStageType stage_type = 103; // if not NONE or StageModify then parent order must be a staged order [StageLock, StageReview]
    string omni_accnt = 106; // omnibus account (if any)	(must be an existing account with the same clientFirm and type=Omnibus)
    string rollup_accnt = 109; // rollup account (must be an existing account with the same clientFirm and type=Rollup)
    string source_accnt = 112; // SR side source account (must be an existing account with the same clientFirm and type=Rollup; only available when type=Clearing)
    string client_firm = 115; // SR assigned client firm acronym
    string client_accnt = 118; // client assigned "long" account string (optional) [used to map between client and SR account strings]
    string proxy_firm1 = 121; // SR assigned proxy firm #1
    string proxy_firm2 = 124; // SR assigned proxy firm #2
    string proxy_firm3 = 127; // SR assigned proxy firm #3
    string accnt_name = 130; // account name (SR assigned)
    string view_group1 = 133; // view group tag #1; allows custom aggregation in tools
    string view_group2 = 136; // view group tag #2; allows custom aggregation in tools
    string view_group3 = 139; // view group tag #3; allows custom aggregation in tools
    string alt_route_code = 142; // alt primary route will be used instead of the default route (if set)
    string route_code_alt1 = 145; // alt flow allocation route (if routeAllocAlt1 > 0)
    float route_alloc_alt1 = 148; // percentage of flow to allocate to routeCodeAlt1
    string route_code_alt2 = 151; // alt flow allocation route will be used instead of the default route (if set)
    float route_alloc_alt2 = 154; // percentage of flow to allocate to routeCodeAlt2
    string risk_firm1 = 157; // clientFirm with ownership of riskGroup1 risk settings (usually 'SR')
    string risk_group1 = 160; // risk pool grouping code (slot #1) (usually clientFirm)
    string risk_firm2 = 163; // clientFirm with ownership of riskGroup2 risk settings (usually clientFirm)
    string risk_group2 = 166; // risk pool grouping code (slot #2) (usually accnt)
    string risk_firm3 = 169; // clientFirm with ownership of riskGroup3 risk settings [usually blank]
    string risk_group3 = 172; // risk pool grouping code (slot #3) [usually blank]
    YesNo user_short_marking = 175; // users are required to do the long/short marking on orders
    YesNo user_option_marking = 178; // users are required to do the open/close marking on orders
    YesNo require_alt_order_id = 181; // Parent order must have an AltOrderId to proceed
    TiedPriceRounding tied_price_rounding = 184; // option limit price rounding rule: Loose = up to 1/4 tick extra; Strict = never exceed limit
    YesNo nbbo_fix_drop_marking = 187; // Whether or not to markup the FIX drop with nbbo information
    AwayExecControl away_exec_control = 190; // Whether to include Away Executions in EE risk counters
    OatsMemberType oats_member = 193; // OATS reporting type
    OatsReportType oats_report = 196; // OATS asset reporting
    CatsReportType cats_report = 199; // CATS reporting type
    string cats_accnt_id = 202; // SpiderRock's CAT firm ID (CATS FDID)
    string exec_brkr_cats_accnt_id = 205; // Executing Broker's CAT firm ID (CATS FDID)
    string cats_accnt_idptions = 208; // CATS asset reporting for equity options, aka "CATS FDID"
    AccountHolderType account_holder = 211; // Regulatory Reporting Account Holder
    ReportingType stk_reporting_type = 214; // indicates type of reporting done for all trading activity
    ReportingType fut_reporting_type = 217; // indicates type of reporting done for all trading activity
    ReportingType opt_reporting_type = 220; // indicates type of reporting done for all trading activity
    string client_mPID = 223; // MPID of the client connecting to SR
    string internal_mPID = 226; // MPID of SR (or other) intermediate broker
    string large_trader_id = 229; // SEC-assigned trading ID assigned to a firm.  13 character string, contains numbers and dashes.
    string exec_brkr_accnt_stk = 232; // exec broker account (usually Account<1>)
    string exec_brkr_cl_firm_stk = 235; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string brkr_ex_dest_stk = 238; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only] (eg. "EXCH:IEX" to force single exchange sweeping of NBBO)
    string review_ex_dest_stk = 241; // order routing string (if any) [StageReview Orders]
    string exec_brkr_accnt_fut = 244; // exec broker account (usually Account<1>)
    string exec_brkr_cl_firm_fut = 247; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string brkr_ex_dest_fut = 250; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only]
    string review_ex_dest_fut = 253; // order routing string (if any) [StageReview Orders]
    string exec_brkr_accnt_opt = 256; // exec broker account (usually Account<1>)
    string exec_brkr_cl_firm_opt = 259; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string brkr_ex_dest_opt = 262; // order routing string (if any) [used to force orders to a broker route] [taking and DMA orders only] (eg. "EXCH:MIAX" to force single exchange sweeping of NBBO)
    string review_ex_dest_opt = 265; // order routing string (if any) [StageReview Orders]
    string exec_brkr_on_behalf_of = 268; // On Behalf Of (depricated in SRFixBase)
    string exec_user_name_opt = 271; // eg, REDI accounts when routing to REDI
    string exec_user_name_stk = 274;
    string exec_user_name_fut = 277;
    string exec_brkr_accnt_alloc = 280; // exec broker account (usually Account<1>)
    string exec_brkr_cl_firm_alloc = 283; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_user_name_alloc = 286;
    string giveup_firm = 289; // (deprecated) default giveup firm (if not specified per exchange), eg. 322
    string giveup_accnt = 292; // (deprecated) default giveup accnt (if not specified per exchange), eg. ABC123
    string clearing_firm_name = 295; // string name (can be anything) [commonly used by position loaders] (not used in any FIX message)
    string clearing_firm_stk = 298; // stock clearing firm name or code [books and records only; visible in fix drop templates]
    string clearing_accnt_stk = 301; // eg C233702
    string clearing_firm_fut = 304; // future clearing firm name or code [books and records only; visible in fix drop templates]
    string clearing_accnt_fut = 307; // eg C233701
    string clearing_firm_opt = 310; // options clearing firm name or code [books and records only; visible in fix drop templates]
    string clearing_accnt_opt = 313; // eg C233701
    FlipType clearing_flip_type_stk = 316;
    string clearing_flip_firm_stk = 319;
    string clearing_flip_accnt_stk = 322;
    FlipType clearing_flip_type_fut = 325;
    string clearing_flip_firm_fut = 328;
    string clearing_flip_accnt_fut = 331;
    FlipType clearing_flip_type_opt = 334; // either CMTA or Giveup; [visible in fix templates]
    string clearing_flip_firm_opt = 337; // OCC Clearing Code (3 digits); On-exchange giveup firm; [visible in fix templates]
    string clearing_flip_accnt_opt = 340; // OCC additional detail (sub-accnt); OCC pass-through; [visible in fix templates]
    string client_accnt_ids = 343; // all other accounts that affect this accounts position (eg. C233702, C233703).  Affects incoming FIX drops (and perhaps scripts).
    YesNo can_facilitate = 346; // account can be used to facilitate customer trades
    YesNo can_cross_internal = 349; // can cross by transfer within agg group
    YesNo can_request_liq = 352; // can request additional liquidity when taking
    YesNo can_iSOSweep_stk = 355; // can initiate ISO Sweep WaitTrigger Stk orders
    YesNo can_iSOSweep_opt = 358; // can initiate ISO Sweep WaitTrigger Opt orders
    AuctionResponder stk_auction_responder = 361; // can respond to stock auctions
    AuctionResponder fut_auction_responder = 364; // can respond to future auctions
    AuctionResponder opt_auction_responder = 367; // can respond to option auctions
    PositionSource stk_position_src = 370; // override default position rule
    PositionSource fut_position_src = 373; // override default position rule
    PositionSource opt_position_src = 376; // override default position rule
    string opt_take_exch_list = 379; // exchange order for marketable orders eg: BATS,NYSE,CBOE
    string opt_make_exch_list = 382; // exchange order for non-marketable orders eg: BATS,NYSE,CBOE
    IncExchFee inc_stk_take_exch_fee = 385; // include exchange fee in stock probability based take limit calculations
    IncExchFee inc_fut_take_exch_fee = 388; // include exchange fee in future probability based take limit calculations
    IncExchFee inc_opt_take_exch_fee = 391; // include exchange fee in option probability and surface based take limit calculations
    IncExchFee inc_stk_make_exch_fee = 394; // include exchange fee in stock probability based make limit calculations
    IncExchFee inc_fut_make_exch_fee = 397; // include exchange fee in future probability based make limit calculations
    IncExchFee inc_opt_make_exch_fee = 400; // include exchange fee in option probability and surface based make limit calculations
    MakeExchRule stk_make_exch_rule = 403; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    MakeExchRule opt_make_exch_rule = 406; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    YesNo opt_can_make_c2 = 409; // ActiveMaker can send orders to C2	(default = No)
    YesNo opt_can_make_cBOE = 412; // ActiveMaker can send orders to CBOE (default = Yes)
    RoundRule stk_round_rule = 415; // Stock Price Rounding rule (Fuzzy = 90%, Exact = 100%)
    RoundRule fut_round_rule = 418; // Future Price Rounding rule (Fuzzy = 90%, Exact = 100%)
    RoundRule opt_round_rule = 421; // Option Price Rounding rule (Fuzzy = 90%, Exact = 100%)
    YesNo is_low_velocity = 424; // if Yes all 390Rule counters will be computed even if not a PriorityCust
    FirmType firm_type = 427;
    OrderCapacity order_capacity = 430; // Order capacity
    OrderCapacity cust_order_capacity = 433; // Order capacity of Account at Customer's Firm
    OpenPosition eqt_open_position = 436; // (deprecated)
    OpenPosition fut_open_position = 439;
    RelationshipType stk_relationship = 442;
    RelationshipType fut_relationship = 445;
    RelationshipType opt_relationship = 448;
    ExecMode opt_exec_mode = 451;
    ExecMode stk_exec_mode = 454;
    ExecMode fut_exec_mode = 457;
    string theo_model = 460; // theo model (primary)
    string theo_model2 = 463; // theo model #2
    string sym_ctrl_accnt = 466; // eg. SR.1 [default = accnt]
    string pri_stk_agg_group = 469; // primary stk grouping code (for computing aggregate positions) [default = ClientFirm]
    string sec_stk_agg_group = 472; // secondary stk grouping code (for computing aggregate positions) [default = ""]
    string opt_agg_group = 475; // opt grouping code (for computing aggregate positions) [default = ClientFirm]
    string fut_agg_group = 478; // fut grouping code (for computing aggregate positions) [default = ClientFirm]
    string no_cross_group = 481; // no cross grouping code (accounts with the same nCrossGroup will not cross with themselves) [default = ClientFirm]
    YesNo require_locate = 484; // locate check enforced in SR systems
    YesNo require_extern_stk_pos = 487; // all equity sell orders require an ExternAggGroupReport (externSource = SRSE) record
    YesNo cxl_on_halt = 490; // cancel parent orders if the item being traded (or underlier) is halted
    YesNo stk_split_zero = 493; // sell stock down to zero before selling short
    YesNo fut_split_zero = 496; // open/close future positions to zero before continuing
    YesNo opt_split_zero = 499; // open/close option positions to zero before continuing
    OddLotFlag stk_odd_lot_flag = 502; // RoundLotsOnly restricts most child order sizes to multiples of 100
    sfixed32 max_opt_child_orders_per_day = 505; // maximum number of option child orders allowed for this account per day (zero = no restriction)
    sfixed32 max_stk_brokers_per_day = 508; // maximum number of execution engine stock broker (default=10,000)
    sfixed32 max_fut_brokers_per_day = 511; // maximum number of execution engine future brokers (default=10,000)
    sfixed32 max_opt_brokers_per_day = 514; // maximum number of execution engine option brokers (default=10,000)
    sfixed32 risk_cxl_throttle = 517; // maximum risk throttle cancel rate (per second)
    string locate_pool = 520; // pool used for additional locates [default = clientFirm]
    string locate_firm = 523; // default locate firm;  LocateResponse.locateFirm will be used instead (if it exists)
    HedgeDeltaRule hedge_delta_rule = 526; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (dynamic), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface (dynamic)) [AccountConfig.hedgeDelta]
    BetaSource beta_source = 529;
    float binary_days = 532; // used to force delta calcs binary prior to expiration
    RunStatus run_status = 535;
    string billing_schedule = 538; // billing schedule code
    FutClearingRange fut_clearing_range = 541;
    FutCustType fut_cust_type = 544;
    ClearingLoadTime eqt_clearing_load_time = 547;
    ClearingLoadTime fut_clearing_load_time = 550;
    AllocMethod alloc_method = 553; // method for delivery of the allocation instruction to the broker
    AllocMLegRule alloc_mLeg_rule = 556; // rule for how to send allocation instructions for mleg orders to the broker
    string accnt_color = 559;
    AccntStatus accnt_status = 562; // This accounts current status
    google.protobuf.Timestamp accnt_status_dttm = 565; // The Date/time this accounts status was changed
    string route_table__default = 568; // default route table name (applies unless specifically overridden below)
    string route_table__stock = 571;
    string route_table__stk_maker = 574;
    string route_table__stk_cross = 577;
    string route_table__future = 580;
    string route_table__fut_maker = 583;
    string route_table__fut_cross = 586;
    string route_table__fut_spread = 589;
    string route_table__fut_sprd_rFQ = 592;
    string route_table__fut_sprd_cross = 595;
    string route_table__eqt_option = 598;
    string route_table__eqt_opt_maker = 601;
    string route_table__eqt_opt_cross = 604;
    string route_table__eqt_opt_resp = 607;
    string route_table__eqt_opt_cob = 610;
    string route_table__eqt_opt_cob_stk = 613;
    string route_table__eqt_opt_cob_maker = 616;
    string route_table__eqt_opt_cob_maker_stk = 619;
    string route_table__eqt_opt_cob_cross = 622;
    string route_table__eqt_opt_cob_resp = 625;
    string route_table__fut_option = 628;
    string route_table__fut_opt_maker = 631;
    string route_table__fut_opt_cross = 634;
    string route_table__fut_opt_sprd = 637;
    string route_table__fut_opt_sprd_rFQ = 640;
    string route_table__fut_opt_sprd_cross = 643;
    string route_table__allocation = 646;
    string route_table__stage_review = 649;
    google.protobuf.Timestamp timestamp = 652; // timestamp of last modification
    string user_name = 655;
    repeated ClearingFlip clearing_flip = 658;
}


/*
    AccountMarginSummary records are published by AggRiskServers and consumed by execution engines
*/    
message AccountMarginSummaryV5 {
    message PKey {
        
        string accnt = 10; // SRAccnt (SR assigned;up to 16 chars)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100; // current [live] period trading date
    string client_firm = 103; // SR client firm
    string risk_server_code = 106; // SR risk server code that published this record
    Currency base_currency = 109; // base currency to which all account risk record values are converted for margin calc purposes (set in AccountConfig)
    float haircut25 = 112; // Aggregate Risk Margin (JBO): [$25 minimum;-15/+15 uPrc slides]
    float haircut37 = 115; // Aggregate Risk Margin (PM): [$37.50 minimum;-8/+6 uPrc slides (broad based);-15/+15 uPrc slides (non-broad based)]
    float fut_margin = 118; // Aggregate Future Span Risk Margin
    google.protobuf.Timestamp timestamp = 121;
}


    
message AccountObjectRequest {


    MbusInfo descriptor = 1;
    
    string account = 100;
    string access_key = 103; // client access key (password)
    GetAction action = 106;
}


    
message AccountRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 opt_child_order_counter = 100;
    string change_reason = 103;
    string accnt = 106;
    string risk_group = 109;
    sfixed32 leaves_sh = 112;
    sfixed32 leaves_fc = 115;
    sfixed32 leaves_cn = 118;
    double leaves_dd = 121;
    double haircut_day = 124;
    double haircut_acc = 127;
    sfixed32 sh_bot = 130;
    sfixed32 sh_sld = 133;
    sfixed32 fc_bot = 136;
    sfixed32 fc_sld = 139;
    sfixed32 cn_bot = 142; // includes fills + marketable (IOC) orders
    sfixed32 cn_sld = 145;
    sfixed32 cn_bot_filled = 148; // only includes fills
    sfixed32 cn_sld_filled = 151; // only includes fills
    double dd_bot = 154;
    double dd_sld = 157;
    double ve_bot = 160;
    double ve_sld = 163;
    double wt_ve_bot = 166;
    double wt_ve_sld = 169;
    double pr_bot = 172;
    double pr_sld = 175;
    double dd_bot_stk = 178;
    double dd_sld_stk = 181;
    double dd_bot_fut = 184;
    double dd_sld_fut = 187;
    double dd_bot_opt = 190;
    double dd_sld_opt = 193;
    double rm1_bot = 196;
    double rm1_sld = 199;
    double rm2_bot = 202;
    double rm2_sld = 205;
    double rm3_bot = 208;
    double rm3_sld = 211;
    double rm4_bot = 214;
    double rm4_sld = 217;
    double rm5_bot = 220;
    double rm5_sld = 223;
    double rm6_bot = 226;
    double rm6_sld = 229;
    double rm7_bot = 232;
    double rm7_sld = 235;
    double notional_bot = 238;
    double notional_sld = 241;
    double notional_abs = 244;
    double notional_pLvs_buy = 247;
    double notional_pLvs_sell = 250;
    sfixed32 sh_abs = 253;
    sfixed32 fc_abs = 256;
    sfixed32 cn_abs = 259;
    sfixed32 abs_cn_trd = 262;
    sfixed32 counter = 265;
    google.protobuf.Timestamp timestamp = 268;
}


/*
    AccountRiskRecords contain account level position and risk summary detail. These records are published by AggRiskServers throughout the day approximately once per minute.
*/    
message AccountRiskRecordV5 {
    message PKey {
        
        string accnt = 10; // SR account acronym
        Currency currency = 13; // point currency of all associated positions and pnl values
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103; // risk server that published this record
    double ln_dDelta = 106; // long net position $delta value (underlier + options) (today; SR marks)
    double sh_dDelta = 109; // short net position $delta value (underlier + options) (today; SR marks)
    double ln_stk_mkt_value = 112; // long stock market value (today; SR marks)
    double sh_stk_mkt_value = 115; // short stock market value (today; SR marks)
    double fut_mkt_value = 118; // future market value (today; SR marks)
    double stk_opt_mkt_value = 121; // stock option market value (today; SR vol marks)
    double fut_opt_mkt_value = 124; // future option market value (today; SR vol marks)
    float vega_long = 127; // sum of long vega symbol positions;=sum(+srs.vega) if srs.vega > 0
    float vega_short = 130; // sum of short vega symbol positions;= sum(-srs.vega) if srs.vega < 0
    float w_vega_long = 133; // sum of long weighted vega symbol positions;=sum(+srs.wVega) if srs.wVega > 0
    float w_vega_short = 136; // sum of short weighted vega symbol positions;= sum(-srs.wVega) if srs.wVega < 0
    float wt_vega_long = 139; // sum of long time weighted weighted vega symbol positions;=sum(+srs.wtVega) if srs.wtVega > 0
    float wt_vega_short = 142; // sum of short time weighted vega symbol positions;= sum(-srs.wtVega) if srs.wtVega < 0
    float theta_long = 145; // sum of long vega symbol positions;=sum(+srs.theta) if srs.theta > 0
    float theta_short = 148; // sum of short vega symbol positions;= sum(-srs.theta) if srs.theta < 0
    float rho_long = 151; // sum of long rho symbol positions;=sum(+srs.rho) if srs.rho > 0
    float rho_short = 154; // sum of short rho symbol positions;= sum(-srs.rho) if srs.rho < 0
    float ivol_ln = 157;
    float ivol_sh = 160;
    float wt_ve_dd = 163; // Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde < -0.30
    float wt_ve_dn = 166; // Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 <= opr.xde < -0.10
    float wt_ve_at = 169; // Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) <= 0.10
    float wt_ve_up = 172; // Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 < opr.xde <= +0.30
    float wt_ve_du = 175; // Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 < opr.xde
    float wt_ve_m1 = 178; // Aggregate M1 Time Weighted Vega;=sum[wtVega] if days < 10
    float wt_ve_m2 = 181; // Aggregate M2 Time Weighted Vega;=sum[wtVega] if 10 < days < 25
    float wt_ve_m3 = 184; // Aggregate M3 Time Weighted Vega;=sum[wtVega] if 25 < days < 65
    float wt_ve_m4 = 187; // Aggregate M4 Time Weighted Vega;=sum[wtVega] if 65 < days < 130
    float wt_ve_m5 = 190; // Aggregate M5 Time Weighted Vega;=sum[wtVega] if 130 < days
    float ddelta = 193; // net $delta;=sum(srs.ddelta)
    sfixed32 num_symbols = 196; // count of srs records being aggregated
    sfixed32 abs_cur_sh = 199; // absolute number of account shares (CLR + trades);=sum(srs.opShAbsCur)
    sfixed32 abs_cur_fc = 202; // absolute number of account future contracts (CLR + trades);=sum(srs.opFcAbsCur)
    sfixed32 abs_cur_cn = 205; // absolute number of account option contracts (CLR + trades);=sum(srs.opCnAbsCur)
    float prem_ov_par = 208; // aggregate premium over parity for the option position;=sum(srs.premOvPar)
    double opt_ex_as_pnl = 211;
    double dividend_pnl = 214;
    double corp_act_cash_pn_l = 217;
    double stk_opn_pnl_mid = 220;
    double stk_opn_pnl_clr = 223;
    double fut_opn_pnl_mid = 226;
    double fut_opn_pnl_clr = 229;
    double stk_opt_opn_pnl_vol = 232;
    double stk_opt_opn_pnl_mid = 235;
    double stk_opt_opn_pnl_clr = 238;
    double fut_opt_opn_pnl_vol = 241;
    double fut_opt_opn_pnl_mid = 244;
    double fut_opt_opn_pnl_clr = 247;
    double stk_day_pnl = 250; // stock day pnl;=sum(srs.stPnlDay)
    double fut_day_pnl = 253; // futures day pnl;=sum(srs.fcPnlDay)
    double stk_opt_day_pnl = 256; // stock option day pnl;= sum(srs.opPnlDay)
    double fut_opt_day_pnl = 259; // future option day pnl;= sum(srs.opPnlDay)
    sfixed32 stkt_day_sh = 262; // stock day shares (bot + sld);
    double stk_day_mny = 265; // stock day mny (sld - bot)
    sfixed32 fut_day_cn = 268; // future day contracts (bot + sld);
    double fut_day_mny = 271; // future day mny (sld - bot)
    sfixed32 stk_opt_day_cn = 274; // stock option day contracts (bot + sld);
    double stk_opt_day_mny = 277; // stock option day mny (sld - bot)
    sfixed32 fut_opt_day_cn = 280; // future option day contracts (bot + sld);
    double fut_opt_day_mny = 283; // future option day mny (sld - bot)
    float day_dDelta = 286; // day $delta;= sum(srs.dayDelta)
    float op_day_vega = 289; // option vega traded today
    float op_day_wVega = 292; // option (vol weighted) vega traded today
    float op_day_tVega = 295; // option (time weighted) vega traded today
    float op_day_wt_vega = 298; // option (vol time weighted) vega traded today
    float op_day_theta = 301; // option theta traded today
    float op_edge_opened = 304; // option theo edge opened today
    float op_edge_closed = 307; // option theo edge closed today
    float pnl_dn = 310; // option delta neutral pnl;=sum(srs.pnlDn)
    float pnl_de = 313; // option delta pnl;=sum(srs.pnlDe)
    float pnl_sl = 316; // option vega/delta pnl;=sum(srs.pnlSl)
    float pnl_ga = 319; // option gamma pnl;=sum(srs.pnlGa)
    float pnl_th = 322; // option theta pnl;=sum(srs.pnlTh)
    float pnl_ve = 325; // option vega pnl;=sum(srs.pnlVe)
    float pnl_vo = 328; // option volga pnl;=sum(srs.pnlVo)
    float pnl_va = 331; // option vanna pnl;=sum(srs.pnlVa)
    float pnl_dDiv = 334; // option DDiv pnl;=sum(srs.pnlDDiv)
    float pnl_sDiv = 337; // option SDiv pnl;=sum(srs.pnlSDiv)
    float pnl_rate = 340; // option Rate pnl;=sum(srs.pnlRate)
    float pnl_err = 343; // option unexplained (error) pnl;=sum(srs.pnlErr)
    float pnl_te = 346; // option theo edge pnl;=sum(srs.pnlTe)
    float pnl_ln = 349; // option pnl from symbol positions with +vega
    float pnl_sh = 352; // option pnl from symbol positions with -vega
    float t_edge = 355; // aggregate option theo edge;=sum(srs.tEdge)
    float t_edge_mult = 358; // denominator for computing edge per unit;=sum(srs.tEdgeMult)
    float pos_tEdge_pnl = 361; // aggregate pnl (positive edge symbols);=sum(srs.posTEdgePnl)
    float neg_tEdge_pnl = 364; // aggregate pnl (negative edge symbols);=sum(srs.negTEdgePnl)
    float bad_tEdge_pnl = 367; // aggregate pnl (no theo edge symbols);=sum(srs.badTEdgePnl)
    float va_rsu90 = 370; // Aggregate RiskSlide: uPrc up 90%, vol unchanged (newUPrc = uPrc * exp(+0.90))
    float va_rsd90 = 373; // Aggregate RiskSlide: uPrc dn 90%, vol unchanged (newUPrc = uPrc * exp(-0.90))
    float va_rsu50 = 376; // Aggregate RiskSlide: uPrc up 50%, vol unchanged (newUPrc = uPrc * exp(+0.50))
    float va_rsd50 = 379; // Aggregate RiskSlide: uPrc dn 50%, vol unchanged (newUPrc = uPrc * exp(-0.50))
    float va_rsu15 = 382; // Aggregate RiskSlide: uPrc up 15%, vol unchanged (newUPrc = uPrc * exp(+0.15))
    float va_rsd15 = 385; // Aggregate RiskSlide: uPrc dn 15%, vol unchanged (newUPrc = uPrc * exp(-0.15))
    float va_rsu10 = 388; // Aggregate RiskSlide: uPrc up 10%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.10))
    float va_rsd10 = 391; // Aggregate RiskSlide: uPrc dn 10%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.10))
    float va_rsu05 = 394; // Aggregate RiskSlide: uPrc up 5%, vol unchanged (newUPrc = uPrc * exp(+0.05))
    float va_rsd05 = 397; // Aggregate RiskSlide: uPrc dn 5%, vol unchanged (newUPrc = uPrc * exp(-0.05))
    float va_rsu1e = 400; // Aggregate RiskSlide: uPrc up 1x implied earn move, vol ramp out
    float va_rsd1e = 403; // Aggregate RiskSlide: uPrc dn 1x implied earn move, vol ramp out
    float va_rsu2e = 406; // Aggregate RiskSlide: uPrc up 2x implied earn move, vol ramp out
    float va_rsd2e = 409; // Aggregate RiskSlide: uPrc dn 2x implied earn move, vol ramp out
    float va_rearn = 412; // Aggregate RiskSlide: vol earn ramp out (no uPrc move)
    float va_rcash = 415; // Aggregate RiskSlide: uPrc up 30%, vol = 0.01, 6mn deal close (delta neutral)
    float hc_cnt = 418; // count of haircut > $0.0 symbols
    float haircut25 = 421; // haircut ($25 minimum/cn) [act basis]
    float haircut37 = 424; // haircut ($37 minimum/cn) [act basis]
    float opt_cn_minimum = 427; // option contract margin minimum (37.50 for equities;SPAN minimum for options on futures)
    float span01 = 430; // span1: uPrc=unch, vol=up
    float span02 = 433; // span2: uPrc=unch, vol=down
    float span03 = 436; // span3: uPrc=+33.33%, vol=up
    float span04 = 439; // span4: uPrc=+33.33%, vol=dn
    float span05 = 442; // span5: uPrc=-33.33%, vol=up
    float span06 = 445; // span6: uPrc=-33.33%, vol=down
    float span07 = 448; // span7: uPrc=+66.67%, vol=up
    float span08 = 451; // span8: uPrc=+66.67%, vol=down
    float span09 = 454; // span9: uPrc=-66.67%, vol=up
    float span10 = 457; // span10: uPrc=-66.67%, vol=down
    float span11 = 460; // span11: uPrc=+100%, vol=up
    float span12 = 463; // span12: uPrc=+100%, vol=down
    float span13 = 466; // span13: uPrc=-100%, vol=up
    float span14 = 469; // span14: uPrc=-100%, vol=down
    float span15 = 472; // span15: uPrc=+300%; price slide * 0.33
    float span16 = 475; // span16: uPrc=-300%, price slide * 0.33
    float worst3_risk = 478; // sum of 3 worst 50% slide loss symbols
    TickerKey worst_sym1 = 481; // symbol with the largest 50% slide loss
    TickerKey worst_sym2 = 484; // symbol with the second largest 50% slide loss
    TickerKey worst_sym3 = 487; // symbol with the third largest 50% slide loss
    float stk_liq_risk = 490; // estimated cost of neutralizing/liquidating all stock positions (half market width * position size)
    float fut_liq_risk = 493; // estimated cost of neutralizing/liquidating all future positions (half market width * position size)
    float opt_liq_risk = 496; // estimated cost of neutralizing/liquidating all option positions (half market width * position size)
    float sr_risk_margin = 499; // SR assessed risk margin MAX(haircut37, worst3Risk + optCnMinimum)
    google.protobuf.Timestamp last_activity = 502;
    google.protobuf.Timestamp timestamp = 505;
}


    
message AccountRouteConfig {
    message PKey {
        
        string accnt_route_code = 10; // acronym assigned to this accntRouteConfig
        string client_firm = 13; // SR assigned client firm acronym (must match the clientFirm from any associated accountRouteConfig)
    }

    message ClearingFlip {
        
        string exch_str = 187; // eg: CBOEOPT (used to override clearingFlipFirm/clearingFlipAccnt on a per-exchange basis)
        FlipType clearing_flip_type = 190; // either CMTA or Giveup
        string clearing_flip_firm = 193; // deliverTo firm Broker/MPID/CMTA/Give-up
        string clearing_flip_accnt = 196; // deliverTo accnt additional detail (sub-accnt)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    RelationshipType stk_relationship = 100; // SR client relationship (overrides AccountConfig.stkRelationship)
    RelationshipType fut_relationship = 103;
    RelationshipType opt_relationship = 106;
    string cat_dest_firm_stk_iMID = 109; // Destination Firm IMID (STK) (supplied by FINRA fbo destination; can be B/D or Exchange)
    string cat_dest_firm_opt_iMID = 112; // Destination Firm IMID (OPT) (supplied by FINRA fbo destination; can be B/D or Exchange)
    CatDeptType cat_dest_dept_type_stk = 115; // CAT destination department type (STK)
    CatDeptType cat_dest_dept_type_opt = 118; // CAT destination department type (OPT)
    string exec_broker_mpid_stk = 121; // exec broker MPID (or other ID) (code that identifies the broker we are sending an order to)
    string exec_broker_accnt_stk = 124; // exec broker account (supplied by exec broker) (usually Account<1>)
    string exec_broker_cl_firm_stk = 127; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_broker_user_name_stk = 130; // exec broker user name (supplied by exec broker)
    string exec_broker_mpid_fut = 133; // exec broker MPID (or other ID)
    string exec_broker_accnt_fut = 136; // exec broker account (usually Account<1>)
    string exec_broker_cl_firm_fut = 139; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_broker_user_name_fut = 142; // exec broker user name (supplied by exec broker)
    string exec_broker_mpid_opt = 145; // exec broker MPID (or other ID)
    string exec_broker_accnt_opt = 148; // exec broker account (usually Account<1>)
    string exec_broker_cl_firm_opt = 151; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_broker_user_name_opt = 154; // exec broker user name (supplied by exec broker)
    FlipType clearing_flip_type_stk = 157;
    string clearing_flip_firm_stk = 160;
    string clearing_flip_accnt_stk = 163;
    FlipType clearing_flip_type_fut = 166;
    string clearing_flip_firm_fut = 169;
    string clearing_flip_accnt_fut = 172;
    FlipType clearing_flip_type_opt = 175; // either CMTA or Giveup; [visible in fix templates]
    string clearing_flip_firm_opt = 178; // OCC Clearing Code (3 digits); On-exchange giveup firm; [visible in fix templates]
    string clearing_flip_accnt_opt = 181; // OCC additional detail (sub-accnt); OCC pass-through; [visible in fix templates]
    string route_table__default = 199; // default route table name (applies unless specifically overridden below)
    string route_table__stock = 202;
    string route_table__stk_maker = 205;
    string route_table__stk_cross = 208;
    string route_table__future = 211;
    string route_table__fut_maker = 214;
    string route_table__fut_cross = 217;
    string route_table__fut_spread = 220;
    string route_table__fut_sprd_rFQ = 223;
    string route_table__fut_sprd_cross = 226;
    string route_table__eqt_option = 229;
    string route_table__eqt_opt_maker = 232;
    string route_table__eqt_opt_cross = 235;
    string route_table__eqt_opt_resp = 238;
    string route_table__eqt_opt_cob = 241;
    string route_table__eqt_opt_cob_stk = 244;
    string route_table__eqt_opt_cob_maker = 247;
    string route_table__eqt_opt_cob_maker_stk = 250;
    string route_table__eqt_opt_cob_cross = 253;
    string route_table__eqt_opt_cob_resp = 256;
    string route_table__fut_option = 259;
    string route_table__fut_opt_maker = 262;
    string route_table__fut_opt_cross = 265;
    string route_table__fut_opt_sprd = 268;
    string route_table__fut_opt_sprd_rFQ = 271;
    string route_table__fut_opt_sprd_cross = 274;
    string route_table__allocation = 277;
    string route_table__stage_review = 280;
    string modified_by = 283; // user who last modified this record
    google.protobuf.Timestamp timestamp = 286; // timestamp of last modification
    repeated ClearingFlip clearing_flip = 184;
}


    
message AccountSubscriptionRequest {
    message PKey {
        
        string user_name = 10;
        string session_number = 13;
        string accnt = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SubscriptionAction subscribe_action = 100;
    google.protobuf.Timestamp timestamp = 103;
}


    
message AltAccountRoute_V7 {
    message PKey {
        
        string alt_route_code = 10; // acronym assigned to this altRoute
        string client_firm = 13; // SR assigned client firm acronym (must match the clientFirm from the account config being overridden)
    }

    message ClearingFlip {
        
        string exch_str = 289; // eg: CBOEOPT (used to override clearingFlipFirm/clearingFlipAccnt on a per-exchange basis)
        FlipType clearing_flip_type = 292; // either CMTA or Giveup
        string clearing_flip_firm = 295; // deliverTo firm Broker/MPID/CMTA/Give-up
        string clearing_flip_accnt = 298; // deliverTo accnt additional detail (sub-accnt)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_mPID = 100; // MPID of the client connecting to SR
    string internal_mPID = 103; // MPID of SR (or other) intermediate broker
    ReportingType stk_reporting_type = 106; // indicates type of reporting done for all trading activity
    ReportingType fut_reporting_type = 109; // indicates type of reporting done for all trading activity
    ReportingType opt_reporting_type = 112; // indicates type of reporting done for all trading activity
    RelationshipType stk_relationship = 115;
    RelationshipType fut_relationship = 118;
    RelationshipType opt_relationship = 121;
    string exec_brkr_accnt_stk = 124; // exec broker account (usually Account<1>)
    string exec_brkr_cl_firm_stk = 127; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_brkr_accnt_fut = 130; // exec broker account (usually Account<1>)
    string exec_brkr_cl_firm_fut = 133; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_brkr_accnt_opt = 136; // exec broker account (usually Account<1>)
    string exec_brkr_cl_firm_opt = 139; // exec broker client/firm (supplied by exec broker) (usually OnBehalfOfCompId<115>)
    string exec_user_name_opt = 142; // eg, REDI accounts when routing to REDI
    string exec_user_name_stk = 145;
    string exec_user_name_fut = 148;
    string clearing_firm_stk = 151; // stock clearing firm name or code [books and records only; not visible in fix templates]
    string clearing_accnt_stk = 154; // eg C233702
    string clearing_firm_fut = 157; // future clearing firm name or code [books and records only; not visible in fix templates]
    string clearing_accnt_fut = 160; // eg C233701
    string clearing_firm_opt = 163; // options clearing firm name or code [books and records only; not visible in fix templates]
    string clearing_accnt_opt = 166; // eg C233701
    FlipType clearing_flip_type_stk = 169;
    string clearing_flip_firm_stk = 172;
    string clearing_flip_accnt_stk = 175;
    FlipType clearing_flip_type_fut = 178;
    string clearing_flip_firm_fut = 181;
    string clearing_flip_accnt_fut = 184;
    FlipType clearing_flip_type_opt = 187; // either CMTA or Giveup; [visible in fix templates]
    string clearing_flip_firm_opt = 190; // OCC Clearing Code (3 digits); On-exchange giveup firm; [visible in fix templates]
    string clearing_flip_accnt_opt = 193; // OCC additional detail (sub-accnt); OCC pass-through; [visible in fix templates]
    string route_table__default = 196; // default route table name (applies unless specifically overridden below)
    string route_table__stock = 199;
    string route_table__stk_maker = 202;
    string route_table__stk_cross = 205;
    string route_table__future = 208;
    string route_table__fut_maker = 211;
    string route_table__fut_cross = 214;
    string route_table__fut_spread = 217;
    string route_table__fut_sprd_rFQ = 220;
    string route_table__fut_sprd_cross = 223;
    string route_table__eqt_option = 226;
    string route_table__eqt_opt_maker = 229;
    string route_table__eqt_opt_cross = 232;
    string route_table__eqt_opt_resp = 235;
    string route_table__eqt_opt_cob = 238;
    string route_table__eqt_opt_cob_stk = 241;
    string route_table__eqt_opt_cob_maker = 244;
    string route_table__eqt_opt_cob_maker_stk = 247;
    string route_table__eqt_opt_cob_cross = 250;
    string route_table__eqt_opt_cob_resp = 253;
    string route_table__fut_option = 256;
    string route_table__fut_opt_maker = 259;
    string route_table__fut_opt_cross = 262;
    string route_table__fut_opt_sprd = 265;
    string route_table__fut_opt_sprd_rFQ = 268;
    string route_table__fut_opt_sprd_cross = 271;
    string route_table__allocation = 274;
    string route_table__stage_review = 277;
    google.protobuf.Timestamp timestamp = 280; // timestamp of last modification
    string user_name = 283;
    repeated ClearingFlip clearing_flip = 286;
}


    
message AltSymbolMap {
    message PKey {
        
        TickerKey ticker = 10;
        string omni_accnt = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // will replace accnt on parent order (if exists)
    string alt_accnt = 103; // will replace altAccnt on parent order (if exists)
    string alt_user_name = 106; // will replace altUserName on parent order (if exists)
    string accnt_route_code = 109; // accntRoute (overrides accntRoute in the parent order and account config)
    string route_code_alt1 = 112; // alt flow allocation route
    float route_alloc_alt1 = 115; // percentage of flow to allocate to routeCodeAlt1
    string route_code_alt2 = 118; // alt flow allocation route
    float route_alloc_alt2 = 121; // percentage of flow to allocate to routeCodeAlt2
    string strategy = 124; // will replace strategy on parent order (if exists)
    string user_data1 = 127; // will replace userData1 on parent order (if exists)
    string user_data2 = 130; // will replace userData2 on parent order (if exists)
    string child_data = 133; // will replace childData on parent order (if exists)
    string modified_by = 136; // user who last modified this record
    google.protobuf.Timestamp timestamp = 139; // timestamp of last modification
}


    
message AppMonitor {
    message PKey {
        
        string app_name = 10; // tool name (should be unique)
        string user_name = 13; // SR user name
        sfixed32 process_id = 16; // tool process ID
        string machine_name = 19; // name of the machine which is hosting process
        SysEnvironment sys_environment = 22;
        RunStatus run_status = 25; // run status [Prod,Beta]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    AppType app_type = 100;
    google.protobuf.Timestamp proc_start = 103;
    float cpu_usage = 106; // cpu usage (number of cores utilized)
    float memory_usage = 109; // CLR memory (GB)
    ResourceLevel server_cPU = 112;
    ResourceLevel server_memory = 115;
    float msg_recv_rate = 118; // total (inbound) messages per second
    float msg_send_rate = 121; // total (outbound) messages per second
    float max_poll_delay = 124; // max tool <-> toolServer poll delay (in seconds)
    string proc_detail = 127; // additional detail as reported by the process
    sfixed32 num_errors = 130;
    string last_error = 133;
    google.protobuf.Timestamp last_error_dttm = 136;
    string citrix_host = 139; // The citrix host this app is running on (Environment.MachineName)
    string tool_server = 142; // The tool server this app is connected to (ToolBase.ActiveToolServer)
    google.protobuf.Timestamp timestamp = 145;
}


    
message AppMonitorAck {
    message PKey {
        
        string app_name = 10; // tool name (should be unique)
        string user_name = 13; // SR user name
        sfixed32 process_id = 16; // tool process ID
        string machine_name = 19; // name of the machine which is hosting process
        SysEnvironment sys_environment = 22;
        RunStatus run_status = 25; // run status [Prod,Beta]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_error_dttm = 100;
    string modified_by = 103; // user who last modified this record
    google.protobuf.Timestamp timestamp = 106; // timestamp of last modification
}


    
message AppMonitorAggregate {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float cpu_usage = 100;
    float memory_usage = 103;
    float msg_recv_rate = 106;
    float msg_send_rate = 109;
    float max_poll_delay = 112;
    sfixed32 num_errors = 115;
    string last_error = 118;
    google.protobuf.Timestamp timestamp = 121;
}


    
message AssetAccountControl {
    message PKey {
        
        string accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string account_name = 100;
    string strategy_name = 103;
    OptStatus opt_status = 106;
    float util_pct_target = 109;
    float accnt_buying_power = 112;
    string modified_by = 115; // user who last modified this record
    google.protobuf.Timestamp timestamp = 118; // timestamp of last modification
}


    
message AuctionCardData {
    message PKey {
        
        string auction_key = 10; // baseParentNumber.X (from the initiating order)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string symbol = 100;
    BuySell order_side = 103; // order side (buy or sell)
    string order_size = 106; // size of order (in shares or contracts)
    string item = 109; // display description of auction item (single or mleg)
    string status = 112; // display status of auction (single or mleg)
    string details = 115; // formatted auction details (auction type / params)
    string expire_time = 118;
    google.protobuf.Timestamp gtt = 121; // order expiration time (Date)
    string auction_match = 124;
    string auction_state = 127;
    string bid = 130; // formatted bid string
    string ask = 133; // formatted ask string
    string last = 136;
    string move = 139;
    string ord_key = 142; // baseParentNumber.X (from private response; if any)
    google.protobuf.Timestamp ts = 145; // last update time (Date)
}


    
message AuctionCardDataVset {


    MbusInfo descriptor = 1;
    
    string groups = 100; // (optional) Semicolon delimited list of groups to view orders for. (default = EQUITY)
    string auctions = 103; // (optional) Semicolon delimited list of auctionKeys(hexadecimal) to subscribe to. Leave blank for all auctions. (note: for subscriptions, it's highly recommended that this field be used)
}


    
message AuctionStrategyOrderGateway {
    message PKey {
        
        string accnt = 10; // [PKEY]
        TickerKey ticker = 13; // [PKEY]
        sfixed64 grouping_code = 16; // [PKEY] usually 1 (increment if more than one active order is needed for a given ticker)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 strategy_order_number = 100;
    string client_firm = 103;
    string user_name = 106;
    string alt_order_id = 109; // client supplied order ID (can be passed through on order/execution records)
    string strategy = 112; // client-supplied strategy string
    sfixed32 strategy_order_priority = 115; // client-supplied order priority per ticker
    YesNo is_order_active = 118; // if Yes, strategy order is active and responding, if No strategy order is held and will not respond
    string option_roots = 121; // (comma separated) if not empty all root(s) must be in list
    AuctionType auction_type = 124; // must match (if not None)
    string auction_exch = 127; // must contain (if not empty)
    sfixed32 min_auction_size = 130; // must bound auctionSize (num contracts if single leg, num spreads if multileg)
    sfixed32 max_auction_size = 133;
    sfixed32 min_num_opt_legs = 136; // num option legs must be between [minNumLegs, maxNumLegs]
    sfixed32 max_num_opt_legs = 139;
    sfixed32 max_leg_ratio = 142; // maximum individual option leg ratio; (ie. maxLegRatio=1 would only allow 1x1 or 1x1x1 or 1x1x1x1, etc. spread)
    YesNo can_include_stock = 145; // if yes, can respond to auction notices that include a stock leg
    YesNo can_include_multi_hedge_roots = 148; // can only respond to a multihedge root if Yes or if the root is explicitly listed in optionRoots
    BuySell response_side = 151; // auction responder side (your side) (None = Both) [if Buy or Sell the ALL option leg(s) must match]
    float min_net_ve_ratio = 154; // SUM(leg.dir * leg.ratio * leg.ve) / SUM(leg.ratio * leg.ve)  must be between [minNetVeRatio, maxNetVeRatio]
    float max_net_ve_ratio = 157;
    float min_net_th_ratio = 160; // SUM(leg.dir * leg.ratio * leg.th) / SUM(leg.ratio * leg.th)  must be between [minNetThRatio, maxNetThRatio]
    float max_net_th_ratio = 163;
    CallPut cp_flag = 166; // Pair = both (must match all legs)
    float min_years = 169; // both markup.minYears and markup.maxYears must be between [minYears, maxYears]
    float max_years = 172;
    google.protobuf.Timestamp min_expiry = 175; // both markup.minExpiry and markup.maxExpiry must be between [minExpiry, maxExpiry]
    google.protobuf.Timestamp max_expiry = 178;
    float max_years_range = 181; // markup.maxExpiry - markup.minExpiry must be <= maxYearsRange (spread only)
    float min_abs_delta = 184; // both markup.minAbsDe and markup.maxAbsDe must be between [minAbsDelta, maxAbsDelta]
    float max_abs_delta = 187;
    float min_xAxis = 190; // both markup.minXAxis and markup.maxXAxis must be between [minXAxis, maxXAxis]
    float max_xAxis = 193;
    float min_strike = 196; // both markup.minStrike and markup.maxStrike must be between [minStrike and maxStrike]
    float max_strike = 199;
    float max_strike_range = 202; // markup.maxStrike - markup.minStrike must be <= maxStrikeRange (spread only)
    float max_delta_range = 205; // markup.deltaRange must be <= maxDeltaRange (spread only)
    float min_vega_ratio = 208; // (xxVega / atmVega) or (avgVega / atmVega) must be >= minVegaRatio
    string spread_shape = 211; // ["Single,RevCon,Box,Butterfly,Calendar,Vertical,Diagonal,OtherSpread"] if not empty markup.spreadShape must be in list
    sfixed32 max_response_size = 214; // maximum spread per response (will respond for 100% if auction size <= maxResponseSize)
    float min_surf_edge_buy = 217; // spread surface edge must be >= minSurfEdgeBuy for buy orders
    float min_surf_edge_sell = 220; // spread surface edge must be >= minSurfEdgeSell for sell orders
    float min_probability = 223; // option response probability must be >= minProbability
    string theo_model = 226; // required if minTheoEdge is specified
    float min_theo_edge_buy = 229; // spread theo edge must be >= minTheoEdgeBuy for buy orders
    float min_theo_edge_sell = 232; // spread theo edge must be >= minTheoEdgeSell for sell orders
    YesNo allow_improve = 235; // if Yes, responses may improve a fixed auctions price (up to surface/theo/probability edge limits)
    AutoHedge auto_hedge = 238;
    HedgeInst hedge_instrument = 241; // Default=actual underlier (EQT or FUT) [IndexOptions use ETF]; FrontMonth=actual underlier (EQT) or front month (FUT) [IndexOptions use FM Fut]; Stock=hedgeSecKey.TickerKey; Future=hedgeSecKey.ExpiryKey
    ExpiryKey hedge_sec_key = 244; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 247; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 250; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 253; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    float max_acc_day_wt_vega_ln = 256; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 259; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 262; // accnt day (time weighted) vega offset (target position)
    float max_acc_day_dDelta_ln = 265; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 268; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 271; // accnt day $delta offset (target position)
    float max_exp_day_wt_vega_ln = 274; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 277; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 280; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 283; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 286; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 289; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 292; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 295; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 298; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 301; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 304; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 307; // accnt+symbol day $delta offset (target position)
    sfixed64 risk_group_id = 310; // if zero, a new unique number will be created for each accnt/ticker combo
    RMetricSource ref_rMetric1_src = 313;
    RMetricSource ref_rMetric2_src = 316;
    RMetricSource ref_rMetric3_src = 319;
    RMetricSource ref_rMetric4_src = 322;
    RMetricSource ref_rMetric5_src = 325;
    float max_grp_day_dDelta_ln = 328; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 331; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_ln = 334; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 337; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 340; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float max_grp_day_premium_ln = 343; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 346; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 349; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float max_grp_day_rMetric1_ln = 352; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 355; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 358; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float max_grp_day_rMetric2_ln = 361; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 364; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 367; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 370; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 373; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 376; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 379; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 382; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_ln = 385; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 388; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 391; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float min_grp_day_uUp15 = 394; // net grp up15% slide pnl must be > minGrpDayUUp15
    float min_grp_day_uDn15 = 397; // net grp dn15% slide pnl must be > minGrpDayUDn15
    float min_grp_day_uUp50 = 400; // net grp up50% slide pnl must be > minGrpDayUUp50
    float min_grp_day_uDn50 = 403; // net grp dn50% slide pnl must be > minGrpDayUDn50
    google.protobuf.Timestamp timestamp = 406;
}


    
message AuthorizationRequest {
    message PKey {
        
        sfixed32 request_iD = 10; // Unique key allocated by the system
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // The account been changed
    string message_name = 103; // Which message is been changed (e.g. accountConfig)
    string field_name = 106; // Which fieldName is been changed (e.g. Name)
    string old_value = 109; // The prior (or current) value
    string new_value = 112; // The new value requested by this user
    TypeOfAction type_of_action = 115; // What type of action is been done to the record
    string requested_by_user = 118; // The user who requested this change
    google.protobuf.Timestamp requested_date_time = 121; // The date time the user requested it
    AuthStatus request_status = 124; // What the current status of the request is
    string authorized_by_user = 127; // The user that finally authorized this
    google.protobuf.Timestamp authorized_date_time = 130; // The date time that this user authorized this
    string authorization_notes = 133; // any notes added by the authorizing user
    string modified_by = 136; // user who last modified this record
    google.protobuf.Timestamp timestamp = 139; // timestamp of last modification
}


/*
    SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools.
*/    
message AutoHedgeControlGateway {
    message PKey {
        
        string accnt = 10;
        sfixed64 risk_group_id = 13; // riskGroupId = 0 means hedgeScope = Accnt
        ExpiryKey hedge_sec_key = 16; // Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)
        SpdrKeyType hedge_sec_type = 19; // Execution Hedge SecType (Stock or Future)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string alt_order_id = 100; // alternate order ID (usually clOrdId from client)
    string alt_accnt = 103; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 106; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string src_routing_code = 109; // inbound FIX routing code or SRSE/tool server appID (if any)
    string accnt_route_code = 112; // accntRoute acronym
    string extern_ex_dest = 115; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 118; // external algo names/parameters (usually just an algo name)
    string strategy = 121; // client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    string user_name = 124; // name of the user entering the order
    AutoHedge auto_hedge = 127; // auto-hedge algorithm (used for restoring tickets)
    HedgeTarget hedge_target = 130;
    float min_hedge_dDelta = 133; // do not generate autohedge orders if total group $Delta is between [minHedgeDDelta and maxHedgeDDelta] (eg.[-$100,000, +$100,000])
    float max_hedge_dDelta = 136;
    sfixed32 order_size = 139; // initial (and maximum) size of a hedge parent buy or sell order.  note: actual working size will be controlled by the autohedge server based on filled deltas but working size cannot exceed orderSize
    ShortSaleFlag ssale_flag = 142;
    sfixed32 max_exposure_size = 145; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 148; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 151; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible
    YesNo can_overlap_cxl_repl = 154; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 157; // Immediate = all size immediately available; TWAP = size released in time intervals;VWAP = size released in volume intervals;TwapForce = size released in intervals/execution forced at the end of interval
    int32 progress_slice_cnt = 160; // number of twap slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 163; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 166; // target vwap participation rate (target % of trade activity)
    int32 min_mkt_on_close_pct = 169; // Minimum pct [0 - 100] of order reserved for the on-close auction
    float max_make_exch_fee = 172; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 175; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    IncExchFee inc_take_exch_fee = 178; // include exchange fee in probability
    IncExchFee inc_make_exch_fee = 181; // include exchange fee in probability
    MakeExchRule make_exch_rule = 184; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    sfixed32 max_child_orders = 187; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 190; // eligible exchanges (0 = all)
    TimeInForce time_in_force = 193;
    google.protobuf.Timestamp start_dttm = 196; // [optional] (parent order start time)
    sfixed32 order_duration = 199; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 202; // [optional] (default: 2099-01-01)
    ParentOrderHandling parent_order_handling = 205;
    ParentBalanceHandling parent_balance_handling = 208;
    SpdrLimitType order_limit_type = 211;
    SpdrLimitClass take_limit_class = 214; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 217; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    double order_prc_limit = 220; // Applies if LimitType = Prc[]
    double order_prc_offset = 223; // default=0
    StateModel state_model = 226;
    AlphaType take_alpha_type = 229; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 232; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 235; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    float make_alpha_factor = 238; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    float take_probability = 241; // takeProbLimit = takeProbability [if AlphaType = Static]
    float make_probability = 244; // makeProbLimit = makeProbability [if AlphaType = Static]
    google.protobuf.Timestamp timestamp = 247; // record timestamp
}


/*
    AutoHedgeSymbol records are published by autohedge servers and contain all valid hedge target symbols.  Execution engines reject auto-hedge requests for hedgeSecKeys that are not in this set.
*/    
message AutoHedgeSymbol {
    message PKey {
        
        ExpiryKey target_sec_key = 10;
        SpdrKeyType target_sec_type = 13;
        HedgeTargetType hedge_target_type = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // Ticker
    string ticker_desc = 103; // Ticker Description
    ExpiryKey hedge_sec_key = 106; // Execution Hedge SecKey
    SpdrKeyType hedge_sec_type = 109; // Execution Hedge SecType
    google.protobuf.Duration early_session_close_time = 112;
    google.protobuf.Duration reg_session_close_time = 115;
    google.protobuf.Duration late_session_close_time = 118;
    YesNo is_hedge_sec_oK = 121;
    string hedge_sec_error = 124;
    google.protobuf.Timestamp timestamp = 127; // SR system timestamp
}


/*
    This table shows the available (unused) locates for each locate pool and firm.  Value update as trades occur that utilizes existing locates.
*/    
message AvailableStockLocates {
    message PKey {
        
        TickerKey ticker = 10;
        string client_firm = 13;
        string locate_firm = 16;
        YesNo is_live_pool = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100; // locate trade date
    sfixed32 locate_quan = 103; // locate quantity sourced
    sfixed32 locate_quan_used = 106; // shares sold short against this locate
    sfixed32 available_locate_quan = 109; // locate balance currently available
    string engine_name = 112; // SR server code
    google.protobuf.Timestamp timestamp = 115;
}


/*
    Records inserted into this table represent locates that clients have received away from SpiderRock.  After validation, any away locate inserted into this table is turned into a StockLocateResponse record and appears in the StockLocateResponse table.
*/    
message AwayStockLocateGateway {
    message PKey {
        
        TickerKey ticker = 10;
        string locate_firm = 13;
        YesNo is_live_pool = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 locate_quan = 100; // Initial value must be >= zero.  To request more locates, the new value must include the previous quantity plus the new quantity.
    LocateStatus last_locate_status = 103;
    YesNo is_short_sale_exempt = 106; // Yes = ticker is short sale exempt (only allowed for market makers)
    string alt_locate_id = 109; // A user-supplied ID that is only used for tracking.
    string alt_security_id = 112; // An alternative securityID (can be cusip or other)
    google.protobuf.Timestamp timestamp = 115; // last update dttm (from loader)
}


    
message BandStrategyAccntScanTrigger {


    MbusInfo descriptor = 1;
    
    string accnt = 100;
    string strategy_name = 103; // if blank, use strategy name associated with accnt
    sfixed64 scan_number = 106;
    string user_name = 109;
    google.protobuf.Timestamp timestamp = 112;
    ScanAction action = 115;
}


    
message BillingSchedule {
    message PKey {
        
        string billing_schedule = 10; // acronym assigned to this billing schedule
        BillingEntity billing_entity = 13;
        BillingSecType billing_sec_type = 16;
        BillingCategory billing_category = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // (optional) SR assigned client firm acronym; if set, this billing schedule can only be associated with specified client firm
    string sponsor_client_firm = 103; // (optional) establishes ownership / visibility of the billing schedule.
    string symbol = 106; // comma separated list [VIX,SPX,SPY] (only applies if billingCategory=SymOverride)
    sfixed32 packet_size = 109; // eg, 1 = per cn/sh, 5000 = units of 5000 sh/cn
    TierStyle tier_style = 112; // non-retro=each tier in order.  retro=use price of best tier reached
    float ticket_cap = 115; // max $ per ticket (zero = no cap)
    sfixed32 tier1_volume = 118; // tier1Rate applies for [0 - tier1Volume] packets
    float tier1_brkr_rate = 121;
    float tier1_routing_rate = 124;
    sfixed32 tier2_volume = 127; // tier2Rate applies for (tier1Volume - tier2Volume] packets
    float tier2_brkr_rate = 130;
    float tier2_routing_rate = 133;
    sfixed32 tier3_volume = 136; // tier3Rate applies for (tier2Volume - tier3Volume] packets
    float tier3_brkr_rate = 139;
    float tier3_routing_rate = 142;
    sfixed32 tier4_volume = 145; // tier3Rate applies for (tier3Volume - tier4Volume] packets
    float tier4_brkr_rate = 148;
    float tier4_routing_rate = 151;
    string modified_by = 154; // user who last modified this record
    google.protobuf.Timestamp timestamp = 157; // timestamp of last modification
}


    
message BookControl {
    message PKey {
        
        string accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    BookStatus book_status = 100;
    float book_risk_multiplier = 103; // book risk multiplier (xRM)
    float max_acc_haircut = 106; // (xRM) max pre-expiration target haircut ($37.50)
    float min_acc_rho = 109; // minimum accnt rho (d$/dInt)
    float max_acc_rho = 112; // maximum accnt rho (d$/dInt)
    sfixed32 min_dDelta = 115; // min accnt $delta
    sfixed32 max_dDelta = 118; // max accnt $delta
    float max_acc_abs_wt_vega = 121; // (xRM) max account abs wtVega (sum of abs{symbol net wtVega});wtVega = ve * vol / sqrt(max(0.1, years * 4))
    float min_acc_wt_vega = 124; // (xRM) minimum accnt net wtVega
    float max_acc_wt_vega = 127; // (xRM) maximum accnt net wtVega
    float min_ind_wt_vega = 130; // (xRM) minimum ind (0) net wtVega (applies to each industry unless overriden by an IndustryControl record)
    float max_ind_wt_vega = 133; // (xRM) maximum ind (0) net wtVega (applies to each industry unless overriden by an IndustryControl record)
    float min_sub_wt_vega = 136; // (xRM) minimum sub (00) net wtVega (applies to each subIndustry unless overriden by an IndustryControl record)
    float max_sub_wt_vega = 139; // (xRM) maximum sub (00) net wtVega (applies to each subIndustry unless overriden by an IndustryControl record)
    float min_grp_wt_vega = 142; // (xRM) minimum grp (000) net wtVega (applies to each indGroup unless overriden by an IndustryControl record)
    float max_grp_wt_vega = 145; // (xRM) maximum grp (000) net wtVega (applies to each indGroup unless overriden by an IndustryControl record)
    string user_text = 148; // free form text
    string modified_by = 151; // user who last modified this record
    google.protobuf.Timestamp timestamp = 154; // timestamp of last modification
}


    
message BrokerMPIDConfig {
    message PKey {
        
        string broker_mPID = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string broker_desc = 100;
    YesNo is_fINRA = 103;
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message BucketRiskRequest {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100; // blank=all tickers
    string accnt = 103;
    GetAction action = 106;
}


/*
    Commodity code (product code) definitions for all futures.  Also maps future ccodes to SpiderRock tickers. Information is sourced from listing exchange product definitions.
    This table also contains definitions for exchange and user-defined spreads including spreads used as option underliers. SpiderRock typically uses a compact form of the exchange (spread) product ID as the ccode for these products if there is no natural (human-readable) exchange spread ticker issued for the spread.  Note that the full spread definition can be found in the ProductDefinition and human-readable version in the description field below.
    Note that SpiderRock tickers below are synthetic and are created for organizational purposes only.  SpiderRock synthetic tickers typically begin with a '@' character.
*/    
message CCodeDefinition {
    message PKey {
        
        TickerKey ccode = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    FutExch futexch = 100; // listing exchange
    TickerKey ticker = 103; // master underlying
    SettleTime settle_time = 106; // Settlement time: None; PM; AM
    sfixed32 position_limit = 109; // max contract limit
    float tick_value = 112; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 115; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 118;
    float price_scaling = 121; // underlying price scale factor - products where the underlying quotes in cents will have 0.01
    sfixed32 underliers_per_cn = 124; // shares, bond, or index units underlying the future (contract size)
    UnderlierType underlier_type = 127; // Underlying type; None; Equity; Other; FX
    string clearing_code = 130; // GMI/Clearing code
    string ric_code = 133; // RIC Code
    string bbg_root = 136; // Bloomberg root
    YellowKey bbg_group = 139; // Bloomberg Yellow Key
    string gmi_exchange = 142; // GMI (Sungard) exchange code
    string gmi_product = 145; // GMI (Sungard) product code
    string gmi_sub_type = 148; // GMI (Sungard) subtype code
    float display_price_scaling = 151; // internal display price scale factor override
    float strike_scaling = 154; // internal strike price scale factor override
    string description = 157; // product description
    string market_center = 160; // market center, eg "ICE Market Type", "CME MarketGroup"
    google.protobuf.Timestamp timestamp = 163;
}


    
message ChannelSourceActivity {
    message PKey {
        
        uint32 message_type = 10;
        uint32 app_iD = 13;
        string channel_addr = 16;
        int32 header_bits = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_received = 100;
    string channel_name = 103;
    string message_type_name = 106;
    string app_name = 109;
    string machine_name = 112;
    string header_bits_info = 115;
    google.protobuf.Timestamp timestamp = 118;
}


    
message ClientAccntStrategyMap {
    message PKey {
        
        string accnt = 10;
        string strategy = 13;
        string risk_user = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 accnt_iD = 100;
    sfixed64 strategy_iD = 103;
    string accnt_name = 106;
    string user_email = 109;
    string user_phone = 112;
    string legal_entity = 115;
    string client_firm = 118;
    YesNo default_strategy = 121; // if yes, UI tools will ignore saved selection and populate strategy dropdown with this item
    string modified_by = 124; // user who last modified this record
    google.protobuf.Timestamp timestamp = 127; // timestamp of last modification
}


    
message ClientAccountConfig {
    message PKey {
        
        string accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt_desc = 100; // client supplied account description
    string view_group1 = 103; // view group tag #1;allows custom aggregation in tools (emtpy = use default from SR account config)
    string view_group2 = 106; // view group tag #2;allows custom aggregation in tools (emtpy = use default from SR account config)
    string view_group3 = 109; // view group tag #3;allows custom aggregation in tools (emtpy = use default from SR account config)
    string accnt_route_code = 112; // alt primary route will be used instead of the default route (if set)
    string route_code_alt1 = 115; // alt flow allocation route (if routeAllocAlt1 > 0)
    float route_alloc_alt1 = 118; // percentage of flow to allocate to routeCodeAlt1
    string route_code_alt2 = 121; // alt flow allocation route will be used instead of the default route (if set)
    float route_alloc_alt2 = 124; // percentage of flow to allocate to routeCodeAlt2
    string theo_model = 127; // theo model (empty = use default from SR account config)
    string theo_model2 = 130; // theo model2 (empty = use default from SR account config)
    HedgeDeltaRule hedge_delta_rule = 133; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (dynamic), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface (dynamic)) [AccountConfig.hedgeDelta]
    float binary_days = 136; // used to force delta calcs binary prior to expiration (-1 = use SR account config value) (can be overridden by SymbolControl.binaryDays)
    sfixed32 max_opt_child_orders_per_day = 139; // maximum number of option child orders allowed for this account per day (zero = no restriction)
    string opt_take_exch_list = 142; // exchange order for marketable orders eg: BATS,NYSE,CBOE
    string opt_make_exch_list = 145; // exchange order for non-marketable orders eg: BATS,NYSE,CBOE
    string accnt_color = 148; // color used to display this account
    string modified_by = 151; // user who last modified this record
    google.protobuf.Timestamp timestamp = 154; // timestamp of last modification
}


    
message ClientBeta {
    message PKey {
        
        ExpiryKey sec_key = 10;
        SpdrKeyType sec_type = 13;
        string client_firm = 16; // client firm of the uploading user
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float beta = 100; // client supplied beta (expected move of secKey relative to reference)
    string modified_by = 103; // user who last modified this record
    google.protobuf.Timestamp timestamp = 106; // timestamp of last modification
}


    
message ClientFacilitationCtrl {
    message PKey {
        
        string accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 max_order_cn = 100; // maximum contracts per client order
    float target_improve_pct = 103; // target client facilitation improvement WtVePctage
    string face_accnt = 106;
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


    
message ClientFirmAwayBrkr {
    message PKey {
        
        string client_firm = 10; // Controls which firm sees which item
        string exec_broker_iD = 13; // ID of away broker.  MPID, OCC ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string exec_broker_display_name = 100; // Name of away broker for UI, if set
    string exec_broker_name = 103; // Name of away broker.  See extExecBroker for field length limitations
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message ClientFirmConfig {
    message PKey {
        
        string client_firm = 10; // SR assigned client firm acronym
    }

    message DirectedCounterParty {
        
        string client_firm = 238;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ClientFirmStatus client_firm_status = 100; // ClientFirm status
    google.protobuf.Timestamp client_firm_status_dttm = 103; // The date/time this status was last changed
    ClientFirmType client_firm_type = 106; // SponsorClientFirm [Accnts/Users] -> CoreClientFirm [Accnts/Users] -> SubClientFirm [Accnts/Users]
    string client_firm_name = 109; // SR assigned client firm Name
    ClientFirmRelationship client_firm_relationship = 112;
    string rep_code_sR = 115; // SR client rep code
    string rep_code_core = 118; // core client rep code (usually a PM management firm)
    string rep_code_sponsor = 121; // sponsor client rep code (usually another BD / reseller)
    string client_tag_pool = 124; // (optional) complete (unique) pool of user defined account tag(s) (tag bag JSON definition block) [max of 10,000 total chars (including seps)]
    string billing_account = 127; // billing account within the G/L system
    string billing_schedule = 130; // billing schedule code
    string billing_address1 = 133; // Billing Address - line 1
    string billing_address2 = 136; // Billing Address - line 2
    string billing_city = 139; // Billing Address - city
    string billing_state = 142; // Billing Address - state
    string billing_zip_code = 145; // Billing Address - zipCode
    string billing_country = 148; // Billing Address - country
    string billing_phone_number = 151; // Billing - phone
    string billing_email_address = 154; // Billing - emails (comma delimited string)
    string report_address1 = 157; // Reporting Address - line 1
    string report_address2 = 160; // Reporting Address - line 2
    string report_city = 163; // Reporting Address - city
    string report_state = 166; // Reporting Address - state
    string report_zip_code = 169; // Reporting Address - zipCode
    string report_country = 172; // Reporting Address - country
    string report_phone_number = 175; // Reporting - phone
    string report_email_address = 178; // Reporting - emails (comma delimited string)
    string core_client_firm = 181; // the core client firm this (Sub) client firm rolls up to [blank if none]
    string sponsor_client_firm = 184; // the sponsor client firm this (Sub or Core) client firm rolls up to [blank if none]
    YesNo can_have_trading_accnt = 187; // disables all accnt activity
    string cat_brkr_iMID = 190; // B/D firm FDID (only if client is a B/D) (supplied by FINRA fbo client)
    string sec_large_trader_id = 193; // SEC-assigned trading ID assigned to a firm.  13 character string, contains numbers and dashes.
    string sync_agg_groups = 196; // [tgt:src,tgt:src,...] target agg group [usually priAggGroup]; will accumulate SR executions; will sync w/srcAggGroup; tgt will follow (be made equal to) src
    float sync_threshold = 199; // number of idle seconds before syncing aggGroups (default: 5 seconds)
    YesNo view_gICS = 202; // client firm can see GICS codes in SRSE
    YesNo view_cUSIP = 205; // client firm can see CUSIP codes in SRSE
    YesNo restrict_locate_upload = 208; // restrict all associated users' ability to upload AwayStockLocate messages
    YesNo restrict_autohedge = 211; // restrict all associated users' ability to submit orders with autohedge enabled
    RateSource user_rate_source = 214; // Default GlobalRate (Discount Rate) source (uses system default curve unless otherwise specified)
    YesNo enable_srse_product_snapshots = 217; // If enabled 'Yes' daily_snapshots.py scripts will make create clientFirm-specific snapshots of SRSE products.  Grants are matched to UserConfig.srseProductAcl.
    string locate_request_firm = 220; // acronym of firm used for locate requests (if any)
    SSOType sso_type = 223; // type of single sign on
    string sso_parameters = 226; // eg. 'https://corp.domain.com:xxxx'
    string pw_file_transfer = 229; // [SR] Password for securing files in transit
    YesNo drop_all_parent_tags = 232;
    string modified_by = 241; // user who last modified this record
    google.protobuf.Timestamp timestamp = 244; // timestamp of last modification
    repeated DirectedCounterParty directed_counter_party = 235;
}


    
message ClientFirmConfig_V7 {
    message PKey {
        
        string client_firm = 10; // SR assigned client firm acronym
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ClientFirmType client_firm_type = 100;
    string client_name = 103; // SR assigned client firm Name
    string billing_firm = 106; // SR billing Client Firm - if different than clientFirm
    ClientFirmRelationship client_firm_relationship = 109;
    string billing_address1 = 112; // Billing Address - line 1
    string billing_address2 = 115; // Billing Address - line 2
    string billing_city = 118; // Billing Address - city
    string billing_state = 121; // Billing Address - state
    string billing_zip_code = 124; // Billing Address - zipCode
    string billing_country = 127; // Billing Address - country
    string billing_phone_number = 130; // Billing - phone
    string billing_email_address = 133; // Billing - emails (comma delimited string)
    string report_address1 = 136; // Reporting Address - line 1
    string report_address2 = 139; // Reporting Address - line 2
    string report_city = 142; // Reporting Address - city
    string report_state = 145; // Reporting Address - state
    string report_zip_code = 148; // Reporting Address - zipCode
    string report_country = 151; // Reporting Address - country
    string report_phone_number = 154; // Reporting - phone
    string report_email_address = 157; // Reporting - emails (comma delimited string)
    string sRRep_code = 160; // SR client rep code
    string tool_product_acl = 163; // A list of SR GUI tool product codes: SV, RV, HT, RM, RA, TA, OM, MM, CV, CT, SM, DC
    string elastic_product_acl = 166; // A list of SR ES product codes: SRTrade, SRRisk, SRTheo, SRAnalytics, SRQuoteEvent, SRExecEngine, SRSystem
    string market_data_acl = 169; // A list of SR TickerSrc codes: NMS, CFE, ICE, CME, CBOE, OTC, etc. [restricts SRSE and GUI tools]
    string gwt_product_acl = 172; // A list of feed consumption or gateway client type: SysEnvironment, Type (e.g. Normalized, Raw, Sandbox)  [for reporting]
    YesNo view_gICS = 175; // client firm can see GICS codes in SRSE
    YesNo view_cUSIP = 178; // client firm can see CUSIP codes in SRSE
    RiskServerCode risk_server_code = 181; // risk server handling this client firm
    DropServerCode drop_server_code = 184; // drop server (primary) handling this client firm
    DropServerCode drop_server_code2 = 187; // drop server (#2) handling this client firm
    DropServerCode drop_server_code3 = 190; // drop server (#3) handling this client firm
    DropServerCode drop_server_code4 = 193; // drop server (#4) handling this client firm
    DropServerCode drop_server_code5 = 196; // drop server (#5) handling this client firm
    DropServerCode drop_server_code6 = 199; // drop server (#6) handling this client firm
    DropServerCode drop_server_code7 = 202; // drop server (#7) handling this client firm
    DropServerCode drop_server_code8 = 205; // drop server (#8) handling this client firm
    YesNo drop_all_parent_tags = 208; // Include all parent order tags in drop message such as order parameters
    PrivacyRule privacy_rule = 211; // Rename to confidential
    AllowedIngress allowed_ingress = 214;
    YesNo restrict_iPSource = 217;
    string ip_access_mask = 220;
    TwoPhaseType two_phase_type = 223;
    YesNo change_on_init_logon = 226; // [AD] Force password change on initial logon
    YesNo user_lockout = 229; // [AD] Lock out repeated fail
    YesNo enforce_history = 232; // [AD] Enforce password history
    string pw_firm = 235; // [SR] Password for securing files in transit
    sfixed32 pw_age = 238; // [AD] Days before forced pw change
    sfixed32 pw_length = 241; // [AD] Min password length
    sfixed32 pw_history = 244; // [AD] Days of password history
    PwComplexity pw_complexity = 247; // [AD]
    string locate_req_firm = 250; // locate request firm (if locate requests can be handled) [must be either "NE" or "ABN"]
    SRDataCenter locate_data_center = 253; // datacenter locates are sourced from (if requests are entered by the client)
    YesNo restrict_locate_upload = 256; // restrict associated users' ability to upload AwayStockLocate messages
    YesNo restrict_autohedge = 259; // restrict associated users' ability to send orders with autohedge enabaled
    string route_table = 262; // Routing table for this firm
    TickerSrc user_ticker_src = 265; // TickerSrc for all user-defined tickers
    RateSource user_rate_source = 268; // Default GlobalRate (Discount Rate) source (uses system default curve unless otherwise specified)
    ClientFirmStatus firm_status = 271; // ClientFirm status
    google.protobuf.Timestamp firm_status_dttm = 274; // The date/time this status was last changed
    string sync_agg_groups = 277; // [tgt:src,tgt:src,...] target agg group [usually priAggGroup]; will accumulate SR executions; will sync w/srcAggGroup; tgt will follow (be made equal to) src
    float sync_threshold = 280; // number of idle seconds before syncing aggGroups (default: 5 seconds)
    YesNo enable_srse_product_snapshots = 283; // If enabled 'Yes' daily_snapshots.py scripts will make create clientFirm-specific snapshots of SRSE products.  Grants are matched to UserConfig.srseProductAcl.
    google.protobuf.Timestamp timestamp = 286; // timestamp of last modification
    string user_name = 289;
}


    
message ClientFirmNotes {
    message PKey {
        
        sfixed64 client_firm_note_id = 10; // system wide unique ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm ID (subject of the note)
    string source_client_firm = 103; // client firm ID (source of note)
    ClientFirmType source_client_firm_type = 106; // client firm type (source of note)
    string notes_text = 109; // up to 10k bytes
    string modified_by = 112; // user who last modified this record
    google.protobuf.Timestamp timestamp = 115; // timestamp of last modification
}


/*
    ClientRiskControl records are used to establish risk controls within SpiderRock execution engines.  These records are only viewable and editable by users belonging to the same riskFirm as the control records.
*/    
message ClientFirmRiskControl {
    message PKey {
        
        string client_firm = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float max_day_dDelta_ln = 100; // $delta (day trades only)  [if <= 0 check is disabled]
    float max_day_dDelta_sh = 103;
    float max_day_dDelta_abs = 106;
    float max_day_vega_ln = 109; // vega (day trades only)  [if <= 0 check is disabled]
    float max_day_vega_sh = 112;
    float max_day_vega_abs = 115;
    float max_day_wt_vega_ln = 118; // wt vega (vol * vega / time) (day trades only) [if <= 0 check is disabled]
    float max_day_wt_vega_sh = 121;
    float max_day_wt_vega_abs = 124;
    string modified_by = 127; // user who last modified this record
    google.protobuf.Timestamp timestamp = 130; // timestamp of last modification
}


    
message ClientFirmSysEnvConfig {
    message PKey {
        
        string client_firm = 10; // SR assigned client firm acronym
        SysEnvironment sys_environment = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string risk_server_code = 100; // eg. RS1 (risk server code this client firm is bound too) [only one code]
    string drop_server_codes = 103; // eg. DS1,DS2,DS3, etc.
    string srse_server_codes = 106; // eg. SRSE.01, SRSE.02, SRSE.03 (client firm specific SRSE servers) [enables this client firm on these SRSE servers]
    YesNo enable_srse_product_snapshots = 109; // If enabled 'Yes' daily_snapshots.py scripts will make create clientFirm-specific snapshots of SRSE products.  Grants are matched to UserConfig.srseProductAcl.
    string execution_engine_codes = 112; // eg. NMS_EQT, NMS_OPT, CME_FUT, CME_OPT, CFE_FUT, etc. (all execution engine types this client firm is enable to access)
    string modified_by = 115; // user who last modified this record
    google.protobuf.Timestamp timestamp = 118; // timestamp of last modification
}


    
message ClrFirmConfig {
    message PKey {
        
        string exec_broker = 10;
        string exec_firm = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string exec_firm_name = 100;
    string modified_by = 103; // user who last modified this record
    google.protobuf.Timestamp timestamp = 106; // timestamp of last modification
}


    
message ConsulProcStatus {
    message PKey {
        
        string job_name = 10;
        uint32 app_iD = 13;
        SysEnvironment sys_environment = 16; // sys environment [Stable, Current, etc]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string proc_name = 100; // process instance name (should be unique)
    string machine_name = 103; // name of the machine which is hosting process
    string build_gUID = 106; // Build GUID associated with this current Process
    google.protobuf.Timestamp process_start = 109;
    string last_signal = 112; // string indicating the signal it got , for example READY, SHUTDOWN
    float cpu_usage = 115; // cpu usage (number of cores utilized)
    float memory_usage = 118; // CLR memory (GB)
    ResourceLevel server_cPU = 121;
    ResourceLevel server_memory = 124;
    float avg_mMRDelay = 127; // avg (inbound) DBL MMR ring delay (ms)
    float max_mMRDelay = 130; // max (inbound) DBL MMR ring delay (ms)
    sfixed32 packets_per_sec = 133; // MMR/MBUS packet rcvd rate (multiple msgs per packet)
    sfixed32 num_msg_drops = 136; // number of MBUS message drops
    float msg_recv_rate = 139; // total (inbound) messages per second
    float msg_send_rate = 142; // total (outbound) messages per second
    string proc_detail = 145;
    sfixed32 num_slow_handlers = 148; // total number of slow handlers
    sfixed32 num_errors = 151;
    string last_error = 154;
    google.protobuf.Timestamp last_error_dttm = 157;
    google.protobuf.Timestamp timestamp = 160;
}


    
message ContingentPrint {
    message PKey {
        
        OptionKey sec_key = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 prt_size = 100; // print size
    float prt_price = 103; // print price level
    sfixed64 prt_timestamp = 106; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 109; // inbound packet PTP timestamp from SR gateway switch; usually syncronized with facility grandfather clock
    StkExch exch = 112;
    ExchRecSource source = 115;
    google.protobuf.Timestamp timestamp = 118;
}


    
message CopyControls {


    MbusInfo descriptor = 1;
    
    string to_accnt = 100;
    string from_accnt = 103;
    YesNo copy_account_config = 106;
    YesNo copy_book_control = 109;
    YesNo copy_ind_control = 112;
    YesNo copy_exp_control = 115;
    YesNo copy_risk_class_control = 118;
    YesNo copy_sector_control = 121;
    YesNo copy_opt_quote_control = 124;
    YesNo copy_stk_quote_control = 127;
    YesNo copy_client_config = 130;
    google.protobuf.Timestamp last_modified = 133;
    string user_name = 136;
    string result = 139;
}


    
message CoreMessageVset {


    MbusInfo descriptor = 1;
    
    string pkey_str = 100; // Pkey string
    string accnt_str = 103; // Account string
    string user_name_str = 106; // Username string
    string client_firm_str = 109; // Client firm string
    string ticker_key_str = 112; // TickerKey string
    string expiry_key_str = 115; // ExpiryKey string
    string search_str = 118; // Search string
    string converter = 121; // Used to tell the data handler to send back a different message type than the core message type
    sfixed32 max_results = 124; // Max results
}


    
message CreateAccount {


    MbusInfo descriptor = 1;
    
    CreateAction create_action = 100;
    string accnt = 103;
    string accnt_name = 106;
    string user_name = 109;
    string result = 112;
}


    
message CreateRiskClass {


    MbusInfo descriptor = 1;
    
    CreateAction create_action = 100;
    string accnt = 103;
    string risk_class = 106;
    string user_name = 109;
    string result = 112;
}


    
message CreateSector {


    MbusInfo descriptor = 1;
    
    CreateAction create_action = 100;
    string accnt = 103;
    string sector = 106;
    string label = 109;
    string user_name = 112;
    string result = 115;
}


    
message CreateUserRequest {


    MbusInfo descriptor = 1;
    
    CreateAction create_action = 100;
    string user_name = 103;
    string copy_from_user = 106;
    string result = 109;
    string requested_by = 112;
}


/*
    CurrencyPositionRecords are live risk records that contain start-of-day positions and all subsequent transactions.
    These records are published by a CoreRiskServer and represent the position and risk markup detail for a single currency.
    New records are published immediately when a position changes and about once per minute if no position has changed.
*/    
message CurrencyPositionRecordV5 {
    message PKey {
        
        Currency currency = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103;
    sfixed32 mny_opn_pos_prv = 106; // start-of-day SR currency position (rotated from prior day record)
    sfixed32 mny_opn_pos_clr = 109; // start-of-day CLR currency position (supplied by client/clearing firm via clearing position load)
    sfixed32 mny_opn_pos = 112; // start of period currency position (effective; can be from either CLR or SR)
    PositionSource mny_opn_pos_src = 115; // start of period position source
    sfixed32 mny_bot = 118; // currency units bot today
    sfixed32 mny_sld = 121; // currency units sld today
    sfixed32 num_executions = 124; // number of currency transactions included in mnyBot and mnySld today
    google.protobuf.Timestamp max_exec_dttm = 127; // max (timestamp) of included currency transaction records
    google.protobuf.Timestamp timestamp = 130;
}


    
message CurrencyTransaction {
    message PKey {
        
        sfixed64 transaction_iD = 10;
        DateKey trade_date = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100;
    string client_firm = 103;
    Currency bot_currency = 106;
    double bot_quantity = 109;
    Currency sld_currency = 112;
    double sld_quantity = 115;
    string comment = 118;
    google.protobuf.Timestamp transaction_dttm = 121;
    google.protobuf.Timestamp timestamp = 124;
}


    
message CurrentTradingPeriod {
    message PKey {
        
        string trading_period_str = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TradingPeriod trading_period = 100;
    google.protobuf.Timestamp period_start = 103;
    google.protobuf.Timestamp period_end = 106;
    google.protobuf.Timestamp timestamp = 109;
}


    
message CurrentUserInfo {
    message PKey {
        
        string user_name = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UserType user_type = 100; // Type of User
    string client_firm = 103;
    string product_aCL = 106; // List of product tokens this user has access to
    string market_data_aCL = 109; // List of market data tokens this user has access to
    string primary_accnt = 112; // Default account for this user
}


    
message CurrentUserLocation {
    message PKey {
        
        string user_name = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UserLocation user_location = 100;
    google.protobuf.Timestamp last_modified = 103;
}


    
message CustomControl {
    message PKey {
        
        string key = 10; // user defined key
        string client_firm = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_text = 100; // user defined text
    google.protobuf.Timestamp timestamp = 103;
}


    
message DataBridgeConfig {
    message PKey {
        
        string server_code = 10;
        string message_type = 13;
        string source_host = 16;
        sfixed32 source_port = 19;
        string filter_term = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string remote_sys_version = 100;
    string remote_message_type = 103; // This is used in DataBridgeSubscription if messageType has been renamed
    FilterOperator filter_operator = 106;
    string filter_comparand = 109;
    string modified_by = 112;
    google.protobuf.Timestamp timestamp = 115;
}


    
message DataBridgeSubscription {
    message MessageTypes {
        
        string message_type = 127;
        string filter_term = 130;
        FilterOperator filter_operator = 133;
        string filter_comparand = 136;
    }


    MbusInfo descriptor = 1;
    
    SysEnvironment sys_environment = 100;
    SysRealm sys_realm = 103;
    string app_name = 106;
    string server_code = 109;
    string sys_version = 112; // Sink/subscriber version (i.e. V5, V7)
    DataEncoding encoding = 115;
    string status_text = 118;
    string error_text = 121;
    repeated MessageTypes message_types = 124;
}


    
message DataLineStatus {
    message PKey {
        
        string ip_addr = 10; // data source addr (A channel)
        sfixed32 ip_port = 13; // data source port (A channel)
        string server_name = 16; // data gateway process name
        string machine_name = 19; // name of the machine running data gateway
        SysEnvironment sys_environment = 22; // sys environment [Stable, Current, etc]
        SysRealm sys_realm = 25; // sysRealm [NMS, CME, etc.]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string channel_label = 100;
    DataType data_type = 103;
    sfixed64 seq_num_a = 106;
    sfixed64 seq_num_b = 109;
    float byte_rate_a = 112; // bytes per second (A channel)
    float byte_rate_b = 115; // bytes per second (B channel)
    float frm_rate = 118; // frames per second (A + B)
    float msg_rate = 121; // messages per second (composite)
    float pub_rate = 124; // messages per second (composite)
    float gap_count = 127; // gaps per second (composite)
    float slow_count = 130; // slow frames per second (composite)
    float max_delay = 133; // max slow frame delay (milliseconds)
    string last_error = 136;
    google.protobuf.Timestamp last_error_dttm = 139;
    google.protobuf.Timestamp timestamp = 142;
}


    
message DataLineStatusAck {
    message PKey {
        
        string ip_addr = 10; // data source addr (A channel)
        sfixed32 ip_port = 13; // data source port (A channel)
        string server_name = 16; // data gateway process name
        string machine_name = 19; // name of the machine running data gateway
        SysEnvironment sys_environment = 22; // sys environment [Stable, Current, etc]
        SysRealm sys_realm = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_error_dttm = 100;
    string ack_user_name = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message DataLineStatusAggregate {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float byte_rate_a = 100;
    float byte_rate_b = 103;
    float frm_rate = 106;
    float msg_rate = 109;
    float pub_rate = 112;
    float gap_count = 115;
    float slow_count = 118;
    float max_delay = 121;
    string last_error = 124;
    google.protobuf.Timestamp timestamp = 127;
}


    
message Date2CardinalRequest {
    message Dates {
        
        DateKey date = 115;
        sfixed32 days = 118;
        double years = 121;
    }


    MbusInfo descriptor = 1;
    
    GetAction action = 100;
    TimeMetric time_metric = 103;
    ExerciseTime exercise_time = 106;
    string error = 109;
    repeated Dates dates = 112;
}


    
message DebugControl {
    message PKey {
        
        uint32 app_id = 10;
        uint32 msg_id = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_name = 100; // [optional] (user name)
    string client_firm = 103; // [optional] (client firm)
    sfixed32 control_duration = 106; // [optional] (number of seconds)
    string control1 = 109; // [optional] (process-specific control message)
    string control2 = 112; // [optional] (process-specific control message)
    string control3 = 115; // [optional] (process-specific control message)
    google.protobuf.Timestamp timestamp = 118;
}


    
message DispersionStrikeRequest {
    message Underlying {
        
        TickerKey ticker = 154; // max 2,000 tickers
    }


    MbusInfo descriptor = 1;
    
    GetAction action = 100;
    sfixed64 max_time_rcvd = 103; // only used if GetAction=Poll
    float min_years = 106; // only used if GetAction=Refresh
    float max_years = 109;
    float min_xDelta = 112;
    float max_xDelta = 115;
    float min_abs_delta = 118;
    float max_abs_delta = 121;
    float min_ask_intrinsic = 124;
    float min_bid_intrinsic = 127;
    string theo_model = 130;
    float min_theo_edge = 133;
    float min_surf_edge = 136;
    float min_buy_edge = 139;
    float min_sell_edge = 142;
    string strategy = 145;
    string user_name = 148;
    repeated Underlying underlying = 151;
}


    
message DividendCalendarHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey div_date = 13; // dividend ex-date
        int32 div_number = 16; // 1=1st dividend, 2=2nd dividend, etc. (if multiple dividends go ex on the same date)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    float div_value = 103; // dividend payment amount
    string div_currency = 106;
    DivKind div_kind = 109;
    DivFreq div_freq = 112;
    google.protobuf.Timestamp timestamp = 115;
}


    
message DividendForecastData {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp ex_date = 13; // 12 past + 4 future
    }

    message Dividends {
        
        float stk_prc = 106; // closing pricing
        float stk_prc_prv = 109; // prior period closing price (corp action adjusted)
        float div_value = 112; // dividend amount
        string div_currency = 115;
        DivKind div_kind = 118; // dividend type
        DivSource div_source = 121; // dividend source
        DivFreq div_freq = 124;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp ts = 100;
    repeated Dividends dividends = 103;
}


    
message DividendForecastHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13;
    }

    message Dividends {
        
        DateKey div_date = 109; // ex-dividend date
        float div_value = 112; // dividend amount
        string div_currency = 115;
        DivKind div_kind = 118; // dividend type
        DivSource div_source = 121; // dividend source
        DivFreq div_freq = 124;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    string text = 103;
    google.protobuf.Timestamp timestamp = 127;
    repeated Dividends dividends = 106;
}


/*
    corp action record (managed by SR)
*/    
message EquityCorpActionRecordV5 {
    message PKey {
        
        TickerKey ticker = 10; // ticker at EOD on trading date
        DateKey ex_date = 13; // ex-date of the action
    }

    message Cash {
        
        double amount = 103;
        Currency currency = 106;
        CorpActionCash cash_type = 109;
        string description = 112;
    }

    message Component {
        
        TickerKey ticker_sOD = 118; // ticker @ SOD
        double component_ratio = 121; // SOD spinoffRatio in tickerSOD for each share in secKey held @ EOD [frac x spinoffMark -> cashInLieu]
        double component_fraction = 124; // position x spinoffFraction x spinoffMark -> cashInLieu
        double component_mark = 127; // SOD mark for tickerSOD [if not supplied SR calculated mark will be used]
        CorpActionComponent component_type = 130;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string corp_action_text = 133; // descriptive detail (optional)
    google.protobuf.Timestamp timestamp = 136;
    repeated Cash cash = 100;
    repeated Component component = 115;
}


    
message ExchRFQNotice {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13;
        BuySell rfq_side = 16; // from perspective of RFQ requestor
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string notice_iD = 100;
    sfixed64 security_iD = 103;
    sfixed32 rfq_size = 106;
    double rfq_price = 109; // proposed price (if any)
    ExchSource exchange = 112;
    google.protobuf.Timestamp timestamp = 115; // SR system timestamp
    sfixed64 src_timestamp = 118; // exchange reported source timestamp
    sfixed64 net_timestamp = 121; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
}


    
message ExchTradingCalendarHist {
    message PKey {
        
        DateKey trading_date = 10; // 365 days per year
        ExchGroup exch_group = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    MarketDayType market_day_type = 100;
    sfixed32 cardinal365 = 103;
    sfixed32 cardinall252 = 106;
    float cardinal_minute = 109;
    google.protobuf.Timestamp timestamp = 112;
}


    
message ExpirationControl {
    message PKey {
        
        string accnt = 10;
        int32 year = 13;
        int32 month = 16;
        int32 day = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptStatus exp_status = 100; // expiration trading control
    float min_theta = 103; // (xRM) minimum net expiry theta
    float max_theta = 106; // (xRM) maximum net expiry theta
    float min_wt_vega = 109; // (xRM) minimum net expiry wtVega;wtVega = ve * vol / sqrt(max(0.1, years * 4))
    float max_wt_vega = 112; // (xRM) maximum net expiry wtVega;wtVega = ve * vol / sqrt(max(0.1, years * 4))
    float max_wt_ve_pct_dd = 115; // % of min/max expiry wtVega in DD {xde < -0.30} strikes
    float max_wt_ve_pct_dn = 118; // % of min/max expiry wtVega in DN {-0.30 <= xde < -0.10} strikes
    float max_wt_ve_pct_at = 121; // % of min/max expiry wtVega in AT {-0.10 <= xde <= +0.10} strikes
    float max_wt_ve_pct_up = 124; // % of min/max expiry wtVega in UP {+0.10 < xde <= +0.30} strikes
    float max_wt_ve_pct_du = 127; // % of min/max expiry wtVega in DU {+0.30 < xde} strikes
    string modified_by = 130; // user who last modified this record
    google.protobuf.Timestamp timestamp = 133; // timestamp of last modification
}


    
message ExpirationRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string change_reason = 100;
    string accnt = 103;
    string risk_group = 106;
    string expiration = 109;
    sfixed32 cn_bot_filled = 112;
    sfixed32 cn_sld_filled = 115;
    double de_bot_filled = 118;
    double de_sld_filled = 121;
    double de_bot = 124;
    double de_sld = 127;
    sfixed32 cn_bot = 130;
    sfixed32 cn_sld = 133;
    double ve_bot = 136;
    double ve_sld = 139;
    double wt_ve_bot = 142;
    double wt_ve_sld = 145;
    double pr_bot = 148;
    double pr_sld = 151;
    double rm1_bot = 154;
    double rm1_sld = 157;
    double rm2_bot = 160;
    double rm2_sld = 163;
    double rm3_bot = 166;
    double rm3_sld = 169;
    double rm4_bot = 172;
    double rm4_sld = 175;
    double rm5_bot = 178;
    double rm5_sld = 181;
    double rm6_bot = 184;
    double rm6_sld = 187;
    double rm7_bot = 190;
    double rm7_sld = 193;
    sfixed32 abs_cn_trd = 196;
    sfixed32 counter = 199;
    google.protobuf.Timestamp timestamp = 202;
}


/*
    ExpirationRiskRecords contain account level position and risk summary detail. These records are published by AggRiskServers throughout the day approximately once per minute.
*/    
message ExpirationRiskRecordV5 {
    message PKey {
        
        string accnt = 10;
        Currency currency = 13;
        DateKey expiration = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103; // risk server that published this record
    float vega_long = 106; // sum of long vega symbol positions;=sum(+ors.vega) if ors.vega > 0
    float vega_short = 109; // sum of short vega symbol positions;= sum(-ors.vega) if ors.vega < 0
    float w_vega_long = 112; // sum of long weighted vega symbol positions;=sum(+ors.wVega) if ors.wVega > 0
    float w_vega_short = 115; // sum of short weighted vega symbol positions;= sum(-ors.wVega) if ors.wVega < 0
    float wt_vega_long = 118; // sum of long time weighted vega symbol positions;=sum(+ors.wtVega) if ors.wtVega > 0
    float wt_vega_short = 121; // sum of short time weighted vega symbol positions;= sum(-ors.wtVega) if ors.wtVega < 0
    float theta_long = 124; // sum of long vega symbol positions;=sum(+ors.theta) if ors.theta > 0
    float theta_short = 127; // sum of short vega symbol positions;= sum(-ors.theta) if ors.theta < 0
    float rho_long = 130; // sum of long rho symbol positions;=sum(+ors.rho) if ors.rho > 0
    float rho_short = 133; // sum of short rho symbol positions;= sum(-ors.rho) if ors.rho < 0
    float d_gamma_long = 136; // sum of long $ gamma option positions
    float d_gamma_short = 139; // sum of short $gamma option positions
    float d_beta_ga_long = 142; // sum of long $ beta/gamma option positions
    float d_beta_ga_short = 145; // sum of short $ beta/gamma option positions
    float ivol_ln = 148; // vega weighted average symbol ivol where ors.vega > 0
    float ivol_sh = 151; // vega weighted average symbol ivol where ors.vega < 0
    float wt_ve_dd = 154; // Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde < -0.30
    float wt_ve_dn = 157; // Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 <= opr.xde < -0.10
    float wt_ve_at = 160; // Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) <= 0.10
    float wt_ve_up = 163; // Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 < opr.xde <= +0.30
    float wt_ve_du = 166; // Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 < opr.xde
    sfixed32 abs_clr_cn = 169; // absolute number of contracts (open clr)
    sfixed32 abs_cur_cn = 172; // absolute number of contracts (open clr + bot - sld)
    float prem_ov_par = 175; // aggregate option premium over parity
    float op_pnl_vol = 178; // options pnl (using SR vol marks)
    float op_pnl_mid = 181; // options pnl (using SR mid marks)
    float op_pnl_clr = 184; // options pnl (using CLR mid marks)
    float op_day_vega = 187; // option vega traded today
    float op_day_wVega = 190; // option (vol weighted) vega traded today
    float op_day_tVega = 193; // option (time weighted) vega traded today
    float op_day_wt_vega = 196; // option (vol time weighted) vega traded today
    float op_day_theta = 199; // option theta traded today
    float op_edge_opened = 202; // option theo edge opened today
    float op_edge_closed = 205; // option theo edge closed today
    float pnl_dn = 208; // option delta neutral pnl;=sum(ors.pnlDn)
    float pnl_de = 211; // option delta pnl;=sum(ors.pnlDe)
    float pnl_sl = 214; // option vega/delta pnl;=sum(ors.pnlSl)
    float pnl_ga = 217; // option gamma pnl;=sum(ors.pnlGa)
    float pnl_th = 220; // option theta pnl;=sum(ors.pnlTh)
    float pnl_ve = 223; // option vega pnl;=sum(ors.pnlVe)
    float pnl_vo = 226; // option volga pnl;=sum(ors.pnlVo)
    float pnl_va = 229; // option vanna pnl;=sum(ors.pnlVa)
    float pnl_dDiv = 232; // option DDiv pnl;=sum(ors.pnlDDiv)
    float pnl_sDiv = 235; // option SDiv pnl;=sum(ors.pnlSDiv)
    float pnl_rate = 238; // option Rate pnl;=sum(ors.pnlRate)
    float pnl_err = 241; // option unexplained (error) pnl;=sum(ors.pnlErr)
    float pnl_te = 244; // option theo edge pnl;=sum(ors.pnlTe)
    float pnl_ln = 247; // option pnl from option positions with +vega
    float pnl_sh = 250; // option pnl from option positions with -vega
    float t_edge = 253; // aggregate option theo edge;=sum(srs.tEdge)
    float t_edge_mult = 256; // denominator for computing edge per unit;=sum(srs.tEdgeMult)
    float t_edge_pr = 259; // aggregate option theo edge (prior period);=sum(srs.tEdgePr)
    float t_edge_mult_pr = 262; // enominator for computing edge per unit (prior period);=sum(srs.tEdgeMultPr)
    float pos_tEdge_pnl = 265; // aggregate pnl (positive edge symbols);=sum(ors.posTEdgePnl)
    float neg_tEdge_pnl = 268; // aggregate pnl (negative edge symbols);=sum(ors.negTEdgePnl)
    float bad_tEdge_pnl = 271; // aggregate pnl (no theo edge symbols);=sum(ors.badTEdgePnl)
    float va_rsu90 = 274; // Aggregate RiskSlide: uPrc up 90%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.90))
    float va_rsd90 = 277; // Aggregate RiskSlide: uPrc dn 90%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.90))
    float va_rsu50 = 280; // Aggregate RiskSlide: uPrc up 50%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.50))
    float va_rsd50 = 283; // Aggregate RiskSlide: uPrc dn 50%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.50))
    float va_rsu15 = 286; // Aggregate RiskSlide: uPrc up 15%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.15))
    float va_rsd15 = 289; // Aggregate RiskSlide: uPrc dn 15%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.15))
    float va_rsu10 = 292; // Aggregate RiskSlide: uPrc up 10%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.10))
    float va_rsd10 = 295; // Aggregate RiskSlide: uPrc dn 10%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.10))
    float va_rsu05 = 298; // Aggregate RiskSlide: uPrc up 5%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.05))
    float va_rsd05 = 301; // Aggregate RiskSlide: uPrc dn 5%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.05))
    float va_rsu1e = 304; // Aggregate RiskSlide: uPrc up 1x implied earn move, vol ramp out
    float va_rsd1e = 307; // Aggregate RiskSlide: uPrc dn 1x implied earn move, vol ramp out
    float va_rsu2e = 310; // Aggregate RiskSlide: uPrc up 2x implied earn move, vol ramp out
    float va_rsd2e = 313; // Aggregate RiskSlide: uPrc dn 2x implied earn move, vol ramp out
    float va_rearn = 316; // Aggregate RiskSlide: vol earn ramp out (no uPrc move)
    float va_rcash = 319; // Aggregate RiskSlide: uPrc up 30%, vol = 0.01, 6mn deal close (delta neutral)
    google.protobuf.Timestamp last_activity = 322;
    google.protobuf.Timestamp timestamp = 325;
}


/*
    This table allows clients to enter start-of-day positions, and quantity bot/sld today for each market.  AggGroup is a code issued by SpiderRock to indentify the aggregation group that the reported positions and trades belong to. This will usually be your SpiderRock assigned ClientFirm code unless your firm has more than one aggregation unit.  Note that start-of-day positions can be truncated if the truncation will not affect order marking.  Contact SpiderRock support for details if this is what you intend.
*/    
message ExternAggGroupGateway {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13; // Security Type [Stock, Future, Option]
        string agg_group = 16; // SpiderRock-assigned aggGroup identifier (up to 16 characters) [stkAggGroup, futAggGroup, or optAggGroup] (defaults to ClientFirm if blank)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // client firm of the user who entered this record via SRSE;blank otherwise
    sfixed32 open_position = 103; // start-of-day position (aggregate firm position for all accnts in this aggGroup) [can be truncated if necessary]
    OpenPosType open_pos_type = 106; // note: if set to Truncated trading will be suspended when total quantity traded today would flip position from long to short or visa-versa
    sfixed32 bot_quantity = 109; // quantity bot today (can be zero if reported via execution drops)
    sfixed32 sld_quantity = 112; // quantity sld today (can be zero if reported via execution drops)
    google.protobuf.Timestamp timestamp = 115;
}


    
message ExternAggGroupReport {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13; // Security Type [Stock, Future, Option]
        string agg_group = 16; // SpiderRock assigned aggGroup identifier (up to 16 characters) [stkAggGroup, futAggGroup, or optAggGroup]
        string client_firm = 19; // SpiderRock assigned client firm code
        SysEnvironment sys_environment = 22; // original (source) sys environment [Stable, Current, etc]
        RunStatus run_status = 25; // original (source) run status [Prod,Beta]
        ExternSource extern_source = 28;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 open_position = 100; // start-of-day position (aggregate firm position for all accnts in this aggGroup) [can be truncated if necessary]
    OpenPosType open_pos_type = 103;
    sfixed32 bot_quantity = 106; // quantity bot today (can be zero if reported via execution drops)
    sfixed32 sld_quantity = 109; // quantity sld today (can be zero if reported via execution drops)
    sfixed32 bid_leaves = 112; // current (live) open stock orders (buy)
    sfixed32 ask_leaves = 115; // current (live) open stock orders (sell)
    google.protobuf.Timestamp timestamp = 118;
}


    
message ExternNoCrossReport {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13;
        sfixed64 report_number = 16; // Report number (ensures that MLEG reports are unique)
        string no_cross_group = 19; // SpiderRock-assigned no-cross group (up to 16 characters)
        string child_ex_dest = 22; // exchange destination string
        SysEnvironment sys_environment = 25; // original (source) sys environment [Stable, Current, etc]
        RunStatus run_status = 28; // original (source) run status [Prod,Beta]
        ExternSource extern_source = 31;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string mleg_key = 100; // contains a string version of a mleg order key (or null if not an mleg order)
    double bid_price = 103; // best bid
    double ask_price = 106; // best ask
    sfixed32 bid_leaves = 109; // current bid size @ bidPrice (best market) [used for no-cross EE checks]
    sfixed32 ask_leaves = 112; // current ask size @ askPrice (best market) [used for no-cross EE checks]
    google.protobuf.Timestamp timestamp = 115;
}


    
message FixAlgoDefaults {
    message PKey {
        
        string routing_code = 10;
        string user_name = 13;
        string algo = 16;
        SpdrKeyType sec_type = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string defaults = 100; // tagnum1:value1:overrideFlag1,tagnum2:value2:overrideFlag2,...
    string comment = 103;
    string last_user_name = 106;
    google.protobuf.Timestamp timestamp = 109;
}


    
message FixConnectionComposite {
    message PKey {
        
        string routing_code = 10; // matches routingCode from routeDefinition
        SysEnvironment sys_environment = 13;
        SysRealm sys_realm = 16; // sysRealm [NMS, CME, etc.]
        string sender_iD = 19;
        string target_iD = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 100; // server responsible for handling these routes
    string machine_name = 103; // name of the machine which is hosting fix server
    SessionType session_type = 106; // type of session
    string server_name = 109; // server code
    RouteControl route_control = 112; // Enabled = two-way; Disabled = disconnect/logout immediately; SafeMode = Cancel open orders / reject new orders; Unused = Remove route from gateway
    ConnectType connect_type = 115;
    google.protobuf.Timestamp connect_dttm = 118; // most recent connection initiated / accepted
    sfixed32 num_connects = 121; // number of fix connections today
    sfixed32 num_test_requests = 124; // number test requests, an indicator of line quality
    SessionState session_state = 127;
    YesNo is_available = 130;
    string ip_addr = 133;
    sfixed32 ip_port = 136;
    string if_addr = 139;
    string ip_addr2 = 142;
    sfixed32 ip_port2 = 145;
    string if_addr2 = 148;
    sfixed32 sender_seq = 151;
    sfixed32 target_seq = 154;
    sfixed32 num_order = 157; // total
    sfixed32 num_cancel = 160;
    sfixed32 num_reject = 163;
    sfixed32 num_cxl_reject = 166;
    sfixed32 num_exec_report = 169;
    sfixed32 num_oats_order = 172; // oats reportable
    sfixed32 num_oats_reject = 175;
    sfixed32 num_oats_ack = 178;
    sfixed32 num_open_order = 181;
    sfixed32 num_open_cancel = 184;
    sfixed32 queue_size = 187;
    float queue_delay = 190;
    sfixed32 num_errors = 193;
    string last_error = 196;
    google.protobuf.Timestamp last_error_dttm = 199;
    MonitorCode monitor_code = 202;
    google.protobuf.Timestamp timestamp = 205;
}


    
message FixConnectionCompositeAck {
    message PKey {
        
        string routing_code = 10; // matches routingCode from routeDefinition
        SysEnvironment sys_environment = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_error_dttm = 100;
    string ack_user_name = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message FixConnectionCompositeAggregate {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_order = 100; // total
    sfixed32 num_cancel = 103;
    sfixed32 num_reject = 106;
    sfixed32 num_cxl_reject = 109;
    sfixed32 num_exec_report = 112;
    sfixed32 num_oats_order = 115; // oats reportable
    sfixed32 num_oats_reject = 118;
    sfixed32 num_oats_ack = 121;
    sfixed32 num_open_order = 124;
    sfixed32 num_open_cancel = 127;
    sfixed32 queue_size = 130;
    float queue_delay = 133;
    sfixed32 num_errors = 136;
    string last_error = 139;
    google.protobuf.Timestamp last_error_dttm = 142;
    google.protobuf.Timestamp timestamp = 145;
}


    
message FixConnectionCompositeV2 {
    message PKey {
        
        string routing_code = 10; // matches routingCode from routeDefinition
        SysEnvironment sys_environment = 13;
        SysRealm sys_realm = 16; // sysRealm [NMS, CME, etc.]
        string sender_comp_id = 19;
        string target_comp_id = 22;
        string sender_sub_id = 25;
        string target_sub_id = 28;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string machine_name = 100; // name of the machine which is hosting fix server
    string server_code = 103; // server responsible for handling these routes
    string ip_addr = 106;
    sfixed32 ip_port = 109;
    string if_addr = 112;
    string ip_addr2 = 115;
    sfixed32 ip_port2 = 118;
    string if_addr2 = 121;
    SessionType session_type = 124; // type of session
    RouteControl route_control = 127; // Enabled = two-way; Disabled = disconnect/logout immediately; SafeMode = Cancel open orders / reject new orders; Unused = Remove route from gateway
    ConnectType connect_type = 130;
    google.protobuf.Timestamp connect_dttm = 133; // most recent connection initiated / accepted
    sfixed32 num_connects = 136; // number of fix connections today
    sfixed32 num_test_requests = 139; // number test requests, an indicator of line quality
    FixBaseSessionState session_state = 142;
    FixBaseSequenceState sequence_state = 145;
    FixBaseTransportState transport_state = 148;
    google.protobuf.Timestamp session_date = 151; // session start date (Sun for Weekly sessions)
    int32 session_counter = 154; // increments each time sequence numbers are reset
    sfixed32 incoming_seq_num = 157;
    sfixed32 outgoing_seq_num = 160;
    sfixed32 num_msg_rcvd = 163;
    sfixed32 num_msg_sent = 166;
    sfixed32 num_hb_rcvd = 169;
    sfixed32 num_hb_sent = 172;
    sfixed32 num_logon_rcvd = 175;
    sfixed32 num_logon_sent = 178;
    sfixed32 num_app_msg_rcvd = 181;
    sfixed32 num_app_msg_sent = 184;
    google.protobuf.Timestamp last_logon_rcvd = 187;
    string last_source = 190;
    string last_detail = 193;
    sfixed32 num_errors = 196;
    string last_error = 199;
    google.protobuf.Timestamp last_error_dttm = 202;
    MonitorCode monitor_code = 205;
    google.protobuf.Timestamp timestamp = 208;
}


    
message FixConnectionInfo {
    message PKey {
        
        string routing_code = 10; // matches routingCode from routeDefinition
        SysEnvironment sys_environment = 11;
        SysRealm sys_realm = 12; // sysRealm [NMS, CME, etc.]
        string sender_iD = 13;
        string target_iD = 14;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 105; // server responsible for handling these routes
    string machine_name = 106; // name of the machine which is hosting fix server
    SessionType session_type = 107; // type of session
    string server_name = 108; // server code
    RouteControl route_control = 109; // Enabled = two-way; Disabled = disconnect/logout immediately; SafeMode = Cancel open orders / reject new orders; Unused = Remove route from gateway
    ConnectType connect_type = 120;
    google.protobuf.Timestamp connect_dttm = 121; // most recent connection initiated / accepted
    sfixed32 num_connects = 122; // number of fix connections today
    sfixed32 num_test_requests = 123; // number test requests, an indicator of line quality
    SessionState session_state = 124;
    YesNo is_available = 125;
    string ip_addr = 126;
    sfixed32 ip_port = 127;
    string if_addr = 128;
    string ip_addr2 = 129;
    sfixed32 ip_port2 = 130;
    string if_addr2 = 131;
    sfixed32 sender_seq = 132;
    sfixed32 target_seq = 133;
    sfixed32 num_order = 134; // total
    sfixed32 num_cancel = 135;
    sfixed32 num_reject = 136;
    sfixed32 num_cxl_reject = 137;
    sfixed32 num_exec_report = 138;
    sfixed32 num_oats_order = 139; // oats reportable
    sfixed32 num_oats_reject = 140;
    sfixed32 num_oats_ack = 141;
    sfixed32 num_open_order = 142;
    sfixed32 num_open_cancel = 143;
    sfixed32 queue_size = 144;
    float queue_delay = 145;
    sfixed32 num_errors = 146;
    string last_error = 147;
    google.protobuf.Timestamp last_error_dttm = 148;
    MonitorCode monitor_code = 149;
    google.protobuf.Timestamp ts = 150;
}


    
message FixConnectionInfoVset {


    MbusInfo descriptor = 1;
    
    sfixed32 range_start = 100; // (optional) First index of visible range
    sfixed32 range_end = 103; // (optional) Last index of visible range
}


    
message FixError {
    message PKey {
        
        sfixed64 error_id = 10;
        SysEnvironment sys_environment = 13;
        RunStatus run_status = 16; // run status [Prod,Beta]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string unique_id = 100; // clOrdId, execId, etc
    string msg_type = 103;
    string routing_code = 106;
    string base_routing_code = 109; // for TcpAcceptor sessions
    string sender_comp_id = 112;
    string target_comp_id = 115;
    string sender_sub_id = 118;
    string target_sub_id = 121;
    uint32 app_id = 124; // AppId of the process handling this fix connection
    string machine_name = 127; // name of the machine which is hosting fix server
    SessionType session_type = 130; // type of session
    google.protobuf.Timestamp session_date = 133; // session start date (Sun for Weekly sessions)
    int32 session_counter = 136; // increments each time sequence numbers are reset
    sfixed32 seq_number = 139;
    string error_msg = 142;
    FixErrorType error_type = 145;
    google.protobuf.Timestamp error_dttm = 148;
    YesNo ackd = 151;
    google.protobuf.Timestamp ack_dttm = 154;
    string ackd_user = 157;
}


    
message FixMassCancel {
    message PKey {
        
        sfixed64 request_id = 10;
        SysEnvironment sys_environment = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    MassCancelType cancel_type = 100;
    string cancel_value = 103; // should contain a value for the specified type cancelType
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


/*
    FixRouteControl messages can be created / published by SRSE or admin tools.  Any message with timestamp older than the current trading day will be ignored.
    Messages should be picked up and honored immediately by running servers and also honored on restart via a cache request.
    FixRouteControl messages should be deleted if no longer in use
*/    
message FixRouteControl {
    message PKey {
        
        string routing_code = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 incoming_seq_num = 100; // used to ADVANCE sequence incoming sequence number (-1 = no change)
    sfixed32 outgoing_seq_num = 103; // used to ADVANCE sequence outgoing sequence number (-1 = no change)
    YesNo reset_seq_nums = 106; // logout, reset session to 1/1
    YesNo reset_transport = 109; // logout/reset transport
    RouteControl route_control = 112; // Enabled = two-way; Disabled = disconnect/logout immediately; SafeMode = Cancel open orders / reject new orders; Unused = Remove route from gateway
    string modified_by = 115; // user who last modified this record
    google.protobuf.Timestamp timestamp = 118; // timestamp of last modification
}


    
message FixRoutingTable {
    message PKey {
        
        string route_table = 10;
        string destination = 13; // (eg. CBOEOPT, NYSESTK, #Nighthawk, etc)
        RouteType route_type = 16;
        SysEnvironment sys_environment = 19;
        SysRealm sys_realm = 22; // active sysRealm [NMS, CME, etc.] (will be ignored in other data centers)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // (required) client firm that is the primary owner of this route table.  Can be 'SR' or a SponsorClientFirm
    YesNo pre_mkt = 103; // Route available during the premarket
    YesNo reg_mkt = 106; // Route available during the premarket
    YesNo post_mkt = 109; // Route available during the premarket
    YesNo enabled = 112; // yes=route enabled
    RoutingRule routing_rule = 115;
    string pri_routing_code = 118; // pri routing code specifies an SR outbound gateway (can be a macro)
    string pri_pref_code = 121; // pri market maker preference code (will be attached to outgoing FIX message)
    string alt_routing_code1 = 124; // alt routing code #1 (can be NONE)
    string alt_pref_code1 = 127; // alt market maker preference code #1 (will be attached to outgoing FIX message)
    string alt_routing_code2 = 130; // alt routing code #2 (can be NONE)
    string alt_pref_code2 = 133; // alt market maker preference code #2 (will be attached to outgoing FIX message)
    string alt_routing_code3 = 136; // alt routing code #3 (can be NONE)
    string alt_routing_code4 = 139; // alt routing code #4 (can be NONE)
    string alt_routing_code5 = 142; // alt routing code #5 (can be NONE)
    string alt_routing_code6 = 145; // alt routing code #6 (can be NONE)
    string alt_routing_code7 = 148; // alt routing code #7 (can be NONE)
    string alt_routing_code8 = 151; // alt routing code #8 (can be NONE)
    string backup_routing_code = 154; // backup routing code;only used if pri and alt are unavailable;does not participate in round robin (can be NONE)
    string extern_params = 157; // pass through params (must be understood by end point handler) usually [tag=value;tag=value;tag=value]
    string comment = 160; // maintainer commments
    string modified_by = 163; // user who last modified this record
    google.protobuf.Timestamp timestamp = 166; // timestamp of last modification
}


    
message FixRoutingTableDataRequest {


    MbusInfo descriptor = 1;
    
    string accnt = 100;
    GetAction action = 103;
}


    
message FixSessionStatus {
    message PKey {
        
        string routing_code = 10;
        SysEnvironment sys_environment = 13;
        SysRealm sys_realm = 16; // sysRealm [NMS, CME, etc.]
        string sender_comp_id = 19;
        string target_comp_id = 22;
        string sender_sub_id = 25;
        string target_sub_id = 28;
        YesNo is_acceptor = 31;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 100;
    uint32 app_id = 103; // AppId of the process handling this fix connection
    string base_routing_code = 106; // for TcpAcceptor sessions
    string machine_name = 109; // name of the machine which is hosting fix server
    SessionType session_type = 112; // type of session
    ConnectType connect_type = 115;
    string tcp_address = 118; // IPAddress / Port (used to advertise SRFixBase/StreetGateway endpoint for EE/TcpInitiation sessions)
    sfixed32 tcp_port = 121;
    string udp_address = 124; // IPAddress / Port (used to advertise SRFixBase/StreetGateway endpoint for EE/DblInitiation sessions)
    sfixed32 udp_port = 127;
    FixBaseSessionState session_state = 130;
    FixBaseSequenceState sequence_state = 133;
    FixBaseTransportState transport_state = 136;
    RouteControl route_control = 139; // Enabled = two-way; Disabled = disconnect/logout immediately; SafeMode = Cancel open orders / reject new orders; Unused = Remove route from gateway
    google.protobuf.Timestamp route_control_change_dttm = 142;
    google.protobuf.Timestamp session_date = 145; // session start date (Sun for Weekly sessions)
    int32 session_counter = 148; // increments each time sequence numbers are reset
    sfixed32 incoming_seq_num = 151;
    sfixed32 outgoing_seq_num = 154;
    sfixed32 num_logon_rcvd = 157;
    sfixed32 num_logon_sent = 160;
    sfixed32 num_msg_rcvd = 163;
    sfixed32 num_msg_sent = 166;
    sfixed32 num_app_msg_rcvd = 169;
    sfixed32 num_app_msg_sent = 172;
    float num_msg_rcvd_per_sec5s = 175; // total number of outgoing messages in the last 5 clock seconds / 5
    float num_msg_sent_per_sec5s = 178; // total number of incoming messages in the last 5 clock seconds / 5
    float msg_rcvd_time5s = 181; // 100 * total time (in seconds) spent processing incoming messages / total clock seconds (100.0 = @ max incoming capacity)
    float msg_sent_time5s = 184; // 100 * total time (in seconds) spent processing outgoing messages / total clock seconds (100.0 = @ max outgoing capacity)
    google.protobuf.Timestamp last_logon_rcvd = 187;
    google.protobuf.Timestamp last_fix_route_control_rcvd = 190;
    google.protobuf.Timestamp last_session_config_change = 193;
    string last_session_modify_detail = 196;
    FixBaseSessionStatus session_status = 199;
    FixBaseSessionError max_session_error = 202;
    string max_session_error_text = 205;
    google.protobuf.Timestamp max_session_error_dttm = 208;
    MonitorCode monitor_code = 211;
    google.protobuf.Timestamp timestamp = 214;
}


    
message FixStreetFlowControl {
    message PKey {
        
        string routing_code = 10; // external (street side) routing code
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    FixBaseSessionState session_state = 100;
    FixBaseSequenceState sequence_state = 103;
    FixBaseTransportState transport_state = 106;
    RouteControl route_control = 109; // Enabled = two-way; Disabled = disconnect/logout immediately; SafeMode = Cancel open orders / reject new orders; Unused = Remove route from gateway
    sfixed32 pending_queue_size = 112; // indicates the number of pending outgoing messages for this session (eg. pending streetGW -> broker messages)
    double pending_queue_age = 115; // age of the oldest item currently in queue
    string last_server_code = 118; // last server code of publishing server
    SysEnvironment sys_environment = 121;
    sfixed32 num_messages_sent = 124; // num (application) fix messages sent since last fix log rotation
    sfixed32 num_messages_rcvd = 127; // num (application) fix messages rcvd since last fix log rotation
    sfixed64 counter = 130; // increments by 1 every time a flow control record is published
    google.protobuf.Timestamp timestamp = 133;
}


/*
    FutAwayTktGateway inserts are validated and convered to away SpdrParentExecution records and published. If successfully published they will be visible in the SpdrParentExecution table and on SpiderRock GUI tools.
    Replaces are allowed but they are functionally identical to updates in that only the fillPrice and fillQuantity fields are actually changed.
*/    
message FutAwayTktGateway {
    message PKey {
        
        string accnt = 10;
        sfixed64 client_fill_iD = 13; // client execution ID, these must be unique on a per-account basis [copied into SpdrParentExecution.altFillId]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    string client_order_iD = 103; // client orderID [copied into SpdrParentExecution.altOrderId]
    sfixed64 risk_group_id = 106; // Default: 0 (none).  Required to be non-zero if incorporating risk into an existing riskGroupId
    ExpiryKey fkey = 109;
    BuySell fill_side = 112;
    double fill_price = 115;
    sfixed32 fill_quantity = 118;
    double fill_ref_uPrc = 121; // reference underlier price @ fill arrival time
    YesNo deliver_exec_report = 124; // Drop a copy of the execution report
    sfixed64 sRfill_iD = 127; // SR internal fill number, any values submitted will be overwritten by the SR generated fill number
    string comment = 130; // text comment (if any)
    string exec_broker = 133; // used to reflect field from a downstream destination back up to and upstream fill report
    string user_data1 = 136; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 139; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string strategy = 142; // client-supplied strategy string
    google.protobuf.Timestamp fill_dttm = 145;
    google.protobuf.Timestamp timestamp = 148;
    int32 checksum = 151; // Must be set to 13.  This helps detect some column,value misalignments.
}


/*
    Records inserted, updated, or replaced into the FutureOrderGateway table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.
    See the SpiderRock Execution Engine concept guide for more details.
*/    
message FutOrderGateway {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 13; // SR Account (default = primary account associated with SRSE login)
        BuySell order_side = 16; // Order side.  Values: Buy/Sell.
        sfixed64 grouping_code = 19; // Client supplied order
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    SpdrActionType spdr_action_type = 103; // [Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]
    string alt_order_id = 106; // Alternate client order ID.  This order ID will be copied to all execution reports.
    string alt_accnt = 109; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 112; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string accnt_route_code = 115; // accntRoute acronym
    string extern_ex_dest = 118; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 121; // external algo names/parameters (usually just an algo name)
    string strategy = 124; // Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.
    YesNo visible_in_sV = 127; // allow order to be visible in SV (do not use for high volume of orders)
    google.protobuf.Timestamp order_dttm = 130; // order entry time (from client;if any)
    sfixed32 order_size = 133; // parent order size (contracts) [-1 = no change;used when spdrActionType=Release]
    sfixed32 order_active_size = 136; // total activated size (total size released for execution) (-1 = all size available; 0 = staged/locked order)
    YesNo add_cum_fill_quantity = 139; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    sfixed32 max_exposure_size = 142; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 145; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 148; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; MktSize=expose only 'typical' market size; FullSize=expose entire order size where possible
    YesNo randomize_size = 151; // randomize public order size
    YesNo can_overlap_cxl_repl = 154; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 157; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 twap_slice_cnt = 160; // [ProgressSliceCnt] number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 163; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 166; // target vwap participation rate (target % of trade activity)
    AuctionResponder auction_responder = 169; // if set, parent order can be an auction responder
    TriggerType trigger_type = 172; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 175; // stop/trigger price for parent order to go active
    UPrcCxl cxl_uPrc_range = 178; // cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]
    float min_uBid = 181; // [optional]
    float max_uAsk = 184; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 187; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    sfixed32 max_child_orders = 190; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    SpdrStageType spdr_stage_type = 193; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    TimeInForce time_in_force = 196;
    google.protobuf.Timestamp start_dttm = 199; // [optional] (parent order start time)
    sfixed32 order_duration = 202; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 205; // [optional] (default: 2000-01-01)
    StartType start_type = 208; // [Immediate, WaitTrigger]
    sfixed32 progress_timeout = 211; // cancel if [optional] (number of milliseconds)
    ParentOrderHandling parent_order_handling = 214;
    ParentBalanceHandling parent_balance_handling = 217;
    SpdrLimitType order_limit_type = 220; // Various (Market, Prc, etc.); establishes the primary LimitPrice for a parent order
    SpdrLimitClass take_limit_class = 223; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 226; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 229; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 232; // Applies if LimitType = Prc[]
    double order_prc_offset = 235; // default=0
    AlphaType take_alpha_type = 238; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 241; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 244; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 247; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 250; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 253; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    AutoHedge auto_hedge = 256;
    ExpiryKey hedge_sec_key = 259; // auto-hedge instrument (either TickerKey or ExpiryKey) [hedgeSecKey cannot equal order.FKey]
    SpdrKeyType hedge_sec_type = 262; // None, Stock, or Future
    float hedge_beta_ratio = 265; // Portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0] (note: 0.0 will be interpreted as 1.0)
    HedgeScope hedge_scope = 268; // Auto-hedge at the RiskGroup or Accnt level
    TimeInForce hedge_tIF = 271; // time in force for the autohedge order (can be Day or ExtDay)
    PositionType position_type = 274;
    sfixed64 risk_group_id = 277; // All risk limits below are relative to this riskGroupId.  Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    RMetricSource ref_rMetric1_src = 280;
    RMetricSource ref_rMetric2_src = 283;
    RMetricSource ref_rMetric3_src = 286;
    RMetricSource ref_rMetric4_src = 289;
    RMetricSource ref_rMetric5_src = 292;
    float order_ref_rMetric1 = 295; // user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]
    float order_ref_rMetric2 = 298; // user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]
    float order_ref_rMetric3 = 301; // user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]
    float order_ref_rMetric4 = 304; // user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]
    float order_ref_rMetric5 = 307; // user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]
    float max_acc_day_dDelta_ln = 310; // Default: -1 (not set).
    float max_acc_day_dDelta_sh = 313; // Default: -1 (not set).
    float max_sym_day_dDelta_ln = 316; // Default: -1 (not set).
    float max_sym_day_dDelta_sh = 319; // Default: -1 (not set).
    float max_grp_day_dDelta_ln = 322; // Default: -1 (not set).
    float max_grp_day_dDelta_sh = 325; // Default: -1 (not set).
    float max_grp_day_rMetric1_ln = 328; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 331; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 334; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_rMetric1_ratio = 337; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 340; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 343; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 346; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 349; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 352; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 355; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 358; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 361; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    string trader_name = 364; // Name of the trader associated with the order
    string user_data1 = 367; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 370; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 373; // client supplied data field; passes through to down stream child orders
    int32 checksum = 376; // Must be set to 13.  This helps detect some column/value misalignments.
}


    
message FutureAlgoFees {
    message PKey {
        
        TickerKey ticker = 10;
        string fut_exch = 13;
        FutCustClass cust_class = 16;
        string client_firm = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float fut_make_fee = 100; // base (lowest tier) make fee for the exchange/cust class
    float fut_take_fee = 103;
    float opt_make_fee = 106; // base (lowest tier) make fee for the exchange/cust class
    float opt_take_fee = 109;
    google.protobuf.Timestamp timestamp = 112;
}


/*
    This table contains live future quote records from the listing exchange.  Each record contains up to four price levels and represents a live snapshot of the book for a specific future.
*/    
message FutureBookQuote {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UpdateType update_type = 100;
    MarketStatus market_status = 103; // market status (open, halted, etc)
    double bid_price1 = 106; // bid price
    double ask_price1 = 109; // ask price
    sfixed32 bid_size1 = 112; // bid size in contracts
    sfixed32 ask_size1 = 115; // ask size in contracts
    uint32 bid_orders1 = 118; // number of participating orders at the bid price
    uint32 ask_orders1 = 121; // number of participating orders at the ask price
    double bid_price2 = 124; // bid price
    double ask_price2 = 127; // ask price
    sfixed32 bid_size2 = 130; // bid size in contracts
    sfixed32 ask_size2 = 133; // ask size in contracts
    uint32 bid_orders2 = 136; // number of participating orders at the bid price
    uint32 ask_orders2 = 139; // number of participating orders at the ask price
    double bid_price3 = 142; // bid price
    double ask_price3 = 145; // ask price
    sfixed32 bid_size3 = 148; // bid size in contracts
    sfixed32 ask_size3 = 151; // ask size in contracts
    uint32 bid_orders3 = 154; // number of participating orders at the bid price
    uint32 ask_orders3 = 157; // number of participating orders at the ask price
    double bid_price4 = 160; // bid price
    double ask_price4 = 163; // ask price
    sfixed32 bid_size4 = 166; // bid size in contracts
    sfixed32 ask_size4 = 169; // ask size in contracts
    uint32 bid_orders4 = 172; // number of participating orders at the bid price
    uint32 ask_orders4 = 175; // number of participating orders at the ask price
    sfixed64 src_timestamp = 178; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 181; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
}


    
message FutureChainRequest {


    MbusInfo descriptor = 1;
    
    TickerKey root = 100;
    sfixed32 year = 103;
    int32 month = 106;
    int32 day = 109;
    ChainRequest chain_request = 112;
    GetAction action = 115;
}


    
message FutureChainResponse {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    string exch_yr_mn = 103;
    float u_prc = 106;
    float years = 109;
    UnderlierType underlier_type = 112;
    ChainRequest chain_request = 115;
}


/*
    This table contains live child order future quote records from SR Execution Engines.
*/    
message FutureChildQuote {
    message PKey {
        
        ExpiryKey fkey = 10;
        string engine_name = 13;
        YesNo is_test_accnt = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double bid_price = 100; // bid price
    double ask_price = 103; // ask price
    sfixed32 bid_size = 106; // bid size in contracts
    sfixed32 ask_size = 109; // ask size in contracts
    google.protobuf.Timestamp timestamp = 112; // quote update
}


/*
    FutureCloseMark records are created immediately after the market close (clsMarkState=SRClose), when exchanges publish official marks (clsMarkState=ExchClose), and again during top of day rotation (clsMarkState=Final).  These records contain closing quotes and prices as well as markup details for all outright futures.
    FutureCloseMark records are published to the SpiderRock elastic cluster when clsMarkState=Final
*/    
message FutureCloseMark {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    ClsMarkState cls_mark_state = 103; // Close mark state: None; LastPrt; SRClose; ExchClose; Final
    double opn_prc = 106; // Opening price
    double min_prc = 109; // Low price
    double max_prc = 112; // High Price
    sfixed32 open_interest = 115; // Open interest
    sfixed32 prt_count = 118; // print count
    sfixed32 prt_volume = 121; // print volume
    sfixed32 realized_cnt = 124; // number of minute bar segments used in realizedVar calc
    float realized_var = 127; // realizedVar = SUM[ LOG( qteTwap(T) / qteTwap(T+1) ) ^ 2 ] / realizedCnt @ 1 minute intervals during market hours
    float avg_mkt_size = 130; // MEAN[0.5 * (bidSize + askSize) ] @ 1 minute intervals during market hours
    float avg_mkt_width = 133; // MEAN[ askPrice - bidPrice ] @ 1 minute intervals during market hours
    double bid_prc = 136; // bid price (close - 1min)
    double ask_prc = 139; // ask price (close - 1min)
    double sr_cls_prc = 142; // sr close mark (close - 1min)
    double close_prc = 145; // official exchange closing mark (last print;then official close)
    YesNo has_sRCls_prc = 148;
    YesNo has_close_prc = 151;
    google.protobuf.Timestamp sr_close_mark_dttm = 154; // from MarketCloseQuote.srCloseMarkDttm
    google.protobuf.Timestamp timestamp = 157;
}


    
message FutureCloseMarkHist {
    message PKey {
        
        ExpiryKey fkey = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Duration sr_close_time = 100; // SR closing mark time (C)
    ClsMarkState cls_mark_state = 103; // Close mark state: None; LastPrt; SRClose; ExchClose; Final
    double opn_prc = 106; // Opening price
    double min_prc = 109; // Low price
    double max_prc = 112; // High Price
    sfixed32 open_interest = 115; // Open interest
    sfixed32 prt_count = 118; // print count
    sfixed32 prt_volume = 121; // print volume
    sfixed32 realized_cnt = 124; // number of minute bar segments used in realizedVar calc
    float realized_var = 127; // realizedVar = SUM[ LOG( qteTwap(T) / qteTwap(T+1) ) ^ 2 ] / realizedCnt @ 1 minute intervals during market hours
    float avg_mkt_size = 130; // MEAN[0.5 * (bidSize + askSize) ] @ 1 minute intervals during market hours
    float avg_mkt_width = 133; // MEAN[ askPrice - bidPrice ] @ 1 minute intervals during market hours
    double bid_prc = 136; // bid price (close - 1min)
    double ask_prc = 139; // ask price (close - 1min)
    double sr_cls_prc = 142; // sr close mark (close - 1min)
    double close_prc = 145; // official exchange closing mark (last print;then official close)
    google.protobuf.Timestamp prior_date = 148;
    float prior_sRCls_prc = 151; // values archive in the previous trading period
    float prior_close_prc = 154;
    google.protobuf.Timestamp timestamp = 157;
}


    
message FutureControl {
    message PKey {
        
        string fut_ctrl_key = 10;
        string client_firm = 13;
        ExpiryKey fkey = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string modified_by = 100; // user who last modified this record
    google.protobuf.Timestamp timestamp = 103; // timestamp of last modification
}


    
message FutureDetailHist {
    message PKey {
        
        ExpiryKey fkey = 10;
        DateKey trading_date = 13; // all trading dates
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    sfixed64 security_iD = 103;
    sfixed64 alt_security_iD = 106; // securityID from alternative vendor
    string security_desc = 109;
    string bberg_sec_key = 112;
    float tick_value = 115;
    float point_value = 118;
    Currency point_currency = 121;
    google.protobuf.Timestamp timestamp = 124;
}


    
message FutureExchFees {
    message PKey {
        
        TickerKey ticker = 10;
        string fut_exch = 13;
        FutCustClass cust_class = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float fut_make_fee = 100; // base (lowest tier) make fee for the exchange/cust class
    float fut_take_fee = 103;
    float opt_make_fee = 106; // base (lowest tier) make fee for the exchange/cust class
    float opt_take_fee = 109;
    string modified_by = 112;
    google.protobuf.Timestamp timestamp = 115;
}


/*
    FutureMarginSummary records are published by the AggRiskServers and consumed by execution engines
*/    
message FutureMarginSummaryV5 {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    string client_firm = 103; // SR client firm
    string risk_server_code = 106;
    TickerKey ticker = 109; // Ticker that this future is associated with
    float opn_delta = 112; // Aggregate Opening Position Delta
    float pos_delta = 115; // Aggregate Position Delta
    float fut_margin = 118; // Aggregate Future Risk Margin
    google.protobuf.Timestamp timestamp = 121;
}


    
message FutureMark {


    MbusInfo descriptor = 1;
    
    ExpiryKey fkey = 100;
    double f_mark = 103;
}


/*
    These records represent live market summary snapshots for each active futures markets.
*/    
message FutureMarketSummary {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double opn_price = 100; // first print price of the day during regular market hours
    double mrk_price = 103; // last print handled during regular market hours
    double cls_price = 106; // official exchange closing price
    double min_price = 109; // minimum print price within market hours
    double max_price = 112; // maximum print price within market hours
    sfixed32 open_int = 115; // open interest
    sfixed32 bid_count = 118; // num prints <= quote.bid
    sfixed32 bid_volume = 121; // volume when prtPrice <= quote.bid
    sfixed32 ask_count = 124; // num prints >= quote.ask
    sfixed32 ask_volume = 127; // volume when prtPrice >= quote.ask
    sfixed32 mid_count = 130; // num prints inside quote.bid / quote.ask
    sfixed32 mid_volume = 133; // volume inside quote.bid / quote.ask
    sfixed32 prt_count = 136; // number of distinct print reports
    double prt_price = 139; // last print price
    sfixed32 exp_count = 142; // number of updates included in exponential average
    double exp_width = 145; // exponential average market width (10 minute 1/2 life)
    float exp_bid_size = 148; // exponential average bid size (10 minute 1/2 life)
    float exp_ask_size = 151; // exponential average ask size (10 minute 1/2 life)
    google.protobuf.Timestamp last_print = 154;
    google.protobuf.Timestamp timestamp = 157;
}


/*
    FutureMinuteBar records are created once per minute for all future markets (outrights and spreads).  These records are visible in SRSE and are published to the SpiderRock elastic cluster at the same time.
*/    
message FutureMinuteBar {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100; // Trade Date
    string time = 103; // Trade Time end of period (Bar)
    double prt_open = 106; // Print at open of period (Bar)
    double prt_high = 109; // High price during period (Bar)
    double prt_low = 112; // Low price during period (Bar)
    double prt_last = 115; // Print at close of period (Bar)
    double prt_vWap = 118; // Period (Bar) VWap
    sfixed32 prt_volume = 121; // Period (Bar) number of contracts
    sfixed32 prt_count = 124; // Number of prints during the period
    double qte_hi_bid = 127; // Quote bid high
    double qte_lo_ask = 130; // Quote ask low
    double qte_twap = 133; // Quote Twap
    sfixed32 qte_count = 136; // Quote number of contracts
    double bid = 139; // Bid at the time of the print
    double ask = 142; // Ask at the time of the print
    sfixed32 bid_sz = 145; // Bid size at the time of print
    sfixed32 ask_sz = 148; // Ask size at the time of print
    float width = 151; // reference point for expWidth (SR debug use)
    YesNo is_eOB = 154; // is end-of-bar (every 10 minutes)
    YesNo is_eOH = 157; // is end-of-hour
    google.protobuf.Timestamp timestamp = 160; // same as date + time
}


    
message FutureMinuteBarHist {
    message PKey {
        
        ExpiryKey fkey = 10;
        google.protobuf.Timestamp date = 13; // end of minute bar
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trading_date = 100;
    TradingSession trading_session = 103;
    double prt_open = 106; // Print at open of period (Bar)
    double prt_high = 109; // High price during period (Bar)
    double prt_low = 112; // Low price during period (Bar)
    double prt_last = 115; // Print at close of period (Bar)
    double prt_vWap = 118; // Period (Bar) VWap
    sfixed32 prt_volume = 121; // Period (Bar) number of contracts
    sfixed32 prt_count = 124; // Number of prints during the period
    double qte_hi_bid = 127; // Quote bid high
    double qte_lo_ask = 130; // Quote ask low
    double qte_twap = 133; // Quote Twap
    sfixed32 qte_count = 136; // Quote number of contracts
    double bid = 139; // Bid at the time of the print
    double ask = 142; // Ask at the time of the print
    sfixed32 bid_sz = 145; // Bid size at the time of print
    sfixed32 ask_sz = 148; // Ask size at the time of print
    float width = 151; // reference point for expWidth (SR debug use)
    YesNo is_eOB = 154; // is end-of-bar (every 10 minutes)
    YesNo is_eOH = 157; // is end-of-hour
    google.protobuf.Timestamp timestamp = 160; // same as date + time
}


/*
    FutureOpenMark records are created during the end-of-day rotation for each product and intended for use the following trading day.
*/    
message FutureOpenMark {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    double sr_cls_prc = 103; // SR open mark; [SR close mark (close - 1min) from previous day]
    double close_prc = 106; // exchange open mark; [exchange close mark from previous day]
    double bid_prc = 109; // bid price (SR bid price from previous day)
    double ask_prc = 112; // ask price (SR ask price from previous day)
    google.protobuf.Timestamp timestamp = 115;
}


/*
    FuturePositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.
    These records are published by a CoreRiskServer and represent the position and risk markup detail for a single futures contract.
    New records are published immediately when a position changes and about once per minute if no position has changed.
    Note that all stock, future and option records for a chain are published simultaneously and records for the same chain should have consistent marks.
*/    
message FuturePositionRecordV5 {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103;
    string agg_group = 106; // SR assigned aggregation group
    TickerKey ticker = 109; // underlying ticker
    sfixed32 underliers_per_cn = 112; // number of underlying units per futures contract
    UnderlierType underlier_type = 115;
    float tick_value = 118; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 121; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 124;
    PriceFormat price_format = 127; // price display format code
    float fut_prc = 130; // current future price (any market session) (persists if market closed/halted)
    float fut_bid = 133; // current future bid (any market session) (zero if market closed/halted)
    float fut_ask = 136; // current future ask (any market session) (zero if market closed/halted)
    double fut_mark = 139; // current mark (usually mid market) (freezes at SR CloseMarkTime)
    MarkErrorCode fut_mark_err_codes = 142;
    UMarkSource fut_mark_source = 145;
    double fut_opn_mid_mark = 148; // start of day SR mark
    double fut_opn_clr_mark = 151; // start of day clearing mark (usually exchange settlement mark)
    sfixed32 fut_opn_pos_prv = 154; // start-of-day SR contract position (rotated from prior day record)
    sfixed32 fut_opn_pos_clr = 157; // start-of-day CKR contract position (supplied by client/clearing firm via clearing position load)
    sfixed32 fut_opn_pos = 160; // start of period contract position (effective; can be from either CLR or SR)
    PositionSource fut_opn_pos_src = 163; // start of period position source
    sfixed32 cn_bot = 166; // number of contracts bot today
    sfixed32 cn_sld = 169; // number of contracts sld today
    sfixed32 cn_bot_trd = 172; // number of contracts bot today
    sfixed32 cn_sld_trd = 175; // number of contracts sld today
    sfixed32 cn_bot_hdg = 178; // number of contracts bot today from open pos hedging (spdrSource=HedgeTool)
    sfixed32 cn_sld_hdg = 181; // number of contracts sld today from open pos hedging (spdrSource=HedgeTool)
    sfixed32 cn_bot_trh = 184; // number of contracts bot today from open pos hedging (spdrSource=TradeHedge)
    sfixed32 cn_sld_trh = 187; // number of contracts sld today from open pos hedging (spdrSource=TradeHedge)
    sfixed32 cn_bot_opn = 190; // number of contracts bot today from open pos hedging (spdrSource=OpenHedge)
    sfixed32 cn_sld_opn = 193; // number of contracts sld today from open pos hedging (spdrSource=OpenHedge)
    sfixed32 cn_opened = 196; // number of contracts opened today
    sfixed32 cn_closed = 199; // number of contracts closed today
    double fut_mny_bot = 202; // sum of settle cash for all buy executions
    double fut_mny_sld = 205; // sum of settle cash for all sell executions
    float day_pnl = 208;
    float opn_pnl_mid_mark = 211;
    float opn_pnl_clr_mark = 214;
    float beta = 217; // beta (usually beta to SPX; see AccountConfig.betaSource) (if applicable)
    BetaSource beta_source = 220;
    int32 days = 223; // days to expiration
    float rate = 226; // global rate to expiration
    float years = 229; // years to expiration
    float rh = 232; // rho; (dPrc / dRate) - only for STIR futures
    float ve = 235; // vega; (dPrc / dVol) - only for VIX futures
    float rate_pr = 238; // start of period global rate
    float years_pr = 241; // start of period years to expiration
    sfixed32 num_executions = 244; // number of included SpdrParentExecution records
    google.protobuf.Timestamp max_exec_dttm = 247; // maximum activity dttm of execution records included in this future risk record
    google.protobuf.Timestamp timestamp = 250;
}


/*
    The most recent (last) print record for each active futures market.
*/    
message FuturePrint {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    FutExch prt_exch = 100; // print exchange
    sfixed32 prt_size = 103; // print size [contracts]
    double prt_price = 106; // print price
    sfixed32 prt_cluster_num = 109; // incremental print cluster counter (one counter per fkey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 112; // cumulative size of prints in this sequence (sequence of prints @ same or better price with less than 25 ms elapsing since first print)
    int32 prt_type = 115; // print type [exchange specific]
    uint32 prt_orders = 118; // number of orders participating in this print
    sfixed32 prt_quan = 121; // cumulative (electronic) print size at current price level
    sfixed32 prt_volume = 124; // cumulative day (electronic) print volume in contracts
    float bid = 127; // exchange bid (@ print time)
    float ask = 130; // exchange ask (@ print time)
    sfixed32 bsz = 133; // cumulative bid size (@ print time)
    sfixed32 asz = 136; // cumulative ask size (@ print time)
    float age = 139; // age of prevailing quote at time of print
    PrtSide prt_side = 142; // implied print side (from bid/ask)
    sfixed64 prt_timestamp = 145; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 148; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 151;
}


    
message FuturePrintHistory {
    message PKey {
        
        ExpiryKey fkey = 10;
        sfixed32 tick_number = 13; // tickNumber = price / minTickSize
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double price = 100;
    double min_tick_size = 103;
    sfixed32 up_quan_d = 106; // all day
    sfixed32 dn_quan_d = 109;
    double up_quan_r = 112; // recent period (about 10 minutes)
    double dn_quan_r = 115;
    google.protobuf.Timestamp timestamp = 118;
}


/*
    FuturePrintMarkup records are created for all future prints
*/    
message FuturePrintMarkup {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 prt_number = 100; // Unique print set identifier; will increment but not guaranteed to be sequential.
    TickerKey ticker = 103; // underlying stock key
    FutExch prt_exch = 106; // print exchange
    sfixed32 prt_size = 109; // print size [contracts]
    double prt_price = 112; // print price
    int32 prt_type = 115; // print type [exchange specific]
    uint32 prt_orders = 118; // number of orders participating in this print
    sfixed32 prt_cluster_num = 121; // incremental print cluster counter (one counter per fkey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 124; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 127; // cumulative day (electronic) print volume in contracts
    PrtSide prt_side = 130; // Print side: None; Mid; Bid; Ask
    double bid_price = 133; // exch best bid @ print arrival time
    double ask_price = 136; // exch best ask @ print arrival time
    sfixed32 bid_size = 139; // bid size @ print arrival time
    sfixed32 ask_size = 142; // ask size @ print arrival time
    double bid_price2 = 145; // exch 2nd best bid @ print arrival time
    double ask_price2 = 148; // exch 2nd best ask @ print arrival time
    sfixed32 bid_size2 = 151; // 2nd best bid @ print arrival time
    sfixed32 ask_size2 = 154; // 2nd best ask @ print arrival time
    sfixed64 src_timestamp = 157; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 160; // inbound print packet PTP timestamp from SR gateway switch
    google.protobuf.Timestamp timestamp = 163;
}


    
message FuturePrintProbability {
    message PKey {
        
        ExpiryKey fkey = 10;
        StateModel state_model = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double prt_price = 100;
    sfixed32 prt_size = 103;
    float prt_prob = 106; // probability that this print will result in positive PnL
    BuySell prt_side = 109;
    double bid_price = 112; // nbbo bid price
    double ask_price = 115; // nbbo ask price
    sfixed32 bid_size = 118; // cumulative size @ bid price
    sfixed32 ask_size = 121; // cumulative size @ ask price
    float avg_bLink1m = 124; // average buy link value (trailing 10)
    float mae_bLink1m = 127; // buy link value mean abs err (trailing 1000)
    float avg_sLink1m = 130; // average sell link value (trailing 10)
    float mae_sLink1m = 133; // sell link value mean abs err (trailing 1000)
    float avg_bLink10m = 136; // average buy link value (trailing 100)
    float mae_bLink10m = 139; // bid link value mean abs err (trailing 1000)
    float avg_sLink10m = 142; // average ask link value (trailing 100)
    float mae_sLink10m = 145; // ask link value mean abs err (trailing 1000)
    sfixed32 b_counter = 148; // buy counter
    sfixed32 s_counter = 151; // sell counter
    sfixed64 prt_timestamp = 154; // feed timestamp from the packet
    sfixed64 net_timestamp = 157; // inbound packet PTP timestamp from SR gateway switch (from FuturePrint)
    sfixed64 sms_timestamp = 160; // state model server timestamp (just before publish)
}


/*
    FuturePrintSet records are created for all future prints (outrights and spreads) and published to the SpiderRock elastic cluster when markup detail is complete (F+10M)
*/    
message FuturePrintSet {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 prt_number = 100; // Unique print set identifier; will increment but not guaranteed to be sequential.
    TickerKey ticker = 103; // underlying stock key
    FutExch prt_exch = 106; // print exchange
    sfixed32 prt_size = 109; // print size [contracts]
    double prt_price = 112; // print price
    int32 prt_type = 115; // print type [exchange specific]
    uint32 prt_orders = 118; // number of orders participating in this print
    sfixed32 prt_cluster_num = 121; // incremental print cluster counter (one counter per fkey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 124; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 127; // cumulative day (electronic) print volume in contracts
    PrtSide prt_side = 130; // Print side: None; Mid; Bid; Ask
    sfixed64 prt_timestamp = 133; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 136; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 139;
    double bid_price = 142; // exch best bid @ print arrival time
    double ask_price = 145; // exch best ask @ print arrival time
    sfixed32 bid_size = 148; // bid size @ print arrival time
    sfixed32 ask_size = 151; // ask size @ print arrival time
    double bid_price2 = 154; // exch 2nd best bid @ print arrival time
    double ask_price2 = 157; // exch 2nd best ask @ print arrival time
    sfixed32 bid_size2 = 160; // 2nd best bid @ print arrival time
    sfixed32 ask_size2 = 163; // 2nd best ask @ print arrival time
    float prt_probability = 166; // [M1] probability that buying prtQuan contracts @ prtPrice will have positive m1 pnl (prtPriceM1 >= prtPrice) [recorded at time of print]
    float prt_probability_m2 = 169; // alternate probability model
    float prt_probability_m3 = 172; // alternate probability model
    double bid_price_m1 = 175; // bid price +1 minute
    double ask_price_m1 = 178; // ask price +1 minute
    double prt_price_m1 = 181; // market price +1 minute [mid-quote if not intervening prints;most recent print otherwise]
    float pnl_m1 = 184; // pnl after 1 minute
    YesNo pnl_m1_err = 187;
    double bid_price_m10 = 190; // bid price +10 minutes
    double ask_price_m10 = 193; // bid price +10 minutes
    double prt_price_m10 = 196; // market price +10 minutes [most recent print (if any) otherwise mid-quote]
    float pnl_m10 = 199; // pnl after 10 minutes
    YesNo pnl_m10_err = 202;
}


/*
    FuturePrintSet records are created for all future prints (outrights and spreads) and archived when markup detail is complete (F+10M)
*/    
message FuturePrintSetHist {
    message PKey {
        
        ExpiryKey fkey = 10;
        google.protobuf.Timestamp timestamp = 13;
        sfixed64 prt_number = 16; // Unique print set identifier, will increment but not guaranteed to be sequential
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlying stock key
    TradingSession trading_session = 103;
    DateKey trading_date = 106;
    FutExch prt_exch = 109; // print exchange
    sfixed32 prt_size = 112; // print size [contracts]
    double prt_price = 115; // print price
    int32 prt_type = 118; // print type [exchange specific]
    uint32 prt_orders = 121; // number of orders participating in this print
    sfixed32 prt_cluster_num = 124; // incremental print cluster counter (one counter per fkey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 127; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 130; // cumulative day (electronic) print volume in contracts
    PrtSide prt_side = 133; // Print side: None; Mid; Bid; Ask
    sfixed64 prt_timestamp = 136; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 139; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    double bid_price = 142; // exch best bid @ print arrival time
    double ask_price = 145; // exch best ask @ print arrival time
    sfixed32 bid_size = 148; // bid size @ print arrival time
    sfixed32 ask_size = 151; // ask size @ print arrival time
    double bid_price2 = 154; // exch 2nd best bid @ print arrival time
    double ask_price2 = 157; // exch 2nd best ask @ print arrival time
    sfixed32 bid_size2 = 160; // 2nd best bid @ print arrival time
    sfixed32 ask_size2 = 163; // 2nd best ask @ print arrival time
    float prt_probability = 166; // [M1] probability that buying prtQuan contracts @ prtPrice will have positive m1 pnl (prtPriceM1 >= prtPrice) [recorded at time of print]
    float prt_probability_m2 = 169; // alternate probability model
    float prt_probability_m3 = 172; // alternate probability model
    double bid_price_m1 = 175; // bid price +1 minute
    double ask_price_m1 = 178; // ask price +1 minute
    double prt_price_m1 = 181; // market price +1 minute [mid-quote if not intervening prints;most recent print otherwise]
    float pnl_m1 = 184; // pnl after 1 minute
    YesNo pnl_m1_err = 187;
    double bid_price_m10 = 190; // bid price +10 minutes
    double ask_price_m10 = 193; // bid price +10 minutes
    double prt_price_m10 = 196; // market price +10 minutes [most recent print (if any) otherwise mid-quote]
    float pnl_m10 = 199; // pnl after 10 minutes
    YesNo pnl_m10_err = 202;
}


    
message FutureQuoteProbability {
    message PKey {
        
        ExpiryKey fkey = 10;
        StateModel state_model = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double bid_price = 100; // best bid price
    double ask_price = 103; // best ask price
    sfixed32 bid_size = 106; // cumulative size @ bid price
    sfixed32 ask_size = 109; // cumulative size @ ask price
    float bid_take_prob = 112; // bid take probability of current nbbo market (zero exchange fee) [average size print]
    float ask_take_prob = 115; // ask take probability of current nbbo market (zero exchange fee) [average size print]
    PredictResult bid_take_rv = 118; // model result code
    PredictResult ask_take_rv = 121; // model result code
    float bid_impr_price = 124; // trial improvement price (usually 1 tick or 1/2 spread inside bidPrice)
    float ask_impr_price = 127; // trial improvement price (usually 1 tick or 1/2 spread inside askPrice)
    float bid_tk_im_prob = 130; // bid take imprv probability of current nbbo market (zero exchange fee) [prob to sell (take) @ bid + imprIncrement]
    float ask_tk_im_prob = 133; // ask take imprv probability of current nbbo market (zero exchange fee) [prob to buy (take) @ ask - imprIncrement]
    PredictResult bid_tk_im_rv = 136; // model result code
    PredictResult ask_tk_im_rv = 139; // model result code
    double mid_price = 142; // price corresponding to 0.50 probability
    float avg_bid_link1m = 145; // average bid link value (~1 min)
    float mae_bid_link1m = 148; // bid link value mean abs err (~10 min)
    float avg_ask_link1m = 151; // average ask link value (~1 min)
    float mae_ask_link1m = 154; // ask link value mean abs err (~1 min)
    float avg_bid_link10m = 157; // average bid link value (~10 min)
    float mae_bid_link10m = 160; // bid link value mean abs err (~10 min)
    float avg_ask_link10m = 163; // average ask link value (~10 min)
    float mae_ask_link10m = 166; // ask link value mean abs err (~10 min)
    float avg_mkt_width1m = 169; // askPrice - bidPrice (~1 min)
    float avg_mkt_width10m = 172; // askPrice - bidPrice (~10 min)
    sfixed32 counter = 175; // record update counter (zero @ start of period;per fkey)
    QPSource qp_source = 178;
    sfixed64 src_timestamp = 181; // feed timestamp from the packet
    sfixed64 net_timestamp = 184; // inbound packet PTP timestamp from SR gateway switch (from FutureBookQuote);zero = size only change
    sfixed64 sms_timestamp = 187; // state model server timestamp (just before publish)
}


    
message FutureQuoteSummary {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    MarketStatus market_status = 100; // market status (open, halted, etc)
    double exch_session_high = 103;
    double exch_session_low = 106;
    double exch_open = 109;
    double exch_high_bid = 112;
    double exch_low_ask = 115;
    sfixed32 open_int = 118;
    google.protobuf.Timestamp timestamp = 121;
}


    
message FutureRealizedVarianceHist {
    message PKey {
        
        ExpiryKey fkey = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double prt_open = 100; // Print at open of period (Bar)
    double prt_high = 103; // High price during period (Bar)
    double prt_low = 106; // Low price during period (Bar)
    double prt_last = 109; // Print at close of period (Bar)
    double prt_vWap = 112; // Period (Bar) VWap
    sfixed32 prt_volume = 115; // Period (Bar) number of contracts
    sfixed32 prt_count = 118; // Number of prints during the period
    double qte_hi_bid = 121; // Quote bid high
    double qte_lo_ask = 124; // Quote ask low
    google.protobuf.Timestamp timestamp = 127; // same as date + time
}


/*
    FutureRiskDetail records contain semi-static markup detail for FutureRiskSummary records.
*/    
message FutureRiskDetailV5 {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp period_end_time = 100; // DTTM of the end of the current trading period
    string client_firm = 103; // ClientFirm acronym (SR assigned) [AccountConfig.clientFirm]
    string view_group1 = 106; // Account Group #1 (SR Assigned) used to organize account groups [AccountConfig.viewGroup1]
    string view_group2 = 109; // Account Group #2 (SR Assigned) used to organize account groups [AccountConfig.viewGroup2]
    string view_group3 = 112; // Account Group #3 (SR Assigned) used to organize account groups [AccountConfig.viewGroup3]
    FutStatus fut_status = 115;
    OptStatus opt_status = 118;
    string risk_class = 121; // Symbol Risk Class Code (user supplied) [SymbolControl.riskClass]
    string theo_model = 124; // SR assigned theo model tag (associated with user supplied theo surfaces) [AccountConfig.theoModel]
    string theo_model2 = 127; // SR assigned theo model#2 tag (associated with user supplied theo surfaces) [AccountConfig.theoModel2]
    HedgeDeltaRule hedge_delta_rule = 130; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (sticky delta), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface and atm veSlope (sticky delta)) [AccountConfig.hedgeDelta]
    HoldReason hold_reason = 133; // User supplied description (only informational) [SymbolControl.holdReason]
    float binary_days = 136; // Fractional days [0 - 5.0] prior to expiration after which hedgeDeltas become binary [-1.0, -0.5, 0, +0.5, +1.0] [SymbolControl.binaryDays]
    google.protobuf.Timestamp ctrl_update = 139; // last update dttm of SymbolControl record [SymbolControl.timestamp]
    SymbolType symbol_type = 142; // SymbolType (Equity, ETF, ShortETF, ADR, CashIndex, FutureComplex)
    string name = 145; // Symbol name/description
    float beta = 148; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 151;
    float fut_volume = 154; // trailing 30 day average daily stock volume
    float opt_volume = 157; // trailing 30 day average daily option volume
    MarginType margin_type = 160; // margin slide type: NMS_Equity = +/- 15%, NMS_Index = -8%/+6%, NMS_Medium = +/-10%
    YesNo is_yield_based = 163; // is the symbol a yield based future;can affect greeks and pricing (eg, eurodollars)
    float short_term_vol = 166; // estimated/implied short term underlier volatility
    float point_value = 169; // point value of this future
    Currency point_currency = 172;
    sfixed32 underliers_per_cn = 175; // underliers per contract of the futures associated with this symbol (if any) [default = 1]
    UnderlierType underlier_type = 178;
    google.protobuf.Timestamp timestamp = 181;
}


/*
    FutureRiskSummary records contain live future level risk aggregation of OptionPositionRecord and FuturePositionRecord details.
    Records are published if/when positions change and about once per minute otherwise.
*/    
message FutureRiskSummaryV5 {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR client firm
    string risk_server_code = 103;
    TickerKey ticker = 106; // Ticker that this future is associated with
    double u_prc = 109; // current live underlier price (can be from risk server, tool server, or srse server)
    double u_mark = 112; // current underlier price [as of risk server record publish] [freezes at 4pm EST]
    double u_opn_mark = 115; // start-of-day SR underlier mark (rotated from prior day record)
    float beta = 118; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 121;
    double ln_dDelta = 124; // long net position delta value (today; SR marks )
    double sh_dDelta = 127; // short net position delta value (today; SR marks )
    double fut_mkt_value_mid = 130; // future position market value (today; SR mid marks)
    double opt_mkt_value_mid = 133; // option position market value (SR mid marks); =sum[opCurPosM * opr.optVolMark]
    double opt_mkt_value_vol = 136; // option position market value (SR vol marks); =sum[opCurPosM * opr.optMidMark]
    sfixed32 fc_abs_cur_pos = 139; // abs number of future contracts (position + fills);=sum[abs(fpr.cnCurPos)]
    sfixed32 fc_abs_opn_clr = 142; // abs number of start of period future contracts (CLR view);=sum[abs(fpr.cnOpnClr)]
    sfixed32 fc_abs_opn_prv = 145; // abs number of start of period future contracts (SR view);=sum[abs(fpr.cnOpnPrv)]
    sfixed32 fc_abs_opn_pos = 148; // abs number of start of period future contracts (effective);=sum[abs(fpr.cnOpnPos)]
    sfixed32 fc_abs_opn_brk = 151; // abs number of future contract start of period breaks (CLR - PRV);=sum[abs(fpr.cnOpnClr - fpr.cnOpnPrv)]
    sfixed32 fc_net_cur_pos = 154; // net future contract position;=sum[fpr.cnOpnClr + fpr.cnBot - fpr.cnSld]
    sfixed32 fc_bot = 157; // number of futures contracts bot today;=sum(frr.cnBot)
    sfixed32 fc_sld = 160; // number of futures contracts sld today;=sum(frr.cnSld)
    sfixed32 fc_bot_hdg = 163; // number of contracts bot today from hedging (spdrSource=HedgeTool)
    sfixed32 fc_sld_hdg = 166; // number of contracts sld today from hedging (spdrSource=HedgeTool)
    sfixed32 fc_bot_trh = 169; // number of contracts bot today from hedging (spdrSource=TradeHedge)
    sfixed32 fc_sld_trh = 172; // number of contracts sld today from hedging (spdrSource=TradeHedge)
    sfixed32 fc_bot_opn = 175; // number of contracts bot today from hedging (spdrSource=OpenHedge)
    sfixed32 fc_sld_opn = 178; // number of contracts sld today from hedging (spdrSource=OpenHedge)
    sfixed32 fc_bot_trd = 181; // number of contracts bot today from a trade hedging source (AutoHedge or Trades loop)
    sfixed32 fc_sld_trd = 184; // number of contracts sld today from a trade hedging source (AutoHedge or Trades loop)
    double fc_mny_bot = 187; // futures money bot today
    double fc_mny_sld = 190; // futures money sld today
    google.protobuf.Timestamp max_fut_dttm = 193; // DateTime of most recent SpdrFuturenExecution (if any)
    float fc_pnl_mid = 196; // Futures Open Pnl (SR marks); =sum[fpr.cnOpnClr * fpr.unitsPerCn * (fpr.futMark - fpr.futOpnMidMark]
    float fc_pnl_clr = 199; // Futures Open Pnl (CLR marks); =sum[fpr.cnOpnClr * fpr.unitsPerCn * (fpr.futMark - fpr.futOpnClrMark]
    float fc_pnl_day = 202; // Futures Day Pnl;=sum(fpr.dayPnl)
    sfixed32 op_cn_abs_cur_pos = 205; // abs number of option contracts (position + fills);=sum[abs(opr.cnCurPos)]
    sfixed32 op_cn_abs_opn_clr = 208; // abs number of start of period option contracts (CLR view); =sum[abs(opr.cnOpnClr)]
    sfixed32 op_cn_abs_opn_prv = 211; // abs number of start of period option contracts (SR view); =sum[abs(opr.cnOpnPrv)]
    sfixed32 op_cn_abs_opn_pos = 214; // abs number of start of period option contracts; =sum[abs(opr.cnOpnPos)]
    sfixed32 op_cn_abs_opn_brk = 217; // abs number of option contract start of period breaks (CLR - PRV);=sum[abs(opr.cnOpnClr - opr.cnOpnPrv)]
    sfixed32 op_cn_pos_call = 220; // net number of call contracts;=sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if call)
    sfixed32 op_cn_pos_put = 223; // net number of call contracts;=sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if put)
    sfixed32 op_cn_abs_pair = 226; // abs number of option contracts with CP reversals removed; =sum[abs(opr.cnOpnClr + opr.cnBot - opr.cnSld) - abs(opr.cnNetPos)]
    float op_cn_abs_atm_equiv = 229; // abs atm equivalent contracts; = sum[abs(opr.cnOpnPos + opr.cnBot - opr.cnSld) * opr.ve / opr.atmVega]
    sfixed32 op_cn_bot = 232; // number of option contracts bot today;=sum[opr.cnBot]
    sfixed32 op_cn_sld = 235; // number of option contracts sld today;=sum[opr.cnSld]
    double op_mny_bot = 238; // option money bot
    double op_mny_sld = 241; // option money sld
    float op_prem_bot = 244; // option premium bot today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnBot]
    float op_prem_sld = 247; // option premium sld today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnSld]
    google.protobuf.Timestamp max_opt_dttm = 250; // DateTime of most recent SpdrOptionExecution (if any)
    double op_pnl_vol = 253; // Option Open Pnl (SR vol marks); =sum[opr.opnPnlVolMark]
    double op_pnl_mid = 256; // Option Open Pnl (SR mid marks); =sum[opr.opnPnlMidMark]
    double op_pnl_clr = 259; // Option Open Pnl (CLR marks); =sum[opr.opnPnlClrMark]
    float op_pnl_brk = 262; // Option Mark Break (catch-up) Pnl (SR vol marks to CLR marks);=sum[(opr.cnOpnClr * opr.pointValue) * (opr.optVolMark - opr.optClrMark)]
    float op_pnl_day = 265; // Option Day Pnl;=sum[opr.dayPnl]
    float op_dn_pnl_day = 268; // Option DN Day Pnl (delta neutral);=sum[opr.dnDayPnl]
    float op_day_vega = 271; // option vega traded today
    float op_day_wVega = 274; // option (vol weighted) vega traded today
    float op_day_tVega = 277; // option (time weighted) vega traded today
    float op_day_wt_vega = 280; // option (vol time weighted) vega traded today
    float op_day_theta = 283; // Option Day Theta;=sum[opr.th * ((opr.cnBot - opr.cnSld) * opr.pointValue)]
    float op_day_delta = 286; // Option Day Delta;=sum[opr.de * ((opr.cnBot - opr.cnSld) * opr.underliersPerCn)]
    float op_trd_delta = 289; // Option Trade Delta (delta fixed at time of trade);=sum[opr.trdDelta]
    float opn_delta = 292;
    float cont_hedge_pnl = 295; // Estimated continuous hedging pnl (open positions only) [~1 minute intervals]
    float cont_hedge_pnl1 = 298; // Estimated continuous hedging pnl (open positions only) [~10 minute intervals]
    float op_edge_opened = 301; // Option Edge Opened (new risk);=sum[opr.edgeOpened]
    float op_edge_closed = 304; // Option Edge Closed (new risk);=sum[opr.edgeClosed]
    float pnl_dn = 307; // Option Pnl Attr: delta neutral pnl: =sum[volPnl - shClrM * dUPrc * opr.dePr]
    float pnl_de = 310; // Option Pnl Attr: delta pnl;=sum[shClrM * dUPrc * opr.dePr]
    float pnl_sl = 313; // Option Pnl Attr: slope pnl;=sum[shClrM * dUPrc * opr.vePr * opr.slPr]
    float pnl_ga = 316; // Option Pnl Attr: gamma pnl;=sum[shClrM * 0.5 * dUPrc * dUPrc * (opr.ga + opr.gaPr)/2]
    float pnl_th = 319; // Option Pnl Attr: theta pnl;=sum[shClrM * dTime * -opr.thPr]
    float pnl_ve = 322; // Option Pnl Attr: vega pnl;=sum[shClrM * 100 * dVol * opr.vePr]
    float pnl_vo = 325; // Option Pnl Attr: volga pnl;=sum[shClrM * 0.5 * 100 * 100 * dVol * dVol * opr.voPr]
    float pnl_va = 328; // Option Pnl Attr: vanna pnl;=sum[shClrM * 100 * dVol * dUPrc * opr.vaPr]
    float pnl_err = 331; // Option Pnl Attr: error (unexplained) pnl;=sum[shClrM * (volPnl - pnlDe - pnlGa - pnlTh - pnlVe)]
    float pnl_rate = 334; // Option Pnl Attr: rate pnl;=sum[shClrM * 100 * dRate * opr.rhPr]
    float pnl_sDiv = 337; // Option Pnl Attr: sdiv pnl;=sum[shClrM * 100 * dSDiv * opr.phPr]
    float pnl_dDiv = 340; // Option Pnl Attr: ddiv pnl;=sum[shClrM * 100 * (opr.ddiv - opr.ddivPr) / opr.uPrc * opr.phPr]
    float pnl_te = 343; // Option Pnl Attr: theo edge pnl;=sum[shClrM * ((opr.tOpx - opr.optVolMark) - (opr.tOpxPr - opr.optOpnVolMark))]
    float pct_iv_change = 346; // Option Avg IVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.iVol/opr.iVolPr)]
    float pct_iv_vega = 349; // Option Avg IVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    float pct_tv_change = 352; // Option Avg TVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.tVol/opr.tVolPr)]
    float pct_tv_vega = 355; // Option Avg TVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    float fut_width_mny = 358; // Future Market Width Value;=sum[0.5 * abs(fcCurPosM) * (fpr.futAsk - fpr.futBid)]
    float opt_width_mny = 361; // Option Market Width Value;=sum[0.5 * abs(shCurPosM) * (opr.optAsk - opr.optBid)]
    float day_dDelta = 364; // Day $Delta (bot or sld;all sources) today;
    float delta = 367; // Aggregate Position Delta;=sum[shCurPos] + sum[fcCurPosM] + sum[shCurPosM * opr.de] + sum[other.delta]
    float ddelta = 370; // Aggregate Position $Delta (Delta * DDMult)
    float de_decay = 373; // Aggregate Position DeltaDecay;=sum[shCurPosM * opr.deDecay] + sum[other.deDecay]
    float dd_decay = 376; // Aggregate Position $DeltaDecay (DeltaDecay * DDMult) [change in $delta when one trading day (1.0/252.0) is taken out of option pricing]
    float gamma = 379; // Aggregate Position Gamma;=sum[shCurPosM * opr.ga] + sum[other.gamma]
    float d_gamma = 382; // Aggregate Position $Gamma
    float theta = 385; // Aggregate Position Theta;=sum[shCurPosM * opr.th] + sum[other.theta]
    float rho = 388; // Aggregate Position Rho;=sum[shCurPosM * opr.rh] + sum[other.rho]
    float vega = 391; // Aggregate Position Vega;=sum[shCurPosM * opr.ve] + sum[other.vega]
    float t_vega = 394; // Aggregate Position Time Weight Vega;=sum[shCurPosM * opr.ve / sqrt(max(0.1, opr.years * 4))]
    float w_vega = 397; // Aggregate Position Vol Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve]
    float wt_vega = 400; // Aggregate Position Vol Time Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve / sqrt(max(0.1, opr.years * 4))]
    float ivol_ve = 403; // Aggregate Position Avg Vol Numerator (vega weighted) (avg = ivolVe / avega);=sum[abs(shCurPosM) * opr.iVol * opr.ve]
    float volga = 406; // Aggregate Position Volga;=sum[shCurPosM * opr.vo] + sum[other.volga]
    float vanna = 409; // Aggregate Position Vanna;=sum[shCurPosM * opr.va] + sum[other.vanna]
    float slope = 412; // Aggregate Position VegaDelta (uPrc/Vol correlation factor);=sum[shCurPosM * opr.sl * opr.ve] + sum[other.slope]
    float avega = 415; // Aggregate Postion Abs Vega;=sum[abs(shCurPosM ) * opr.ve]
    float atheta = 418; // Aggregate Postion Abs Theta;= sum[abs(shCurPosM) * opr.th]
    float hedge_gamma = 421; // Aggregate Postion Hedge Gamma (either iVol or tVol based;can go binary);=sum[shCurPos * opr.hedgeGa]
    float hedge_dGamma = 424; // Aggregate Postion Hedge $Gamma
    float prem_ov_par = 427; // Aggregate Position Premium Over Parity;=sum[shCurPosM *  max(0, opr.optVolMark - opr.loBound)]
    float wt_ve_dd = 430; // Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde < -0.30
    float wt_ve_dn = 433; // Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 <= opr.xde < -0.10
    float wt_ve_at = 436; // Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) <= 0.10
    float wt_ve_up = 439; // Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 < opr.xde <= +0.30
    float wt_ve_du = 442; // Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 < opr.xde
    float wt_ve_m1 = 445; // Aggregate M1 Time Weighted Vega; =sum[wtVega] if days < 10
    float wt_ve_m2 = 448; // Aggregate M2 Time Weighted Vega; =sum[wtVega] if 10 < days < 25
    float wt_ve_m3 = 451; // Aggregate M3 Time Weighted Vega; =sum[wtVega] if 25 < days < 65
    float wt_ve_m4 = 454; // Aggregate M4 Time Weighted Vega; =sum[wtVega] if 65 < days < 130
    float wt_ve_m5 = 457; // Aggregate M5 Time Weighted Vega; =sum[wtVega] if 130 < days
    float pin_xX = 460; // Pin Strike nearest to current uPrc (zero = none) (only exists near expirations)
    float opn_de_below = 463; // Aggregate Position Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc < pinXX
    float opn_de_above = 466; // Aggregate Position Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc > pinXX
    float opn_dDe_below = 469; // Aggregate Position ($) Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc < pinXX
    float opn_dDe_above = 472; // Aggregate Position ($) Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc > pinXX
    float pos_de_below = 475; // Aggregate Position Hedge Delta (Current Position) if liveUPrc < pinXX
    float pos_de_above = 478; // Aggregate Position Hedge Delta (Current Position) if liveUPrc > pinXX
    float pos_dDe_below = 481; // Aggregate Position Hedge Delta (Current Position) if liveUPrc < pinXX
    float pos_dDe_above = 484; // Aggregate Position Hedge Delta (Current Position) if liveUPrc > pinXX
    float pos_hedge_delta_ex = 487; // Aggregate Position Hedge Delta (Current Position) if exDate != today
    float pos_hedge_dDelta_ex = 490; // Aggregate Position ($) Hedge Delta (Current Position) if exDate != today
    float t_edge = 493; // Aggregate $ Theo Edge;=sum[shNetPosM * (opr.tOpx - opr.optVolMark)] if opr.tVol > 0.01 and opr.tOpx > 0.0 and opr.optVolMark > 0.0
    float t_edge_mult = 496; // Aggregate Abs Net Contracts (Rev/Conv contracts removed);= sum[abs(shNetPosM)]
    float t_edge_pr = 499; // Prior Day $ Theo Edge
    float t_edge_mult_pr = 502; // Prior Day Aggregate Abs Net Contracts
    int32 num_tVol_errors = 505; // number of opr.tErr != 0 or opr.tVol < 0.01
    float pair_pnl = 508; // Aggregate Dn Pair Pnl;=sum[shNetClrM * (opr.optVolMark - opr.optOpnVolMark - opr.hedgeDePr * (opr.uMark - opr.uOpnMark))]
    float pos_tEdge_wV = 511; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) >= 0)
    float neg_tEdge_wV = 514; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) < 0)
    float bad_tEdge_wV = 517; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx = 0)
    float pos_tEdge_pnl = 520; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) >= 0)
    float neg_tEdge_pnl = 523; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) < 0)
    float bad_tEdge_pnl = 526; // Aggregate Dn Pair Pnl where (opr.tOpxPr = 0)
    float span01 = 529; // span1: uPrc=unch, vol=up
    float span02 = 532; // span2: uPrc=unch, vol=down
    float span03 = 535; // span3: uPrc=+33.33%, vol=up
    float span04 = 538; // span4: uPrc=+33.33%, vol=dn
    float span05 = 541; // span5: uPrc=-33.33%, vol=up
    float span06 = 544; // span6: uPrc=-33.33%, vol=down
    float span07 = 547; // span7: uPrc=+66.67%, vol=up
    float span08 = 550; // span8: uPrc=+66.67%, vol=down
    float span09 = 553; // span9: uPrc=-66.67%, vol=up
    float span10 = 556; // span10: uPrc=-66.67%, vol=down
    float span11 = 559; // span11: uPrc=+100%, vol=up
    float span12 = 562; // span12: uPrc=+100%, vol=down
    float span13 = 565; // span13: uPrc=-100%, vol=up
    float span14 = 568; // span14: uPrc=-100%, vol=down
    float span15 = 571; // span15: uPrc=+300%; price slide * 0.33
    float span16 = 574; // span16: uPrc=-300%, price slide * 0.33
    float fut_liq_risk = 577; // Aggregate Future Liquidation Risk
    float opt_liq_risk = 580; // Aggregate Option Liquidation Risk
    sfixed32 fc_bot_c0 = 583; // hypothetical future contracts bot (~ 1 minute intervals)
    sfixed32 fc_sld_c0 = 586; // hypothetical future contracts sld
    float fc_mny_c0 = 589; // hypothetical money
    sfixed32 fc_bot_c1 = 592; // hypothetical future contracts bot (~ 10 minute intervals)
    sfixed32 fc_sld_c1 = 595; // hypothetical future contracts sld
    float fc_mny_c1 = 598; // hypothetical money
    float fut_margin = 601; // Aggregate Future Risk Margin
    int32 num_fut_errors = 604; // number of futures positions with a computation error (should be zero)
    int32 num_opt_errors = 607; // number of options positions with a computation error (should be zero)
    R5Source update_source = 610;
    MktErrFlag fut_mark_flag = 613; // Future position error flag
    MktErrFlag opt_mark_flag = 616; // Option position error flag
    google.protobuf.Timestamp timestamp = 619;
}


/*
    Future settlement marks from the listing exchange
*/    
message FutureSettlementMark {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey settle_date = 100;
    double settle_px = 103; // Exchange settlement price
    double low_lmt_px = 106; // Exchange low limit price
    double high_lmt_px = 109; // Exchange high limit price
    sfixed32 open_int = 112; // Exchange open interest (date prior to settle date)
    sfixed32 volume = 115; // Exchange volume (date prior to settle date)
    YesNo early = 118;
    google.protobuf.Timestamp timestamp = 121;
}


    
message FutureTradingCalendarHist {
    message PKey {
        
        DateKey trading_date = 10;
        TickerKey ticker = 13; // eg. FUT-CME-@ES, FUT-NYMEX-@CL, etc.
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    MarketDayType market_day_type = 100;
    sfixed32 cardinal365 = 103;
    sfixed32 cardinall252 = 106;
    float cardinal_minute = 109;
    google.protobuf.Timestamp timestamp = 112;
}


    
message GlobalClock {
    message PKey {
        
        int32 clock = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp date_time = 100; // current DateTime value (from publishing server clock)
}


/*
    Records in this table override/merge with SRVendorDividends records; the results of the override/merge and published in the GlobalDividends table.
    Note: Missing/empty DateAmt strings are interpreted as non-dividend paying
*/    
message GlobalDividendOverride {
    message PKey {
        
        TickerKey ticker = 10;
        int32 priority = 13;
    }

    message DateAmt {
        
        DateKey div_date = 112; // ex-dividend date
        float div_value = 115; // dividend amount
        string div_currency = 118;
        DivKind div_kind = 121; // dividend type
        DivSource div_source = 124; // dividend source
        DivFreq div_freq = 127;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    string text = 103; // user detail (if any)
    MergeType merge_type = 106;
    repeated DateAmt date_amt = 109;
}


/*
    GlobalDividend records contain projected future discrete dividend payment dates and amounts for dividend paying equities.  These records are the dividend values that are incorporated into option pricing calculations.
    Note: Missing/empty DateAmt strings are interpreted as non-dividend paying
*/    
message GlobalDividends {
    message PKey {
        
        TickerKey ticker = 10;
    }

    message DateAmt {
        
        DateKey div_date = 112; // ex-dividend date
        float div_value = 115; // dividend amount
        string div_currency = 118;
        DivKind div_kind = 121; // dividend type
        DivSource div_source = 124; // dividend source
        DivFreq div_freq = 127;
        DivOverrideSource div_override_source = 130; // dividend override source if any
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100; // publish time (GlobalDividend.timestamp = SRPricingCalcRecord.timestamp @ publish)
    google.protobuf.Timestamp last_modified = 103; // last dividend data modify timestamp
    string text = 106; // extra text (if any)
    repeated DateAmt date_amt = 109;
}


    
message GlobalRateHist {
    message PKey {
        
        DateKey trading_date = 10;
        string currency = 13;
        RateSource rate_source = 16;
    }

    message Curve {
        
        sfixed32 days = 106; // interest rate days (usually 365 per year)
        float rate = 109;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    repeated Curve curve = 103;
}


    
message GlobalRates {
    message PKey {
        
        RateSource rate_source = 10;
    }

    message Curve {
        
        sfixed32 days = 106; // calendar days to expiration (actual/365 days per year)
        float rate = 109;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    repeated Curve curve = 103;
}


    
message HistoricalEarningsData {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp earning_date = 13; // 12 trailing + 4 future
    }

    message Earnings {
        
        string event_time = 106;
        float stk_prc = 109; // closing pricing
        float stk_prc_prv = 112; // prior period closing price (corp action adjusted)
        float stk_prc_hi = 115; // day high price
        float stk_prc_lo = 118; // day low price
        float earn_pct_move = 121;
        google.protobuf.Timestamp move_date = 124;
        float h_eMove = 127;
        float i_eMove = 130;
        EarnStatus earn_status = 133;
        GuidanceIssued guidance_issued = 136;
        earnChange earn_change = 139;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp ts = 100; // last update time (Date)
    repeated Earnings earnings = 103;
}


/*
    Values in this table are computed daily and are calculated from end-of-day marks from the previous period.  Official exchange closing values are used where possible.
    HistoricalVolatility records are published to the SpiderRock elastic cluster nightly.
*/    
message HistoricalVolatilities {
    message PKey {
        
        TickerKey ticker = 10;
        string window_type = 13; // eg. cc, ccCen, ccClCen, hl, hlCen, iv63, iv126, etc
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100; // most recent closing date
    sfixed32 security_iD = 103;
    float value = 106; // most recent historical value
    float mv_5d = 109; // historical mean value (5 day window)
    float sd_5d = 112; // historical std dev (5 day window)
    float mv_10d = 115;
    float sd_10d = 118;
    float mv_21d = 121;
    float sd_21d = 124;
    float mv_42d = 127;
    float sd_42d = 130;
    float mv_63d = 133;
    float sd_63d = 136;
    float mv_84d = 139;
    float sd_84d = 142;
    float mv_105d = 145;
    float sd_105d = 148;
    float mv_126d = 151;
    float sd_126d = 154;
    float mv_189d = 157;
    float sd_189d = 160;
    float mv_252d = 163;
    float sd_252d = 166;
    float mv_378d = 169;
    float sd_378d = 172;
    float mv_504d = 175;
    float sd_504d = 178;
    google.protobuf.Timestamp timestamp = 181; // record update timestamp
}


/*
    Values in this table are computed daily and are calculated from end-of-day marks from the previous period.  Official exchange closing values are used where possible.
    HistoricalVolatility records are published to the SpiderRock elastic cluster nightly.
*/    
message HistoricalVolatilities_Extern {
    message PKey {
        
        TickerKey ticker = 10; // current (today) tickers
        string window_type = 13; // eg. cc, ccCen, ccClCen, hl, hlCen, iv63, iv126, betaSPY, betaQQQ, betaIWM, etc
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100; // most recent closing date
    float value = 103; // most recent historical value
    float mv_5d = 106; // historical mean value (5 day window)
    float sd_5d = 109; // historical std dev (5 day window)
    float mv_10d = 112;
    float sd_10d = 115;
    float mv_21d = 118;
    float sd_21d = 121;
    float mv_42d = 124;
    float sd_42d = 127;
    float mv_63d = 130;
    float sd_63d = 133;
    float mv_84d = 136;
    float sd_84d = 139;
    float mv_105d = 142;
    float sd_105d = 145;
    float mv_126d = 148;
    float sd_126d = 151;
    float mv_189d = 154;
    float sd_189d = 157;
    float mv_252d = 160;
    float sd_252d = 163;
    float mv_378d = 166;
    float sd_378d = 169;
    float mv_504d = 172;
    float sd_504d = 175;
    google.protobuf.Timestamp timestamp = 178; // record update timestamp
}


    
message HolidayCalendar {
    message PKey {
        
        CalendarCode calendar_code = 10;
    }

    message Holiday {
        
        DateKey date = 106;
        float days = 109; // fraction of a volatility day (full holidays = 0.0, full trading day = 1.0)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    repeated Holiday holiday = 103;
}


    
message IVarSwapFixedTermHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    float i_var_swap_5d = 103; // Interpolated 5 day integrated surface variance
    float i_var_swap_10d = 106; // Interpolated 10 day integrated surface variance
    float i_var_swap_21d = 109; // Interpolated 21 day integrated surface variance
    float i_var_swap_42d = 112; // Interpolated 42 day integrated surface variance
    float i_var_swap_63d = 115; // Interpolated 63 day integrated surface variance
    float i_var_swap_84d = 118; // Interpolated 84 day integrated surface variance
    float i_var_swap_105d = 121; // Interpolated 105 day integrated surface variance
    float i_var_swap_126d = 124; // Interpolated 126 day integrated surface variance
    float i_var_swap_189d = 127; // Interpolated 189 day integrated surface variance
    float i_var_swap_252d = 130; // Interpolated 252 day integrated surface variance
    float i_var_swap_378d = 133; // Interpolated 378 day integrated surface variance
    float i_var_swap_504d = 136; // Interpolated 504 day integrated surface variance
    google.protobuf.Timestamp timestamp = 139; // update timestamp
}


    
message IVarSwapFixedTermIntradayHist {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp date = 13; // end of minute bar
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    DateKey trading_date = 103;
    TradingSession trading_session = 106;
    float i_var_swap_5d = 109; // Interpolated 5 day integrated surface variance
    float i_var_swap_10d = 112; // Interpolated 10 day integrated surface variance
    float i_var_swap_21d = 115; // Interpolated 21 day integrated surface variance
    float i_var_swap_42d = 118; // Interpolated 42 day integrated surface variance
    float i_var_swap_63d = 121; // Interpolated 63 day integrated surface variance
    float i_var_swap_84d = 124; // Interpolated 84 day integrated surface variance
    float i_var_swap_105d = 127; // Interpolated 105 day integrated surface variance
    float i_var_swap_126d = 130; // Interpolated 126 day integrated surface variance
    float i_var_swap_189d = 133; // Interpolated 189 day integrated surface variance
    float i_var_swap_252d = 136; // Interpolated 252 day integrated surface variance
    float i_var_swap_378d = 139; // Interpolated 378 day integrated surface variance
    float i_var_swap_504d = 142; // Interpolated 504 day integrated surface variance
    google.protobuf.Timestamp timestamp = 145; // update timestamp
}


    
message IndexClose {
    message PKey {
        
        TickerKey ticker = 10;
        IndexSource source = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double idx_bid = 100; // index bid value (if from quote, otherwise idxPrice)
    double idx_ask = 103; // index ask value (if from quote, otherwise idxPrice)
    double idx_price = 106; // index price
    TickerKey syn_ticker = 109; // syn quote ticker
    double syn_bid = 112; // syn quote bid (market close)
    double syn_ask = 115; // syn quote ask (market close)
    double syn_price = 118; // syn last print (market close)
    ExpiryKey syn_fKey = 121; // future key used to create the synthetic quote (if any)
    double syn_ratio = 124; // synBid = futBid * synRatio + synOffset
    double syn_offset = 127; // synAsk = futAsk * synRatio + synOffset
    google.protobuf.Timestamp timestamp = 130; // record timestamp
}


    
message IndexDefinition {
    message PKey {
        
        TickerKey ticker = 10;
    }

    message Component {
        
        TickerKey symbol = 109;
        float weight = 112;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    IndexType index_type = 100;
    string name = 103;
    repeated Component component = 106;
}


/*
    Live index levels and quotes including SpiderRock synthetic index levels and quotes.
*/    
message IndexQuote {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    IdxSrc price_source = 100; // price source of the quote (indication print or quote message)
    double idx_bid = 103; // index bid value (if from quote, otherwise idxPrice)
    double idx_ask = 106; // index ask value (if from quote, otherwise idxPrice)
    double idx_price = 109; // index price
    sfixed64 net_timestamp = 112; // index price timestamp
    google.protobuf.Timestamp timestamp = 115;
}


/*
    IndustryClassification is the ICB classification for SpiderRock tickers.
*/    
message IndustryClassification {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 ind_num = 100; // IND (2 digits)
    sfixed32 sub_num = 103; // SUB (4 digits)
    sfixed32 grp_num = 106; // GRP (6 digits)
    sfixed32 nbr_num = 109; // NBR (8 digits)
    google.protobuf.Timestamp timestamp = 112; // record update timestamp
}


/*
    IndustryClassification is the ICB classification for SpiderRock tickers.
*/    
message IndustryClassification_Extern {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 ind_num = 100; // IND (2 digits)
    sfixed32 sub_num = 103; // SUB (4 digits)
    sfixed32 grp_num = 106; // GRP (6 digits)
    sfixed32 nbr_num = 109; // NBR (8 digits)
    google.protobuf.Timestamp timestamp = 112; // record update timestamp
}


    
message IndustryCompData {
    message PKey {
        
        TickerKey ticker = 10;
    }

    message Comps {
        
        TickerKey comp = 106;
        float prc = 109; // current live price
        float prc_prv = 112; // previous period closing price
        float atm_iVol20d = 115; // at the money implied volatility (1 month)
        float atm_iVol20d_prv = 118;
        float atm_iVol120d = 121; // at the money implied volatility (6 months)
        float atm_iVol120d_prv = 124;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp ts = 100; // last update time (Date)
    repeated Comps comps = 103;
}


    
message IndustryControl {
    message PKey {
        
        string accnt = 10;
        sfixed32 icode = 13; // can be 1, 2, or 3 digits
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptStatus ind_status = 100; // industry trading control
    float min_wt_vega = 103; // (xRM) minimum net industry wtVega;wtVega = ve * vol / sqrt(max(0.1, years * 4))
    float max_wt_vega = 106; // (xRM) maximum net industry wtVega;wtVega = ve * vol / sqrt(max(0.1, years * 4))
    float max_wt_ve_pct_m1 = 109; // % of min/max industry wtVega in M1 {days < 10} expirations
    float max_wt_ve_pct_m2 = 112; // % of min/max industry wtVega in M2 {10 < days < 25} expirations
    float max_wt_ve_pct_m3 = 115; // % of min/max industry wtVega in M3 {25 < days < 65} expirations
    float max_wt_ve_pct_m4 = 118; // % of min/max industry wtVega in M4 {65 < days < 128} expirations
    float max_wt_ve_pct_m5 = 121; // % of min/max industry wtVega in M5 {128 < days} expirations
    string modified_by = 124; // user who last modified this record
    google.protobuf.Timestamp timestamp = 127; // timestamp of last modification
}


/*
    This table contains the definitions of ind (00), sub (0000), grp (000000), and nbr (00000000) numeric codes are used in the SpiderRock platform.
*/    
message IndustryDefinition {
    message PKey {
        
        sfixed32 code = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    IndType ind_type = 100;
    string name = 103;
    google.protobuf.Timestamp timestamp = 106; // record update timestamp
}


/*
    IndustryDefinition contains the definitions of numeric industry codes; ind (00), sub (0000), grp (000000), and nbr (00000000) used in the SpiderRock platform.
*/    
message IndustryDefinition_Extern {
    message PKey {
        
        sfixed32 code = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    IndType ind_type = 100;
    string name = 103; // industry Def name
    google.protobuf.Timestamp timestamp = 106; // record update timestamp
}


/*
    IndustryRiskRecords contain account level position and risk summary detail. These records are published by AggRiskServers throughout the day approximately once per minute.
*/    
message IndustryRiskRecordV5 {
    message PKey {
        
        string accnt = 10;
        Currency currency = 13;
        string code = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103; // risk server that published this record
    float vega_long = 106; // sum of long vega symbol positions;=sum(+srs.vega) if srs.vega > 0
    float vega_short = 109; // sum of short vega symbol positions;= sum(-srs.vega) if srs.vega < 0
    float w_vega_long = 112; // sum of long weighted vega symbol positions;=sum(+srs.wVega) if srs.wVega > 0
    float w_vega_short = 115; // sum of short weighted vega symbol positions;= sum(-srs.wVega) if srs.wVega < 0
    float wt_vega_long = 118; // sum of long time weighted vega symbol positions;=sum(+srs.wtVega) if srs.wtVega > 0
    float wt_vega_short = 121; // sum of short time weighted vega symbol positions;= sum(-srs.wtVega) if srs.wtVega < 0
    float theta_long = 124; // sum of long vega symbol positions;=sum(+srs.theta) if srs.theta > 0
    float theta_short = 127; // sum of short vega symbol positions;= sum(-srs.theta) if srs.theta < 0
    float rho_long = 130; // sum of long rho symbol positions;=sum(+srs.rho) if srs.rho > 0
    float rho_short = 133; // sum of short rho symbol positions;= sum(-srs.rho) if srs.rho < 0
    float ivol_ln = 136; // vega weighted average symbol ivol where srs.vega > 0
    float ivol_sh = 139; // vega weighted average symbol ivol where srs.vega < 0
    float wt_ve_dd = 142; // Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde < -0.30
    float wt_ve_dn = 145; // Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 <= opr.xde < -0.10
    float wt_ve_at = 148; // Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) <= 0.10
    float wt_ve_up = 151; // Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 < opr.xde <= +0.30
    float wt_ve_du = 154; // Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 < opr.xde
    float wt_ve_m1 = 157; // Aggregate M1 Time Weighted Vega;=sum[wtVega] if days < 10
    float wt_ve_m2 = 160; // Aggregate M2 Time Weighted Vega;=sum[wtVega] if 10 < days < 25
    float wt_ve_m3 = 163; // Aggregate M3 Time Weighted Vega;=sum[wtVega] if 25 < days < 65
    float wt_ve_m4 = 166; // Aggregate M4 Time Weighted Vega;=sum[wtVega] if 65 < days < 130
    float wt_ve_m5 = 169; // Aggregate M5 Time Weighted Vega;=sum[wtVega] if 130 < days
    float ddelta = 172; // net $delta;=sum(srs.ddelta)
    sfixed32 num_symbols = 175; // count of srs records being aggregated
    sfixed32 abs_cur_sh = 178; // absolute number of account shares (CLR + trades);=sum(srs.opShAbsCur)
    sfixed32 abs_cur_cn = 181; // absolute number of account option contracts (CLR + trades);=sum(srs.opCnAbsCur)
    float prem_ov_par = 184; // aggregate premium over parity for the option position;=sum(srs.premOvPar)
    float st_pnl_mid = 187; // stock pnl (using SR marks)
    float st_pnl_clr = 190; // stock pnl (using CLR marks)
    float op_pnl_vol = 193; // options pnl (using SR vol marks)
    float op_pnl_mid = 196; // options pnl (using SR mid marks)
    float op_pnl_clr = 199; // options pnl (using CLR mid marks)
    float op_day_vega = 202; // option vega traded today
    float op_day_wVega = 205; // option (vol weighted) vega traded today
    float op_day_tVega = 208; // option (time weighted) vega traded today
    float op_day_wt_vega = 211; // option (vol time weighted) vega traded today
    float op_day_theta = 214; // option theta traded today
    float op_edge_opened = 217; // option theo edge opened today
    float op_edge_closed = 220; // option theo edge closed today
    float pnl_dn = 223; // option delta neutral pnl;=sum(srs.pnlDn)
    float pnl_de = 226; // option delta pnl;=sum(srs.pnlDe)
    float pnl_sl = 229; // option vega/delta pnl;=sum(srs.pnlSl)
    float pnl_ga = 232; // option gamma pnl;=sum(srs.pnlGa)
    float pnl_th = 235; // option theta pnl;=sum(srs.pnlTh)
    float pnl_ve = 238; // option vega pnl;=sum(srs.pnlVe)
    float pnl_vo = 241; // option volga pnl;=sum(srs.pnlVo)
    float pnl_va = 244; // option vanna pnl;=sum(srs.pnlVa)
    float pnl_dDiv = 247; // option DDiv pnl;=sum(srs.pnlDDiv)
    float pnl_sDiv = 250; // option SDiv pnl;=sum(srs.pnlSDiv)
    float pnl_rate = 253; // option Rate pnl;=sum(srs.pnlRate)
    float pnl_err = 256; // option unexplained (error) pnl;=sum(srs.pnlErr)
    float pnl_te = 259; // option theo edge pnl;=sum(srs.pnlTe)
    float pnl_ln = 262; // option pnl from symbol positions with +vega
    float pnl_sh = 265; // option pnl from symbol positions with -vega
    float t_edge = 268; // aggregate option theo edge;=sum(srs.tEdge)
    float t_edge_mult = 271; // denominator for computing edge per unit;=sum(srs.tEdgeMult)
    float t_edge_pr = 274; // aggregate option theo edge (prior period);=sum(srs.tEdgePr)
    float t_edge_mult_pr = 277; // enominator for computing edge per unit (prior period);=sum(srs.tEdgeMultPr)
    float pos_tEdge_pnl = 280; // aggregate pnl (positive edge symbols);=sum(srs.posTEdgePnl)
    float neg_tEdge_pnl = 283; // aggregate pnl (negative edge symbols);=sum(srs.negTEdgePnl)
    float bad_tEdge_pnl = 286; // aggregate pnl (no theo edge symbols);=sum(srs.badTEdgePnl)
    float va_rsu90 = 289; // Aggregate RiskSlide: uPrc up 90%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.90))
    float va_rsd90 = 292; // Aggregate RiskSlide: uPrc dn 90%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.90))
    float va_rsu50 = 295; // Aggregate RiskSlide: uPrc up 50%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.50))
    float va_rsd50 = 298; // Aggregate RiskSlide: uPrc dn 50%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.50))
    float va_rsu15 = 301; // Aggregate RiskSlide: uPrc up 15%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.15))
    float va_rsd15 = 304; // Aggregate RiskSlide: uPrc dn 15%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.15))
    float va_rsu10 = 307; // Aggregate RiskSlide: uPrc up 10%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.10))
    float va_rsd10 = 310; // Aggregate RiskSlide: uPrc dn 10%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.10))
    float va_rsu05 = 313; // Aggregate RiskSlide: uPrc up 5%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.05))
    float va_rsd05 = 316; // Aggregate RiskSlide: uPrc dn 5%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.05))
    float va_rsu1e = 319; // Aggregate RiskSlide: uPrc up 1x implied earn move, vol ramp out
    float va_rsd1e = 322; // Aggregate RiskSlide: uPrc dn 1x implied earn move, vol ramp out
    float va_rsu2e = 325; // Aggregate RiskSlide: uPrc up 2x implied earn move, vol ramp out
    float va_rsd2e = 328; // Aggregate RiskSlide: uPrc dn 2x implied earn move, vol ramp out
    float va_rearn = 331; // Aggregate RiskSlide: vol earn ramp out (no uPrc move)
    float va_rcash = 334; // Aggregate RiskSlide: uPrc up 30%, vol = 0.01, 6mn deal close (delta neutral)
    float hc_cnt = 337; // count of haircut > $0.0 symbols
    float haircut25 = 340; // haircut ($25 minimum/cn) [act basis]
    float haircut37 = 343; // haircut ($37 minimum/cn) [act basis]
    google.protobuf.Timestamp last_activity = 346;
    google.protobuf.Timestamp timestamp = 349;
}


    
message LatencyTest {
    message PKey {
        
        sfixed32 seq_no = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
}


/*
    LineIntegrityReset messages cause LineIntegrity errors to clear in the execution engines
*/    
message LineIntegrityReset {
    message PKey {
        
        string ex_dest = 10;
        string routing_code = 13;
        string exec_engine = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string modified_by = 100; // user who last modified this record
    google.protobuf.Timestamp timestamp = 103; // timestamp of last modification
}


    
message LiveAtmModel {
    message PKey {
        
        ExpiryKey ekey = 10;
        string model = 13; // model archive name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlying stock key that this option expiration attaches to
    float years = 103; // time to expiration (in years)
    float u_mid = 106;
    float u_mid_ema1 = 109;
    float u_mid_ema2 = 112;
    float u_mid_ema3 = 115;
    float u_mid_ema4 = 118;
    float cp_adj = 121; // can be either sdiv or uPrcOffset
    float cp_adj_ema1 = 124;
    float cp_adj_ema2 = 127;
    float cp_adj_ema3 = 130;
    float cp_adj_ema4 = 133;
    CPAdjType cp_adj_type = 136;
    float atm_vol = 139; // atm vol (xAxis = 0)
    float atm_vol_ema1 = 142;
    float atm_vol_ema2 = 145;
    float atm_vol_ema3 = 148;
    float atm_vol_ema4 = 151;
    float v_width = 154; // vol width
    float v_width_ema1 = 157;
    float v_width_ema2 = 160;
    float v_width_ema3 = 163;
    float v_width_ema4 = 166;
    float bid_size = 169; // inputs: bidSize / bidSizeEma4, bidSizeEma1 / bidSizeEma4, bidSizeEma2 / bidSizeEma4, bidSizeEma3 / bidSizeEma4
    float bid_size_ema1 = 172;
    float bid_size_ema2 = 175;
    float bid_size_ema3 = 178;
    float bid_size_ema4 = 181;
    float ask_size = 184;
    float ask_size_ema1 = 187;
    float ask_size_ema2 = 190;
    float ask_size_ema3 = 193;
    float ask_size_ema4 = 196;
    float bid_prt_size = 199; // bid side print size (most recent time step)
    float bid_prt_size_ema1 = 202;
    float bid_prt_size_ema2 = 205;
    float bid_prt_size_ema3 = 208;
    float bid_prt_size_ema4 = 211;
    float ask_prt_size = 214; // ask side print size (most recent time step)
    float ask_prt_size_ema1 = 217;
    float ask_prt_size_ema2 = 220;
    float ask_prt_size_ema3 = 223;
    float ask_prt_size_ema4 = 226;
    string idx_name = 229;
    float u_mid_idx = 232;
    float u_mid_idx_ema1 = 235;
    float u_mid_idx_ema2 = 238;
    float u_mid_idx_ema3 = 241;
    float u_mid_idx_ema4 = 244;
    float atm_vol_idx = 247; // atm vol (xAxis = 0)
    float atm_vol_idx_ema1 = 250;
    float atm_vol_idx_ema2 = 253;
    float atm_vol_idx_ema3 = 256;
    float atm_vol_idx_ema4 = 259;
    float vxx_prc = 262; // atm vol (xAxis = 0)
    float vxx_prc_ema1 = 265;
    float vxx_prc_ema2 = 268;
    float vxx_prc_ema3 = 271;
    float vxx_prc_ema4 = 274;
    float vix_prc = 277; // atm vol (xAxis = 0)
    float vix_prc_ema1 = 280;
    float vix_prc_ema2 = 283;
    float vix_prc_ema3 = 286;
    float vix_prc_ema4 = 289;
    float vxs_prc = 292; // atm vol (xAxis = 0)
    float vxs_prc_ema1 = 295;
    float vxs_prc_ema2 = 298;
    float vxs_prc_ema3 = 301;
    float vxs_prc_ema4 = 304;
    sfixed32 ema_counter = 307;
    float u_avg_daily_vlm = 310; // underlier average daily share volume
    float atm_phi = 313; // surface phi @ ATM (xAxis=0)
    float atm_vega = 316; // surface vega @ ATM (xAxis=0)
    float p_width = 319; // prc width
    MarketSession market_session = 322; // market session this surface is from
    TradeableStatus tradeable_status = 325; // indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    float cp_adj_p10 = 328; // cpAdj forward predict (S10)
    float atm_vol_p10 = 331; // atmVol forward predict (S10)
    float cp_adj_p60 = 334; // cpAdj forward predict (S60)
    float atm_vol_p60 = 337; // atmVol forward predict (S60)
    sfixed32 counter = 340;
    google.protobuf.Timestamp timestamp = 343;
    float u_mid_f10 = 346;
    float cp_adj_f10 = 349;
    float atm_vol_f10 = 352; // atm vol (one step forward in time) [step is 10 seconds or whenever a large enough change occurs]
    google.protobuf.Timestamp timestamp_f10 = 355;
    float u_mid_f60 = 358;
    float cp_adj_f60 = 361;
    float atm_vol_f60 = 364; // atm vol (one step forward in time) [step is 60 seconds or whenever a large enough change occurs]
    google.protobuf.Timestamp timestamp_f60 = 367;
}


    
message LiveAtmPredict {
    message PKey {
        
        ExpiryKey ekey = 10;
        string model = 13; // model archive name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float u_mid = 100;
    float cp_adj = 103; // can be either sdiv or uPrcOffset
    CPAdjType cp_adj_type = 106;
    float atm_vol = 109; // atm vol (xAxis = 0)
    MarketSession market_session = 112; // market session this surface is from
    TradeableStatus tradeable_status = 115; // indicates whether the record is currently tradeable or not (all server surface integrity checks pass)
    float cp_adj_p10 = 118; // cpAdj forward predict
    float atm_vol_p10 = 121; // atmVol forward predict
    float cp_adj_p60 = 124; // cpAdj forward predict
    float atm_vol_p60 = 127; // atmVol forward predict
    float cp_adj_s10 = 130; // cpAdj forward sensivity (dCPAdjP / dUPrc)
    float atm_vol_s10 = 133; // atmVol forward sensivity (dAtmVolP / dUPrc)
    float cp_adj_s60 = 136; // cpAdj forward sensivity (dCPAdjP / dUPrc)
    float atm_vol_s60 = 139; // atmVol forward sensivity (dAtmVolP / dUPrc)
    sfixed32 counter = 142;
    google.protobuf.Timestamp timestamp = 145;
}


    
message LiveFutureDataRequest {


    MbusInfo descriptor = 1;
    
    ExpiryKey fkey = 100;
    string accnt = 103;
    GetAction action = 106;
    string error = 109;
}


    
message LiveFutureDataResponse {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string exch_yr_mn = 100;
    TickerKey skey = 103;
    double fut_bid1 = 106;
    double fut_bid2 = 109;
    double fut_bid3 = 112;
    double fut_bid4 = 115;
    double fut_ask1 = 118;
    double fut_ask2 = 121;
    double fut_ask3 = 124;
    double fut_ask4 = 127;
    sfixed32 fut_bSz1 = 130;
    sfixed32 fut_bSz2 = 133;
    sfixed32 fut_bSz3 = 136;
    sfixed32 fut_bSz4 = 139;
    sfixed32 fut_aSz1 = 142;
    sfixed32 fut_aSz2 = 145;
    sfixed32 fut_aSz3 = 148;
    sfixed32 fut_aSz4 = 151;
    double fut_prt = 154;
    sfixed32 fut_pSz = 157;
    double tick_value = 160;
    double point_value = 163;
    Currency point_currency = 166;
    UnderlierType underlier_type = 169;
    double min_tick_size = 172;
    PriceFormat price_format = 175;
    FutExch fut_exch = 178;
    sfixed32 pos = 181;
    sfixed32 bot = 184;
    sfixed32 sld = 187;
    float bid_take_prob = 190;
    float bid_tk_im_prob = 193;
    float ask_take_prob = 196;
    float ask_tk_im_prob = 199;
}


/*
    LiveVarSwapFixedTerm records contain a live implied variance term record at standardized days-to-expiration.
*/    
message LiveIVarSwapFixedTerm {
    message PKey {
        
        TickerKey ticker = 10;
        SurfaceCurveType surface_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float i_var_swap_5d = 100; // Interpolated 5 day integrated surface variance
    float i_var_swap_10d = 103; // Interpolated 10 day integrated surface variance
    float i_var_swap_21d = 106; // Interpolated 21 day integrated surface variance
    float i_var_swap_42d = 109; // Interpolated 42 day integrated surface variance
    float i_var_swap_63d = 112; // Interpolated 63 day integrated surface variance
    float i_var_swap_84d = 115; // Interpolated 84 day integrated surface variance
    float i_var_swap_105d = 118; // Interpolated 105 day integrated surface variance
    float i_var_swap_126d = 121; // Interpolated 126 day integrated surface variance
    float i_var_swap_189d = 124; // Interpolated 189 day integrated surface variance
    float i_var_swap_252d = 127; // Interpolated 252 day integrated surface variance
    float i_var_swap_378d = 130; // Interpolated 378 day integrated surface variance
    float i_var_swap_504d = 133; // Interpolated 504 day integrated surface variance
    CurveStatus status = 136;
    google.protobuf.Duration time = 139;
    google.protobuf.Timestamp timestamp = 142; // update timestamp
}


/*
    CalcSource=Tick records are computed and published each time an option NBBO price changes.  CalcSource=Loop records are computed in a 2-3 minute background loop.
    Note that the underlier price (uPrc) will be the same for all options an underlier when CalcSource=Loop.  This is not true for CalcSource=Tick where uPrc will be the underlier price that prevailed when the option price changed.
    If you are consuming multicast data and only want records with consistent uPrc values for all options you should ignore Tick records. Alternatively, you can use an independent underlier price source (our StockBookQuote feed or some other) and 'adjust' the values in this table to the new underlier value.
    If you are selecting records from SRSE you should note that OptionImpliedQuoteAdj table is a proxy implementation of this table that automatically applies the appropriate underlier adjustments as records are being returned.
*/    
message LiveImpliedQuote {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // SR Ticker that this option rolls up to
    float u_prc = 103; // underlier price (usually mid-market)
    float u_off = 106; // implied underlier price offset (if any)
    float years = 109; // years to expiration
    float x_axis = 112; // option moneyness
    float rate = 115; // discount rate
    float sdiv = 118; // sdiv (continuous stock dividend) rate
    float ddiv = 121; // cumulative discrete dividend value
    float o_bid = 124; // option bid price
    float o_ask = 127; // option ask price
    float o_bid_iv = 130; // volatility implied by option bid price
    float o_ask_iv = 133; // volatility implied by option ask price
    float atm_vol = 136; // option atm volatility (from SR surface)
    float s_vol = 139; // option surface volatility (SR surface fit model)
    float s_prc = 142; // option surface price; ie. PRICE(sVol, uPrc + uOff, years, rate, sDiv, {discrete dividends, if any})
    float s_mark = 145; // option surface mark (option surface price w/bounding rules; always between bid/ask)
    float ve_slope = 148; // veSlope = dVol / dUprc (assuming vol @ xAxis = 0 remains constant); hedgeDelta = (de + ve * 100 * veSlope) if hedging with this assumption
    float de = 151; // option delta
    float ga = 154; // option gamma
    float th = 157; // option theta
    float ve = 160; // option vega
    float va = 163; // option vanna
    float vo = 166; // option volga
    float ro = 169; // option rho
    float ph = 172; // option phi
    float de_decay = 175; // option delta decay
    float up50 = 178; // underlier up 50% slide
    float dn50 = 181; // underlier dn 50% slide
    float up15 = 184; // underlier up 15% slide
    float dn15 = 187; // underlier dn 15% slide
    float up06 = 190; // underlier up 6% slide
    float dn08 = 193; // underlier dn 8% slide
    ImpliedQuoteError calc_err = 196; // option pricing calculation error (if any)
    CalcSource calc_source = 199;
    sfixed64 src_timestamp = 202; // OPRA source timestamp (nanoseconds since epoch); will be zero if calcSource != Tick
    sfixed64 net_timestamp = 205; // SR timestamp @ publish time
    google.protobuf.Timestamp timestamp = 208;
}


    
message LiveOptionDataRequest {


    MbusInfo descriptor = 1;
    
    OptionKey okey = 100;
    string accnt = 103;
    google.protobuf.Timestamp pricing_coeff_ts = 106;
    GetAction action = 109;
    string error = 112;
}


    
message LiveOptionDataResponse {
    message PKey {
        
        OptionKey okey = 10;
        string accnt = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string exch_yr_mn = 100;
    ExpiryKey fkey = 103;
    TickerKey ticker = 106;
    float opt_bid = 109;
    float opt_ask = 112;
    sfixed32 opt_bSz = 115;
    sfixed32 opt_aSz = 118;
    sfixed32 opt_cum_aSz = 121;
    sfixed32 opt_cum_bSz = 124;
    sfixed32 opt_cum_aVega = 127;
    sfixed32 opt_cum_bVega = 130;
    OptExch opt_bEx = 133;
    OptExch opt_aEx = 136;
    float opt_prt = 139;
    int32 opt_pSd = 142;
    sfixed32 opt_pSz = 145;
    OptExch opt_pEx = 148;
    float opt_pAge = 151;
    float eff_strike = 154;
    float symbol_ratio = 157;
    int32 ex_type = 160;
    int32 model_type = 163;
    PricingModel pricing_model = 166;
    double tick_value = 169;
    double point_value = 172;
    Currency point_currency = 175;
    UnderlierType underlier_type = 178;
    sfixed32 underliers_per_cn = 181;
    double cab_tick_size = 184;
    double min_tick_size = 187;
    PriceFormat price_format = 190;
    PriceFormat u_price_format = 193;
    float years = 196;
    float rate = 199;
    float i_bid = 202;
    float i_ask = 205;
    float u_bid = 208;
    float u_ask = 211;
    float u_prc = 214;
    sfixed32 u_bsz = 217;
    sfixed32 u_asz = 220;
    float surf_vol = 223;
    float surf_prc = 226;
    float theo_vol = 229;
    float theo_opx = 232;
    float theo_bid_vol = 235;
    float theo_ask_vol = 238;
    float theo_bid = 241;
    float theo_ask = 244;
    float de = 247;
    float ga = 250;
    float th = 253;
    float ve = 256;
    float vo = 259;
    float va = 262;
    float vede = 265;
    float de_decay = 268;
    float rh = 271;
    float ph = 274;
    float pr = 277;
    float stk_adv = 280;
    sfixed32 max_impact_dDelta = 283;
    sfixed32 pos = 286;
    sfixed32 bot = 289;
    sfixed32 sld = 292;
    float s_div = 295;
    float s_div_ln = 298;
    float s_div_sh = 301;
    double p_uPrc = 304;
    float p_delta = 307;
    float bid_take_prob = 310;
    float bid_tk_im_prob = 313;
    float ask_take_prob = 316;
    float ask_tk_im_prob = 319;
    string d_div = 322;
}


    
message LiveSpreadDataRequest {


    MbusInfo descriptor = 1;
    
    TickerKey skey = 100; // [optional] Spread.skey
    string spread_key = 103; // [optional] Spread.spreadKey
    string accnt = 106;
    GetAction action = 109;
    string error = 112;
}


    
message LiveSpreadDataResponse {
    message PKey {
        
        TickerKey skey = 10;
        string accnt = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string spread_key = 100;
    double sprd_bid1 = 103;
    double sprd_bid2 = 106;
    double sprd_ask1 = 109;
    double sprd_ask2 = 112;
    sfixed32 sprd_bSz1 = 115;
    sfixed32 sprd_bSz2 = 118;
    sfixed32 sprd_aSz1 = 121;
    sfixed32 sprd_aSz2 = 124;
    double min_tick_size = 127;
    PriceFormat price_format = 130;
    SpreadDefStatus status = 133;
    google.protobuf.Timestamp timestamp = 136;
}


    
message LiveStockDataRequest {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100;
    string accnt = 103;
    GetAction action = 106;
    string error = 109;
}


    
message LiveStockDataResponse {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float stk_bid = 100;
    float stk_ask = 103;
    float stk_prt = 106;
    sfixed32 stk_bSz = 109;
    sfixed32 stk_aSz = 112;
    sfixed32 stk_pSz = 115;
    StkExch stk_bEx = 118;
    StkExch stk_aEx = 121;
    float stk_adv = 124;
    sfixed32 pos = 127;
    sfixed32 bot = 130;
    sfixed32 sld = 133;
    float bid_take_prob = 136;
    float bid_tk_im_prob = 139;
    float ask_take_prob = 142;
    float ask_tk_im_prob = 145;
}


/*
    LiveSurfaceAdj records are computed and publish continuously during trading hours and are used to 'adjust' LiveSurfaceCurve records to the current live market connditions
*/    
message LiveSurfaceAdj {
    message PKey {
        
        ExpiryKey ekey = 10;
        SurfaceCurveType surface_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    ExpiryKey fkey = 103; // future that this option expiration month written on (if any)
    float u_prc = 106; // underlier price (effective mid-market) used for fitting
    float u_bid = 109; // underlier bid price
    float u_ask = 112; // underlier ask price
    float axis_fUPrc = 115; // axis FwdUPrc (fwd underlying price used to compute xAxis)
    float years = 118;
    float rate = 121;
    float ddiv = 124;
    float atm_vol = 127; // atm vol (xAxis = 0)
    float atm_eMA = 130; // atm vol exp moving average (5 seconds)
    float atm_cen = 133; // censored atm vol
    float atm_fixed_move = 136; // fixed strike atm move from prior period
    float min_atm_vol = 139;
    float max_atm_vol = 142;
    float u_prc_offset = 145; // implied offset for use when fkey is not the natural underlier for this option expiry
    float u_prc_offset_eMA = 148; // uPrcOffset exp moving average (half-live ~ 20 seconds)
    float sdiv = 151; // stock dividend (borrow rate)
    float sdiv_eMA = 154; // sdiv exp moving average (10 minutes)
    float atm_strike_bid = 157; // synthetic strike with cBid = pAsk
    float atm_strike_ask = 160; // synthetic strike with cAsk = pBid
    float bid_strike_eMA = 163; // exp moving avg of ln(uBid / atmStrikeBid);
    float ask_strike_eMA = 166; // exp moving avg of ln(uAsk / atmStrikeAsk);
    float iv_adj_d07 = 169; // xAxis = -5.0
    float iv_adj_d06 = 172; // xAxis = -4.0
    float iv_adj_d05 = 175; // xAxis = -3.0
    float iv_adj_d04 = 178; // xAxis = -2.0
    float iv_adj_d03 = 181; // xAxis = -1.5
    float iv_adj_d02 = 184; // xAxis = -1.0
    float iv_adj_d01 = 187; // xAxis = -0.5
    float iv_adj_u01 = 190; // xAxis = +0.5
    float iv_adj_u02 = 193; // xAxis = +1.0
    float iv_adj_u03 = 196; // xAxis = +1.5
    float iv_adj_u04 = 199; // xAxis = +2.0
    float iv_adj_u05 = 202; // xAxis = +3.0
    float iv_adj_u06 = 205; // xAxis = +4.0
    float iv_adj_u07 = 208; // xAxis = +5.0
    float cp_adj_d04 = 211; // xAxis = -4.0
    float cp_adj_d03 = 214; // xAxis = -3.0
    float cp_adj_d02 = 217; // xAxis = -2.0
    float cp_adj_d01 = 220; // xAxis = -1.0
    float cp_adj_u01 = 223; // xAxis = +1.0
    float cp_adj_u02 = 226; // xAxis = +2.0
    float cp_adj_u03 = 229; // xAxis = +3.0
    float cp_adj_u04 = 232; // xAxis = +4.0
    CPAdjType cp_adj_type = 235;
    float min_cPAdj_val = 238;
    float max_cPAdj_val = 241;
    float min_cPAdj_eMA = 244;
    float max_cPAdj_eMA = 247;
    sfixed32 ema_counter = 250; // number of fit passes (resets daily)
    int32 num_atm_strikes = 253; // number of ATM strikes used to adjust curve
    uint32 num_fit_misses = 256; // number of strikes w/surface outside of bid/ask
    float c_mid_error = 259; // average (cSurf - cMidMkt) / cMktWidth [-0.05 to +0.25]
    float p_mid_error = 262; // average (pSurf - pMidMkt) / pMktWidth [-0.25 to +0.05]
    TradeableStatus tradeable_status = 265; // indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    SurfaceAdjResult surface_result = 268;
    google.protobuf.Timestamp s_timestamp = 271; // [date/time from LiveSurfaceCurve surface record]
    sfixed32 cnt_elapsed = 274; // number of surfaceResult=OK passes
    double sum_elapsed = 277; // sum of elapsed time for all OK passes
    sfixed32 num_pair_resets = 280;
    google.protobuf.Duration time = 283;
    google.protobuf.Timestamp timestamp = 286;
}


    
message LiveSurfaceComposite {
    message PKey {
        
        ExpiryKey ekey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlying stock key that this option expiration attaches to
    ExpiryKey fkey = 103; // future that this option expiration month written on (if any)
    double u_prc = 106; // underlier price used for surface fit
    float u_bid = 109; // underlier bid price
    float u_ask = 112; // underlier ask price
    float years = 115; // time to expiration (in years)
    float rate = 118; // current discount rate
    float ddiv = 121; // present value of discrete dividend stream
    float symbol_ratio = 124; // underlier price ratio (usually 1.0 or a multi-hedge option price ratio; if one exists)
    ExerciseType ex_type = 127; // exercise type (American or European)
    CalcModelType model_type = 130; // option pricing model used for price calcs (Normal, LogNormal, etc.)
    CalcPriceType price_type = 133; // Equity has independent sdiv and rate, Future has sdiv = rate
    float earn_cnt = 136; // number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)
    float earn_cnt_adj = 139; // number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)
    float axis_vol_rT = 142; // axis volatility x sqrt(years) (used to compute xAxis) [usually 4m atm vol]
    float axis_fUPrc = 145; // axis FwdUPrc (fwd underlying price used to compute xAxis)
    float atm_strike = 148; // synthetic strike with cPrice = pPrice
    MoneynessType moneyness_type = 151; // moneyness (xAxis) convention
    UnderlierMode underlier_mode = 154; // underlier pricing mode (None=use spot/stock market; FrontMonth=use front month future market + uPrcOffset; Actual = use actual underlier future market)
    CPAdjType cp_adj_type = 157; // adjustment used to align calls/puts (if any)
    PriceQuoteType price_quote_type = 160; // Price or Vol
    float atm_vol = 163; // atm vol (xAxis = 0)
    float atm_cen = 166; // atm vol (xAxis = 0) (eMove/earnCntAdj censored)
    float atm_vol_hist = 169; // historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.
    float atm_cen_hist = 172; // censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn
    float min_atm_vol = 175; // minimum estimated atm vol
    float max_atm_vol = 178; // maximum estimated atm vol
    float min_cPAdj_val = 181; // minimum CP adjust value (sdiv or uPrcOffset)
    float max_cPAdj_val = 184; // maximum CP adjust value (sdiv or uPrcOffset)
    float min_cPAdj_eMA = 187;
    float max_cPAdj_eMA = 190;
    float e_move = 193; // implied earnings move (from LiveSurfaceTerm)
    float e_move_hist = 196; // historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    float u_prc_offset_fit = 199; // implied offset for use when fkey is not the natural underlier for this option expiry [most recent fit value]
    float u_prc_offset_eMA = 202; // time smoothed implied uPrcOffset (half-live ~ 20 seconds)
    float sdiv_fit = 205; // stock dividend (borrow rate) [most recent fit from slow loop]
    float sdiv_eMA = 208; // sdiv bounded exponential moving average
    float atm_fixed_move = 211; // fixed strike atm move from prior period
    float atm_phi = 214; // surface phi @ xAxis = 0
    float atm_vega = 217; // surface vega @ xAxis = 0
    float slope = 220; // volatility surface slope (dVol / dXAxis) @ ATM (xAxis=0)
    float var_swap_fV = 223; // variance swap fair value (estimated by numerical integration over OTM price surface)
    GridType grid_type = 226; // gridType defines skew curve coeff points + spline type
    float knot_shift = 229; // constant that should be added to each base knot location [-3.0 - +3.0]
    float min_xAxis = 232; // minimum xAxis value; xAxis values to the left extrapolate horizontally
    float max_xAxis = 235; // maximum xAxis value; xAxis values to the right extrapolate horizontally
    float min_curv_value = 238; // minimum curvature (2nd derivative) of skew curve (can be negative if curve is not strictly convex)
    float min_curv_xAxis = 241; // xAxis of minimum curvature point
    float max_curv_value = 244; // maximum curvature (2nd derivative) of skew curve
    float max_curv_xAxis = 247; // xAxis of maximum curvature point
    float skew_min_x = 250; // xAxis = (effStrike / effAxisFUPrc - 1.0) / axisVolRT; effStrike = strike * strikeRatio; effAxisFUPrc = axisFUPrc * symbolRatio
    float skew_min_y = 253; // skewMinX / skewMinY are the skew curve minimum point (usually a positive x value and a negative y value)
    SurfaceFit surface_fit = 256;
    float skew_c00 = 259; // curve coeff[0]
    float skew_c01 = 262; // curve coeff[1]
    float skew_c02 = 265;
    float skew_c03 = 268;
    float skew_c04 = 271;
    float skew_c05 = 274;
    float skew_c06 = 277;
    float skew_c07 = 280;
    float skew_c08 = 283;
    float skew_c09 = 286;
    float skew_c10 = 289;
    float skew_c11 = 292;
    float skew_c12 = 295;
    float skew_c13 = 298;
    float skew_c14 = 301;
    float skew_c15 = 304;
    float skew_c16 = 307;
    float skew_c17 = 310;
    float skew_c18 = 313;
    float skew_c19 = 316;
    float skew_c20 = 319;
    float skew_c21 = 322;
    float skew_c22 = 325;
    float skew_c23 = 328;
    float skew_c24 = 331;
    float skew_c25 = 334;
    float skew_c26 = 337;
    float skew_c27 = 340;
    float skew_c28 = 343;
    float iv_adj_d07 = 346; // xAxis = -5.0
    float iv_adj_d06 = 349; // xAxis = -4.0
    float iv_adj_d05 = 352; // xAxis = -3.0
    float iv_adj_d04 = 355; // xAxis = -2.0
    float iv_adj_d03 = 358; // xAxis = -1.5
    float iv_adj_d02 = 361; // xAxis = -1.0
    float iv_adj_d01 = 364; // xAxis = -0.5
    float iv_adj_u01 = 367; // xAxis = +0.5
    float iv_adj_u02 = 370; // xAxis = +1.0
    float iv_adj_u03 = 373; // xAxis = +1.5
    float iv_adj_u04 = 376; // xAxis = +2.0
    float iv_adj_u05 = 379; // xAxis = +3.0
    float iv_adj_u06 = 382; // xAxis = +4.0
    float iv_adj_u07 = 385; // xAxis = +5.0
    float cp_adj_d04 = 388; // xAxis = -4.0
    float cp_adj_d03 = 391; // xAxis = -3.0
    float cp_adj_d02 = 394; // xAxis = -2.0
    float cp_adj_d01 = 397; // xAxis = -1.0
    float cp_adj_u01 = 400; // xAxis = +1.0
    float cp_adj_u02 = 403; // xAxis = +2.0
    float cp_adj_u03 = 406; // xAxis = +3.0
    float cp_adj_u04 = 409; // xAxis = +4.0
    float pwidth = 412; // minimum mkt premium width
    float vwidth = 415; // minimum mkt volatility width
    int32 c_cnt = 418; // num call strikes in base fit
    int32 p_cnt = 421; // num put strikes in base fit
    int32 c_bid_miss = 424; // number of call bid violations (surface outside the market)
    int32 c_ask_miss = 427; // number of call ask violations (surface outside the market)
    int32 p_bid_miss = 430; // number of put bid violations
    int32 p_ask_miss = 433; // number of put ask violations
    float fit_avg_err = 436; // average error (sPrc - midPrc)
    float fit_avg_abs_err = 439; // average absolute error (sPrc - midPrc)
    float fit_max_prc_err = 442; // worst case surface premium violation
    float fit_err_xX = 445; // okey_xx of the option with the largest fit error in this expiration
    CallPut fit_err_cP = 448; // okey_cp of the option with the largest fit error in this expiration
    float fit_err_de = 451; // delta of fixErrXX
    float fit_err_bid = 454; // bid of the option with the largest fit error
    float fit_err_ask = 457; // ask of the option with the largest fit error
    float fit_err_prc = 460; // surface prc of the option with the largest fit error
    float fit_err_vol = 463; // surface vol of the option with the largest fit error
    MarketSession market_session = 466; // market session this surface is from
    TradeableStatus tradeable_status = 469; // indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    SurfaceAdjResult surface_adj_result = 472;
    google.protobuf.Timestamp adj_timestamp = 475;
    SurfaceResult surface_result = 478;
    google.protobuf.Timestamp timestamp = 481;
}


/*
    LiveSurfaceCurve (surfaceType = 'Live') records are computed and publish continuously during trading hours and represent a current best implied volatility market fit.
    SurfaceType = 'PriorDay' records contain the `closing surface record from the prior trading period (usually from just before the last main session close).
*/    
message LiveSurfaceCurve {
    message PKey {
        
        ExpiryKey ekey = 10;
        SurfaceCurveType surface_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlying stock key that this option expiration attaches to
    ExpiryKey fkey = 103; // future that this option expiration month written on (if any)
    double u_prc = 106; // underlier price used for surface fit
    float u_bid = 109; // underlier bid price
    float u_ask = 112; // underlier ask price
    float years = 115; // time to expiration (in years)
    float rate = 118; // current discount rate
    float ddiv = 121; // present value of discrete dividend stream
    float symbol_ratio = 124; // underlier price ratio (usually 1.0 or a multi-hedge option price ratio; if one exists)
    ExerciseType ex_type = 127; // exercise type (American or European)
    CalcModelType model_type = 130; // option pricing model used for price calcs (Normal, LogNormal, etc.)
    CalcPriceType price_type = 133; // Equity has independent sdiv and rate, Future has sdiv = rate
    float earn_cnt = 136; // number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)
    float earn_cnt_adj = 139; // number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)
    float axis_vol_rT = 142; // axis volatility x sqrt(years) (used to compute xAxis) [usually 4m atm vol]
    float axis_fUPrc = 145; // axis FwdUPrc (fwd underlying price used to compute xAxis)
    float atm_strike = 148; // synthetic strike with cPrice = pPrice
    MoneynessType moneyness_type = 151; // moneyness (xAxis) convention
    UnderlierMode underlier_mode = 154; // underlier pricing mode (None=use spot/stock market; FrontMonth=use front month future market + uPrcOffset; Actual = use actual underlier future market)
    CPAdjType cp_adj_type = 157; // adjustment used to align calls/puts (if any)
    PriceQuoteType price_quote_type = 160; // Price or Vol
    float atm_vol = 163; // atm vol (xAxis = 0)
    float atm_cen = 166; // atm vol (xAxis = 0) (eMove/earnCntAdj censored)
    float atm_vol_hist = 169; // historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.
    float atm_cen_hist = 172; // censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn
    float min_atm_vol = 175; // minimum estimated atm vol
    float max_atm_vol = 178; // maximum estimated atm vol
    float min_cPAdj_val = 181; // minimum CP adjust value (sdiv or uPrcOffset)
    float max_cPAdj_val = 184; // maximum CP adjust value (sdiv or uPrcOffset)
    float min_cPAdj_eMA = 187;
    float max_cPAdj_eMA = 190;
    float e_move = 193; // implied earnings move (from LiveSurfaceTerm)
    float e_move_hist = 196; // historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    float u_prc_offset_fit = 199; // implied offset for use when fkey is not the natural underlier for this option expiry [most recent fit value]
    float u_prc_offset_eMA = 202; // time smoothed implied uPrcOffset (half-live ~ 20 seconds)
    float sdiv_fit = 205; // stock dividend (borrow rate) [most recent fit from slow loop]
    float sdiv_eMA = 208; // sdiv bounded exponential moving average
    float atm_fixed_move = 211; // fixed strike atm move from prior period
    float atm_phi = 214; // surface phi @ xAxis = 0
    float atm_vega = 217; // surface vega @ xAxis = 0
    float slope = 220; // volatility surface slope (dVol / dXAxis) @ ATM (xAxis=0)
    float var_swap_fV = 223; // variance swap fair value (estimated by numerical integration over OTM price surface)
    GridType grid_type = 226; // gridType defines skew curve coeff points + spline type
    float knot_shift = 229; // constant that should be added to each base knot location [-3.0 - +3.0]
    float min_xAxis = 232; // minimum xAxis value; xAxis values to the left extrapolate horizontally
    float max_xAxis = 235; // maximum xAxis value; xAxis values to the right extrapolate horizontally
    float min_curv_value = 238; // minimum curvature (2nd derivative) of skew curve (can be negative if curve is not strictly convex)
    float min_curv_xAxis = 241; // xAxis of minimum curvature point
    float max_curv_value = 244; // maximum curvature (2nd derivative) of skew curve
    float max_curv_xAxis = 247; // xAxis of maximum curvature point
    float skew_min_x = 250; // xAxis = (effStrike / effAxisFUPrc - 1.0) / axisVolRT; effStrike = strike * strikeRatio; effAxisFUPrc = axisFUPrc * symbolRatio
    float skew_min_y = 253; // skewMinX / skewMinY are the skew curve minimum point (usually a positive x value and a negative y value)
    SurfaceFit surface_fit = 256;
    float skew_c00 = 259; // curve coeff[0]
    float skew_c01 = 262; // curve coeff[1]
    float skew_c02 = 265;
    float skew_c03 = 268;
    float skew_c04 = 271;
    float skew_c05 = 274;
    float skew_c06 = 277;
    float skew_c07 = 280;
    float skew_c08 = 283;
    float skew_c09 = 286;
    float skew_c10 = 289;
    float skew_c11 = 292;
    float skew_c12 = 295;
    float skew_c13 = 298;
    float skew_c14 = 301;
    float skew_c15 = 304;
    float skew_c16 = 307;
    float skew_c17 = 310;
    float skew_c18 = 313;
    float skew_c19 = 316;
    float skew_c20 = 319;
    float skew_c21 = 322;
    float skew_c22 = 325;
    float skew_c23 = 328;
    float skew_c24 = 331;
    float skew_c25 = 334;
    float skew_c26 = 337;
    float skew_c27 = 340;
    float skew_c28 = 343;
    float iv_adj_d07 = 346; // xAxis = -5.0
    float iv_adj_d06 = 349; // xAxis = -4.0
    float iv_adj_d05 = 352; // xAxis = -3.0
    float iv_adj_d04 = 355; // xAxis = -2.0
    float iv_adj_d03 = 358; // xAxis = -1.5
    float iv_adj_d02 = 361; // xAxis = -1.0
    float iv_adj_d01 = 364; // xAxis = -0.5
    float iv_adj_u01 = 367; // xAxis = +0.5
    float iv_adj_u02 = 370; // xAxis = +1.0
    float iv_adj_u03 = 373; // xAxis = +1.5
    float iv_adj_u04 = 376; // xAxis = +2.0
    float iv_adj_u05 = 379; // xAxis = +3.0
    float iv_adj_u06 = 382; // xAxis = +4.0
    float iv_adj_u07 = 385; // xAxis = +5.0
    float cp_adj_d04 = 388; // xAxis = -4.0
    float cp_adj_d03 = 391; // xAxis = -3.0
    float cp_adj_d02 = 394; // xAxis = -2.0
    float cp_adj_d01 = 397; // xAxis = -1.0
    float cp_adj_u01 = 400; // xAxis = +1.0
    float cp_adj_u02 = 403; // xAxis = +2.0
    float cp_adj_u03 = 406; // xAxis = +3.0
    float cp_adj_u04 = 409; // xAxis = +4.0
    float pwidth = 412; // minimum mkt premium width
    float vwidth = 415; // minimum mkt volatility width
    int32 c_cnt = 418; // num call strikes in base fit
    int32 p_cnt = 421; // num put strikes in base fit
    int32 c_bid_miss = 424; // number of call bid violations (surface outside the market)
    int32 c_ask_miss = 427; // number of call ask violations (surface outside the market)
    int32 p_bid_miss = 430; // number of put bid violations
    int32 p_ask_miss = 433; // number of put ask violations
    float fit_avg_err = 436; // average error (sPrc - midPrc)
    float fit_avg_abs_err = 439; // average absolute error (sPrc - midPrc)
    float fit_max_prc_err = 442; // worst case surface premium violation
    float fit_err_xX = 445; // okey_xx of the option with the largest fit error in this expiration
    CallPut fit_err_cP = 448; // okey_cp of the option with the largest fit error in this expiration
    float fit_err_de = 451; // delta of fixErrXX
    float fit_err_bid = 454; // bid of the option with the largest fit error
    float fit_err_ask = 457; // ask of the option with the largest fit error
    float fit_err_prc = 460; // surface prc of the option with the largest fit error
    float fit_err_vol = 463; // surface vol of the option with the largest fit error
    sfixed32 skew_counter = 466; // skew surface fit counter
    sfixed32 sdiv_counter = 469; // sdiv surface fit counter
    MarketSession market_session = 472; // market session this surface is from
    TradeableStatus tradeable_status = 475; // indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    SurfaceResult surface_result = 478;
    sfixed32 cnt_elapsed = 481; // number of surfaceResult=OK passes
    double sum_elapsed = 484; // sum of elapsed time for all OK passes
    google.protobuf.Duration time = 487;
    google.protobuf.Timestamp timestamp = 490;
}


/*
    This table contains a live grided (interpolated) censored implied volatility surface.  Each record contains standarized live and prior period implied volatilities at standarized skew points for a standardized days-to-expiration value.
    LiveSurfaceGrid records are published to the SpiderRock elastic cluster nightly.
*/    
message LiveSurfaceFixedGrid {
    message PKey {
        
        TickerKey ticker = 10;
        int32 days = 13; // days to expiration [5, 21, 42, 63, 84, 105, 126, 189, 252, 378, 504]
        SurfaceCurveType surface_type = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100;
    string time = 103;
    float s_div = 106; // Interpolated implied sdiv rate (from LiveSurfaceFixedTerm.sDiv_N)
    float fwd_uPrc = 109; // Interpolated implied forward price (from LiveSurfaceFixedTerm.fwdUPrc_N)
    sfixed32 e_cnt = 112; // Number of expected earnings dates (from LiveSurfaceFixedTerm.eCnt_N)
    float e_move = 115; // Implied earnings move (from LiveSurfaceFixedTerm.eMove)
    float e_move_hist = 118; // Historical earnings move (from LiveSurfaceFixedTerm.eMoveHist)
    float vol_d45 = 121; // xde = -45	    (censored volatility)
    float vol_d40 = 124; // xde = -40
    float vol_d35 = 127; // xde = -35
    float vol_d30 = 130; // xde = -30
    float vol_d25 = 133; // xde = -25
    float vol_d20 = 136; // xde = -20
    float vol_d15 = 139; // xde = -15
    float vol_d10 = 142; // xde = -10
    float vol_d05 = 145; // xde = -5
    float vol_a00 = 148; // xde = 0
    float vol_u05 = 151; // xde = +5
    float vol_u10 = 154; // xde = +10
    float vol_u15 = 157; // xde = +15
    float vol_u20 = 160; // xde = +20
    float vol_u25 = 163; // xde = +25
    float vol_u30 = 166; // xde = +30
    float vol_u35 = 169; // xde = +35
    float vol_u40 = 172; // xde = +40
    float vol_u45 = 175; // xde = +45
    float v_width = 178; // atm volatility width (from LiveSurfaceFixedTerm.vWidth_N)
    float v_slope = 181; // atm volatility slope (from LiveSurfaceFixedTerm.vSlope_N)
    float lo_years = 184; // LiveSurfaceCurve.years before days [-1 = none]
    float hi_years = 187; // LiveSurfaceCurve.years after days	[-1 = none]
    float min_delta = 190; // minimum valid strike delta
    float max_delta = 193; // maximum valid strike delta
    google.protobuf.Timestamp timestamp = 196; // surface fit timestamp
}


/*
    LiveSurfaceFixedTerm (surfaceType = 'Live') records contain a live implied volatility term record at standardized days-to-expiration.  SurfaceType = 'PriorDay' records contain the final record from the prior trading day.
    These records include implied and histrical earnings moves, implied earnings date adjustments, and interpolated/gridded atm, sdiv, and quote width values.
    LiveSurfaceTerm records are published to the SpiderRock elastic cluster every 10 minutes for all equity and index underliers with options.
*/    
message LiveSurfaceFixedTerm {
    message PKey {
        
        TickerKey ticker = 10;
        SurfaceCurveType surface_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float h_eMove = 100; // expected forward earnings move (average of the last 8-12 underlier earnings moves; w/max clipping)
    int32 h_eMove_num = 103; // num historical earnings moves in historical window
    float h_eMove_avg = 106; // avg historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_std = 109; // std historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_min = 112; // max historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_max = 115; // min historical earnings move (last 8-12 underlier earnings moves)
    float i_eMove = 118; // implied earnings move (implied move; all earnings events)
    EFitCode i_eFit_code = 121; // implied EFit Code
    float i_eFit_error = 124; // eMove fit error (term surface fit error)
    int32 expiry_count = 127; // number of actual expirations involved
    float i_eMove_avg = 130; // average eMove today
    float i_eMove_std = 133; // eMove std dev today
    float i_eMove_min = 136; // eMove min today
    float i_eMove_max = 139; // emove max today
    sfixed32 i_eMove_cnt = 142; // number of surface term fits today
    sfixed32 e_move_exp_adj1 = 145; // number of expirations (+/-) that the next earn date was moved to best fit market term structure (if any)
    float e_move_yrs_adj1 = 148; // number of trading years (+/-) that the next earn date was moved to best fit market term structure (if any)
    float e_move_years1 = 151; // years to expiration from LiveSurfaceCurve.pkey.ekey = eMoveFKey1
    ExpiryKey e_move_eKey1 = 154; // LiveSurfaceCurve.pkey.ekey immediately after 1st implied earnings move (note: this will not match the base earnings calendar if eMoveDtAdj1 != 0)
    sfixed32 e_move_exp_adj2 = 157; // number of expirations (+/-) that the 2nd earn date was moved to best fit market term structure (if any)
    float e_move_yrs_adj2 = 160; // number of trading years (+/-) that the 2nd earn date was moved to best fit market term structure (if any)
    float e_move_years2 = 163; // years to expiration from LiveSurfaceCurve.pkey.fkey = eMoveFKey2
    ExpiryKey e_move_eKey2 = 166; // LiveSurfaceCurve.pkey.ekey immediately after 2nd implied earnings move (note: this will not match the base earnings calendar if eMoveDtAdj2 != 0)
    float atm_cen_i_st = 169; // short term (5 day) model atm volatility (censored using iEMult)
    float atm_cen_i_lt = 172; // long term (504 day) model atm volatility
    float atm_cen_i_decay = 175; // model decay parameter
    float atm_cen_i_5d = 178; // Interpolated 5 day atm vol (censored using iEMult)
    float atm_cen_i_10d = 181; // Interpolated 10 day atm vol
    float atm_cen_i_21d = 184; // Interpolated 21 day atm vol
    float atm_cen_i_42d = 187; // Interpolated 42 day atm vol
    float atm_cen_i_63d = 190; // Interpolated 63 day atm vol
    float atm_cen_i_84d = 193; // Interpolated 84 day atm vol
    float atm_cen_i_105d = 196; // Interpolated 105 day atm vol
    float atm_cen_i_126d = 199; // Interpolated 126 day atm vol
    float atm_cen_i_189d = 202; // Interpolated 189 day atm vol
    float atm_cen_i_252d = 205; // Interpolated 252 day atm vol
    float atm_cen_i_378d = 208; // Interpolated 378 day atm vol
    float atm_cen_i_504d = 211; // Interpolated 504 day atm vol
    float atm_cen_h_st = 214; // short term (5 day) model atm volatility (censored using hEMult)
    float atm_cen_h_lt = 217; // long term (504 day) model atm volatility
    float atm_cen_h_decay = 220; // model decay parameter
    float atm_cen_h_5d = 223; // Interpolated 5 day atm vol (censored using hEMult)
    float atm_cen_h_10d = 226; // Interpolated 10 day atm vol
    float atm_cen_h_21d = 229; // Interpolated 21 day atm vol
    float atm_cen_h_42d = 232; // Interpolated 42 day atm vol
    float atm_cen_h_63d = 235; // Interpolated 63 day atm vol
    float atm_cen_h_84d = 238; // Interpolated 84 day atm vol
    float atm_cen_h_105d = 241; // Interpolated 105 day atm vol
    float atm_cen_h_126d = 244; // Interpolated 126 day atm vol
    float atm_cen_h_189d = 247; // Interpolated 189 day atm vol
    float atm_cen_h_252d = 250; // Interpolated 252 day atm vol
    float atm_cen_h_378d = 253; // Interpolated 378 day atm vol
    float atm_cen_h_504d = 256; // Interpolated 504 day atm vol
    float s_div_5d = 259; // Interpolated 5 day implied sdiv rate
    float s_div_10d = 262; // Interpolated 10 day implied sdiv rate
    float s_div_21d = 265; // Interpolated 21 day implied sdiv rate
    float s_div_42d = 268; // Interpolated 42 day implied sdiv rate
    float s_div_63d = 271; // Interpolated 63 day implied sdiv rate
    float s_div_84d = 274; // Interpolated 84 day implied sdiv rate
    float s_div_105d = 277; // Interpolated 105 day implied sdiv rate
    float s_div_126d = 280; // Interpolated 126 day implied sdiv rate
    float s_div_189d = 283; // Interpolated 189 day implied sdiv rate
    float s_div_252d = 286; // Interpolated 252 day implied sdiv rate
    float s_div_378d = 289; // Interpolated 378 day implied sdiv rate
    float s_div_504d = 292; // Interpolated 504 day implied sdiv rate
    float fwd_uPrc_5d = 295; // Interpolated 5 day implied forward price
    float fwd_uPrc_10d = 298; // Interpolated 10 day implied forward price
    float fwd_uPrc_21d = 301; // Interpolated 21 day implied forward price
    float fwd_uPrc_42d = 304; // Interpolated 42 day implied forward price
    float fwd_uPrc_63d = 307; // Interpolated 63 day implied forward price
    float fwd_uPrc_84d = 310; // Interpolated 84 day implied forward price
    float fwd_uPrc_105d = 313; // Interpolated 105 day implied forward price
    float fwd_uPrc_126d = 316; // Interpolated 126 day implied forward price
    float fwd_uPrc_189d = 319; // Interpolated 189 day implied forward price
    float fwd_uPrc_252d = 322; // Interpolated 252 day implied forward price
    float fwd_uPrc_378d = 325; // Interpolated 378 day implied forward price
    float fwd_uPrc_504d = 328; // Interpolated 504 day implied forward price
    float v_width_5d = 331; // Interpolated 5 day market vwidth
    float v_width_10d = 334; // Interpolated 10 day market vwidth
    float v_width_21d = 337; // Interpolated 21 day market vwidth
    float v_width_42d = 340; // Interpolated 42 day market vwidth
    float v_width_63d = 343; // Interpolated 63 day market vwidth
    float v_width_84d = 346; // Interpolated 84 day market vwidth
    float v_width_105d = 349; // Interpolated 105 day market vwidth
    float v_width_126d = 352; // Interpolated 126 day market vwidth
    float v_width_189d = 355; // Interpolated 189 day market vwidth
    float v_width_252d = 358; // Interpolated 252 day market vwidth
    float v_width_378d = 361; // Interpolated 378 day market vwidth
    float v_width_504d = 364; // Interpolated 504 day market vwidth
    float v_slope_5d = 367; // Interpolated 5 day atm vol slope
    float v_slope_10d = 370; // Interpolated 10 day atm vol slope
    float v_slope_21d = 373; // Interpolated 21 day atm vol slope
    float v_slope_42d = 376; // Interpolated 42 day atm vol slope
    float v_slope_63d = 379; // Interpolated 63 day atm vol slope
    float v_slope_84d = 382; // Interpolated 84 day atm vol slope
    float v_slope_105d = 385; // Interpolated 105 day atm vol slope
    float v_slope_126d = 388; // Interpolated 126 day atm vol slope
    float v_slope_189d = 391; // Interpolated 189 day atm vol slope
    float v_slope_252d = 394; // Interpolated 252 day atm vol slope
    float v_slope_378d = 397; // Interpolated 378 day atm vol slope
    float v_slope_504d = 400; // Interpolated 504 day atm vol slope
    int32 e_cnt_5d = 403; // number of expected earnings events
    int32 e_cnt_10d = 406; // number of expected earnings events
    int32 e_cnt_21d = 409; // number of expected earnings events
    int32 e_cnt_42d = 412; // number of expected earnings events
    int32 e_cnt_63d = 415; // number of expected earnings events
    int32 e_cnt_84d = 418; // number of expected earnings events
    int32 e_cnt_105d = 421; // number of expected earnings events
    int32 e_cnt_126d = 424; // number of expected earnings events
    int32 e_cnt_189d = 427; // number of expected earnings events
    int32 e_cnt_252d = 430; // number of expected earnings events
    int32 e_cnt_378d = 433; // number of expected earnings events
    int32 e_cnt_504d = 436; // number of expected earnings events
    CurveStatus status = 439;
    google.protobuf.Duration time = 442;
    google.protobuf.Timestamp timestamp = 445; // update timestamp
}


    
message LiveSurfaceModel {
    message PKey {
        
        ExpiryKey ekey = 10;
        string model = 13; // model archive name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlying stock key that this option expiration attaches to
    float years = 103; // time to expiration (in years)
    float atm_vega = 106; // surface vega @ ATM (xAxis=0)
    float e_move = 109; // implied earnings move (from LiveSurfaceTerm)
    float e_move_hist = 112; // historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    float earn_effect = 115;
    float min_xAxis = 118; // minimum xAxis value; xAxis values to the left extrapolate horizontally
    float max_xAxis = 121; // maximum xAxis value; xAxis values to the right extrapolate horizontally
    float u_mid = 124;
    float u_mid_ema1 = 127;
    float u_mid_ema2 = 130;
    float u_mid_ema3 = 133;
    float u_mid_ema4 = 136;
    float atm_vol = 139; // atm vol (xAxis = 0)
    float atm_vol_ema1 = 142;
    float atm_vol_ema2 = 145;
    float atm_vol_ema3 = 148;
    float atm_vol_ema4 = 151;
    float skew_c00 = 154; // skew coeff (volatility skew curve)
    float skew_c00_ema1 = 157;
    float skew_c00_ema2 = 160;
    float skew_c00_ema3 = 163;
    float skew_c00_ema4 = 166;
    float skew_c01 = 169; // skew coeff (volatility skew curve)
    float skew_c01_ema1 = 172;
    float skew_c01_ema2 = 175;
    float skew_c01_ema3 = 178;
    float skew_c01_ema4 = 181;
    float skew_c02 = 184; // skew coeff (volatility skew curve)
    float skew_c02_ema1 = 187;
    float skew_c02_ema2 = 190;
    float skew_c02_ema3 = 193;
    float skew_c02_ema4 = 196;
    float skew_c03 = 199; // skew coeff (volatility skew curve)
    float skew_c03_ema1 = 202;
    float skew_c03_ema2 = 205;
    float skew_c03_ema3 = 208;
    float skew_c03_ema4 = 211;
    float skew_c04 = 214; // skew coeff (volatility skew curve)
    float skew_c04_ema1 = 217;
    float skew_c04_ema2 = 220;
    float skew_c04_ema3 = 223;
    float skew_c04_ema4 = 226;
    float skew_c05 = 229; // skew coeff (volatility skew curve)
    float skew_c05_ema1 = 232;
    float skew_c05_ema2 = 235;
    float skew_c05_ema3 = 238;
    float skew_c05_ema4 = 241;
    float skew_c06 = 244; // skew coeff (volatility skew curve)
    float skew_c06_ema1 = 247;
    float skew_c06_ema2 = 250;
    float skew_c06_ema3 = 253;
    float skew_c06_ema4 = 256;
    float skew_c07 = 259; // skew coeff (volatility skew curve)
    float skew_c07_ema1 = 262;
    float skew_c07_ema2 = 265;
    float skew_c07_ema3 = 268;
    float skew_c07_ema4 = 271;
    float skew_c08 = 274; // skew coeff (volatility skew curve)
    float skew_c08_ema1 = 277;
    float skew_c08_ema2 = 280;
    float skew_c08_ema3 = 283;
    float skew_c08_ema4 = 286;
    float skew_c09 = 289; // skew coeff (volatility skew curve)
    float skew_c09_ema1 = 292;
    float skew_c09_ema2 = 295;
    float skew_c09_ema3 = 298;
    float skew_c09_ema4 = 301;
    float skew_c10 = 304; // skew coeff (volatility skew curve)
    float skew_c10_ema1 = 307;
    float skew_c10_ema2 = 310;
    float skew_c10_ema3 = 313;
    float skew_c10_ema4 = 316;
    float skew_c11 = 319; // skew coeff (volatility skew curve)
    float skew_c11_ema1 = 322;
    float skew_c11_ema2 = 325;
    float skew_c11_ema3 = 328;
    float skew_c11_ema4 = 331;
    float skew_c12 = 334; // skew coeff (volatility skew curve)
    float skew_c12_ema1 = 337;
    float skew_c12_ema2 = 340;
    float skew_c12_ema3 = 343;
    float skew_c12_ema4 = 346;
    float skew_c13 = 349; // skew coeff (volatility skew curve)
    float skew_c13_ema1 = 352;
    float skew_c13_ema2 = 355;
    float skew_c13_ema3 = 358;
    float skew_c13_ema4 = 361;
    float skew_c14 = 364; // skew coeff (volatility skew curve)
    float skew_c14_ema1 = 367;
    float skew_c14_ema2 = 370;
    float skew_c14_ema3 = 373;
    float skew_c14_ema4 = 376;
    float skew_c15 = 379; // skew coeff (volatility skew curve)
    float skew_c15_ema1 = 382;
    float skew_c15_ema2 = 385;
    float skew_c15_ema3 = 388;
    float skew_c15_ema4 = 391;
    float skew_c16 = 394; // skew coeff (volatility skew curve)
    float skew_c16_ema1 = 397;
    float skew_c16_ema2 = 400;
    float skew_c16_ema3 = 403;
    float skew_c16_ema4 = 406;
    float skew_c17 = 409; // skew coeff (volatility skew curve)
    float skew_c17_ema1 = 412;
    float skew_c17_ema2 = 415;
    float skew_c17_ema3 = 418;
    float skew_c17_ema4 = 421;
    float skew_c18 = 424; // skew coeff (volatility skew curve)
    float skew_c18_ema1 = 427;
    float skew_c18_ema2 = 430;
    float skew_c18_ema3 = 433;
    float skew_c18_ema4 = 436;
    float skew_c19 = 439; // skew coeff (volatility skew curve)
    float skew_c19_ema1 = 442;
    float skew_c19_ema2 = 445;
    float skew_c19_ema3 = 448;
    float skew_c19_ema4 = 451;
    float skew_c20 = 454; // skew coeff (volatility skew curve)
    float skew_c20_ema1 = 457;
    float skew_c20_ema2 = 460;
    float skew_c20_ema3 = 463;
    float skew_c20_ema4 = 466;
    float skew_c21 = 469; // skew coeff (volatility skew curve)
    float skew_c21_ema1 = 472;
    float skew_c21_ema2 = 475;
    float skew_c21_ema3 = 478;
    float skew_c21_ema4 = 481;
    float skew_c22 = 484; // skew coeff (volatility skew curve)
    float skew_c22_ema1 = 487;
    float skew_c22_ema2 = 490;
    float skew_c22_ema3 = 493;
    float skew_c22_ema4 = 496;
    float skew_c23 = 499; // skew coeff (volatility skew curve)
    float skew_c23_ema1 = 502;
    float skew_c23_ema2 = 505;
    float skew_c23_ema3 = 508;
    float skew_c23_ema4 = 511;
    float skew_c24 = 514; // skew coeff (volatility skew curve)
    float skew_c24_ema1 = 517;
    float skew_c24_ema2 = 520;
    float skew_c24_ema3 = 523;
    float skew_c24_ema4 = 526;
    float skew_c25 = 529; // skew coeff (volatility skew curve)
    float skew_c25_ema1 = 532;
    float skew_c25_ema2 = 535;
    float skew_c25_ema3 = 538;
    float skew_c25_ema4 = 541;
    float skew_c26 = 544; // skew coeff (volatility skew curve)
    float skew_c26_ema1 = 547;
    float skew_c26_ema2 = 550;
    float skew_c26_ema3 = 553;
    float skew_c26_ema4 = 556;
    float skew_c27 = 559; // skew coeff (volatility skew curve)
    float skew_c27_ema1 = 562;
    float skew_c27_ema2 = 565;
    float skew_c27_ema3 = 568;
    float skew_c27_ema4 = 571;
    float skew_c28 = 574; // skew coeff (volatility skew curve)
    float skew_c28_ema1 = 577;
    float skew_c28_ema2 = 580;
    float skew_c28_ema3 = 583;
    float skew_c28_ema4 = 586;
    float v_width_d11 = 589; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d11_ema1 = 592;
    float v_width_d11_ema2 = 595;
    float v_width_d11_ema3 = 598;
    float v_width_d11_ema4 = 601;
    float v_width_d10 = 604; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d10_ema1 = 607;
    float v_width_d10_ema2 = 610;
    float v_width_d10_ema3 = 613;
    float v_width_d10_ema4 = 616;
    float v_width_d09 = 619; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d09_ema1 = 622;
    float v_width_d09_ema2 = 625;
    float v_width_d09_ema3 = 628;
    float v_width_d09_ema4 = 631;
    float v_width_d08 = 634; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d08_ema1 = 637;
    float v_width_d08_ema2 = 640;
    float v_width_d08_ema3 = 643;
    float v_width_d08_ema4 = 646;
    float v_width_d07 = 649; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d07_ema1 = 652;
    float v_width_d07_ema2 = 655;
    float v_width_d07_ema3 = 658;
    float v_width_d07_ema4 = 661;
    float v_width_d06 = 664; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d06_ema1 = 667;
    float v_width_d06_ema2 = 670;
    float v_width_d06_ema3 = 673;
    float v_width_d06_ema4 = 676;
    float v_width_d05 = 679; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d05_ema1 = 682;
    float v_width_d05_ema2 = 685;
    float v_width_d05_ema3 = 688;
    float v_width_d05_ema4 = 691;
    float v_width_d04 = 694; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d04_ema1 = 697;
    float v_width_d04_ema2 = 700;
    float v_width_d04_ema3 = 703;
    float v_width_d04_ema4 = 706;
    float v_width_d03 = 709; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d03_ema1 = 712;
    float v_width_d03_ema2 = 715;
    float v_width_d03_ema3 = 718;
    float v_width_d03_ema4 = 721;
    float v_width_d02 = 724; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d02_ema1 = 727;
    float v_width_d02_ema2 = 730;
    float v_width_d02_ema3 = 733;
    float v_width_d02_ema4 = 736;
    float v_width_d01 = 739; // vWidth @ knot point (volatility vWidth curve)
    float v_width_d01_ema1 = 742;
    float v_width_d01_ema2 = 745;
    float v_width_d01_ema3 = 748;
    float v_width_d01_ema4 = 751;
    float v_width_c00 = 754; // vWidth @ knot point (volatility vWidth curve)
    float v_width_c00_ema1 = 757;
    float v_width_c00_ema2 = 760;
    float v_width_c00_ema3 = 763;
    float v_width_c00_ema4 = 766;
    float v_width_u01 = 769; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u01_ema1 = 772;
    float v_width_u01_ema2 = 775;
    float v_width_u01_ema3 = 778;
    float v_width_u01_ema4 = 781;
    float v_width_u02 = 784; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u02_ema1 = 787;
    float v_width_u02_ema2 = 790;
    float v_width_u02_ema3 = 793;
    float v_width_u02_ema4 = 796;
    float v_width_u03 = 799; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u03_ema1 = 802;
    float v_width_u03_ema2 = 805;
    float v_width_u03_ema3 = 808;
    float v_width_u03_ema4 = 811;
    float v_width_u04 = 814; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u04_ema1 = 817;
    float v_width_u04_ema2 = 820;
    float v_width_u04_ema3 = 823;
    float v_width_u04_ema4 = 826;
    float v_width_u05 = 829; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u05_ema1 = 832;
    float v_width_u05_ema2 = 835;
    float v_width_u05_ema3 = 838;
    float v_width_u05_ema4 = 841;
    float v_width_u06 = 844; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u06_ema1 = 847;
    float v_width_u06_ema2 = 850;
    float v_width_u06_ema3 = 853;
    float v_width_u06_ema4 = 856;
    float v_width_u07 = 859; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u07_ema1 = 862;
    float v_width_u07_ema2 = 865;
    float v_width_u07_ema3 = 868;
    float v_width_u07_ema4 = 871;
    float v_width_u08 = 874; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u08_ema1 = 877;
    float v_width_u08_ema2 = 880;
    float v_width_u08_ema3 = 883;
    float v_width_u08_ema4 = 886;
    float v_width_u09 = 889; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u09_ema1 = 892;
    float v_width_u09_ema2 = 895;
    float v_width_u09_ema3 = 898;
    float v_width_u09_ema4 = 901;
    float v_width_u10 = 904; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u10_ema1 = 907;
    float v_width_u10_ema2 = 910;
    float v_width_u10_ema3 = 913;
    float v_width_u10_ema4 = 916;
    float v_width_u11 = 919; // vWidth @ knot point (volatility vWidth curve)
    float v_width_u11_ema1 = 922;
    float v_width_u11_ema2 = 925;
    float v_width_u11_ema3 = 928;
    float v_width_u11_ema4 = 931;
    sfixed32 ema_counter = 934;
    float skew_c00_p = 937; // skew predict coeff
    float skew_c01_p = 940; // skew predict coeff
    float skew_c02_p = 943; // skew predict coeff
    float skew_c03_p = 946; // skew predict coeff
    float skew_c04_p = 949; // skew predict coeff
    float skew_c05_p = 952; // skew predict coeff
    float skew_c06_p = 955; // skew predict coeff
    float skew_c07_p = 958; // skew predict coeff
    float skew_c08_p = 961; // skew predict coeff
    float skew_c09_p = 964; // skew predict coeff
    float skew_c10_p = 967; // skew predict coeff
    float skew_c11_p = 970; // skew predict coeff
    float skew_c12_p = 973; // skew predict coeff
    float skew_c13_p = 976; // skew predict coeff
    float skew_c14_p = 979; // skew predict coeff
    float skew_c15_p = 982; // skew predict coeff
    float skew_c16_p = 985; // skew predict coeff
    float skew_c17_p = 988; // skew predict coeff
    float skew_c18_p = 991; // skew predict coeff
    float skew_c19_p = 994; // skew predict coeff
    float skew_c20_p = 997; // skew predict coeff
    float skew_c21_p = 1000; // skew predict coeff
    float skew_c22_p = 1003; // skew predict coeff
    float skew_c23_p = 1006; // skew predict coeff
    float skew_c24_p = 1009; // skew predict coeff
    float skew_c25_p = 1012; // skew predict coeff
    float skew_c26_p = 1015; // skew predict coeff
    float skew_c27_p = 1018; // skew predict coeff
    float skew_c28_p = 1021; // skew predict coeff
    sfixed32 counter = 1024;
    google.protobuf.Timestamp timestamp = 1027;
    float u_mid_f = 1030;
    float atm_vol_f = 1033;
    float skew_c00_f = 1036; // skew forward coeff
    float skew_c01_f = 1039; // skew forward coeff
    float skew_c02_f = 1042; // skew forward coeff
    float skew_c03_f = 1045; // skew forward coeff
    float skew_c04_f = 1048; // skew forward coeff
    float skew_c05_f = 1051; // skew forward coeff
    float skew_c06_f = 1054; // skew forward coeff
    float skew_c07_f = 1057; // skew forward coeff
    float skew_c08_f = 1060; // skew forward coeff
    float skew_c09_f = 1063; // skew forward coeff
    float skew_c10_f = 1066; // skew forward coeff
    float skew_c11_f = 1069; // skew forward coeff
    float skew_c12_f = 1072; // skew forward coeff
    float skew_c13_f = 1075; // skew forward coeff
    float skew_c14_f = 1078; // skew forward coeff
    float skew_c15_f = 1081; // skew forward coeff
    float skew_c16_f = 1084; // skew forward coeff
    float skew_c17_f = 1087; // skew forward coeff
    float skew_c18_f = 1090; // skew forward coeff
    float skew_c19_f = 1093; // skew forward coeff
    float skew_c20_f = 1096; // skew forward coeff
    float skew_c21_f = 1099; // skew forward coeff
    float skew_c22_f = 1102; // skew forward coeff
    float skew_c23_f = 1105; // skew forward coeff
    float skew_c24_f = 1108; // skew forward coeff
    float skew_c25_f = 1111; // skew forward coeff
    float skew_c26_f = 1114; // skew forward coeff
    float skew_c27_f = 1117; // skew forward coeff
    float skew_c28_f = 1120; // skew forward coeff
    google.protobuf.Timestamp timestamp_f = 1123;
}


/*
    LiveSurfacePerf records contain current and prior period implied ATM volatilities and greeks and as well as fixed-strike PnL values.  The strike used for the fix-strike calculation is equal to the forward underlier price that prevailed on the open.  Note that this strike price 'resets' each day.
    LiveSurfacePerf records are published to the SpiderRock elastic cluster at the end of the day for each option expiration.  These records are designed to allow fixed strike EOD to EOD attributed PnL to be easily calculated.  These records can also be used to measure atm volatility dynamics.
*/    
message LiveSurfacePerf {
    message PKey {
        
        ExpiryKey ekey = 10;
        PerfSurfaceType perf_surf_type = 13; // Preferred surface type: None; Live; PriorDay
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100;
    string time = 103;
    TickerKey ticker = 106; // SpiderRock underlier stock key
    float u_mark = 109; // current underlier mark (usually mid market)
    float years = 112; // time to expiration (in years)
    float rate = 115; // interest rate
    float sdiv = 118; // stock dividend (borrow rate)
    float ddiv = 121; // present value of discrete dividend stream
    float event_cnt = 124; // number of qualifying earnings (or earnings like) events (between now and expiration) [can be fractional]
    float i_eMove = 127; // implied event move (if any)
    float h_eMove = 130; // average of the trailing 12 historical (quarterly) earnings moves (if any)
    float strike = 133; // atm strike = uMark * Math.Exp(years * rate) - ddiv;
    float c_iVol = 136; // call surface atm vol @ strike = uMark
    float p_iVol = 139; // put surface atm vol @ strike = uMark
    float c_sOpx = 142; // call option price @ (cAtm, uMark, years, sdiv, rate, ddiv);strike = uMark
    float p_sOpx = 145; // put option price @ (pAtm, uMark, years, sdiv, rate, ddiv);strike = uMark
    float c_de = 148; // surface call delta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float c_ga = 151; // surface call gamma @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float c_th = 154; // surface call theta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float c_ve = 157; // surface call vega @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float c_ro = 160; // surface call rho @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float p_de = 163; // surface put delta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float p_ga = 166; // surface put gamma @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float p_th = 169; // surface put theta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float p_ve = 172; // surface put vega @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float p_ro = 175; // surface put rho @ (pAtm, uMark, years, sdiv, rate, ddiv)
    int32 xx_cnt = 178; // number of valid surface strikes
    float pwidth = 181; // minimum mkt premium width
    float vwidth = 184; // minimum mkt volatility width
    float fix_cIVol = 187; // fixed strike call surface atm vol @ strike = prvUMark
    float fix_pIVol = 190; // fixed strike put surface atm vol @ strike = prvUMark
    float fix_cSOpx = 193; // fixed strike call option price @ (fixCAtm, uMark, years, sdiv, rate, ddiv);strike = prvUMark
    float fix_pSOpx = 196; // fixed strike put option price @ (fixPAtm, uMark, years, sdiv, rate, ddiv);strike = prvUMark
    float prv_uMark = 199; // prior period underlier mark
    float prv_years = 202; // prior period years to expiration
    float prv_sDiv = 205; // prior period sdiv
    float prv_rate = 208; // prior period rate
    float prv_dDiv = 211; // prior period ddiv
    float prv_strike = 214; // prior period atm strike = prvUMark * Math.Exp(years * rate) - ddiv;
    float prv_event_cnt = 217; // number of qualifying earnings (or earnings like) events (between now and expiration) [can be fractional]
    float prv_iEMove = 220; // prior period implied event move (if any)
    float prv_cIVol = 223; // prior period surface cAtm @ strike = prvMark
    float prv_pIVol = 226; // prior period surface pAtm @ strike = prvMark
    float prv_cSOpx = 229; // prior period call surface price @ strike = prvUMark
    float prv_pSOpx = 232; // prior period put surface price @ strike = prvUMark
    float prv_cDe = 235; // prior period surface call delta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float prv_cGa = 238; // prior period surface call gamma @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float prv_cTh = 241; // prior period surface call theta @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float prv_cVe = 244; // prior period surface call vega @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float prv_cRo = 247; // prior period surface call rho @ (cAtm, uMark, years, sdiv, rate, ddiv)
    float prv_pDe = 250; // prior period surface put delta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float prv_pGa = 253; // prior period surface put gamma @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float prv_pTh = 256; // prior period surface put theta @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float prv_pVe = 259; // prior period surface put vega @ (pAtm, uMark, years, sdiv, rate, ddiv)
    float prv_pRo = 262; // prior period surface put rho @ (pAtm, uMark, years, sdiv, rate, ddiv)
    int32 prv_xXCnt = 265; // prior period number of valid surface strikes
    float prv_pWidth = 268; // prior period minimum mkt premium width
    float prv_vWidth = 271; // prior period minimum mkt volatility width
    float c_opt_pn_l = 274; // call option pnl (fixCOpx - prvCOpx)
    float p_opt_pn_l = 277; // put option pnl (fixPOpx - prvPOpx)
    float d_uPrc = 280; // uMark - prvUMark
    float c_de_pn_l = 283; // prvCDe * dUPrc
    float c_ga_pn_l = 286; // 0.5 * prvCGa * dUPrc * dUPrc
    float c_th_pn_l = 289; // prvCTh * (years - prvYears)
    float c_ve_pn_l = 292; // prvCVe * (0.5 * (fixCAtm + fixPAtm) - 0.5 * (prvCAtm + prvPAtm))
    float c_ro_pn_l = 295; // prvCRo * (sdiv - prvSDiv)
    float p_de_pn_l = 298; // prvPDe * dUPrc
    float p_ga_pn_l = 301; // 0.5 * prvPGa * dUPrc * dUPrc
    float p_th_pn_l = 304; // prvPTh * (years - prvYears)
    float p_ve_pn_l = 307; // prvPVe * (0.5 * (fixCAtm + fixPAtm) - 0.5 * (prvCAtm + prvPAtm))
    float p_ro_pn_l = 310; // prvPRo * (sdiv - prvSDiv)
    google.protobuf.Timestamp timestamp = 313;
}


    
message LiveSurfacePredict {
    message PKey {
        
        ExpiryKey ekey = 10;
        string model = 13; // model archive name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float min_xAxis = 100; // minimum xAxis value; xAxis values to the left extrapolate horizontally
    float max_xAxis = 103; // maximum xAxis value; xAxis values to the right extrapolate horizontally
    float u_mid = 106;
    float atm_vol = 109; // atm vol (xAxis = 0)
    float skew_c00 = 112; // skew coeff @ knot point
    float skew_c01 = 115; // skew coeff @ knot point
    float skew_c02 = 118; // skew coeff @ knot point
    float skew_c03 = 121; // skew coeff @ knot point
    float skew_c04 = 124; // skew coeff @ knot point
    float skew_c05 = 127; // skew coeff @ knot point
    float skew_c06 = 130; // skew coeff @ knot point
    float skew_c07 = 133; // skew coeff @ knot point
    float skew_c08 = 136; // skew coeff @ knot point
    float skew_c09 = 139; // skew coeff @ knot point
    float skew_c10 = 142; // skew coeff @ knot point
    float skew_c11 = 145; // skew coeff @ knot point
    float skew_c12 = 148; // skew coeff @ knot point
    float skew_c13 = 151; // skew coeff @ knot point
    float skew_c14 = 154; // skew coeff @ knot point
    float skew_c15 = 157; // skew coeff @ knot point
    float skew_c16 = 160; // skew coeff @ knot point
    float skew_c17 = 163; // skew coeff @ knot point
    float skew_c18 = 166; // skew coeff @ knot point
    float skew_c19 = 169; // skew coeff @ knot point
    float skew_c20 = 172; // skew coeff @ knot point
    float skew_c21 = 175; // skew coeff @ knot point
    float skew_c22 = 178; // skew coeff @ knot point
    float skew_c23 = 181; // skew coeff @ knot point
    float skew_c24 = 184; // skew coeff @ knot point
    float skew_c25 = 187; // skew coeff @ knot point
    float skew_c26 = 190; // skew coeff @ knot point
    float skew_c27 = 193; // skew coeff @ knot point
    float skew_c28 = 196; // skew coeff @ knot point
    float skew_c00_p = 199; // skew coeff @ knot point
    float skew_c01_p = 202; // skew coeff @ knot point
    float skew_c02_p = 205; // skew coeff @ knot point
    float skew_c03_p = 208; // skew coeff @ knot point
    float skew_c04_p = 211; // skew coeff @ knot point
    float skew_c05_p = 214; // skew coeff @ knot point
    float skew_c06_p = 217; // skew coeff @ knot point
    float skew_c07_p = 220; // skew coeff @ knot point
    float skew_c08_p = 223; // skew coeff @ knot point
    float skew_c09_p = 226; // skew coeff @ knot point
    float skew_c10_p = 229; // skew coeff @ knot point
    float skew_c11_p = 232; // skew coeff @ knot point
    float skew_c12_p = 235; // skew coeff @ knot point
    float skew_c13_p = 238; // skew coeff @ knot point
    float skew_c14_p = 241; // skew coeff @ knot point
    float skew_c15_p = 244; // skew coeff @ knot point
    float skew_c16_p = 247; // skew coeff @ knot point
    float skew_c17_p = 250; // skew coeff @ knot point
    float skew_c18_p = 253; // skew coeff @ knot point
    float skew_c19_p = 256; // skew coeff @ knot point
    float skew_c20_p = 259; // skew coeff @ knot point
    float skew_c21_p = 262; // skew coeff @ knot point
    float skew_c22_p = 265; // skew coeff @ knot point
    float skew_c23_p = 268; // skew coeff @ knot point
    float skew_c24_p = 271; // skew coeff @ knot point
    float skew_c25_p = 274; // skew coeff @ knot point
    float skew_c26_p = 277; // skew coeff @ knot point
    float skew_c27_p = 280; // skew coeff @ knot point
    float skew_c28_p = 283; // skew coeff @ knot point
    float skew_c00_f = 286; // skew coeff @ knot point
    float skew_c01_f = 289; // skew coeff @ knot point
    float skew_c02_f = 292; // skew coeff @ knot point
    float skew_c03_f = 295; // skew coeff @ knot point
    float skew_c04_f = 298; // skew coeff @ knot point
    float skew_c05_f = 301; // skew coeff @ knot point
    float skew_c06_f = 304; // skew coeff @ knot point
    float skew_c07_f = 307; // skew coeff @ knot point
    float skew_c08_f = 310; // skew coeff @ knot point
    float skew_c09_f = 313; // skew coeff @ knot point
    float skew_c10_f = 316; // skew coeff @ knot point
    float skew_c11_f = 319; // skew coeff @ knot point
    float skew_c12_f = 322; // skew coeff @ knot point
    float skew_c13_f = 325; // skew coeff @ knot point
    float skew_c14_f = 328; // skew coeff @ knot point
    float skew_c15_f = 331; // skew coeff @ knot point
    float skew_c16_f = 334; // skew coeff @ knot point
    float skew_c17_f = 337; // skew coeff @ knot point
    float skew_c18_f = 340; // skew coeff @ knot point
    float skew_c19_f = 343; // skew coeff @ knot point
    float skew_c20_f = 346; // skew coeff @ knot point
    float skew_c21_f = 349; // skew coeff @ knot point
    float skew_c22_f = 352; // skew coeff @ knot point
    float skew_c23_f = 355; // skew coeff @ knot point
    float skew_c24_f = 358; // skew coeff @ knot point
    float skew_c25_f = 361; // skew coeff @ knot point
    float skew_c26_f = 364; // skew coeff @ knot point
    float skew_c27_f = 367; // skew coeff @ knot point
    float skew_c28_f = 370; // skew coeff @ knot point
    sfixed32 counter = 373;
    google.protobuf.Timestamp timestamp = 376;
}


    
message LiveSurfaceStats {
    message PKey {
        
        ExpiryKey ekey = 10;
        string time_block = 13;
        StatsServer source_server = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    float u_prc = 103; // underlier price (w/uPrcOffset if any)
    sfixed32 num_passes = 106; // number of evaluation passes
    sfixed32 cnt_strikes_dd_p = 109; // number of strikes examined
    sfixed32 cnt_pn_lDd_bot_p = 112; // deep downside (xAxis < -2.5) [puts]
    float sum_pn_lDd_bot_p = 115;
    sfixed32 cnt_pn_lDd_sld_p = 118; // deep downside (xAxis < -2.5) [puts]
    float sum_pn_lDd_sld_p = 121;
    sfixed32 cnt_strikes_dn_p = 124;
    sfixed32 cnt_pn_lDn_bot_p = 127; // downside (-2.5 < xAxis < -0.5) [puts]
    float sum_pn_lDn_bot_p = 130;
    sfixed32 cnt_pn_lDn_sld_p = 133; // downside (-2.5 < xAxis < -0.5) [puts]
    float sum_pn_lDn_sld_p = 136;
    sfixed32 cnt_strikes_at_p = 139;
    sfixed32 cnt_pn_lAt_bot_p = 142; // atm  calls (-0.5 < xAxis < +0.5) [puts]
    float sum_pn_lAt_bot_p = 145;
    sfixed32 cnt_pn_lAt_sld_p = 148; // atm  calls (-0.5 < xAxis < +0.5) [puts]
    float sum_pn_lAt_sld_p = 151;
    sfixed32 cnt_strikes_at_c = 154;
    sfixed32 cnt_pn_lAt_bot_c = 157; // atm  calls (-0.5 < xAxis < +0.5) [calls]
    float sum_pn_lAt_bot_c = 160;
    sfixed32 cnt_pn_lAt_sld_c = 163; // atm  calls (-0.5 < xAxis < +0.5) [calls]
    float sum_pn_lAt_sld_c = 166;
    sfixed32 cnt_strikes_up_c = 169;
    sfixed32 cnt_pn_lUp_bot_c = 172; // upside  (+0.5 < xAxis < +2.5) [calls]
    float sum_pn_lUp_bot_c = 175;
    sfixed32 cnt_pn_lUp_sld_c = 178; // upside  (+0.5 < xAxis < +2.5) [calls]
    float sum_pn_lUp_sld_c = 181;
    sfixed32 cnt_strikes_uu_c = 184;
    sfixed32 cnt_pn_lUu_bot_c = 187; // far upside (+2.5 < xAxis ) [calls]
    float sum_pn_lUu_bot_c = 190;
    sfixed32 cnt_pn_lUu_sld_c = 193; // far upside (+2.5 < xAxis ) [calls]
    float sum_pn_lUu_sld_c = 196;
    google.protobuf.Timestamp timestamp = 199;
}


/*
    Records inserted, updated, or replaced into the MLegOrderGateway table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.
    See the SpiderRock Execution Engine concept guide for more details.
*/    
message MLegOrderGateway {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13; // Will automatically be set to the account associated with DB login
        sfixed64 grouping_code = 16; // Client supplied order
        BuySell order_side = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    SpdrActionType spdr_action_type = 103; // [Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]
    string alt_order_id = 106; // Alternate client order ID.  This order ID will be copied to all execution reports.
    string alt_auto_hedge_id = 109; // alternate order ID for child autohedge orders (if any)
    string alt_accnt = 112; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 115; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string accnt_route_code = 118; // accntRoute acronym
    string strategy = 121; // Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.
    YesNo visible_in_sV = 124; // allow order to be visible in SV (do not use for high volume of orders)
    google.protobuf.Timestamp order_dttm = 127; // order entry time (from client;if any)
    sfixed32 order_size = 130; // parent order size (contracts) [-1 = no change;used when spdrActionType=Release]
    sfixed32 order_active_size = 133; // total activated size (total size released for execution) (-1 = all available size)
    YesNo add_cum_fill_quantity = 136; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    fixed32 exch_mask = 139; // eligible exchanges (0 = all)
    sfixed32 max_exposure_size = 142; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 145; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 148; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; MktSize=expose only 'typical' market size; FullSize=expose entire order size where possible
    YesNo randomize_size = 151; // randomize public order size
    YesNo can_overlap_cxl_repl = 154; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 157; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 twap_slice_cnt = 160; // [ProgressSliceCnt] number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 163; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    AuctionResponder auction_responder = 166; // if set, parent order can be an auction responder
    AutoHedge auto_hedge = 169;
    HedgeInst hedge_instrument = 172; // Default=underlier (EQT or FUT) [Index Options use ETF]; FrontMonth=underlier (EQT) or front month (FUT) [Index Options use FM Fut]; Stock=hedgeSecKey; Future=hedgeSecKey
    ExpiryKey hedge_sec_key = 175; // auto-hedge instrument (either TickerKey or ExpiryKey)
    float hedge_beta_ratio = 178; // Portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 181; // Auto-hedge at the RiskGroup or Accnt level
    TimeInForce hedge_tIF = 184; // time in force for the autohedge order (can be Day or ExtDay)
    UPrcCxl cxl_uPrc_range = 187; // cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]
    float min_uBid = 190; // [optional]
    float max_uAsk = 193; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 196; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    sfixed32 max_child_orders = 199; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    SpdrStageType spdr_stage_type = 202; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    TimeInForce time_in_force = 205;
    google.protobuf.Timestamp start_dttm = 208; // [optional] (parent order start time)
    sfixed32 order_duration = 211; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 214; // [optional] (default: 2000-01-01)
    StartType start_type = 217; // [Immediate, WaitTrigger]
    sfixed32 progress_timeout = 220; // cancel if [optional] (number of milliseconds)
    ParentOrderHandling parent_order_handling = 223;
    ParentBalanceHandling parent_balance_handling = 226;
    SpdrLimitType order_limit_type = 229; // Various (Prc, PrcDe, Rel, Market);establishes the primary LimitPrice for a parent order
    SpdrLimitClass take_limit_class = 232; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 235; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 238; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    BuySell lead_side = 241; // for legged orders, which side to lead with.  (optional, None ok)
    double max_completion_slippage = 244; // Maximum price slippage to complete an open basket or a cross auction (face side slippage)
    double order_prc_limit = 247; // Applies if LimitType = Prc[]
    double take_surf_prc_offset = 250; // default=0
    float take_surf_vol_offset = 253; // default=0
    double order_prc_offset = 256; // default=0
    AlphaType take_alpha_type = 259; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 262; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 265; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 268; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if takeAlphaType = Relative]
    float take_probability = 271; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 274; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    FirmType firm_type = 277; // Used to override firmType in account config. Default: None (use SpiderRock account configuration).
    BuySell stock_side = 280; // Stock Orde Side (if any).
    ShortSaleFlag ssale_flag = 283; // Used to determine stock auto-hedge flags.
    sfixed32 stock_shares = 286; // Number of shares in spread package.  Default: 0 (none).
    string alt_stk_leg_iD = 289; // Optional stock leg ID.
    sfixed32 locate_quan = 292; // available locate quantity (if selling short) [will be considered the primary locate for any resulting child orders]
    string locate_firm = 295; // firm granting the locate (also locate firm used on street FIX orders)
    int32 num_option_legs = 298; // The number of valid legs below.  The first leg is required and the rest are optional.  For each optional leg `okey_` and `mult_` must be valid values whereas `side_`, `positionType_`, and `legID_` will be assigned default values.
    Multihedge multihedge = 301;
    OptionType option_type = 304;
    sfixed32 underliers_per_cn = 307; // Default: 100.
    OptionKey okey1 = 310; // Option symbol for leg #1.  Must be a valid option symbol.
    uint32 mult1 = 313; // Multiplier for leg #1.  Must be greater than zero.
    BuySell side1 = 316; // Order side for leg #1.
    PositionType position_type1 = 319; // Position type for leg #1.
    string alt_leg_iD1 = 322; // ID for leg #1.  If left blank will be assigned an auto-generated ID.
    OptionKey okey2 = 325; // Option symbol for leg #2.  Must be a valid option symbol.
    uint32 mult2 = 328; // Multiplier for leg #2.  Must be greater than zero.
    BuySell side2 = 331; // Order side for leg #2.
    PositionType position_type2 = 334; // Position type for leg #2.
    string alt_leg_iD2 = 337; // ID for leg #2.  If left blank will be assigned an auto-generated ID.
    OptionKey okey3 = 340; // Option symbol for leg #3.  Must be a valid option symbol.
    uint32 mult3 = 343; // Multiplier for leg #3.  Must be greater than zero.
    BuySell side3 = 346; // Order side for leg #3.
    PositionType position_type3 = 349; // Position type for leg #3.
    string alt_leg_iD3 = 352; // ID for leg #3.  If left blank will be assigned an auto-generated ID.
    OptionKey okey4 = 355; // Option symbol for leg #4.  Must be a valid option symbol.
    uint32 mult4 = 358; // Multiplier for leg #4.  Must be greater than zero.
    BuySell side4 = 361; // Order side for leg #4.
    PositionType position_type4 = 364; // Position type for leg #4.
    string alt_leg_iD4 = 367; // ID for leg #4.  If left blank will be assigned an auto-generated ID.
    OptionKey okey5 = 370; // Option symbol for leg #5.  Must be a valid option symbol.
    uint32 mult5 = 373; // Multiplier for leg #5.  Must be greater than zero.
    BuySell side5 = 376; // Order side for leg #5.
    PositionType position_type5 = 379; // Position type for leg #5.
    string alt_leg_iD5 = 382; // ID for leg #5.  If left blank will be assigned an auto-generated ID.
    OptionKey okey6 = 385; // Option symbol for leg #6.  Must be a valid option symbol.
    uint32 mult6 = 388; // Multiplier for leg #6.  Must be greater than zero.
    BuySell side6 = 391; // Order side for leg #6.
    PositionType position_type6 = 394; // Position type for leg #6.
    string alt_leg_iD6 = 397; // ID for leg #6.  If left blank will be assigned an auto-generated ID.
    float opt_premium = 400; // The premium for the option legs, a contribution to the order premium.  Valid range is  [-9999.0, 9999.0].  Default: 0.
    float order_ref_uPrc = 403; // The stock reference price, a contribution to the order premium.  Default: 0.
    sfixed64 risk_group_id = 406; // Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    RMetricSource ref_rMetric1_src = 409;
    RMetricSource ref_rMetric2_src = 412;
    RMetricSource ref_rMetric3_src = 415;
    RMetricSource ref_rMetric4_src = 418;
    RMetricSource ref_rMetric5_src = 421;
    RMetricSource ref_rMetric7_src = 424;
    float order_ref_rMetric1 = 427; // user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]
    float order_ref_rMetric2 = 430; // user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]
    float order_ref_rMetric3 = 433; // user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]
    float order_ref_rMetric4 = 436; // user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]
    float order_ref_rMetric5 = 439; // user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]
    float order_ref_rMetric7 = 442; // user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    float max_acc_day_wt_vega_ln = 445; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 448; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 451; // accnt day (time weighted) vega offset (target position)
    float max_acc_day_dDelta_ln = 454; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 457; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 460; // accnt day $delta offset (target position)
    float max_sym_day_vega_ln = 463; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 466; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 469; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 472; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 475; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 478; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 481; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 484; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 487; // accnt+symbol day $delta offset (target position)
    float max_sym_day_rMetric7_ln = 490; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 493; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 496; // accnt+symbol day rMetric7 offset (target position)
    float max_grp_day_dDelta_ln = 499; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 502; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 505; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float max_grp_day_vega_ln = 508; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 511; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 514; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 517; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 520; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 523; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 526; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_premium_ratio = 529; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot premium = 0.5x sld premium)
    float max_grp_day_rMetric1_ln = 532; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 535; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 538; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_rMetric1_ratio = 541; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 544; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 547; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 550; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 553; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 556; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 559; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 562; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 565; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_ln = 568; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 571; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 574;
    float sym_ema_cxl_dDelta_ln = 577; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 580; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 583; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 586; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    string trader_name = 589; // Name of the trader associated with the order
    string user_data1 = 592; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 595; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 598; // client supplied data field; passes through to down stream child orders
    int32 checksum = 601; // Must be set to 13.  This helps detect some column/value misalignments.
}


    
message MLinkCacheRequest {
    message MsgType {
        
        uint32 msg_type = 115; // message type number being requested
        sfixed64 schema_hash = 118; // message schema hash (uniquely identifies a complete message schema) [if supplied and matches server schema hash binary encoding will be used for this message]
    }


    MbusInfo descriptor = 1;
    
    string query_label = 100; // query label (optional)
    sfixed64 highwater_ts = 103; // (optional) records must have a header.sentTs that is later than this value (nanoseconds after the UNIX epoch)
    uint32 source_id = 106; // message.appId must match if > 0
    string stripe = 109; // message.stripe must be in stripe list (if exists)
    repeated MsgType msg_type = 112;
}


    
message MLinkDataAck {


    MbusInfo descriptor = 1;
    
    uint32 msg_type = 100; // message type of the data object being ack'd
    sfixed64 send_ts = 103; // send timestamp of the data object being ack'd (note: MessageType + SendTimestamp should be unique)
    DataAckResult result = 106;
    string detail = 109;
}


    
message MLinkExpiryKey {
    message PKey {
        
        ExpiryKey expiry_key = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_messages = 100;
}


    
message MLinkObserverStats {
    message PKey {
        
        sfixed64 instance_iD = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string mlink_server = 100; // mlink server accessed
    string user_name = 103; // authenticated user name
    string client_firm = 106; // clientFirm associated with user name
    google.protobuf.Timestamp start_dttm = 109;
    double run_duration = 112;
    sfixed32 num_queries = 115;
    sfixed32 num_signal_ready = 118;
    sfixed64 num_skipped_nM = 121;
    sfixed64 num_skipped_mT = 124;
    sfixed64 num_skipped_cF = 127;
    sfixed64 num_skipped_sT = 130;
    sfixed64 num_skipped_rK = 133;
    sfixed64 num_skipped_rF = 136;
    sfixed64 num_filtered_aC = 139;
    sfixed64 num_filtered_uN = 142;
    sfixed64 num_filtered_sK = 145;
    sfixed64 num_filtered_eK = 148;
    sfixed64 num_filtered_oK = 151;
    sfixed64 num_filtered_cF = 154;
    sfixed64 num_filtered_pK = 157;
    sfixed64 num_filtered_mC = 160;
    sfixed64 num_forwarded = 163;
    sfixed64 num_uploaded = 166;
    sfixed64 num_bytes_sent = 169;
    sfixed64 num_bytes_rcvd = 172;
    sfixed32 num_message_types = 175;
    sfixed64 num_scans = 178;
    float sum_scan_elapsed = 181;
    sfixed64 max_ring_gap = 184;
    string last_error = 187;
}


    
message MLinkProductUsage {
    message PKey {
        
        sfixed64 usage_block_iD = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string mlink_server = 100; // mlink server accessed
    MLinkServerType mlink_server_type = 103;
    string user_name = 106; // authenticated user name
    string client_firm = 109; // clientFirm associated with user name
    google.protobuf.Timestamp block_dttm = 112; // reporting time block (typically a 1 hour time block)
    MLinkProductCategory product_category = 115; // product category (eg. StkMktData, OptModelData, etc.)
    sfixed32 num_messages = 118; // number of messages sent to client in the reporting time block
    float num_usage_minutes = 121; // number of server usage minutes in the reporting time block
}


    
message MLinkQuery {
    message EKeyFilters {
        
        ExpiryKey expiry_key = 142;
    }

    message MsgType {
        
        uint32 msg_type = 154;
        sfixed64 schema_hash = 157; // (optional) message schema hash [if supplied and matches server schema hash for this message binary encoding will be used]
        uint32 local_msg_type = 160; // (optional) if != 0 the msgType number will be translated from msgType to localMsgType in the mlink server (binary messages)
        string local_msg_name = 163; // (optional) if exists the message name will be translated from msgName to localMsgName in the mlink server (json and protobuf messages)
    }

    message OKeyFilters {
        
        OptionKey option_key = 148;
    }

    message TKeyFilters {
        
        TickerKey ticker_key = 136;
    }


    MbusInfo descriptor = 1;
    
    string query_label = 100; // (optional) query label
    MLinkQueryType query_type = 103;
    sfixed32 active_latency = 106; // (optional) number of milliseconds between active query refreshes (0 = no delay, -1 = wait for SignalReady) [default = -1]
    SysEnvironment sys_environment = 109; // (optional) records cannot have [sysEnvironment + sysRealm] in their route history (no loops)
    SysRealm sys_realm = 112;
    sfixed64 highwater_ts = 115; // (optional) records must have a header.sentTs that is later than this value (nanoseconds after the UNIX epoch)
    string stripe_filter = 118; // (optional) if supplied records must be within the specified stripe
    string msg_name_filter = 121; // (optional) if supplied records must have a message name from this set [comma separated]
    string accnt_filter = 124; // (optional) if supplied records must have an x-ray accnt from this set [comma separated]
    string client_firm_filter = 127; // (optional) if supplied records must have an x-ray client firm from this set [comma separated]
    string user_name_filter = 130; // (optional) if supplied records must have an x-ray user name from this set [comma separated]
    repeated EKeyFilters ekey_filters = 139;
    repeated MsgType msg_type = 151;
    repeated OKeyFilters okey_filters = 145;
    repeated TKeyFilters tkey_filters = 133;
}


    
message MLinkResponse {


    MbusInfo descriptor = 1;
    
    sfixed64 query_send_ts = 100; // MLinkQuery.header.sentTs (should be unique)
    string query_label = 103; // from MLinkQuery.queryLabel
    MLinkState state = 106;
    string detail = 109;
    sfixed64 highwater_ts = 112; // from MLinkQuery.hdrSendTs (if Begin); otherwise max .hdrSendTs sent so far
    sfixed64 num_bytes_sent = 115; // cumulative bytes sent
    sfixed64 num_messages_sent = 118; // cumulative messages sent
    google.protobuf.Timestamp timestamp = 121;
}


    
message MLinkSignalReady {


    MbusInfo descriptor = 1;
    
    string query_label = 100; // (optional) query label
}


    
message MLinkTickerKey {
    message PKey {
        
        TickerKey ticker_key = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_messages = 100;
}


    
message MMPreference {
    message PKey {
        
        string client_firm = 10;
        string ticker = 13;
        OptExch exch = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string mm_pref_code = 100;
    google.protobuf.Timestamp timestamp = 103;
}


    
message MacroCoreStatistics {
    message PKey {
        
        string macro_name = 10;
        string client_firm = 13;
    }

    message Results {
        
        string group = 121;
        string label = 124;
        float metric = 127;
        string format = 130;
        MetricType metric_type = 133;
        string description = 136;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 macro_scan_iD = 100; // scan ID of most recent scan
    sfixed32 num_orders = 103;
    double elapsed = 106;
    string result = 109;
    google.protobuf.Timestamp last_scan_dttm = 112; // timestamp of most recent scan
    string last_user_name = 115; // last username to execute this scan
    repeated Results results = 118;
}


    
message MacroScanResult {


    MbusInfo descriptor = 1;
    
    sfixed64 macro_scan_iD = 100;
    OptionKey okey = 103;
    BuySell side = 106;
    TickerKey ticker = 109;
    string accnt = 112;
    string omni_accnt = 115;
    string client_accnt = 118;
    string omni_client_accnt = 121;
    string clearing_firm = 124;
    string clearing_accnt = 127;
    string client_tags = 130;
    YesNo allocation_flag = 133;
    YesNo open_parent_order = 136;
    string accnt_rule_violations = 139;
    string strategy = 142;
    sfixed32 order_size = 145;
    string theo_model = 148;
    string risk_reason = 151;
    float order_ref_rMetric1 = 154; // user supplied RMetric1 value (used in RiskGroupID risk controls) [must be zero or positive]
    float order_ref_rMetric2 = 157; // user supplied RMetric2 value (used in RiskGroupID risk controls) [must be zero or positive]
    float order_ref_rMetric3 = 160; // user supplied RMetric3 value (used in RiskGroupID risk controls) [must be zero or positive]
    float order_ref_rMetric4 = 163; // user supplied RMetric4 value (used in RiskGroupID risk controls) [must be zero or positive]
    float order_ref_rMetric5 = 166; // user supplied RMetric5 value (used in RiskGroupID risk controls) [must be zero or positive]
    sfixed64 risk_group_id = 169; // all orders with the same riskGroupId share a common set of risk counters; .Grp. risk limits apply to these shared counters
    float max_acc_day_wt_vega_ln = 172; // max accnt day (time weighted) vega long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_acc_day_wt_vega_sh = 175; // max accnt day (time weighted) vega short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_acc_day_dDelta_ln = 178; // max accnt day $delta long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_acc_day_dDelta_sh = 181; // max accnt day $delta short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_exp_day_wt_vega_ln = 184; // max accnt+expiration day (time weighted) vega long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_exp_day_wt_vega_sh = 187; // max accnt+expiration day (time weighted) vega short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_sym_day_wt_vega_ln = 190; // max acct+symbol day (time weighted) vega long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_sym_day_wt_vega_sh = 193; // max acct+symbol day (time weighted) vega short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_sym_day_dDelta_ln = 196; // max acct+symbol day $delta long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_sym_day_dDelta_sh = 199; // max acct+symbol day $delta short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_grp_day_rMetric1_ln = 202; // max acct+riskGroup day rMetric1 long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 205; // max acct+riskGroup day rMetric1 short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_grp_day_rMetric2_ln = 208; // max acct+riskGroup day rMetric2 long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 211; // max acct+riskGroup day rMetric2 short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 214; // max acct+riskGroup day rMetric3 long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 217; // max acct+riskGroup day rMetric3 short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 220; // max acct+riskGroup day rMetric4 long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 223; // max acct+riskGroup day rMetric4 short (positive number; -1=no limit); risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 226; // max acct+riskGroup day rMetric5 long (positive number; -1=no limit); risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 229; // max acct+riskGroup day rMetric5 short (positive number; -1=no limit); risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_ln = 232; // max acct+riskGroup day contracts long (positive number; -1=no limit); risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 235; // max acct+riskGroup day contracts short (positive number; -1=no limit); risk limit = max limit + current net counter
    float theo_edge = 238;
    float theo_edge_rank = 241;
    float surface_edge = 244;
    float surface_edge_rank = 247;
    float o_prob = 250;
    float o_prob_rank = 253;
    float o_prob10m = 256;
    float o_prob10m_rank = 259;
    float svol = 262;
    float ve = 265;
    float wv = 268; // wv = ve * svol;
    float wv_t = 271; // wvT = wVega / Math.Sqrt(years / 0.25)
    float xde = 274;
    float mkt_cap = 277;
    float mkt_cap_rank = 280;
    float atm_change = 283;
    float atm_change_rank = 286;
    float ivol_change = 289;
    float ivol_change_rank = 292;
    float atm_slope = 295;
    float atm_slope_rank = 298;
    float atm_slope_change = 301;
    float atm_slope_change_rank = 304;
    float x_vol_slope = 307;
    float x_vol_slope_rank = 310;
    float u_prc_change = 313;
    float u_prc_change_rank = 316;
    float exp_open_vega = 319;
    float exp_open_vega_rank = 322;
    float exp_vega_vlm = 325;
    float exp_vega_vlm_rank = 328;
    float exp_vega_vlm_chg = 331;
    float exp_vega_vlm_chg_rank = 334;
    float open_wt_ve = 337;
    float open_wt_ve_rank = 340;
}


    
message MacroScanStatistics {
    message PKey {
        
        string user_name = 10;
        string macro_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 macro_scan_iD = 100; // scan ID of most recent scan
    string theo_model = 103;
    RiskAggregate aggregate1 = 106;
    RiskAggregate aggregate2 = 109;
    sfixed32 num_und_universe = 112; // Num underliers in symbol list
    sfixed32 num_und_context_skips = 115; // Underliers not included in selected screen context
    sfixed32 num_und_explicity_excluded = 118; // Underliers explicity excluded
    sfixed32 num_und_sym_ctrl = 121; // SymbolControl either missing or held (and required)
    sfixed32 num_und_no_stk_def = 124; // No StockDefinition (sd) record
    sfixed32 num_und_price_range = 127; // range: uPrc
    sfixed32 num_und_stk_vlm_range = 130; // range: uPrc * sd.StockVolume / 1mm
    sfixed32 num_und_mkt_cap_range = 133; // range: uPrc * sd.SharesOutstanding / 1mm
    sfixed32 num_und_price_perc_range = 136; // Outside the underlier price % change range
    sfixed32 num_und_eDays_range = 139; // range: eDays (NearEarnDays) (days to next earnings [-3 to 65])
    sfixed32 num_und_iEMove_range = 142; // range: iEMove (term.eMove) [SR implied earnings move]
    sfixed32 num_und_hEMove_range = 145; // range: hEMove (term.eMoveHist) [SR historical earnings move]
    sfixed32 num_und_eMove_ratio_rank = 148; // rank: log( iEMove / hEMove )
    sfixed32 num_und_stk_vlm_rank = 151; // rank: uPrc * sd.StockVolume
    sfixed32 num_und_mkt_cap_rank = 154; // rank: uPrc * sd.SharesOutstanding
    sfixed32 num_und_price_chg_rank = 157; // rank: log( uPrc / uPrc.prev )
    sfixed32 num_sym_risk_controls = 160; // risk control: zero size
    sfixed32 num_und_oK = 163;
    sfixed32 num_exp_universe = 166; // Num symbol/expirations scanned
    sfixed32 num_exp_context_skips = 169; // Expirations not included in selected screen context
    sfixed32 num_exp_explicity_excluded = 172; // Expirations explicity excluded
    sfixed32 num_exp_days_range = 175; // Trading days to expiry outside of range
    sfixed32 num_exp_eCnt_range = 178; // Expiry earnings count outside of range (lsa.eDaysAdj)
    sfixed32 num_exp_no_live_surface = 181; // LiveSurface record missing
    sfixed32 num_exp_atm_vol_range = 184; // lsa.atm outside of range (vol pts)
    sfixed32 num_exp_atm_vWidth_range = 187; // lsa.vwidth (best width;3 strike range) outside of range (vol pts)
    sfixed32 num_exp_atm_vol_chg_rank = 190; // rank: log(lsa.atm / psa.atm)
    sfixed32 num_exp_atm_vol_chg_range = 193; // range: lsa.atm - psa.atm
    sfixed32 num_exp_atm_slope_rank = 196; // rank: lsa.slope
    sfixed32 num_exp_atm_slope_chg_rank = 199; // rank: lsa.slope - psa.slope
    sfixed32 num_exp_vega_vlm_rank = 202; // rank: optionOpenVega.vegaVolume [today expiry vega volume]
    sfixed32 num_exp_vega_vlm_chg_rank = 205; // rank: log(vegaVlm / vegaVlm.prev) [today expiry vega volume / prev day expiry vega volume]
    sfixed32 num_exp_open_vega_rank = 208; // rank: optionOpenVega.openVega [start of day open expiry vega]
    sfixed32 num_exp_risk_controls = 211; // risk control: zero size
    sfixed32 num_exp_oK = 214;
    sfixed32 num_opt_universe = 217; // Num options scanned (x2: Buy + Sell)
    sfixed32 num_opt_context_skips = 220; // Options not included in selected screen context
    sfixed32 num_opt_explicity_excluded = 223; // Options explicity excluded
    sfixed32 num_opt_no_implied_qte = 226; // OptionImpliedQuote (oiq) record missing
    sfixed32 num_opt_abs_de_range = 229; // option abs(de) outside of range
    sfixed32 num_opt_xde_range = 232; // option xde outside of range
    sfixed32 num_opt_xVol_slope_range = 235; // option xaxis vol slope outside of range
    sfixed32 num_opt_price_range = 238; // option surface mark outside of range
    sfixed32 num_opt_iVol_chg_rank = 241; // rank: log(ivol / ivol.prev)
    sfixed32 num_opt_opn_wt_vega_rank = 244; // rank: option open time weighted vega
    sfixed32 num_opt_theo_edge_range = 247; // theo edge outside of range
    sfixed32 num_opt_theo_edge_rank = 250; // rank: theo edge
    sfixed32 num_opt_surf_edge_range = 253; // surface edge outside of range
    sfixed32 num_opt_surf_edge_rank = 256; // rank: surface edge
    sfixed32 num_opt_prob_range = 259; // take.probability outside of range
    sfixed32 num_opt_prob_rank = 262; // rank: take.probability
    sfixed32 num_opt_rel_prob10m_rank = 265; // rank: take.probability - avg.take.prob (10m)
    sfixed32 num_opt_cPSkip = 268; // options excluded by call/put filter
    sfixed32 num_opt_calc_err = 271; // errors calculating option prices/greeks/theos
    sfixed32 num_opt_skip_err = 274; // num options skip because they had no calc error (showCalcErrors = Y)
    sfixed32 num_opt_min_size = 277; // order size > 0 && < minimum size
    sfixed32 num_opt_no_position = 280; // PositionType != Any and no option position
    sfixed32 num_opt_risk_controls = 283; // risk control: zero size
    sfixed32 num_opt_oK = 286;
    double elapsed = 289;
    sfixed32 num_over_max_query_count = 292;
    sfixed32 num_over_max_symbol_count = 295;
    sfixed32 num_over_max_expiry_count = 298;
    sfixed32 num_over_max_results_count = 301;
    google.protobuf.Timestamp last_scan_dttm = 304; // timestamp of most recent scan
    string last_user_name = 307; // last username to execute this scan
}


/*
    MarFutRestrictedList records are used to establish restricted securities within SpiderRock execution engines.  These records are only viewable and editable by users belonging to the same riskFirm as the restriction records.
*/    
message MarFutRestrictedList {
    message PKey {
        
        string client_firm = 10;
        string risk_group = 13;
        ExpiryKey expiry = 16; // note: can be a future key (secType='Future') or the root+expiration part of an option key (secType='Option')
        SpdrKeyType sec_type = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp start_restricted_date = 100;
    google.protobuf.Timestamp end_restricted_date = 103;
    google.protobuf.Timestamp timestamp = 106;
}


/*
    MarRestrictedList records are used to establish restricted securities within SpiderRock execution engines.  These records are only viewable and editable by users belonging to the same riskFirm as the restriction records.
*/    
message MarRestrictedList {
    message PKey {
        
        string client_firm = 10;
        string risk_group = 13;
        TickerKey ticker = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    Restriction restriction = 100;
    google.protobuf.Timestamp timestamp = 103;
}


/*
    MarRiskControl records are used to establish risk controls within SpiderRock execution engines.  These records are only viewable and editable by users belonging to the same riskFirm as the control records.
*/    
message MarRiskControl {
    message PKey {
        
        string client_firm = 10; // Should be one of RiskFirm1, RiskFirm2, or RiskFirm3 (from AccountConfig)
        string risk_group = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    MarState enabled = 100; // used to enable or disable the MAR risk control
    TotalExposure tot_exposure_def = 103; // determine whether to use haircutAcc or haircutDay for calculating the total exposure
    YesNo allow_market_on_close = 106; // allow market on close orders - special order type which is executed as close to the close of trading as possible
    YesNo allow_limit_on_close = 109; // allow limit on close orders - similar to MOC order, with the addition of a price limit
    YesNo allow_short_sale_exempt = 112; // allow short sale option orders to be marked exempt, as per Rule 201
    YesNo allow_inter_market_sweep = 115; // allow intermarket sweep orders
    YesNo allow_odd_lots = 118; // allow parent stock orders with an order size below 100
    float credit_limit_acc = 121; // allowable haircut for net position in a risk group, including open positions
    float credit_limit_day = 124; // allowable haircut for all positions initiated in the current trading session
    sfixed32 order_limit_stk_shares = 127; // number of equity shares that can be bought or sold by a single parent order
    sfixed32 order_limit_fut_contracts = 130; // number of futures contracts that can be bought or sold by a single parent order
    sfixed32 order_limit_opt_contracts = 133; // number of option contracts that can be bought or sold by a single parent order
    float order_limit_stk_money = 136; // amount of currency traded by a single parent order for stock shares
    float order_limit_fut_money = 139; // notional value of futures contracts that can be traded by a single parent order
    float order_limit_opt_money = 142; // amount of option premium that can be traded by a single parent order
    float open_exposure_mult = 145; // default=1, determines the level of exposure risk to allow for open orders
    float total_exposure_limit = 148; // haircut + 15% * ($Delta of open trades) / openExposureMult
    string modified_by = 151; // user who last modified this record
    google.protobuf.Timestamp timestamp = 154; // timestamp of last modification
}


/*
    Values in this table represent current (live) SpiderRock MAR risk counters for a risk group/risk firm combination.  A risk group is typically a group of client accounts that have a common beneficial owner.  A risk firm is a firm with control of the corresponding risk settings for the risk group.  These records are typically only visible to users belonging to the same risk firm as the counter records.
*/    
message MarRiskRecord {
    message PKey {
        
        string client_firm = 10; // One of RiskFirm1, RiskFirm2, or RiskFirm3
        string risk_group = 13;
        string risk_engine = 16; // EE engine name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 stk_sh_bot = 100; // stock shares bot today (includes marketable orders not yet filled)
    sfixed32 stk_sh_sld = 103; // stock shares sld today (includes marketable orders not yet filled)
    sfixed32 fut_cn_bot = 106; // future contracts bot today (includes marketable orders not yet filled)
    sfixed32 fut_cn_sld = 109; // future contracts sld today (includes marketable orders not yet filled)
    sfixed32 opt_cn_bot = 112; // option contracts bot today (includes marketable orders not yet filled)
    sfixed32 opt_cn_sld = 115; // option contracts sld today (includes marketable orders not yet filled)
    float haircut_acc = 118; // current PM or JBO haircut (open positions + filled orders) (does not include open orders) [aggregated]
    float haircut_day = 121; // current day haircut ($25;-8/+6 or -15/+15) (filled orders only) [aggregated]
    sfixed32 leaves_sh = 124; // open stock child order contracts (not yet filled) [aggregated]
    sfixed32 leaves_fc = 127; // open future child order contracts (not yet filled) [aggregated]
    sfixed32 leaves_cn = 130; // open option child orders contracts (not yet filled) [aggregated]
    float leaves_dd = 133; // open child order $delta [aggregated]
    float dd_bot = 136; // day $delta bot [aggregated]
    float dd_sld = 139; // day $delta sld [aggregated]
    float ve_bot = 142; // day vega bot [aggregated]
    float ve_sld = 145; // day vega sld [aggregated]
    float wt_ve_bot = 148; // day wtVega bot [aggregated]
    float wt_ve_sld = 151; // day wtVega sld [aggregated]
    google.protobuf.Timestamp timestamp = 154; // timestamp of latest change
}


/*
    used to monitor individual market data channels (ie, individual multicast channels or product tickers)
    note: published by individual market data consuming processes (if enabled)
*/    
message MarketDataCounter {
    message PKey {
        
        string feed_name = 10; // feed name
        string channel_name = 13; // channel name
        string server_name = 16; // process instance name (should be unique)
        string machine_name = 19; // name of the machine which is hosting process
        SysEnvironment sys_environment = 22; // sys environment [Stable, Current, etc]
        SysRealm sys_realm = 25; // sysRealm [NMS, CME, etc.]
        RunStatus run_status = 28; // run status [Prod,Beta]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 period_net_time = 100; // net time of start of the most recent trading period
    google.protobuf.Timestamp period_timestamp = 103; // timestamp of the start of the most recent trading period
    sfixed64 num_data_ticks = 106; // number of ticks since start of most recent trading period
    sfixed64 num_window_ticks = 109; // number of ticks in the most recent window
    YesNo is_oK = 112;
    float tick_window = 115; // tick window length (in seconds)
    sfixed32 tick_threshold = 118;
    google.protobuf.Timestamp timestamp = 121;
}


    
message MessageBusStatus {
    message PKey {
        
        string msg_name = 10; // MBUS message name
        string server_name = 13; // cache server process name
        string machine_name = 16; // machine name of the cache server publishing this record
        SysEnvironment sys_environment = 19; // sys environment [Stable, Current, etc]
        SysRealm sys_realm = 22; // sysRealm [NMS, CME, etc.]
        RunStatus run_status = 25; // run status [Prod,Beta]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_frames = 100; // total number of frames (messages) in set
    sfixed64 num_bytes = 103; // total size of message set (in bytes)
    sfixed32 num_dirty = 106; // number of new messages re-allocating a frame
    sfixed64 num_updates = 109; // total number of update messages since cache server startup
    float msg_rate = 112; // messages per second
    float byte_rate = 115; // bytes per second
    google.protobuf.Timestamp timestamp = 118;
}


    
message MessageTypeChannel {
    message PKey {
        
        uint32 message_type = 10;
        string channel_addr = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string message_type_name = 100;
    string channel_name = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message MktDataControl {
    message PKey {
        
        MktDataFeed feed = 10;
        string machine_name = 13; // if specified, only applies to this host
        SysEnvironment sys_environment = 16;
        SysRealm sys_realm = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string channel_set = 100; // [A, B, or AB]
    string exchange_drop_list = 103; // comma separated list of exchange acronyms to exclude from feed
    string interface_set = 106; // interface set to listen on [IFADDR_<DataCenter>_MKT_<ChannelSet>] (refactored - needs work)
    google.protobuf.Timestamp timestamp = 109; // milliseconds since midnight
}


    
message MostActiveOptionData {
    message PKey {
        
        TickerKey ticker = 10;
    }

    message Options {
        
        OptionKey opt_key = 106;
        sfixed32 days = 109;
        float years = 112;
        float x_axis = 115; // moneyness
        float delta = 118;
        sfixed32 volume = 121;
        float ivol = 124;
        float i_vol_chg = 127;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp ts = 100; // last update time (Date)
    repeated Options options = 103;
}


    
message MostOptionOpenInterestData {
    message PKey {
        
        TickerKey ticker = 10;
    }

    message Options {
        
        OptionKey opt_key = 106;
        sfixed32 days = 109;
        float years = 112;
        float x_axis = 115; // moneyness
        float delta = 118;
        sfixed32 open_interest = 121;
        float ivol = 124;
        float i_vol_chg = 127;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp ts = 100; // last update time (Date)
    repeated Options options = 103;
}


/*
    This table contains circuit breaker information for market centers with circuit breakers.  Note that circuit breaker records may not always exist for a market center.
*/    
message NMSCircuitBreaker {
    message PKey {
        
        string market_center = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float level1 = 100; // level 1 threshold
    float level2 = 103; // level 2 threshold
    float level3 = 106; // level 3 threshold
    sfixed32 current_level = 109; // current market circuit breaker level (0 - 3)
    google.protobuf.Timestamp timestamp = 112;
}


/*
    We track sequences numbers using a < CHANNEL, MSG TYPE, SRC APP ID > tuple.  When sequence number gaps
    the details of the drops are written into logs.  This makes it difficult to see a wholistic view of the
    drops.  This message type attempts to elevate that data to be globally viewable to enable drop analyses.
*/    
message NetDropReport {
    message PKey {
        
        string app_name = 10;
        uint32 app_iD = 13;
        google.protobuf.Timestamp app_start = 16;
        uint32 source_app_iD = 19;
        string channel_name = 22;
        string message_type_name = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string machine_name = 100;
    string process_name = 103;
    sfixed32 process_id = 106;
    sfixed32 num_incidents = 109;
    sfixed32 num_total_incidents = 112;
    sfixed64 expected_seq_no = 115;
    sfixed64 header_seq_no = 118;
    sfixed64 header_time_sent = 121;
    sfixed64 time_received = 124;
    YesNo mmr_drops = 127;
}


    
message NetPulse {


    MbusInfo descriptor = 1;
    
    google.protobuf.Duration frequency = 100;
    google.protobuf.Duration timeout = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message NexusSubscriptionNotification {
    message PKey {
        
        string subscriber_instance_name = 10;
        YesNo response = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 subscriber_app_id = 100;
    string error_text = 103;
}


    
message OpraPrintType {
    message PKey {
        
        int32 opra_print_type = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string print_type_char = 100; // character value of printType
    string print_code = 103; // eg, AUTO, CANC
    string print_code_string = 106; // longer string
    string print_code_description = 109; // full description
}


/*
    OptAwayTktGateway inserts are validated and convered to away SpdrParentExecution records and published. If successfully published they will be visible in the SpdrParentExecution table and on SpiderRock GUI tools.
    Replaces are allowed but they are functionally identical to updates in that only the fillPrice and fillQuantity fields are actually changed.
*/    
message OptAwayTktGateway {
    message PKey {
        
        string accnt = 10;
        sfixed64 client_fill_iD = 13; // client execution ID, these must be unique on a per-account basis [copied into SpdrParentExecution.altFillId]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    string client_order_iD = 103; // client orderID [copied into SpdrParentExecution.altOrderId]
    sfixed64 risk_group_id = 106; // Default: 0 (none).  Required to be non-zero if incorporating risk into an existing riskGroupId
    OptionKey okey = 109;
    BuySell fill_side = 112;
    double fill_price = 115;
    sfixed32 fill_quantity = 118;
    double fill_ref_uPrc = 121; // reference underlier price @ fill arrival time
    PriceType price_type = 124;
    PositionType position_type = 127;
    float theo_vol = 130; // client supplied theoretical volatility (used for markup only)
    YesNo deliver_exec_report = 133; // Drop a copy of the execution report
    sfixed64 sRfill_iD = 136; // SR internal fill number, any values submitted will be overwritten by the SR generated fill number [copied in SpdrParentExecution.pkey.fillNumber]
    string comment = 139; // text comment (if any)
    string exec_broker = 142; // used to reflect field from a downstream destination back up to and upstream fill report
    string user_data1 = 145; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 148; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string strategy = 151; // client-supplied strategy string
    google.protobuf.Timestamp fill_dttm = 154;
    google.protobuf.Timestamp timestamp = 157;
    int32 checksum = 160; // Must be set to 13.  This helps detect some column,value misalignments.
}


    
message OptExpiryCard {
    message PKey {
        
        ExpiryKey exp_key = 10; // Expiration Key
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ExpiryKey fut_exp = 100; // Future Expiration Key
    TickerKey ticker = 103; // Stock ticker key
    string rate = 106;
    string ddiv = 109;
    string days = 112;
    string years = 115;
    string atm_vol = 118;
    string atm_sDiv = 121;
    string atm_vol_move = 124; // ATM ivol change
    string atm_sDiv_move = 127; // ATM svol change
    string atm_width = 130;
    string atm_slope = 133;
    string vlm_day = 136; // option trade volume on the day
    string vlm20_day = 139; // average option trade volume in the past 20 days
    string ecnt = 142; // number of earnings events to expiration
    string surf_status = 145;
    ToolExpType exp_type = 148; // Expiration type of this option
    google.protobuf.Timestamp ts = 151; // last update time (Date)
}


    
message OptExpiryCardVset {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100; // Requested ticker key
    YesNo show_daily = 103; // Show daily expiries
    YesNo show_weekly = 106; // Show weekly expiries
    YesNo show_quarterly = 109; // Show quarterly expiries
    YesNo show_regular = 112; // Show regular expiries
    YesNo show_multihedge = 115; // Show multihedge expiries
}


    
message OptExpiryData {
    message PKey {
        
        ExpiryKey exp_key = 10; // Expiration Key formatted: {Ticker}-{TickerSrc}-{AssetType}-{Year}-{Month}-{Day}
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ExpiryKey fut_exp = 100; // Future Expiration key
    TickerKey ticker = 103; // Stock ticker key
    string rate = 106;
    string ddiv = 109;
    string days = 112;
    string years = 115;
    string atm_vol = 118;
    string atm_sDiv = 121;
    string atm_vol_move = 124; // ATM ivol change
    string atm_sDiv_move = 127; // ATM svol change
    string atm_width = 130;
    string atm_slope = 133;
    string vlm_day = 136; // option trade volume on the day
    string vlm20_day = 139; // average option trade volume in the past 20 days
    string ecnt = 142; // number of earnings events to expiration
    string surf_status = 145;
    ToolExpType exp_type = 148; // Expiration type of this option, added to know when to set deliverable field
    string deliverable = 151; // text field used when MultiHegde is selected
    google.protobuf.Timestamp ts = 154; // last update time (Date)
}


    
message OptExpiryDataVset {


    MbusInfo descriptor = 1;
    
    ExpiryKey exp_key = 100; // Requested expiry key
}


/*
    This table maps option root/expiration combinations to their deliverable future.  Mappings are sourced fromm listing exchange product definitions.
    BaseObj:Root
*/    
message OptExpiryDefinition {
    message PKey {
        
        ExpiryKey ekey = 10; // option root+expiration
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ExpiryKey fkey = 100; // future key of the option deliverable
    google.protobuf.Timestamp expiration = 103; // option expiration date and time
    google.protobuf.Timestamp maturity_date = 106;
    double display_factor = 109;
    double cab_price = 112;
    PriceFormat price_format = 115;
    double min_tick_size = 118;
    google.protobuf.Timestamp timestamp = 121;
}


/*
    Records inserted, updated, or replaced into the OptionOrderGateway table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.
    See the SpiderRock Execution Engine concept guide for more details.
*/    
message OptOrderGateway {
    message PKey {
        
        OptionKey okey = 10; // SR Option Key
        string accnt = 13; // SR Account (default = primary account associated with SRSE login)
        BuySell order_side = 16; // Parent Order Size
        sfixed64 grouping_code = 19; // Parent Grouping Code
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    SpdrActionType spdr_action_type = 103; // [Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]
    string alt_order_id = 106; // Alternate client order ID.  This order ID will be copied to all execution reports.
    string alt_auto_hedge_id = 109; // alternate order ID for child autohedge orders (if any)
    string alt_accnt = 112; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 115; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string accnt_route_code = 118; // accntRoute acronym
    string extern_ex_dest = 121; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 124; // external algo names/parameters (usually just an algo name)
    string strategy = 127; // Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.
    YesNo visible_in_sV = 130; // allow order to be visible in SV (do not use for high volume of orders)
    google.protobuf.Timestamp order_dttm = 133; // order entry time (from client;if any)
    sfixed32 order_size = 136; // parent order size (contracts) [-1 = no change;used when spdrActionType=Release]
    sfixed32 order_active_size = 139; // total activated size (total size released for execution) (-1 = all available size)
    YesNo add_cum_fill_quantity = 142; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    fixed32 exch_mask = 145; // eligible exchanges (0 = all)
    sfixed32 max_exposure_size = 148; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 151; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 154; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; MktSize=expose only 'typical' market size; FullSize=expose entire order size where possible
    YesNo randomize_size = 157; // randomize public order size
    YesNo can_overlap_cxl_repl = 160; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 163; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 twap_slice_cnt = 166; // [ProgressSliceCnt] number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 169; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    AuctionResponder auction_responder = 172; // if set, parent order can be an auction responder
    float max_make_exch_fee = 175; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 178; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    IncExchFee inc_take_exch_fee = 181; // include exchange fee in probability and surface based take limit calculations
    IncExchFee inc_make_exch_fee = 184; // include exchange fee in probability and surface based make limit calculations
    MakeExchRule make_exch_rule = 187; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    TriggerType trigger_type = 190; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 193; // stop/trigger price for parent order to go active
    UPrcCxl cxl_uPrc_range = 196; // cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]
    float min_uBid = 199; // [optional]
    float max_uAsk = 202; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 205; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    float min_option_px = 208; // [optional] option price floor for tied to stock orders
    sfixed32 max_child_orders = 211; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    SpdrStageType spdr_stage_type = 214; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    TimeInForce time_in_force = 217;
    google.protobuf.Timestamp start_dttm = 220; // [optional] (parent order start time)
    sfixed32 order_duration = 223; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 226; // [optional] (default: 2000-01-01)
    StartType start_type = 229; // [Immediate, WaitTrigger]
    sfixed32 progress_timeout = 232; // cancel if [optional] (number of milliseconds)
    ParentOrderHandling parent_order_handling = 235;
    ParentBalanceHandling parent_balance_handling = 238;
    SpdrLimitType order_limit_type = 241; // Various (Prc, PrcDe, Vol, Rel, Market); establishes the primary LimitPrice for a parent order
    SpdrLimitClass take_limit_class = 244; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 247; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 250; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 253; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 256; // default=underlier.mid
    float order_ref_delta = 259; // default=option.delta
    float order_ref_gamma = 262; // default=option.gamma
    float order_vol_limit = 265; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 268; // zero = ignore;> zero = override
    float sdiv_override = 271; // Default: 0.
    string ddiv_override = 274; // Discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 277; // override default SR dividend and rate details (only used if LimitType = Vol)
    double order_prc_offset = 280; // default=0
    float order_ref_event_mult = 283;
    google.protobuf.Timestamp order_ref_event_dttm = 286;
    AlphaType take_alpha_type = 289; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 292; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 295; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 298; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 301; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 304; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    double take_surf_prc_offset = 307; // default=0
    float take_surf_vol_offset = 310; // default=0
    float take_surf_width_offset = 313; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 316; // default=0
    float make_surf_vol_offset = 319; // default=0
    float make_surf_width_offset = 322; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    AutoHedge auto_hedge = 325;
    HedgeInstOrig hedge_instrument = 328; // Default=underlier (EQT or FUT) [Index Options use ETF]; FrontMonth=underlier (EQT) or front month (FUT) [Index Options use FM Fut]; Stock=hedgeSecKey; Future=hedgeSecKey (DirectStock, DirectFuture, and FutUnderlier are depricated)
    ExpiryKey hedge_fKey = 331; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 334; // portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    HedgeScope hedge_scope = 337;
    TimeInForce hedge_tIF = 340; // time in force for the autohedge order (can be Day or ExtDay)
    PositionType position_type = 343;
    ShortSaleFlag ssale_flag = 346; // Used to determine stock auto-hedge flags.
    sfixed32 locate_quan = 349; // available locate quantity (if selling short) [will be considered the primary locate for any resulting child orders]
    string locate_firm = 352; // firm granting the locate (also locate firm used on street FIX orders)
    FirmType firm_type = 355; // Used to override firmType in account config. Default: None (use SpiderRock account configuration).
    float theo_vol = 358; // client supplied theoretical volatility (used for markup only)
    RMetricSource ref_rMetric1_src = 361;
    RMetricSource ref_rMetric2_src = 364;
    RMetricSource ref_rMetric3_src = 367;
    RMetricSource ref_rMetric4_src = 370;
    RMetricSource ref_rMetric5_src = 373;
    RMetricSource ref_rMetric6_src = 376;
    RMetricSource ref_rMetric7_src = 379;
    float order_ref_rMetric1 = 382; // user supplied RMetric1 value (used in RiskGroupID risk controls)
    float order_ref_rMetric2 = 385; // user supplied RMetric2 value (used in RiskGroupID risk controls)
    float order_ref_rMetric3 = 388; // user supplied RMetric3 value (used in RiskGroupID risk controls)
    float order_ref_rMetric4 = 391; // user supplied RMetric4 value (used in RiskGroupID risk controls)
    float order_ref_rMetric5 = 394; // user supplied RMetric5 value (used in RiskGroupID risk controls)
    float order_ref_rMetric6 = 397; // user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]
    float order_ref_rMetric7 = 400; // user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    sfixed64 risk_group_id = 403; // All risk limits below are relative to this riskGroupId.  Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    float max_acc_day_dDelta_ln = 406; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 409; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 412; // accnt day $delta offset (target position)
    float max_acc_day_wt_vega_ln = 415; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 418; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 421; // accnt day (time weighted) vega offset (target position)
    float max_exp_day_wt_vega_ln = 424; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 427; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 430; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 433; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 436; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 439; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 442; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 445; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 448; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 451; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 454; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 457; // accnt+symbol day $delta offset (target position)
    float max_exp_day_rMetric6_ln = 460; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 463; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float exp_day_rMetric6_offset = 466; // accnt+expiration day rMetric6 offset (target position)
    float max_sym_day_rMetric7_ln = 469; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 472; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 475; // accnt+symbol day rMetric7 offset (target position)
    float max_grp_day_dDelta_ln = 478; // Default: -1 (not set).
    float max_grp_day_dDelta_sh = 481; // Default: -1 (not set).
    float max_grp_day_vega_ln = 484; // Default: -1 (not set).
    float max_grp_day_vega_sh = 487; // Default: -1 (not set).
    float max_grp_day_vega_abs = 490; // Default: -1 (not set).
    float grp_day_vega_ratio = 493; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 496; // Default: -1 (not set).
    float max_grp_day_premium_sh = 499; // Default: -1 (not set).
    float max_grp_day_premium_abs = 502; // Default: -1 (not set).
    float grp_day_premium_ratio = 505; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=2.0 means that neutral is bot premium = 2x sld premium)
    float max_grp_day_rMetric1_ln = 508; // Default: -1 (not set).
    float max_grp_day_rMetric1_sh = 511; // Default: -1 (not set).
    float max_grp_day_rMetric1_abs = 514; // Default: -1 (not set).
    float grp_day_rMetric1_ratio = 517; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 520; // Default: -1 (not set).
    float max_grp_day_rMetric2_sh = 523; // Default: -1 (not set).
    float max_grp_day_rMetric3_ln = 526; // Default: -1 (not set).
    float max_grp_day_rMetric3_sh = 529; // Default: -1 (not set).
    float max_grp_day_rMetric4_ln = 532; // Default: -1 (not set).
    float max_grp_day_rMetric4_sh = 535; // Default: -1 (not set).
    float max_grp_day_rMetric5_ln = 538; // Default: -1 (not set).
    float max_grp_day_rMetric5_sh = 541; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_ln = 544; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_sh = 547; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_abs = 550; // Default: -1 (not set).
    float sym_ema_cxl_dDelta_ln = 553; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 556; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 559; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 562; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    string trader_name = 565; // Name of the trader associated with the order
    string user_data1 = 568; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 571; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 574; // client supplied data field; passes through to down stream child orders
    int32 checksum = 577; // Must be set to 13.  This helps detect some column/value misalignments.
}


/*
    Records updated, or replaced into the OptionOrderReplaceGateway table are validated and then converted to SpdrParentOrder cancel/replace records and forwarded to the appropriate execution engine for futher processing.
    See the SpiderRock Execution Engine concept guide for more details.
*/    
message OptOrderReplaceGateway {
    message PKey {
        
        OptionKey okey = 10;
        string accnt = 13;
        SpdrSource spdr_source = 16;
        sfixed64 grouping_code = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    sfixed64 order_number = 103; // SPDR order number
    sfixed32 order_size = 106; // maximum fill size (contracts)
    sfixed32 order_active_size = 109; // total activated size (total size released for execution) (-1 = all available size)
    float order_prc_limit = 112; // Order price limit.  Valid range: [0.005, 9999.0].  Required if `orderLimitType` is Prc, PrcDe, PrcDeX, PrcDeT, PrcDeXT.  Ignored if `orderLimitType` is Market.  Otherwise must be set to 0.
    float order_vol_limit = 115; // Order volatility limit.  Valid range: [0.005, 9.000].  Required if `orderLimitType` is Vol, VolX.  Ignored if `orderLimitType` is Market.  Otherwise must be set to 0.
    float take_probability = 118; // probability threshold for taking an existing public quote
    float make_probability = 121; // probability threshold for posting in an exchange order book
    string strategy = 124; // Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.
    string user_name = 127;
    google.protobuf.Timestamp order_dttm = 130; // Order entry time.  Will be set to arrival time if not supplied.
    PositionType position_type = 133;
    ShortSaleFlag ssale_flag = 136; // used to determine stock auto-hedge flags
    sfixed32 locate_quan = 139; // available locate quantity (if selling short) [will be considered the primary locate for any resulting child orders]
    string locate_firm = 142; // firm granting the locate (also locate firm used on street FIX orders)
    google.protobuf.Timestamp timestamp = 145;
}


    
message OptionActivityData {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 c_vlm = 100; // call volume
    sfixed32 p_vlm = 103; // put volume
    sfixed32 c_vlm20d = 106; // call volume (last 20 days)
    sfixed32 p_vlm20d = 109; // put volume (last 20 days)
    sfixed32 c_oI = 112; // call open interest
    sfixed32 p_oI = 115; // put open interest
    sfixed32 c_oI20d = 118; // call open interest (last 20 days)
    sfixed32 p_oI20d = 121; // put open interest (last 20 days)
    google.protobuf.Timestamp ts = 124; // last update time (Date)
}


    
message OptionAlgoFees {
    message PKey {
        
        TickerKey ticker = 10;
        string opt_exch = 13;
        FirmType cust_class = 16;
        OptNameClass name_class = 19;
        string client_firm = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float make_fee = 100; // make fee used in exchange routing decisions
    float take_fee = 103; // take fee used in exchange routing decisions
    float cob_make_fee = 106; // base (lowest tier) make fee for the exchange/cust class
    float cob_take_fee = 109;
    google.protobuf.Timestamp timestamp = 112;
}


    
message OptionAtmMinuteBarData {
    message PKey {
        
        ExpiryKey ekey = 10;
        google.protobuf.Timestamp trading_date = 13;
        sfixed32 minute = 16; // minutes since 2000-01-01
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    google.protobuf.Timestamp start_time = 103; // Start of trading period for this product (note: this field will only be populated in the first message sent)
    string start_time_minute = 106; // Minute representation of startTime (note: this field will only be populated in the first message sent)
    google.protobuf.Timestamp end_time = 109; // End of trading period for this product (note: this field will only be populated in the first message sent)
    string end_time_minute = 112; // Minute representation of endTime (note: this field will only be populated in the first message sent)
    float u_prc = 115; // Underlying price
    float years = 118; // Years to expiry
    float rate = 121; // Interest rate
    float sdiv = 124; // Continuous stock dividend
    float ddiv = 127; // Discrete stock dividend value
    float u_prc_offset = 130; // Implied underlying price offset. For options with futures underlyings, this is like sDiv for futures.
    float ivol = 133; // atm ivol (atm: strike = fUPrc)
    float ivxx = 136; // fixed strike ivol (ivol @ refStrike)
    float iv_cen = 139; // atm ivol (atm: strike = fUPrc) [eMove/earnings censored]
    float slope = 142; // dVol / dXAxis
    float v_width = 145; // implied volatility width (best market)
    float ref_strike = 148; // reference strike (usually prior day closing uPrc)
    float ivol_hi = 151; // Implied Volatility high value (during bar)
    float ivol_lo = 154; // Implied Volatility low value (during bar)
    float ivxx_hi = 157; // Implied Volatility of Previous Day's ATM strike, high value (during bar)
    float ivxx_lo = 160; // Implied Volatility of Previous Day's ATM strike, low value (during bar)
    float iv_cen_hi = 163; // Censored implied volatility high value (during bar)
    float iv_cen_lo = 166; // Censored implied volatility low value (during bar)
    float sdiv_hi = 169; // Continuous carry rate, high value (during bar)
    float sdiv_lo = 172; // Continuous carry rate, low value (during bar)
    float u_prc_off_hi = 175; // Underlying price offset value, high value (during bar)
    float u_prc_off_lo = 178; // Underlying price offset value, low value (during bar)
    float slope_hi = 181; // Slope high value (during bar).  The difference between the put and call at 1/2 standard deviation from the ATM point.
    float slope_lo = 184; // Slope low value (during bar).  The difference between the put and call at 1/2 standard deviation from the ATM point.
    float var_swap_fV = 187; // variance swap fair value (estimated by numerical integration over OTM price surface)
    float max_dIVol = 190; // maximum change in IVol (between LSA rec publishes)
    float max_dSDiv = 193; // maximum change is SDiv (between LSA rec publishes)
    float u_prc_sPY = 196; // SPY underlying price
    float ivol_sPY = 199; // SPY atm ivol
    float ivxx_sPY = 202; // SPY fixed strike ivol
    MarketSegment market_segment = 205;
    google.protobuf.Timestamp ts = 208; // last update time (Date)
}


    
message OptionAtmMinuteBarHist {
    message PKey {
        
        ExpiryKey ekey = 10;
        google.protobuf.Timestamp date = 13; // end of minute bar time
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 minute = 100; // minute since 2000-01-01
    TickerKey ticker = 103;
    sfixed64 security_iD = 106;
    DateKey trading_date = 109;
    TradingSession trading_session = 112;
    float u_prc = 115; // Underlying price
    float years = 118; // Years to expiry
    float rate = 121; // Interest rate
    float sdiv = 124; // Continuous stock dividend
    float ddiv = 127; // Discrete stock dividend value
    float u_prc_offset = 130; // Implied underlying price offset. For options with futures underlyings, this is like sDiv for futures.
    float ivol = 133; // atm ivol (atm: strike = fUPrc)
    float ivxx = 136; // fixed strike ivol (ivol @ refStrike)
    float iv_cen = 139; // atm ivol (atm: strike = fUPrc) [eMove/earnings censored]
    float slope = 142; // dVol / dXAxis
    float v_width = 145; // implied volatility width (best market)
    float ref_strike = 148; // reference strike (usually prior day closing uPrc)
    float ivol_hi = 151; // Implied Volatility high value (during bar)
    float ivol_lo = 154; // Implied Volatility low value (during bar)
    float ivxx_hi = 157; // Implied Volatility of Previous Day's ATM strike, high value (during bar)
    float ivxx_lo = 160; // Implied Volatility of Previous Day's ATM strike, low value (during bar)
    float iv_cen_hi = 163; // Censored implied volatility high value (during bar)
    float iv_cen_lo = 166; // Censored implied volatility low value (during bar)
    float sdiv_hi = 169; // Continuous carry rate, high value (during bar)
    float sdiv_lo = 172; // Continuous carry rate, low value (during bar)
    float u_prc_off_hi = 175; // Underlying price offset value, high value (during bar)
    float u_prc_off_lo = 178; // Underlying price offset value, low value (during bar)
    float slope_hi = 181; // Slope high value (during bar).  The difference between the put and call at 1/2 standard deviation from the ATM point.
    float slope_lo = 184; // Slope low value (during bar).  The difference between the put and call at 1/2 standard deviation from the ATM point.
    float var_swap_fV = 187; // variance swap fair value (estimated by numerical integration over OTM price surface)
    YesNo is_eOB = 190; // is end-of-bar (every 10 minutes)
    YesNo is_eOH = 193; // is end-of-hour
    google.protobuf.Timestamp timestamp = 196;
}


/*
    OptionAtmMinuteBar records are created once every 10 minutes for all option markets and are visible in SRSE and are published to the SpiderRock elastic cluster at the same time.
*/    
message OptionAtmMinuteBarSet {
    message PKey {
        
        ExpiryKey ekey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 minute = 100; // minute since 2000-01-01
    DateKey trading_date = 103;
    string date = 106;
    string time = 109;
    TickerKey ticker = 112;
    float u_prc = 115; // Underlying price
    float years = 118; // Years to expiry
    float rate = 121; // Interest rate
    float sdiv = 124; // Continuous stock dividend
    float ddiv = 127; // Discrete stock dividend value
    float u_prc_offset = 130; // Implied underlying price offset. For options with futures underlyings, this is like sDiv for futures.
    float ivol = 133; // atm ivol (atm: strike = fUPrc)
    float ivxx = 136; // fixed strike ivol (ivol @ refStrike)
    float iv_cen = 139; // atm ivol (atm: strike = fUPrc) [eMove/earnings censored]
    float slope = 142; // dVol / dXAxis
    float v_width = 145; // implied volatility width (best market)
    float ref_strike = 148; // reference strike (usually prior day closing uPrc)
    float ivol_hi = 151; // Implied Volatility high value (during bar)
    float ivol_lo = 154; // Implied Volatility low value (during bar)
    float ivxx_hi = 157; // Implied Volatility of Previous Day's ATM strike, high value (during bar)
    float ivxx_lo = 160; // Implied Volatility of Previous Day's ATM strike, low value (during bar)
    float iv_cen_hi = 163; // Censored implied volatility high value (during bar)
    float iv_cen_lo = 166; // Censored implied volatility low value (during bar)
    float sdiv_hi = 169; // Continuous carry rate, high value (during bar)
    float sdiv_lo = 172; // Continuous carry rate, low value (during bar)
    float u_prc_off_hi = 175; // Underlying price offset value, high value (during bar)
    float u_prc_off_lo = 178; // Underlying price offset value, low value (during bar)
    float slope_hi = 181; // Slope high value (during bar).  The difference between the put and call at 1/2 standard deviation from the ATM point.
    float slope_lo = 184; // Slope low value (during bar).  The difference between the put and call at 1/2 standard deviation from the ATM point.
    float var_swap_fV = 187; // variance swap fair value (estimated by numerical integration over OTM price surface)
    float max_dIVol = 190; // maximum change in IVol (between LSA rec publishes)
    float max_dSDiv = 193; // maximum change is SDiv (between LSA rec publishes)
    YesNo is_eOB = 196; // is end-of-bar (every 10 minutes)
    YesNo is_eOH = 199; // is end-of-hour
    MarketSegment market_segment = 202;
    google.protobuf.Timestamp timestamp = 205;
}


/*
    This table allows custom option pricing based on either user or SR supplied input values.
*/    
message OptionCalculator {
    message PKey {
        
        string user_name = 10;
        OptionKey okey = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double vol = 100; // volatility
    FieldSrc vol_src = 103;
    double u_prc = 106; // underlying price
    FieldSrc u_prc_src = 109;
    double years = 112; // years-to-expiration (default uses SR volatility time value)
    FieldSrc years_src = 115;
    double sdiv = 118; // continuous stock dividend using for pricing
    FieldSrc sdiv_src = 121;
    double rate = 124; // discount rate used for pricing
    FieldSrc rate_src = 127;
    ExerciseType ex_type = 130; // exercise type of the option (American or European)
    FieldSrc ex_type_src = 133;
    double eff_strike = 136; // effective strike used for pricing (default is okey.Strike)
    FieldSrc eff_strike_src = 139;
    double sym_ratio = 142; // underlying symbol ratio (for non-standard options); discrete dividend will be scaled by this factor
    FieldSrc sym_ratio_src = 145;
    string div_string = 148; // discrete dividend string  [ yearsToExpiry, years1:amt1, years2:amt2, ...] or [ -1, date1:amt1, date2:amt2, ... ]
    FieldSrc div_src = 151;
    CalcModelType model_type = 154;
    FieldSrc model_type_src = 157;
    CalcPrecision calc_precision = 160; // numerical precision (# of steps) if a numerical method is used;  [more steps will be slower to calculate]
    YesNo inc_greeks = 163;
    double price = 166; // price (premium)
    float delta = 169; // delta
    float gamma = 172; // gamma
    float theta = 175; // theta
    float vega = 178; // vega
    float volga = 181; // volga
    float vanna = 184; // vanna
    float de_decay = 187; // delta decay
    float rho = 190; // rho
    float phi = 193; // phi
    string error = 196;
    string pricer_model = 199;
    google.protobuf.Timestamp timestamp = 202;
}


    
message OptionChainRequest {


    MbusInfo descriptor = 1;
    
    TickerKey root = 100;
    sfixed32 year = 103;
    int32 month = 106;
    int32 day = 109;
    ChainRequest chain_request = 112;
    GetAction action = 115;
}


    
message OptionChainResponse {
    message PKey {
        
        string root = 10;
        sfixed32 year = 13;
        sfixed32 month = 16;
        sfixed32 day = 19;
        double strike = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    string exch_yr_mn = 103;
    double u_prc = 106;
    float xdelta = 109;
    float years = 112;
    ChainRequest chain_request = 115;
}


/*
    This table contains live option quote records from SR Execution Engines.
*/    
message OptionChildQuote {
    message PKey {
        
        OptionKey okey = 10;
        string engine_name = 13;
        YesNo is_test_accnt = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float bid_price = 100; // bid price
    float ask_price = 103; // ask price
    sfixed32 bid_size = 106; // bid size in contracts
    sfixed32 ask_size = 109; // ask size in contracts
    google.protobuf.Timestamp timestamp = 112; // quote update
}


/*
    OptionCloseMark records are created immediately after the market close (clsMarkState=SRClose), when exchanges publish official marks (clsMarkState=ExchClose), and again during top of day rotation (clsMarkState=Final).  These records contain closing quotes and prices as well as markup details for all outright options.
    OptionCloseMark records are published to the SpiderRock elastic cluster when clsMarkState=Final
*/    
message OptionCloseMark {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    ClsMarkState cls_mark_state = 103; // LastPrt = last print received; SRClose = SpiderRock snapshot; ExchClose = official exchange close price; Final = Final close mark
    double u_bid = 106; // SpiderRock closing underlier bid (C - 1m)
    double u_ask = 109; // SpiderRock closing underlier ask (C - 1m)
    double u_sr_cls = 112; // SpiderRock underlier closing mark (C - 1m)
    double u_close = 115; // exchange underlier closing mark
    float bid_prc = 118; // SpiderRock closing option bid (C - 1m)
    float ask_prc = 121; // SpiderRock closing option ask (C - 1m)
    double sr_cls_prc = 124; // SpiderRock close mark (close - 1min)
    double close_prc = 127; // official exchange closing mark (last print;then official close)
    YesNo has_sRCls_prc = 130;
    YesNo has_close_prc = 133;
    float bid_iV = 136; // implied vol of SpiderRock closing bid price (C - 1m)
    float ask_iV = 139; // implied vol of SpiderRock closing ask price (C - 1m)
    float sr_prc = 142; // SpiderRock surface price (always within bidPx/askPx) (C - 1m)
    float sr_vol = 145; // SpiderRock surface volatility (C - 1m)
    MarkSource sr_src = 148; // SpiderRock price source [NbboMid, SRVol, LoBound, HiBound, SRPricer, SRQuote, CloseMark]
    float de = 151; // delta (SR surface)
    float ga = 154; // gamma (SR surface)
    float th = 157; // theta (SR surface)
    float ve = 160; // vega (SR surface)
    float vo = 163; // volga (SR surface)
    float va = 166; // vanna (SR surface)
    float rh = 169; // rho (SR surrface)
    float ph = 172; // phi (SR surface)
    float sr_slope = 175; // surface slope (SR surface)
    float de_decay = 178; // delta decay (SR surface)
    float sdiv = 181; // SpiderRock sdiv rate
    float ddiv = 184; // SpiderRock ddiv rate (sum of discrete dividend amounts)
    float rate = 187; // SpiderRock interest rate
    float years = 190; // years to expiration
    int32 error = 193; // SpiderRock pricing library calculation error code
    sfixed32 open_interest = 196; // Open Interest
    sfixed32 prt_count = 199; // print count
    sfixed32 prt_volume = 202; // total printed volume
    google.protobuf.Timestamp sr_close_mark_dttm = 205; // from MarketCloseQuote.srCloseMarkDttm
    google.protobuf.Timestamp timestamp = 208; // record timestamp
}


    
message OptionCloseMarkHist {
    message PKey {
        
        OptionKey okey = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ExpiryKey und_sec_key = 100;
    SpdrKeyType und_sec_type = 103;
    sfixed64 security_iD = 106;
    google.protobuf.Duration sr_close_time = 109; // SR closing mark time (C)
    ClsMarkState cls_mark_state = 112; // Close mark state: None; LastPrt; SRClose; ExchClose; Final
    float u_bid = 115; // SR closing underlier bid (C - 1m)
    float u_ask = 118; // SR closing underlier ask (C - 1m)
    float u_sr_cls = 121; // SR underlier closing mark (C - 1m)
    float u_close = 124; // Exchange underlier closing mark
    float bid_prc = 127; // SR closing option bid (C - 1m)
    float ask_prc = 130; // SR closing option ask (C - 1m)
    float sr_cls_prc = 133; // SR close mark (close - 1min)
    MarkSrc sr_cls_prc_src = 136;
    float close_prc = 139; // exchange closing mark (note: may not be as/of srCloseTime)
    MarkSrc close_prc_src = 142;
    float bid_iV = 145; // implied vol of SpiderRock closing bid price (C - 1m)
    float ask_iV = 148; // implied vol of SpiderRock closing ask price (C - 1m)
    float sr_prc = 151; // SpiderRock surface price (price corresponding to srVol; may not always be within bid/ask) (C - 1m)
    float sr_vol = 154; // SpiderRock surface volatility (C - 1m)
    float i_slope = 157; // slope of SR surface (dSRVol/dUPrc; assuming expiry curve slides left/right with no shape change)
    float e_slope = 160; // slope of SR surface (dSRVol/dUPrc; from historical / empirical model)
    float de = 163; // delta (SR surface)
    float ga = 166; // gamma (SR surface)
    float th = 169; // theta (SR surface)
    float ve = 172; // vega (SR surface)
    float rh = 175; // rho (SR surrface)
    float ph = 178; // phi (SR surface)
    float vo = 181; // volga (SR surface)
    float va = 184; // vanna (SR surface)
    float de_decay = 187; // delta decay (SR surface)
    float sdiv = 190; // SR sdiv rate
    float ddiv = 193; // SR ddiv rate (sum of discrete dividend amounts)
    float rate = 196; // SR interest rate
    float years = 199; // years to expiration
    int32 error = 202; // SR pricing library calculation error code
    sfixed32 open_interest = 205; // Open Interest
    sfixed32 prt_count = 208;
    sfixed32 prt_volume = 211; // total printed volume
    google.protobuf.Timestamp prior_date = 214;
    float prc_adj_value = 217; // corp action adjustment value (0.0 on most days); [todayPrice = priorPrice * prcAdjRatio + prcAdjValue]
    float prc_adj_ratio = 220; // corp action adjustment factor (1.0 on most days)
    float prior_sRCls_prc = 223; // values archive in the previous trading period
    float prior_close_prc = 226;
    google.protobuf.Timestamp timestamp = 229;
}


    
message OptionCloseOnlyNotification {
    message PKey {
        
        OptionKey okey = 10;
        OptExch exch = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey effective_date = 100;
}


    
message OptionCorpActionRecordV5 {
    message PKey {
        
        TickerKey root = 10; // root at EOD on trading date
        DateKey ex_date = 13; // ex-date of the action
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey sod_root = 100; // (new) mh root post adjustment
    double mark_multiplier = 103; // sodMark = eodMark x markMultiplier
    sfixed32 position_multiplier = 106; // sodPosition = eodPosition x positionMultiplier
    double strike_factor = 109; // sodStrike = eodStrike x strikeMultiplier + strikeFactor
    double strike_multiplier = 112; // sodStrike = eodStrike x strikeMultiplier + strikeFactor
    string corp_action_text = 115; // descriptive detail (optional)
    google.protobuf.Timestamp timestamp = 118;
}


    
message OptionDataRequest {


    MbusInfo descriptor = 1;
    
    sfixed32 request_iD = 100;
    TickerKey root = 103;
    sfixed32 yr = 106;
    sfixed32 mn = 109;
    sfixed32 dy = 112;
    sfixed32 strike = 115;
    int32 get_calls = 118;
    int32 get_puts = 121;
    sfixed32 min_days = 124;
    sfixed32 max_days = 127;
    float min_xde = 130;
    float max_xde = 133;
    sfixed32 min_strike = 136;
    sfixed32 max_strike = 139;
    GetAction action = 142;
}


    
message OptionDataResult {


    MbusInfo descriptor = 1;
    
    sfixed32 request_iD = 100;
    OptionKey okey = 103;
    ExpiryKey fkey = 106;
    TickerKey skey = 109;
    float bid_price = 112;
    float ask_price = 115;
    float bid_size = 118;
    float ask_size = 121;
    float u_prc = 124;
    float vol = 127;
    float de = 130;
    float ga = 133;
    float th = 136;
    float ve = 139;
    float vo = 142;
    float va = 145;
    float de_decay = 148;
    float rh = 151;
    float ph = 154;
    float pr = 157;
    float xde = 160;
    sfixed32 days = 163;
}


    
message OptionDetailHist {
    message PKey {
        
        ExpiryKey ekey = 10;
        DateKey trading_date = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ExpiryKey fkey = 100; // future key of the option deliverable
    google.protobuf.Timestamp expiration = 103; // option expiration date and time
    google.protobuf.Timestamp maturity_date = 106;
    double display_factor = 109;
    double cab_price = 112;
    double min_tick_size = 115;
    google.protobuf.Timestamp timestamp = 118;
}


/*
    The expected opening price and opening size for an option.  Based on the exchange open auction feed.
*/    
message OptionEOP {
    message PKey {
        
        OptionKey okey = 10;
        TickerSrc source_exch = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 opn_size = 100; // expected opening size [contracts]
    float opn_price = 103; // expected opening price
    OptOpnType opt_opn_type = 106;
    YesNo legal_market = 109;
    sfixed64 eop_timestamp = 112; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 115; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with f
    google.protobuf.Timestamp timestamp = 118;
}


/*
    Option exercise/assigment records (either from SR clearing loaders or uploaded directly by client)
*/    
message OptionExAsRecordV5 {
    message PKey {
        
        OptionKey okey = 10;
        string accnt = 13;
        DateKey trade_date = 16; // trading date immediately prior to ex-date of the action
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string ex_as_trans_id = 100; // exercise/assigment transaction Id [optiona] (used to reference away sytem records)
    sfixed32 ex_as_contracts = 103; // note: override the normal automatic ex/as rules for up to this number of contracts. The balance (if any) will be presumed to ex/as according to default rules
    google.protobuf.Timestamp timestamp = 106;
}


    
message OptionExchFees {
    message PKey {
        
        TickerKey ticker = 10;
        string opt_exch = 13;
        FirmType cust_class = 16;
        OptNameClass name_class = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float make_fee = 100; // base (lowest tier) make fee for the exchange/cust class
    float take_fee = 103;
    float cob_make_fee = 106; // base (lowest tier) make fee for the exchange/cust class
    float cob_take_fee = 109;
    float auction_resp_fee = 112; // auction response fee (applied to one-sided auction responses)
    float breakup_fee = 115; // auction breakup fee (applies to two-sided auction responses)
    float auction_init_fee = 118; // auction initiation fee (due when an intiated cross completes)
    float breakup_credit = 121; // auction breakup credit (due when an initiated cross is broken up)
    float cob_auction_resp_fee = 124; // [cob] auction response fee (applied to one-sided auction responses)
    float cob_breakup_fee = 127; // [cob] auction breakup fee (applies to two-sided auction responses)
    float cob_auction_init_fee = 130; // [cob] auction initiation fee (due when an intiated cross completes)
    float cob_breakup_credit = 133; // [cob] auction breakup credit (due when an initiated cross is broken up)
    string modified_by = 136;
    google.protobuf.Timestamp timestamp = 139;
}


    
message OptionExchOrder {
    message PKey {
        
        OptionKey okey = 10;
        BuySell side = 13;
        OptExch exch = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 exch_order_iD = 100; // exchange assigned order ID (if any)
    sfixed32 size = 103; // size available to trade
    double price = 106;
    sfixed32 orig_order_size = 109; // original order size (if available)
    ExchOrderType order_type = 112;
    ExchOrderStatus order_status = 115;
    MarketQualifier market_qualifier = 118;
    ExecQualifier exec_qualifier = 121;
    TimeInForce time_in_force = 124;
    FirmType firm_type = 127;
    PositionType position_type = 130;
    string clearing_firm = 133;
    string clearing_accnt = 136;
    string other_detail = 139;
    sfixed64 src_timestamp = 142; // source (exch) high precision timestamp (if available)
    sfixed64 net_timestamp = 145; // SpiderRock network PTP timestamp
    sfixed64 dgw_timestamp = 148; // SpiderRock data gateway timestamp
}


    
message OptionExchPrint {
    message PKey {
        
        sfixed64 sr_print_iD = 10; // SR Generated unique print ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey okey = 100;
    OptExch exch = 103;
    sfixed64 exch_order_iD = 106; // exchange assigned order ID (if any)
    sfixed32 prt_size = 109; // size available to trade
    double prt_price = 112;
    ExchPrtType exch_prt_type = 115;
    sfixed64 src_timestamp = 118; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 121; // SpiderRock network PTP timestamp
    sfixed64 dgw_timestamp = 124; // SpiderRock data gateway timestamp
    google.protobuf.Timestamp timestamp = 127;
}


    
message OptionExchQuote {
    message PKey {
        
        OptionKey okey = 10;
        OptExch exch = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float bid_price = 100; // bid price
    float ask_price = 103; // ask price
    sfixed32 bid_size = 106; // bid size in contracts (largest exch quote)
    sfixed32 ask_size = 109; // ask size in contracts (largest exch quote)
    sfixed32 bid_time = 112; // last bid price change (milliseconds since midnight)
    sfixed32 ask_time = 115; // last ask price change (milliseconds since midnight)
    OpraMktType bid_mkt_type = 118;
    OpraMktType ask_mkt_type = 121;
    int32 session_ind = 124; // OPRA Block Header session indicator - 0 for Regular/(byte)X for Extended session
    sfixed64 net_timestamp = 127; // PTP timestamp
}


/*
    This table contains current live NBBO prices and implied volatilites as well as greeks and SpiderRock surface volatilities/prices for all call/put pairs in the market.
*/    
message OptionImpliedPair {
    message PKey {
        
        OptionKey okey = 10; // cp = Call
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    float uprc = 103; // underlier price (usually mid-market)
    float years = 106; // years to expiration
    float rate = 109; // interest rate
    float sdiv = 112; // sdiv (stock dividend) rate
    float ddiv = 115; // cumulative discrete dividend values
    float symbol_ratio = 118; // effUPrc = uprc * symbolRatio
    float strike_ratio = 121; // effStrike = okey_xx * strikeRatio
    float cash_on_exercise = 124; // cash on exercise (multihedge only)
    float x_axis = 127; // option xAxis moneyness
    float axis_fUPrc = 130; // option xAxis Fwd UPrc
    float axis_vol_rT = 133; // option xAxis moneyness volatility x sqrt(years)
    float cbid = 136; // call option bid price
    float cask = 139; // call option ask price
    float cbiv = 142; // volatility implied by option bid price
    float caiv = 145; // volatility implied by option ask price
    float catm = 148; // call option atm volatility (from SR surface)
    float cvol = 151; // call option surface volatility
    float cprc = 154; // call option surface price
    float cde = 157; // option delta (from cvol)
    float cga = 160; // option gamma (from cvol)
    float cth = 163; // option theta (from cvol)
    float cve = 166; // option vega (from cvol)
    float cro = 169; // option rho (from cvol)
    float cph = 172; // option phi (from cvol)
    float pbid = 175; // put option bid price
    float pask = 178; // put option ask price
    float pbiv = 181; // volatility implied by option bid price
    float paiv = 184; // volatility implied by option ask price
    float patm = 187; // put option atm volatility (from SR surface)
    float pvol = 190; // put option surface volatility
    float pprc = 193; // put option surface price
    float pde = 196; // option delta (from pvol)
    float pga = 199; // option gamma (from pvol)
    float pth = 202; // option theta (from pvol)
    float pve = 205; // option vega (from pvol)
    float pro = 208; // option rho (from pvol)
    float pph = 211; // option phi (from pvol)
    string calc_err = 214; // option pricing error (if any)
    CalcSource calc_source = 217;
    google.protobuf.Timestamp timestamp = 220;
}


/*
    This table contains OptionImpliedQuote records that have been adjusted to the current prevailing underlier price at the time of select.
*/    
message OptionImpliedQuoteAdj {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    float uprc = 103; // underlier price (usually mid-market)
    float years = 106; // years to expiration
    float rate = 109; // interest rate
    float sdiv = 112; // sdiv (stock dividend) rate
    float ddiv = 115; // cumulative discrete dividend values
    float obid = 118; // option bid price
    float oask = 121; // option ask price
    float obiv = 124; // volatility implied by option bid price
    float oaiv = 127; // volatility implied by option ask price
    float satm = 130; // option atm volatility (from SR surface)
    float smny = 133; // option moneyness
    float svol = 136; // option surface volatility
    float sprc = 139; // option surface price
    float smrk = 142; // option surface price (w/bounding rules)
    float ve_slope = 145; // veSlope = dVol / dUprc (assuming vol @ xAxis = 0 remains constant);hedgeDelta = (de + ve * 100 * veSlope) if hedging with this assumption
    float de = 148; // option delta
    float ga = 151; // option gamma
    float th = 154; // option theta
    float ve = 157; // option vega
    float va = 160; // option vanna
    float vo = 163; // option volga
    float ro = 166; // option rho
    float ph = 169; // option phi
    float de_decay = 172; // option delta decay
    float up50 = 175; // underlier up 50% slide
    float dn50 = 178; // underlier dn 50% slide
    float up15 = 181; // underlier up 15% slide
    float dn15 = 184; // underlier dn 15% slide
    float up06 = 187; // underlier up 6% slide
    float dn08 = 190; // underlier dn 8% slide
    string calc_err = 193; // option pricing error (if any)
    CalcSource calc_source = 196;
    AdjResult u_prc_adj_result = 199;
    google.protobuf.Timestamp timestamp = 202;
}


/*
    This table contains option implied volatilities computed using fast/accurate calcuation methods while the SELECT is processing.  Note that if you need even faster queries that cover a large number of strikes you may be better off using the OptionImpliedQuoteAdj table as it is pre-computed.
*/    
message OptionImpliedVol {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string okey_oSI = 100;
    TickerKey ticker = 103;
    float ubid = 106;
    float uask = 109;
    float yrs = 112;
    float uprc = 115;
    float rate = 118;
    float sdiv = 121;
    float ddiv = 124;
    float cash = 127;
    float obid = 130;
    float oask = 133;
    float obiv = 136; // volatility implied by option bid price
    float oaiv = 139; // volatility implied by option ask price
    float svol = 142;
    float sprc = 145;
    float de = 148;
    float ga = 151;
    float th = 154;
    float ve = 157;
    float vo = 160;
    float va = 163;
    float de_decay = 166;
    float ro = 169;
    int32 err = 172;
    string theo_err = 175;
    string calc_err = 178;
    google.protobuf.Timestamp timestamp = 181;
}


    
message OptionIntradayHist {
    message PKey {
        
        OptionKey okey = 10;
        google.protobuf.Timestamp date = 13; // end of minute bar
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trading_date = 100;
    TradingSession trading_session = 103;
    ExpiryKey und_sec_key = 106;
    SpdrKeyType und_sec_type = 109;
    sfixed64 security_iD = 112;
    float u_bid = 115; // Live underlier bid price
    float u_ask = 118; // Live underlier ask price
    float u_prc = 121;
    float bid_prc = 124; // Live option bid price
    float ask_prc = 127; // Live option ask price
    sfixed32 bid_sz = 130; // Live option bid price (size of largest exch)
    sfixed32 ask_sz = 133; // Live option ask price (size of largest exch)
    sfixed32 cum_bid_size = 136; // bid size in contracts (total nbbo size @ bidPrc)
    sfixed32 cum_ask_size = 139; // ask size in contracts (total nbbo size @ bidPrc)
    OptExch bid_exch = 142; // first (or largest remaining) exchange at bid price
    OptExch ask_exch = 145; // first (or largest remaining) exchange at ask price
    fixed32 bid_mask = 148; // exchange bid bit mask (set of exchanges at bidPrc)
    fixed32 ask_mask = 151; // exchange ask bit mask (set of exchanges at askPrc)
    float bid_price2 = 154; // 2nd best bid price
    float ask_price2 = 157; // 2nd best ask price
    sfixed32 cum_bid_size2 = 160; // cumulative size at 2nd price
    sfixed32 cum_ask_size2 = 163; // cumulative size at 2nd price
    float bid_iV = 166; // Live option implied bid
    float ask_iV = 169; // Live option implied ask
    float sr_prc = 172; // Live SpiderRock surface price
    float sr_vol = 175; // Live SpiderRock surface volatility
    float de = 178; // delta (SR surface)
    float ga = 181; // gamma (SR surface)
    float th = 184; // theta (SR surface)
    float ve = 187; // vega (SR surface)
    float rh = 190; // rho (SR surrface)
    float ph = 193; // phi (SR surface)
    float vo = 196; // volga (SR surface)
    float va = 199; // vanna (SR surface)
    float de_decay = 202; // delta decay (SR surface)
    float sdiv = 205; // SpiderRock sdiv rate
    float ddiv = 208; // SpiderRock ddiv rate (sum of discrete dividend amounts)
    float rate = 211; // SpiderRock interest rate
    float years = 214; // years to expiration
    float atm_vol = 217; // atm volatility (SR surface)
    int32 error = 220; // SpiderRock pricing library calculation error code (0=None)
    sfixed32 prt_volume = 223; // total printed volume
    google.protobuf.Timestamp timestamp = 226;
}


/*
    OptionLookback records are published by the SurfaceModelServer and represent a stable frame lookback window on the option market (typically about 10 minutes)
*/    
message OptionLookback {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    double u_prc = 103;
    float de = 106; // from SR surface volatility
    float ve = 109;
    float ema_bid_prc = 112;
    float ema_ask_prc = 115;
    float ema_bid_size = 118;
    float ema_ask_size = 121;
    float ema_sPrc = 124;
    float ema_sVol = 127;
    float ema_sDiv = 130;
    float ema_atm_vol = 133;
    google.protobuf.Timestamp timestamp = 136; // last record update time
}


    
message OptionMark {


    MbusInfo descriptor = 1;
    
    OptionKey okey = 100;
    double o_mark = 103;
    double u_mark = 106;
}


/*
    This table contains live option quote records from OPRA (equities) or the listing exchange (futures).  Each record contains up to two price levels and represents a live snapshot of the book for a specific option series.  There are typically 1mm+ records in this table if all ticker sources are enabled.
*/    
message OptionNbboQuote {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UpdateType update_type = 100;
    float bid_price = 103; // bid price
    float ask_price = 106; // ask price
    sfixed32 bid_size = 109; // bid size in contracts (largest exch quote)
    sfixed32 ask_size = 112; // ask size in contracts (largest exch quote)
    sfixed32 cum_bid_size = 115; // bid size in contracts (total nbbo size)
    sfixed32 cum_ask_size = 118; // ask size in contracts (total nbbo size)
    OptExch bid_exch = 121; // first (or largest remaining) exchange at bid price
    OptExch ask_exch = 124; // first (or largest remaining) exchange at ask price
    fixed32 bid_mask = 127; // exchange bid bit mask
    fixed32 ask_mask = 130; // exchange ask bit mask
    OpraMktType bid_mkt_type = 133; // bid side quote flags (if any)
    OpraMktType ask_mkt_type = 136; // ask side quote flags (if any)
    float bid_price2 = 139; // 2nd best bid price
    float ask_price2 = 142; // 2nd best ask price
    sfixed32 cum_bid_size2 = 145; // cumulative size at 2nd price
    sfixed32 cum_ask_size2 = 148; // cumulative size at 2nd price
    sfixed32 bid_time = 151; // last bid price change (milliseconds since midnight) calculated from the srcTimestamp
    sfixed32 ask_time = 154; // last ask price change (milliseconds since midnight) calculated from the srcTimestamp
    sfixed64 src_timestamp = 157; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 160; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
}


    
message OptionOpenAuction {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OpenAuctionType auction_type = 100; // Opening auction type
    float ref_prc = 103; // Current collared VMIM (Volume Maximizing/Imbalance Minimizing) price
    sfixed32 buy_contracts = 106; // Cumulative buy contracts at and above the reference price
    sfixed32 sell_contracts = 109; // Cumulative sell contracts at or below the reference price
    float indicative_prc = 112; // Current collared VMIM price on the queueing book and continuous book, equal to reference price for options without GTH sessions
    float auction_only_prc = 115; // Uncollared VMIM price on the queueing book only
    OptAuctionOpenCondition opening_cond = 118; // Current opening condition based on the auction
    float comp_mkt_bid_prc = 121; // Current bid price of prevailing composite market
    float comp_mkt_ask_prc = 124; // Current ask price of prevailing composite market
    sfixed64 src_timestamp = 127; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 130; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with f
    google.protobuf.Timestamp timestamp = 133;
}


    
message OptionOpenAuctionSummary {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OpenAuctionType auction_type = 100; // Opening auction type
    float prc = 103; // Auction price
    sfixed32 qty = 106; // Auction total quantity
    sfixed64 src_timestamp = 109; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 112; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with f
    google.protobuf.Timestamp timestamp = 115;
}


/*
    Open interest for each option series. Records are from the live OPRA feed.
*/    
message OptionOpenInterest {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 open_int = 100;
    google.protobuf.Timestamp timestamp = 103;
}


/*
    OptionOpenMark records are created during the end-of-day rotation for each product and intended for use the following trading day.
*/    
message OptionOpenMark {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    double u_bid = 103; // SR open uBid; (SR close uBid overnight adjusted)
    double u_ask = 106; // SR open uAsk; (SR close uAsk overnight adjusted)
    double u_sr_cls = 109; // SR open uMark; [SR close uMark (C - 1m) overnight adjusted]
    double u_close = 112; // exchange open uMark; [exchange close uMark overnight adjusted]
    float bid_prc = 115; // SR open bid; [SR close bid overnight adjusted]
    float ask_prc = 118; // SR open ask; [SR close ask overnight adjusted]
    double sr_cls_prc = 121; // SR open mark; [SR close mark (close - 1min) overnight adjusted]
    double close_prc = 124; // exchange open mark; [exchange close mark overnight adjusted] [if available]
    float bid_iV = 127; // implied vol of SR closing bid price
    float ask_iV = 130; // implied vol of SR closing ask price
    float sr_prc = 133; // SR open surface price; [SR close surface price overnight adjusted]
    float sr_vol = 136; // SR surface volatility
    MarkSource sr_src = 139;
    float de = 142; // greeks from SR surface volatility
    float ga = 145;
    float th = 148;
    float ve = 151;
    float vo = 154; // volga (SR surface)
    float va = 157; // vanna (SR surface)
    float rh = 160;
    float ph = 163;
    float sr_slope = 166; // surface slope (SR surface)
    float de_decay = 169;
    float sdiv = 172; // SR live sdiv rate
    float ddiv = 175; // SR live ddiv rate
    float rate = 178; // SR live int rate
    float years = 181; // years to expiration
    int32 error = 184; // SRPricingLib.CalcError
    string corp_action = 187;
    google.protobuf.Timestamp timestamp = 190;
}


/*
    This table contains cumulative open interest, day trading volume in terms of both contracts and vega.
*/    
message OptionOpenVega {
    message PKey {
        
        ExpiryKey ekey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trading_date = 100;
    TickerKey ticker = 103; // ticker
    sfixed32 open_int = 106; // open interest
    sfixed32 volume = 109; // option volume
    float open_vega = 112; // open vega (sum of vega * open interest)
    float vega_volume = 115; // sum of vega * volume
    sfixed32 num_options = 118; // number of strikes in this expiration month
    google.protobuf.Timestamp timestamp = 121;
}


    
message OptionPairData {
    message PKey {
        
        OptionKey opt_key = 10; // Option key
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string x_axis = 100; // xAxis = Moneyness
    string s_vol = 103; // current surface svol (live SR surface)
    string s_div = 106; // current surface sdiv (live SR surface)
    string s_vol_prv = 109; // yesterday's closing surface svol
    string s_div_prv = 112; // yesterday's closing surface sdiv
    string s_vol_chg = 115; // change in sVol from yesterday
    string atm_vol = 118; // sVol @ xAxis = 0
    string c_bid = 121; // call bid
    string c_ask = 124; // call ask
    sfixed32 c_bid_sz = 127; // call bid size
    sfixed32 c_ask_sz = 130; // call ask size
    string c_bid_iv = 133; // call bid implied volatility
    string c_ask_iv = 136; // call ask implied volatility
    string c_de = 139; // call delta
    string c_ga = 142; // call gamme
    string c_th = 145; // call theta
    string c_ve = 148; // call vega
    string c_sOpx = 151; // current call surface price
    string c_sOpx_prv = 154; // yesterday's closing surface price (sVolPrv + sDivPrv + live uPrc)
    sfixed32 c_oI = 157; // call open interest (market)
    sfixed32 c_vlm = 160; // call print volume (this exchange)
    sfixed32 c_trd = 163; // call contracts traded today
    sfixed32 c_pos = 166; // call contract position (start-of-period + traded today)
    string p_bid = 169; // put bid
    string p_ask = 172; // put ask
    sfixed32 p_bid_sz = 175; // put bid size
    sfixed32 p_ask_sz = 178; // put ask size
    string p_bid_iv = 181; // put bid implied volatility
    string p_ask_iv = 184; // put ask implied volatility
    string p_de = 187; // put delta
    string p_ga = 190; // put gamma
    string p_th = 193; // put theta
    string p_ve = 196; // put vega
    string p_sOpx = 199; // current call surface price
    string p_sOpx_prv = 202; // yesterday's closing surface price (sVolPrv + sDivPrv + live uPrc)
    sfixed32 p_oI = 205; // put open interest (market)
    sfixed32 p_vlm = 208; // put print volume (this exchange)
    sfixed32 p_trd = 211; // put contracts traded today
    sfixed32 p_pos = 214; // put contract position (start-of-period + traded today)
    google.protobuf.Timestamp ts = 217; // last update time (Date)
}


    
message OptionPairDataVset {


    MbusInfo descriptor = 1;
    
    ExpiryKey exp_key = 100; // Requested expiry key
    string accnt = 103; // (Optional) Account for associated positions
    double range_start = 106; // (Optional) First strike price of the visible window
    double range_end = 109; // (Optional) Last strike price of the visible window
}


/*
    OptionPositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.
    These records are published by a CoreRiskServer and represent the position and risk markup detail for a single option series.
    New records are published immediately when a position changes and about once per minute if no position has changed.
    Note that all records for a single underlier are published simultaneously and records for the same chain should have consistent marks.
    --- Pnl Calculation Notes ---
    SR Pnl = optSodPosSR * (optTodMarkSR - optSodMarkSR) + optMnyBotSR + optMnySldSR + optCAValueSR + optExAsValue
    CLR Pnl = optSodPosClr * (optTodMarkClr - optSodMarkClr) + optMnyBotClr + optMnySldClr + optCAValueClr + optExAsValue
    --- break checks ---
    SUM( optEodPosSR * optEodMarkSR + optExAsValue + optCAValueSR - optSodPosSR * optSodMarkSR ) = 0 [for each corpActionId != 0] and [for each individual option position record where corpActionId == 0]
    SUM( optEodPosClr * optEodMarkClr + optExAsValue + optCAValueClr - optSodPosClr * optSodMarkClr ) = 0 [for each corpActionId != 0] and [for each individual option position record where corpActionId == 0]
    optEodPosSR == optSodPosSR where corpActionId == 0 and exAsTransId == 0
    optEodPosSR + optExAsClr == optSodPosSR where exAsTransId != 0 and corpActionId == 0
    optCnBotClr - optCnSldClr == OptCnBotSR - optCnSldSR
    optMnyBotClr + optMnySldClr == OptMnyBotSR + optMnySldSR
    optEodPosSR == optEodPosClr
    optSodPosSR == optSodPosClr
*/    
message OptionPositionRecordV5 {
    message PKey {
        
        OptionKey okey = 10; // ends with '$n' if an MH allocation fraction (n = 1-N) [MMH segment number]
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103;
    string agg_group = 106; // SR assigned agg group
    ExpiryKey fkey = 109; // underlying future (if written on a future)
    TickerKey ticker = 112; // underlying ticker
    ExerciseType ex_type = 115;
    Multihedge multihedge = 118;
    TickerKey multihedge_source = 121; // MH Ticker Key (starts with '_') (if exists)
    float multihedge_pVRatio = 124; // pv multiplier (fraction of underlier value (uPerCn x uPrc) / SUM(uPerCn x uPrc) associated with this fragment
    OptionType option_type = 127;
    float cash_on_ex = 130; // cash on settlement (multihedge)
    float strike_ratio = 133; // strike ratio
    float u_prc_ratio = 136; // stock price multiplier
    sfixed32 underliers_per_cn = 139; // underliers per contract
    UnderlierType underlier_type = 142; // type of underlier (affects $greek calculations)
    float tick_value = 145; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 148; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 151;
    PriceFormat price_format = 154; // option price display format code
    PriceFormat u_price_format = 157; // underlier price display format code
    float u_prc = 160; // current underlier price (any market session) (persists if market closed/halted)
    float u_bid = 163; // current underlier bid (any market session) (zero if market closed/halted)
    float u_ask = 166; // current underlier ask (any market session) (zero if market closed/halted)
    float u_mark = 169; // current underlier mark (usually mid market) (freezes at SR CloseMarkTime)
    UMarkSource u_mark_source = 172;
    float opt_bid = 175; // current option market bid (any market session) (zero if market closed/halted)
    float opt_ask = 178; // current option market ask (any market session) (zero if market closed/halted)
    double opt_mid_mark = 181; // current option mark (mid market) (freezes at SR CloseMarkTime)
    double opt_vol_mark = 184; // current option mark (volatility surface) (freezes at SR CloseMarkTime)
    double u_opn_mark = 187; // start-of-day SR underlier mark (rotated from prior day record) [corp action adjusted]
    double opt_opn_vol_mark = 190; // start-of-day SR vol mark [corp action adjusted]
    double opt_opn_mid_mark = 193; // start-of-day SR mid mark [corp action adjusted]
    double opt_opn_clr_mark = 196; // start-of-day clearing mark [should be corp action adjusted]
    sfixed32 opt_opn_pos_prv = 199; // start-of-day SR contract position (rotated from prior day record) [corp action adjusted]
    sfixed32 opt_opn_pos_clr = 202; // start-of-day CKR contract position (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    sfixed32 opt_opn_pos = 205; // start of period contract position (effective; can be from either CLR or SR)
    PositionSource opt_opn_pos_src = 208; // start of period position source
    sfixed32 cn_bot = 211; // number of contracts bot today
    sfixed32 cn_sld = 214; // number of contracts sld today
    sfixed32 cn_opened = 217; // number of contracts opened today
    sfixed32 cn_closed = 220; // number of contracts closed today
    float edge_opened = 223; // edge from opening trades (model #1)
    float edge_closed = 226; // edge from closing trades (model #1)
    float trd_delta = 229; // deltas from trades (fixed at the time of trade)
    float trd_gamma = 232; // gamma from trades (fixed at the time of trade)
    float trd_delta_mny = 235; // deltas x uPrc from trades (fixed at the time of trade)
    double opt_mny_bot = 238; // sum of settle cash for all buy executions
    double opt_mny_sld = 241; // sum of settle cash for all sell executions
    float day_pnl = 244;
    float dn_day_pnl = 247;
    float opn_pnl_mid_mark = 250;
    float opn_pnl_vol_mark = 253;
    float opn_pnl_clr_mark = 256;
    sfixed32 cn_net_opn_pos = 259; // opening position (cnOpnPos) net of reversals/conversions
    sfixed32 cn_net_cur_pos = 262; // current position (cnOpnPos + cnBot - cnSld) net of reversals/conversions
    float cn_atm_equiv = 265; // current position (atm equivalent contracts: (cnNetPos * ve / atmVega)
    float beta = 268; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 271;
    int32 div_days = 274; // days to the next dividend (0 = exDate is today, -1 = exDate is yesterday)
    HedgeDeltaRule hedge_delta_rule = 277; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (sticky delta), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface and atm veSlope (sticky delta)) [AccountConfig.hedgeDelta]
    float binary_days = 280; // hedgeDelta = -1.0,-0.5,0,+0.5,+1.0 if less than binary days to expiration;usually [0.0 - 2.0]
    int32 days = 283; // days to expiration
    float years = 286; // years to expiration
    float rate = 289; // global rate to expiration (pricing)
    float sdiv = 292; // continuous stock div (pricing)
    float ddiv = 295; // present value of discrete dividends (pricing)
    float dadj = 298; // dadj frational dividend value; 1.0 except for some multihedge roots
    float atm_vol = 301; // live surface atm volatility
    float atm_vega = 304; // live surface atm vega
    float i_vol = 307; // surface volatility
    MarkSource i_vol_src = 310;
    float de = 313; // delta;(dOpx / dUPrc)
    float ga = 316; // gamma;(dDelta / dUPrc)
    float th = 319; // theta;(dOpx / dTime)
    float ve = 322; // vega;(dOpx / dVol)
    float rh = 325; // rho;(dOpx / dRate)
    float ph = 328; // phi;(dOpx / dSDiv)
    float vo = 331; // volga (SR surface)
    float va = 334; // vanna (SR surface)
    float de_decay = 337; // delta decay, charm, delta bleed; (dDelta/dTime)
    int32 err = 340; // computation error code (if any)
    float ve_slope = 343; // ivol correlation (veSlope = dVol / dUPrc) [can be either SR surface veSlope or client theo veSlope]
    float hedge_de = 346; // hedge delta (either ivol or tvol based;follows binary rules)
    float hedge_ga = 349; // hedge gamma (either ivol or tvol based;follows binary rules)
    float sr_slope = 352; // ivol correlation (srSlope = dVol / dUPrc) [always SR surface veSlope]
    YesNo is_binary = 355; // hedge delta/gamma has switched to 'binary'
    float prem_ov_par = 358; // premium over parity for the option position
    float xde = 361; // xdelta (C: +0.5 - de, P: -0.5 - de)
    float lo_bound = 364; // minimum no-arb opx (zero volatility given sdiv/ddiv/years/rate)
    float su90 = 367; // underlier up 90%, sticky delta
    float sd90 = 370; // underlier dn 90%, sticky delta
    float su50 = 373; // underlier up 50%, sticky delta
    float sd50 = 376; // underlier dn 50%, sticky delta
    float su15 = 379; // underlier up 15%, sticky delta
    float sd15 = 382; // underlier dn 15%, sticky delta
    float su10 = 385; // underlier up 10%, sticky delta
    float sd10 = 388; // underlier dn 10%, sticky delta
    float su06 = 391; // underlier up 6%, sticky delta
    float sd08 = 394; // underlier dn 8%, sticky delta
    float su05 = 397; // underlier up 5%, sticky delta
    float sd05 = 400; // underlier dn 5%, sticky delta
    float su1e = 403; // underlier up 1x implied earn move, vol ramp out, delta-neutral
    float sd1e = 406; // underlier dn 1x implied earn move, vol ramp out, delta-neutral
    float su2e = 409; // underlier up 2x implied earn move, vol ramp out, delta-neutral
    float sd2e = 412; // underlier dn 2x implied earn move, vol ramp out, delta-neutral
    float earn = 415; // vol earn ramp out (no underlier move)
    float cash = 418; // underlier up 30%, vol = 0.10, 6mn deal close
    string theo_model = 421; // theo model #1
    float t_vol = 424; // theo volatility
    float t_opx = 427; // theo price
    float t_bOpn_px = 430; // theo buy/open price
    float t_sOpn_px = 433; // theo sell/open price
    float t_bCls_px = 436; // theo buy/close price
    float t_sCls_px = 439; // theo sell/close price
    float t_de = 442; // theo delta
    float t_ga = 445; // theo gamma
    int32 t_err = 448; // theo vol error code (TheoError)
    string theo_model2 = 451; // theo model #2 (used for edge markup)
    float t_vol2 = 454; // theo volatility (model #2)
    float t_opx2 = 457; // theo price (model #2)
    int32 t_err2 = 460; // theo vol error code (model #2)
    float years_pr = 463;
    float rate_pr = 466;
    float sdiv_pr = 469;
    float ddiv_pr = 472;
    float i_vol_pr = 475; // prior period surface volatility
    float de_pr = 478;
    float ga_pr = 481;
    float th_pr = 484;
    float ve_pr = 487;
    float rh_pr = 490;
    float ph_pr = 493;
    float vo_pr = 496;
    float va_pr = 499;
    int32 err_pr = 502; // prior period computation error code (if any)
    float ve_slope_pr = 505; // prior period veSlope
    float hedge_de_pr = 508; // prior period hedge delta
    float t_vol_pr = 511; // prior period theo volatility (theoModel)
    float t_opx_pr = 514; // prior period theo price
    float t_de_pr = 517; // prior period theo delta
    float t_vol_pr2 = 520; // prior period theo volatility (theoModel#2)
    float t_opx_pr2 = 523; // prior period theo price
    float t_de_pr2 = 526; // prior period theo delta
    float xde_pr = 529;
    float opn_pnl_de = 532; // open position * mult * hedgeDe * dUPrc
    float opn_pnl_ga = 535; // open position * mult * 0.5 * optGamma * dUPrc * dUPrc
    float opn_pnl_th = 538; // open position * mult * optTheta * dTime
    float opn_pnl_ve = 541; // open position * mult * optVega * dVol
    float opn_pnl_vo = 544; // open position * mult * 0.5 * optVolga * dVol * dVol
    float opn_pnl_va = 547; // open position * mult * optVanna * dVol * dUPrc
    float opn_pnl_sl = 550; // open position * mult * vol/uPrc * slope * optVega * dUPrc
    float opn_pnl_rate = 553; // open position * mult * optRho * dRate
    float opn_pnl_sDiv = 556; // open position * mult * optPhi * dSDv
    float opn_pnl_dDiv = 559; // open position * mult * optPhi * dDDv
    float opn_pnl_sv = 562; // open position * mult * (SR Vol Pnl - opnPnlDe)
    float opn_pnl_err = 565; // unattributed pnl: SR Vol Pnl - opnPnlDe - opnPnlGa - opnPnlTh - opnPnlVe - opnPnlRat - opnPnlSDiv - opnPnlDDiv
    sfixed32 sh_bot_c0 = 568; // hypothetical shares bot (~1/minute intervals)
    sfixed32 sh_sld_c0 = 571; // hypothetical shares sld
    float sh_mny_c0 = 574; // hypothetical money
    sfixed32 sh_bot_c1 = 577; // hypothetical shares bot (~10/minute intervals)
    sfixed32 sh_sld_c1 = 580; // hypothetical shares sld
    float sh_mny_c1 = 583; // hypothetical money
    MarkErrorCode mark_err_codes = 586;
    float ex_value = 589; // early exercise value (amLimit - bsPrice)
    AlertCode risk_alert = 592;
    sfixed32 num_executions = 595; // number of included SpdrParentExecution records
    google.protobuf.Timestamp max_exec_dttm = 598; // maximum activity dttm of execution records included in this option risk summary
    google.protobuf.Timestamp timestamp = 601;
}


/*
    OptionPricePair records are created every 30 minutes while option markets are open.  They contain underlying, call, and put details for each outright option strike.  They also contain SR surface volatilities, prices, and greeks.
    OptionPricePair records are visible in SRSE and are published to the SpiderRock elastic cluster at the same time.
*/    
message OptionPricePairSet {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100;
    string time = 103;
    YesNo is_end_of_session = 106; // Yes if EodOfSession record
    ExpiryKey fkey = 109; // underlying fkey (if any)
    TickerKey ticker = 112; // underlying ticker
    sfixed32 grp = 115; // product group/sector code
    double u_bid = 118; // underlier bid
    double u_ask = 121; // underlier ask
    float yrs = 124; // years to expiry
    float rate = 127; // interest rate
    float sdiv = 130; // continuous stock dividend
    float ddiv = 133; // discrete stock dividend value (sum of dividends <= expiration)
    float x_axis = 136; // SR surface xAxis value
    float ve_slope = 139; // veSlope = dVol / dUprc (assuming vol @ xAxis = 0 remains constant);hedgeDelta = (de + ve * 100 * veSlope) if hedging with this assumption
    string cycle = 142; // Option expiration cycle (Weekly; quarterly; LEAPS; etc.)
    string otype = 145; // Optin type (Equity; Index; Future; Binary; Warrant; Flex)
    string mhedge = 148;
    float sym_ratio = 151; // Underlying symbol ratio (for non-standard, multi-hedge options).  effUPrc = uprc * symRatio
    float strike_ratio = 154; // effStrike = okey_xx * strikeRatio
    float cash_on_ex = 157; // Cash on exercise (multihedge only)
    float c_bid = 160; // [call] bid price
    float c_ask = 163; // [call] ask price
    sfixed32 c_bid_sz = 166; // [call] bid size (cumulative nbbo size)
    sfixed32 c_ask_sz = 169; // [call] ask size (cumulative nbbo size)
    sfixed32 c_open_int = 172; // [call] open interest
    sfixed32 c_volume = 175; // [call] trading volume
    float c_bid_iv = 178; // [call] bid implied vol
    float c_ask_iv = 181; // [call] ask implied vol
    float c_surf_px = 184; // [call] SR surface price
    float c_surf_vol = 187; // [call] SR surface volatility
    float c_de = 190; // [call] SR surface delta
    float c_ga = 193; // [call] SR surface gamma
    float c_th = 196; // [call] SR surface theta
    float c_ve = 199; // [call] SR surface vega
    float c_ro = 202; // [call] SR surface rho
    string c_err = 205; // [call] calc error flag
    float c_atm = 208; // [call] SR surface ATM vol
    float p_bid = 211; // [put] bid price
    float p_ask = 214; // [put] ask price
    sfixed32 p_bid_sz = 217; // [put] bid size (cum nbbo size)
    sfixed32 p_ask_sz = 220; // [put] ask size (cum nbbo size)
    sfixed32 p_open_int = 223; // [put] open interest
    sfixed32 p_volume = 226; // [put] trading volume
    float p_bid_iv = 229; // [put] bid implied vol
    float p_ask_iv = 232; // [put] ask implied vol
    float p_surf_px = 235; // [put] SR surface price
    float p_surf_vol = 238; // [put] SR surface volatility
    float p_de = 241; // [put] SR surface delta
    float p_ga = 244; // [put] SR surface gamma
    float p_th = 247; // [put] SR surface theta
    float p_ve = 250; // [put] SR surface vega
    float p_ro = 253; // [put] SR surface rho
    string p_err = 256; // [put] calc error flag
    float p_atm = 259; // [put] SR surface ATM vol
}


/*
    The most recent (last) print record for each active equity and future option series.  Quote markup represents quote that existed just prior to the print on the reporting exchange.
*/    
message OptionPrint {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptExch prt_exch = 100;
    sfixed32 prt_size = 103; // print size [contracts]
    float prt_price = 106; // print price
    sfixed32 prt_cluster_num = 109; // incremental print cluster counter (one counter per okey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 112; // cumulative size of prints in this sequence (sequence of prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    int32 prt_type = 115; // print type
    uint32 prt_orders = 118; // number of participating orders
    sfixed32 prt_volume = 121; // day print volume in contracts [this exchange]
    sfixed32 cxl_volume = 124; // day print/cancel volume (num of contracts printed and then cancelled)
    uint32 bid_count = 127; // number of bid prints
    uint32 ask_count = 130; // number of ask prints
    sfixed32 bid_volume = 133; // bid print volume in contracts
    sfixed32 ask_volume = 136; // ask print volume in contracts
    float ebid = 139; // exchange bid (@ print time)
    float eask = 142; // exchange ask (@ print time)
    sfixed32 ebsz = 145; // exchange bid size
    sfixed32 easz = 148; // exchange ask size
    float eage = 151; // age of prevailing quote at time of print
    PrtSide prt_side = 154; // implied print side (based on ebid/eask and nbbo market)
    sfixed64 prt_timestamp = 157; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 160; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 163;
}


/*
    The most recent (last) print record for each active equity and future option series.  Quote markup represents quote that existed just prior to the print on the reporting exchange.
*/    
message OptionPrint2 {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptExch prt_exch = 100;
    sfixed32 prt_size = 103; // print size [contracts]
    float prt_price = 106; // print price
    sfixed32 prt_cluster_num = 109; // incremental print cluster counter (one counter per okey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 112; // cumulative size of prints in this sequence (sequence of prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    int32 prt_type = 115; // print type
    uint32 prt_orders = 118; // number of participating orders
    sfixed32 prt_volume = 121; // day print volume in contracts (regular, electronic) [AUTO, REOP, MESL, TESL]
    sfixed32 oos_volume = 124; // day print volume reported out of sequence (not regular way electronic) [OSEQ, LATE, OPEN, OPNL]
    sfixed32 iso_volume = 127; // day ISO sweep volume [ISOI]
    sfixed32 sla_volume = 130; // single leg aution volume [SLAN, SLAI]
    sfixed32 mla_volume = 133; // multi leg auction volume [MLAT, TLAT, MASL, TASL]
    sfixed32 crx_volume = 136; // day electronic cross volume (no exposure period) [SLCN, SCLI, MLCT, TLCT]
    sfixed32 flr_volume = 139; // day exchange floor volume [SLFT, MLFT, MFSL, TLFT, TFSL, CMBO]
    sfixed32 mlg_volume = 142; // multi-leg (complex) volume [MLET, TLET]
    sfixed32 ukn_volume = 145; // other (uncategorized) volume
    sfixed32 cxl_volume = 148; // day print/cancel volume (num of contracts printed and then cancelled) [CANC, CNCL, CNCO, CNOL]
    sfixed32 total_volume = 151; // total day volume
    uint32 bid_count = 154; // number of bid prints
    uint32 ask_count = 157; // number of ask prints
    sfixed32 bid_volume = 160; // bid print volume in contracts
    sfixed32 ask_volume = 163; // ask print volume in contracts
    float ebid = 166; // exchange bid (@ print time)
    float eask = 169; // exchange ask (@ print time)
    sfixed32 ebsz = 172; // exchange bid size
    sfixed32 easz = 175; // exchange ask size
    float eage = 178; // age of prevailing quote at time of print
    PrtSide prt_side = 181; // implied print side (based on ebid/eask and nbbo market)
    sfixed64 prt_timestamp = 184; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 187; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 190;
}


/*
    OptionPrintMarkup records contain every option print along with quote, surface details at print time
*/    
message OptionPrintMarkup {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 prt_number = 100; // Unique print set identifier, will increment but not guaranteed to be sequential
    ExpiryKey fkey = 103; // underlying fkey (if any)
    TickerKey ticker = 106; // underlying ticker
    OptExch prt_exch = 109; // Exchange on which print took place
    sfixed32 prt_size = 112; // print size [contracts]
    float prt_price = 115; // print price
    int32 prt_type = 118; // print type
    uint32 prt_orders = 121; // number of participating orders
    sfixed32 prt_cluster_num = 124; // incremental print cluster counter (one counter per okey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 127; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 130; // day print volume in contracts [this exchange]
    sfixed32 cxl_volume = 133; // day print/cancel volume (num of contracts printed and then cancelled)
    uint32 bid_count = 136; // number of bid prints
    uint32 ask_count = 139; // number of ask prints
    sfixed32 bid_volume = 142; // bid print volume in contracts
    sfixed32 ask_volume = 145; // ask print volume in contracts
    float ebid = 148; // exchange bid (@ print time)
    float eask = 151; // exchange ask (@ print time)
    sfixed32 ebsz = 154; // exchange bid size
    sfixed32 easz = 157; // exchange ask size
    float eage = 160; // age of prevailing quote at time of print
    PrtSide prt_side = 163;
    float o_bid = 166; // Option NBBO bid a the time the print was received
    float o_ask = 169; // Option NBBO ask a the time the print was received
    sfixed32 o_bid_sz = 172; // Option NBBO cumulative bid size at the time the print was received
    sfixed32 o_ask_sz = 175; // Option NBBO cumulative ask size at the time the print was received
    OptExch o_bid_ex = 178; // First (or largest) option exchange on the bid
    OptExch o_ask_ex = 181; // First (or largest) option exchange on the ask
    sfixed32 o_bid_ex_sz = 184; // Option bid size of the largest exchange on the bid at the time the print was received
    sfixed32 o_ask_ex_sz = 187; // Option ask size of the largest exchange on the ask at the time the print was received
    int32 o_bid_cnt = 190; // Number of exchanges on the NBBO bid
    int32 o_ask_cnt = 193; // Number of exchanges on the NBBO ask
    float o_bid2 = 196; // Second level bid price
    float o_ask2 = 199; // Second level ask price
    sfixed32 o_bid_sz2 = 202; // Cumulative size on the second level bid price
    sfixed32 o_ask_sz2 = 205; // Cumulative size on the second level ask price
    double u_bid = 208; // underlier bid
    double u_ask = 211; // underlier ask
    double u_prc = 214; // underlier price
    float yrs = 217; // years to expiry
    float rate = 220; // interest rate
    float sdiv = 223; // continuous stock dividend
    float ddiv = 226; // discrete stock dividend value (sum of dividends <= expiration)
    float x_de = 229; // xDelta
    float x_axis = 232; // SR surface xAxis value
    Multihedge multihedge = 235; // Distinguishes options that have a single underlying security from those that are more complex:  multiple securities,cash components, binary options,etc:  'None','Simple','Complex','AllCash','Binary'
    float prt_iv = 238; // print implied vol
    float prt_de = 241; // print delta
    float prt_ga = 244; // print gamma
    float prt_th = 247; // print theta
    float prt_ve = 250; // print vega
    float prt_ro = 253; // print rho
    string calc_err = 256; // calc error flag
    float surf_vol = 259; // SR surface volatility
    float surf_opx = 262; // SR surface price
    float surf_atm = 265; // SR surface ATM vol
    sfixed64 src_timestamp = 268; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 271; // inbound print packet PTP timestamp from SR gateway switch
    google.protobuf.Timestamp timestamp = 274;
}


    
message OptionPrintProbability {
    message PKey {
        
        OptionKey okey = 10;
        StateModel state_model = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float prt_price = 100;
    sfixed32 prt_size = 103;
    float prt_prob = 106; // probability that this print will result in positive PnL
    BuySell prt_side = 109;
    float bid_price = 112; // nbbo bid price
    float ask_price = 115; // nbbo ask price
    sfixed32 bid_size = 118; // cumulative size @ bid price
    sfixed32 ask_size = 121; // cumulative size @ ask price
    float avg_bLink1m = 124; // average buy link value (trailing 10)
    float mae_bLink1m = 127; // buy link value mean abs err (trailing 1000)
    float avg_sLink1m = 130; // average sell link value (trailing 10)
    float mae_sLink1m = 133; // sell link value mean abs err (trailing 1000)
    float avg_bLink10m = 136; // average buy link value (trailing 100)
    float mae_bLink10m = 139; // bid link value mean abs err (trailing 1000)
    float avg_sLink10m = 142; // average ask link value (trailing 100)
    float mae_sLink10m = 145; // ask link value mean abs err (trailing 1000)
    sfixed32 b_counter = 148; // buy counter
    sfixed32 s_counter = 151; // sell counter
    sfixed64 prt_timestamp = 154; // feed timestamp from the packet
    sfixed64 net_timestamp = 157; // inbound packet PTP timestamp from SR gateway switch (from OptionPrint)
    sfixed64 sms_timestamp = 160; // state model server timestamp (just before publish)
}


/*
    OptionPrintSet records contain every option print along with quote, surface, and SR probability details at print time.  These records also contain T+1M and T+10M forward mark details.   These records are created for every print at the time of print and are published to the SpiderRock elastic cluster 10 minutes later when T + 10M forward marks are available.
*/    
message OptionPrintSet {
    message PKey {
        
        OptionKey okey = 10;
        sfixed64 prt_number = 13; // Unique print set identifier, will increment but not guaranteed to be sequential
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ExpiryKey fkey = 100; // underlying fkey (if any)
    TickerKey ticker = 103; // underlying ticker
    OptExch prt_exch = 106; // Exchange on which print took place
    sfixed32 prt_size = 109; // print size [contracts]
    float prt_price = 112; // print price
    int32 prt_type = 115; // print type
    uint32 prt_orders = 118; // number of participating orders
    sfixed32 prt_cluster_num = 121; // incremental print cluster counter (one counter per okey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 124; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 127; // day print volume in contracts
    sfixed32 cxl_volume = 130; // day print/cancel volume (num of contracts printed and then cancelled)
    uint32 bid_count = 133; // number of bid prints
    uint32 ask_count = 136; // number of ask prints
    sfixed32 bid_volume = 139; // bid print volume in contracts
    sfixed32 ask_volume = 142; // ask print volume in contracts
    float ebid = 145; // exchange bid (@ print time)
    float eask = 148; // exchange ask (@ print time)
    sfixed32 ebsz = 151; // exchange bid size
    sfixed32 easz = 154; // exchange ask size
    float eage = 157; // age of prevailing quote at time of print
    PrtSide prt_side = 160;
    sfixed64 prt_timestamp = 163; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 166; // inbound packet PTP timestamp from SR gateway switch; usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 169;
    float o_bid = 172; // Option NBBO bid a the time the print was received
    float o_ask = 175; // Option NBBO ask a the time the print was received
    sfixed32 o_bid_sz = 178; // Option NBBO cumulative bid size at the time the print was received
    sfixed32 o_ask_sz = 181; // Option NBBO cumulative ask size at the time the print was received
    OptExch o_bid_ex = 184; // First (or largest) option exchange on the bid
    OptExch o_ask_ex = 187; // First (or largest) option exchange on the ask
    sfixed32 o_bid_ex_sz = 190; // Option bid size of the largest exchange on the bid at the time the print was received
    sfixed32 o_ask_ex_sz = 193; // Option ask size of the largest exchange on the ask at the time the print was received
    int32 o_bid_cnt = 196; // Number of exchanges on the NBBO bid
    int32 o_ask_cnt = 199; // Number of exchanges on the NBBO ask
    float o_bid2 = 202; // Second level bid price
    float o_ask2 = 205; // Second level ask price
    sfixed32 o_bid_sz2 = 208; // Cumulative size on the second level bid price
    sfixed32 o_ask_sz2 = 211; // Cumulative size on the second level ask price
    double u_bid = 214; // underlier bid
    double u_ask = 217; // underlier ask
    double u_prc = 220; // underlier price
    float yrs = 223; // years to expiry
    float rate = 226; // interest rate
    float sdiv = 229; // continuous stock dividend
    float ddiv = 232; // discrete stock dividend value (sum of dividends <= expiration)
    float x_de = 235; // xDelta
    float x_axis = 238; // SR surface xAxis value
    Multihedge multihedge = 241; // Distinguishes options that have a single underlying security from those that are more complex:  multiple securities,cash components, binary options,etc:  'None','Simple','Complex','AllCash','Binary'
    float prt_iv = 244; // print implied vol
    float prt_de = 247; // print delta
    float prt_ga = 250; // print gamma
    float prt_th = 253; // print theta
    float prt_ve = 256; // print vega
    float prt_ro = 259; // print rho
    string calc_err = 262; // calc error flag
    float surf_vol = 265; // SR surface volatility
    float surf_opx = 268; // SR surface price
    float surf_atm = 271; // SR surface ATM vol
    float prt_probability = 274; // [M1] probability that buying prtSize contracts @ prtPrice will have positive m10 pnl (prtPriceM10 >= prtPrice) [recorded at time of print]
    float prt_probability_m2 = 277; // alternate probability model
    float prt_probability_m3 = 280; // alternate probability model
    float o_bid_m1 = 283; // NBBO option bid 1 minute after print was received
    float o_ask_m1 = 286; // NBBO option ask 1 minute after print was received
    double u_bid_m1 = 289; // NBBO underlying bid 1 minute after print was received
    double u_ask_m1 = 292; // NBBO underlying ask 1 minute after print was received
    double u_prc_m1 = 295; // Underlying price 1 minute after print was received
    float s_vol_m1 = 298; // Suface volatility 1 minute after print was received
    float s_opx_m1 = 301; // Surface option price 1 minute after print was received
    float s_div_m1 = 304; // sDiv 1 minute after print was received
    string s_err_m1 = 307; // Surface error condition (if any) 1 minute after print was received
    float pnl_m1 = 310; // pnl after 1 minute
    YesNo pnl_m1_err = 313; // Error condition for PnL calculated over the first 1 minute after the print was received
    float o_bid_m10 = 316; // NBBO option bid 10 minutes after print was received
    float o_ask_m10 = 319; // NBBO option ask 10 minutes after print was received
    double u_bid_m10 = 322; // NBBO underlying bid 10 minutes after print was received
    double u_ask_m10 = 325; // NBBO underlying ask 10 minutes after print was received
    double u_prc_m10 = 328; // Underlying price 10 minutes after print was received
    float s_vol_m10 = 331; // Suface volatility 10 minutes after print was received
    float s_opx_m10 = 334; // Surface option price 10 minutes after print was received
    float s_div_m10 = 337; // sDiv 10 minutes after print was received
    string s_err_m10 = 340; // Surface error condition (if any) 10 minutes after print was received
    float pnl_m10 = 343; // pnl after 10 minutes
    YesNo pnl_m10_err = 346; // Error condition for PnL calculated 10 minutes after the print was received
}


    
message OptionPrintSetHist {
    message PKey {
        
        OptionKey okey = 10;
        google.protobuf.Timestamp timestamp = 13;
        sfixed64 prt_number = 16; // Unique print set identifier, will increment but not guaranteed to be sequential
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trading_date = 100;
    TradingSession trading_session = 103;
    TickerKey ticker = 106;
    sfixed64 security_iD = 109;
    ExpiryKey und_sec_key = 112; // underlier sec key
    SpdrKeyType und_sec_type = 115; // underlier sec type
    OptExch prt_exch = 118; // Exchange on which print took place
    sfixed32 prt_size = 121; // print size [contracts]
    float prt_price = 124; // print price
    int32 prt_type = 127; // print type
    uint32 prt_orders = 130; // number of participating orders
    sfixed32 prt_cluster_num = 133; // incremental print cluster counter (one counter per okey; used to group prints into clusters)
    sfixed32 prt_cluster_size = 136; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 139; // day print volume in contracts
    sfixed32 cxl_volume = 142; // day print/cancel volume (num of contracts printed and then cancelled)
    uint32 bid_count = 145; // number of bid prints
    uint32 ask_count = 148; // number of ask prints
    sfixed32 bid_volume = 151; // bid print volume in contracts
    sfixed32 ask_volume = 154; // ask print volume in contracts
    float ebid = 157; // exchange bid (@ print time)
    float eask = 160; // exchange ask (@ print time)
    sfixed32 ebsz = 163; // exchange bid size
    sfixed32 easz = 166; // exchange ask size
    float eage = 169; // age of prevailing quote at time of print
    PrtSide prt_side = 172;
    sfixed64 prt_timestamp = 175; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 178; // inbound packet PTP timestamp from SR gateway switch; usually syncronized with facility grandfather clock
    float o_bid = 181; // Option NBBO bid a the time the print was received
    float o_ask = 184; // Option NBBO ask a the time the print was received
    sfixed32 o_bid_sz = 187; // Option NBBO cumulative bid size at the time the print was received
    sfixed32 o_ask_sz = 190; // Option NBBO cumulative ask size at the time the print was received
    OptExch o_bid_ex = 193; // First (or largest) option exchange on the bid
    OptExch o_ask_ex = 196; // First (or largest) option exchange on the ask
    sfixed32 o_bid_ex_sz = 199; // Option bid size of the largest exchange on the bid at the time the print was received
    sfixed32 o_ask_ex_sz = 202; // Option ask size of the largest exchange on the ask at the time the print was received
    int32 o_bid_cnt = 205; // Number of exchanges on the NBBO bid
    int32 o_ask_cnt = 208; // Number of exchanges on the NBBO ask
    float o_bid2 = 211; // Second level bid price
    float o_ask2 = 214; // Second level ask price
    sfixed32 o_bid_sz2 = 217; // Cumulative size on the second level bid price
    sfixed32 o_ask_sz2 = 220; // Cumulative size on the second level ask price
    double u_bid = 223; // underlier bid
    double u_ask = 226; // underlier ask
    double u_prc = 229; // underlier price
    float yrs = 232; // years to expiry
    float rate = 235; // interest rate
    float sdiv = 238; // continuous stock dividend
    float ddiv = 241; // discrete stock dividend value (sum of dividends <= expiration)
    float x_de = 244; // xDelta
    float x_axis = 247; // SR surface xAxis value
    Multihedge multihedge = 250; // Distinguishes options that have a single underlying security from those that are more complex:  multiple securities,cash components, binary options,etc:  'None','Simple','Complex','AllCash','Binary'
    float prt_iv = 253; // print implied vol
    float prt_de = 256; // print delta
    float prt_ga = 259; // print gamma
    float prt_th = 262; // print theta
    float prt_ve = 265; // print vega
    float prt_ro = 268; // print rho
    string calc_err = 271; // calc error flag
    float surf_vol = 274; // SR surface volatility
    float surf_opx = 277; // SR surface price
    float surf_atm = 280; // SR surface ATM vol
    float prt_probability = 283; // [M1] probability that buying prtSize contracts @ prtPrice will have positive m10 pnl (prtPriceM10 >= prtPrice) [recorded at time of print]
    float prt_probability_m2 = 286; // alternate probability model
    float prt_probability_m3 = 289; // alternate probability model
    float o_bid_m1 = 292; // NBBO option bid 1 minute after print was received
    float o_ask_m1 = 295; // NBBO option ask 1 minute after print was received
    double u_bid_m1 = 298; // NBBO underlying bid 1 minute after print was received
    double u_ask_m1 = 301; // NBBO underlying ask 1 minute after print was received
    double u_prc_m1 = 304; // Underlying price 1 minute after print was received
    float s_vol_m1 = 307; // Suface volatility 1 minute after print was received
    float s_opx_m1 = 310; // Surface option price 1 minute after print was received
    float s_div_m1 = 313; // sDiv 1 minute after print was received
    string s_err_m1 = 316; // Surface error condition (if any) 1 minute after print was received
    float pnl_m1 = 319; // pnl after 1 minute
    YesNo pnl_m1_err = 322; // Error condition for PnL calculated over the first 1 minute after the print was received
    float o_bid_m10 = 325; // NBBO option bid 10 minutes after print was received
    float o_ask_m10 = 328; // NBBO option ask 10 minutes after print was received
    double u_bid_m10 = 331; // NBBO underlying bid 10 minutes after print was received
    double u_ask_m10 = 334; // NBBO underlying ask 10 minutes after print was received
    double u_prc_m10 = 337; // Underlying price 10 minutes after print was received
    float s_vol_m10 = 340; // Suface volatility 10 minutes after print was received
    float s_opx_m10 = 343; // Surface option price 10 minutes after print was received
    float s_div_m10 = 346; // sDiv 10 minutes after print was received
    string s_err_m10 = 349; // Surface error condition (if any) 10 minutes after print was received
    float pnl_m10 = 352; // pnl after 10 minutes
    YesNo pnl_m10_err = 355; // Error condition for PnL calculated 10 minutes after the print was received
}


/*
    OptionPrintSetSummary records are created at the end of each trading period and contain a summary of the activity for the period; Summary of OptionPrintSet records
*/    
message OptionPrintSetSummary {
    message PKey {
        
        OptionKey okey = 10;
        OptExch prt_exch = 13;
        BuySell prt_side = 16;
        int32 prt_type = 19;
        DateKey trading_period = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_prints = 100;
    sfixed32 sum_print_size = 103;
    sfixed32 sum_exch_quote_size = 106; // exch quote size at the time of print
    float sum_print_m1_pn_l = 109;
    float sum_print_m10_pn_l = 112;
    float avg_vol = 115;
    float avg_vega = 118;
    float avg_delta = 121;
    float avg_print_prob = 124;
    float sum_surface_edge = 127;
}


/*
    Root/Expiration trading summaries.  Includes contracts and vega trade in total and on the public bid or offer.  Records update live as public trades occur.
*/    
message OptionPrintSummary {
    message PKey {
        
        ExpiryKey ekey = 10;
        PrtSummaryType prt_summary_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    sfixed32 cn_prt = 103; // total contracts printed
    sfixed32 cn_bot = 106; // total contracts bot (print price closer to bid)
    sfixed32 cn_sld = 109; // total contracts sld (print price closer to ask)
    float ve_prt = 112; // sum(abs(cn * upc * ve))
    float ve_bot = 115; // sum(abs(cn * upc * ve)) | side > 0
    float ve_sld = 118; // sum(abs(cn * upc * ve)) | side < 0
    float ve_dd_prt = 121; // sum(abs(cn * upc * ve)) & fuzzy bucket
    float ve_dn_prt = 124; // sum(abs(cn * upc * ve)) & fuzzy bucket
    float ve_at_prt = 127; // sum(abs(cn * upc * ve)) & fuzzy bucket
    float ve_up_prt = 130; // sum(abs(cn * upc * ve)) & fuzzy bucket
    float ve_du_prt = 133; // sum(abs(cn * upc * ve)) & fuzzy bucket
    float ve_dd_bot = 136; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_dn_bot = 139; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_at_bot = 142; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_up_bot = 145; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_du_bot = 148; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_dd_sld = 151; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_dn_sld = 154; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_at_sld = 157; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_up_sld = 160; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    float ve_du_sld = 163; // sum(abs(cn * upc * ve)) | side > 0 & fuzzy bucket
    sfixed32 rec_cnt = 166; // number of print reports included in totals
    sfixed64 net_timestamp = 169; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
}


    
message OptionQuoteProbability {
    message PKey {
        
        OptionKey okey = 10;
        StateModel state_model = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double u_mid = 100; // reference underlier midPrice (0.5 prob price)
    double u_prc = 103; // reference underlier price (mid-quote)
    float bid_price = 106; // nbbo bid price
    float ask_price = 109; // nbbo ask price
    sfixed32 bid_size = 112; // cumulative size @ bid price
    sfixed32 ask_size = 115; // cumulative size @ ask price
    float bid_take_prob = 118; // bid take probability of current nbbo market (zero exchange fee) [average size print]
    float ask_take_prob = 121; // ask take probability of current nbbo market (zero exchange fee) [average size print]
    PredictResult bid_take_rv = 124; // model result code
    PredictResult ask_take_rv = 127; // model result code
    float bid_impr_price = 130; // trial improvement price (usually 1 tick or 1/2 spread inside bidPrice)
    float ask_impr_price = 133; // trial improvement price (usually 1 tick or 1/2 spread inside askPrice)
    float bid_tk_im_prob = 136; // bid take imprv probability of current nbbo market (zero exchange fee) [prob to sell (take) @ bid + imprIncrement]
    float ask_tk_im_prob = 139; // ask take imprv probability of current nbbo market (zero exchange fee) [prob to buy (take) @ ask - imprIncrement]
    PredictResult bid_tk_im_rv = 142; // model result code
    PredictResult ask_tk_im_rv = 145; // model result code
    double surf_price = 148; // surface price
    double surf_vol = 151; // surface volatility
    double sdiv = 154; // expiry sdiv
    float surf_buy_prob = 157; // surface buy take probability (zero exchange fee) [average size print]
    float surf_sell_prob = 160; // surface sell take probability (zero exchange fee) [average size print]
    PredictResult b_surf_rv = 163; // model result code
    PredictResult s_surf_rv = 166; // model result code
    float vega = 169; // option vega
    float delta = 172; // option delta
    float mid_price = 175; // price corresponding to 0.50 probability
    float avg_bid_link10m = 178; // average bid take prob link value (~10 min)
    float mae_bid_link10m = 181; // bid link value mean abs err (~10 min)
    float avg_ask_link10m = 184; // average ask take prob link value (~10 min)
    float mae_ask_link10m = 187; // ask link value mean abs err (~10 min)
    float avg_mkt_width10m = 190; // askPrice - bidPrice (~10 min)
    sfixed32 counter = 193; // record update counter (zero @ start of period;per okey)
    QPSource qp_source = 196;
    sfixed64 src_timestamp = 199; // feed timestamp from the packet
    sfixed64 net_timestamp = 202; // inbound packet PTP timestamp from SR gateway switch (from OptionNbboQuote)
    sfixed64 sms_timestamp = 205; // state model server timestamp (just before publish)
}


    
message OptionRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string change_reason = 100;
    string accnt = 103;
    OptionKey okey = 106;
    TickerKey ticker = 109;
    string risk_group = 112;
    sfixed32 cn_bot_filled = 115; // fills only
    sfixed32 cn_sld_filled = 118; // fills only
    double de_bot_filled = 121; // fills only
    double de_sld_filled = 124; // fills only
    sfixed32 cn_bot = 127; // fills + IOC leaves
    sfixed32 cn_sld = 130; // fills + IOC leaves
    YesNo is_firm_opt_position_set = 133;
    sfixed32 firm_opt_position = 136;
    sfixed32 firm_opt_checkpnt = 139;
    double xde = 142;
    double u_prc = 145;
    double ve_bot = 148; // fills + IOC leaves
    double ve_sld = 151; // fills + IOC leaves
    double wt_ve_bot = 154; // fills + IOC leaves
    double wt_ve_sld = 157; // fills + IOC leaves
    double pr_bot = 160; // fills + IOC leaves
    double pr_sld = 163; // fills + IOC leaves
    double dd_bot = 166; // fills + IOC leaves
    double dd_sld = 169; // fills + IOC leaves
    double de_bot = 172; // fills + IOC leaves
    double de_sld = 175; // fills + IOC leaves
    double opn_de_bot = 178; // fills + all leaves
    double opn_de_sld = 181; // fills + all leaves
    double rm1_bot = 184; // fills + IOC leaves
    double rm1_sld = 187; // fills + IOC leaves
    double rm2_bot = 190; // fills + IOC leaves
    double rm2_sld = 193; // fills + IOC leaves
    double rm3_bot = 196; // fills + IOC leaves
    double rm3_sld = 199; // fills + IOC leaves
    double rm4_bot = 202; // fills + IOC leaves
    double rm4_sld = 205; // fills + IOC leaves
    double rm5_bot = 208; // fills + IOC leaves
    double rm5_sld = 211; // fills + IOC leaves
    double rm6_bot = 214; // fills + IOC leaves
    double rm6_sld = 217; // fills + IOC leaves
    double rm7_bot = 220; // fills + IOC leaves
    double rm7_sld = 223; // fills + IOC leaves
    double notional_bot = 226; // fills + IOC leaves
    double notional_sld = 229; // fills + IOC leaves
    sfixed32 cn_abs = 232; // fills + all leaves
    double notional_abs = 235; // fills + all leaves
    double s08dn_day = 238; // fills + IOC leaves
    double s06up_day = 241; // fills + IOC leaves
    double s15dn_day = 244; // fills + IOC leaves
    double s15up_day = 247; // fills + IOC leaves
    sfixed32 counter = 250;
    google.protobuf.Timestamp timestamp = 253;
}


/*
    This table contains the up/dn underlier price slides used in OCC risk calculations.  Note that these values are computed by SpiderRock using similar methods but may not exactly match OCC values.
*/    
message OptionRiskFactor {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    float svol = 103; // option surface volatility
    float years = 106; // years to expiration
    float up50 = 109; // underlier up 50% slide
    float dn50 = 112; // underlier dn 50% slide
    float up15 = 115; // underlier up 15% slide
    float dn15 = 118; // underlier dn 15% slide
    float up12 = 121; // underlier up 12% slide
    float dn12 = 124; // underlier dn 12% slide
    float up09 = 127; // underlier up 9% slide
    float dn09 = 130; // underlier dn 9% slide
    float dn08 = 133; // underlier dn 8% slide
    float up06 = 136; // underlier up 6% slide
    float dn06 = 139; // underlier dn 6% slide
    float up03 = 142; // underlier up 3% slide
    float dn03 = 145; // underlier dn 3% slide
    string calc_err = 148; // option pricing error, otherwise, an empty string.
    CalcSource calc_source = 151;
    google.protobuf.Timestamp timestamp = 154;
}


    
message OptionRootHist {
    message PKey {
        
        TickerKey root = 10;
        DateKey trading_date = 13;
    }

    message Underlying {
        
        TickerKey ticker = 199;
        float und_per_cn = 202; // note: _root basket = sum(undPerCn * ticker) / 100
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    string osi_root = 103; // long version of the root.  the short version is used in the TickerKey (for example RYAAY1, not RYAA1)
    sfixed64 security_iD = 106;
    TickerKey ccode = 109;
    ExpirationMap expiration_map = 112;
    UnderlierMode underlier_mode = 115;
    OptionType option_type = 118; // indicator for option type
    Multihedge multihedge = 121; // indicates type of multihedge
    ExerciseTime exercise_time = 124; // Exercise time type
    ExerciseType exercise_type = 127; // Exercise style
    TimeMetric time_metric = 130; // trading time metric - 252 or 365 trading days or a weekly cycle type
    PricingModel pricing_model = 133;
    MoneynessType moneyness_type = 136; // moneyness (xAxis) convention: PctStd = (K / fUPrc - 1) / (axisVol * RT), LogStd = LOG(K/fUPrc) / (axisVol * RT), NormStd = (K - fUPrc) / (axisVol * RT)
    PriceQuoteType price_quote_type = 139; // quoting style for the option series on the exchange, price (standard price quote) or volatility quoted (vol points)
    sfixed32 position_limit = 142; // max contract limit
    string exchanges = 145; // exchange codes
    float tick_value = 148; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 151; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 154;
    double strike_scale = 157; // manual strike price adjustment multiplier (used for some CME products if set, otherwise displayFactor is used) (okey_xx = strikePrice * manualStrikeScale)
    float strike_ratio = 160; // note: effective strike = strike * strikeRatio - cashOnExercise
    float cash_on_exercise = 163; // note: cashOnExercise is positive if it decreases the effective strike price
    sfixed32 underliers_per_cn = 166; // note: always 100 if underlying list is in use
    double premium_mult = 169; // note: OCC premium/strike multiplier (usually 100)
    AdjConvention adj_convention = 172;
    OptPriceInc opt_price_inc = 175;
    PriceFormat price_format = 178; // price display format
    Currency trade_curr = 181;
    Currency settle_curr = 184;
    Currency strike_curr = 187;
    TickerKey default_surface_root = 190; // fallback ticker to use for option surfaces if no native surfaces are available
    google.protobuf.Timestamp timestamp = 193;
    repeated Underlying underlying = 196;
}


/*
    Option settlement marks from the listing exchange.
*/    
message OptionSettlementMark {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey settle_date = 100;
    float settle_px = 103; // Exchange settlement price
    float settle_de = 106; // Exchange settlement delta
    float low_lmt_px = 109; // Exchange low limit price
    float high_lmt_px = 112; // Exchange high limit price
    sfixed32 open_int = 115; // Exchange open interest (date prior to settle date)
    sfixed32 volume = 118; // Exchange volume (date prior to settle date)
    YesNo early = 121;
    google.protobuf.Timestamp timestamp = 124;
}


    
message OptionSpanRiskSlides {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float span01_v_up_u_nc = 100;
    float span02_v_dn_u_nc = 103;
    float span03_v_up_u_u1 = 106;
    float span04_v_dn_u_u1 = 109;
    float span05_v_up_u_d1 = 112;
    float span06_v_dn_u_d1 = 115;
    float span07_v_up_u_u2 = 118;
    float span08_v_dn_u_u2 = 121;
    float span09_v_up_u_d2 = 124;
    float span10_v_dn_u_d2 = 127;
    float span11_v_up_u_u3 = 130;
    float span12_v_dn_u_u3 = 133;
    float span13_v_up_u_d3 = 136;
    float span14_v_dn_u_d3 = 139;
    float span15_v_nc_u_u9 = 142;
    float span16_v_nc_u_d9 = 145;
    google.protobuf.Timestamp timestamp = 148;
}


    
message OptionTheoPrice {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string theo_model = 100; // required in where clause (theo model must be associated with an accnt that is visible)
    TickerKey ticker = 103;
    float yrs = 106;
    float u_prc = 109; // stock price
    float obid = 112; // option bid
    float oask = 115; // option ask
    float tvol = 118; // theo vol
    float tprc = 121; // theo vol price
    float de = 124; // implied greeks
    float ga = 127;
    float th = 130;
    float ve = 133;
    float ddiv = 136;
    float rate = 139;
    float sdiv = 142;
    float x_axis = 145;
    float tvol_atm = 148;
    float ivol_atm = 151;
    int32 err = 154;
    string theo_err = 157;
    string calc_err = 160;
    TheoStatus theo_status = 163;
    google.protobuf.Timestamp timestamp = 166;
}


/*
    OptionTheoVol records contain client supplied theoretical volatility surface information resolved at the level if individual strikes.  Strike volatilities, prices, greeks and SpiderRock surface volatilites and prices are all available.  Values are computed on the fly using fast/accurate calculation methods as records are returned.
*/    
message OptionTheoVol {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string theo_model = 100; // required in where clause (theo model must be associated with an accnt that is visible)
    string client_firm_out = 103;
    float years = 106; // volatility years to expiration (variable time metric; SR holiday calendar)
    TickerKey ticker = 109; // underlier ticker
    float uprc = 112; // underlier price
    float ubid = 115; // underlier bid
    float uask = 118; // underlier ask
    float obid = 121; // option market bid
    float oask = 124; // option market ask
    float tvol = 127; // theo vol
    float tvol_bOpn = 130; // theo buy/open vol
    float tvol_sOpn = 133; // theo sell/open vol
    float tprc = 136; // theo vol price
    float tb_prc = 139; // theo buy (open) price
    float ts_prc = 142; // theo sell (open) price
    float tb_cls_prc = 145; // theo buy (close) price
    float ts_cls_prc = 148; // theo sell (close) price
    float ve_slope = 151; // veSlope = dVol / dUprc (assuming vol @ xAxis = 0 remains constant);hedgeDelta = (de + ve * 100 * veSlope) if hedging with this assumption
    float de = 154; // implied greeks (from theo surface)
    float ga = 157;
    float th = 160;
    float ve = 163;
    float vo = 166;
    float va = 169;
    float de_decay = 172;
    float ro = 175;
    float ph = 178;
    float sdiv_b = 181; // normalized sdiv when buying
    float sdiv_s = 184; // normalized sdiv when selling
    float x_axis = 187; // xAxis value (depends on xAxis definition in TheoExpSurface record)
    float tvol_atm = 190; // theo model volatility (atm)
    float ivol_atm = 193; // SR Surface Volatility (atm)
    float svol = 196; // SR Surface Volatility
    float sprc = 199; // SR Surface Price
    float s_de = 202; // SR Surface Delta
    float s_ve = 205; // SR Surface Vega
    float rate = 208; // SR Rate (average interest rate to expiration)
    float sdiv = 211; // SR SDiv (continuous dividend;accretive with discrete dividends)
    float ddiv = 214; // SR DDiv (sum of discrete dividend amounts prior to expiration)
    int32 err = 217;
    string theo_err = 220;
    string calc_err = 223;
    TheoStatus theo_status = 226;
    google.protobuf.Timestamp timestamp = 229;
}


    
message OrderCardData {
    message PKey {
        
        string ord_key = 10; // baseParentNumber.X
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string symbol = 100;
    string accnt = 103;
    BuySell order_side = 106;
    string item = 109; // display description of order (single or mleg)
    ToolOrderStatus order_status = 112; // display status of order (single or mleg)
    string algo_desc = 115; // formatted algo description
    string bid = 118; // formatted bid string
    string ask = 121; // formatted ask string
    string last = 124; // formatted last print string
    double move = 127; // pct change since start of day
    string order_size = 130; // formatted order size
    string order_active_size = 133; // formatted order active size
    string fill_qty = 136; // total contracts filled
    string avg_fill_prc = 139; // average price per contract filled
    string leaves_qty = 142; // formatted leavesQty string
    google.protobuf.Timestamp gtt = 145; // order expiration time (Date)
    google.protobuf.Timestamp ts = 148; // last update time (Date)
}


    
message OrderCardDataVset {


    MbusInfo descriptor = 1;
    
    string orders = 100; // (optional) Semicolon delimited list of orderKeys(hexadecimal) to subscribe to. Leave blank for all orders. (note: for subscriptions, it's highly recommended that this field be used)
    string accnts = 103; // (optional) Semicolon delimited list of accounts to view orders for. (Admin only)
}


    
message OrderCreateMessage {
    message PKey {
        
        string ord_key = 10; // baseParentNumber.X (if replacing an existing order; otherwise = 'PREVIEW' or 'CREATE')
    }

    message OrderLeg {
        
        OptionKey leg_sec_key = 238; // Leg security key
        SpdrKeyType leg_sec_type = 241;
        BuySell leg_side = 244;
        sfixed32 leg_size = 247; // Used for single leg orders, otherwise can be left blank or set to 1
        sfixed32 leg_ratio = 250; // Used for mutli leg orders, otherwise can be left blank or set to 1
        ToolPositionType leg_pos_type = 253;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string nonce = 100;
    ToolAlgoType algo_type = 103;
    ToolOrderAction order_action = 106;
    string accnt = 109;
    sfixed32 order_size = 112;
    BuySell order_side = 115;
    ToolSizeCond block_size_cond = 118;
    ToolRespCode block_resp_code = 121;
    YesNo show_public = 124;
    YesNo allow_immediate = 127;
    ToolTriggerType trigger_type = 130;
    double trigger_level = 133;
    ToolAlgoTime algo_time = 136;
    ToolMktSession algo_mkt_session = 139;
    ToolAuctionTime auction_time = 142;
    ToolAuctionType auction_type = 145;
    string auction_key = 148; // Intiating AuctionKey.X (Used only for AuctionResp orders)
    string exch_string = 151;
    ToolReachRule take_reach_rule = 154;
    double progress_expose_time = 157;
    ToolUPrcValidRange u_prc_valid_range = 160;
    double u_prc_custom_lower = 163; // only used when uPrcValidRange is Custom
    double u_prc_custom_upper = 166; // only used when uPrcValidRange is Custom
    double ref_uPrc = 169; // reference uPrc established at the start of the auction (set this value to 0 to use SR default value)
    double ref_de = 172; // reference delta for all price adjustments (set this value to 0 to use SR default value)
    YesNo adjust_prc = 175;
    double min_option_px = 178;
    ToolLimitType limit_type = 181;
    double limit_value = 184;
    ToolSpdrLimitType take_limit_type = 187;
    double take_limit_value = 190;
    ToolSpdrLimitType make_limit_type = 193;
    double make_limit_value = 196;
    ToolBalanceHandling balance_handling = 199;
    int32 num_make_exchanges = 202;
    ToolPublicSize public_size = 205;
    sfixed32 max_exposure_size = 208;
    sfixed32 open_size = 211; // used for Spider Committed order types
    ToolAutoHedgeTime auto_hedge_time = 214;
    ToolMktSession auto_hedge_mkt_session = 217;
    ToolShortSaleFlag auto_hedge_sSale_flag = 220;
    YesNo pro_cap = 223; // protection cap
    YesNo alw_leg = 226; // allow legging
    double leg_slp = 229; // leg slippage
    ToolLegExposure leg_exp = 232; // leg exposure
    google.protobuf.Timestamp ts = 256; // last update time (Date)
    repeated OrderLeg order_leg = 235;
}


    
message OrderDetailData {
    message PKey {
        
        string ord_key = 10; // baseParentNumber.X
    }

    message AuctionLevel {
        
        int32 num_rsp = 589; // number of responders
        string mch_prc = 592; // match price
        string mch_size = 595; // match size
        YesNo can_accept = 598;
        string sln_vol = 601;
        string sln_prc = 604;
        string private_size = 607;
        PriceLevel inc_nBBO = 610;
    }

    message DetailLeg {
        
        string leg_desc = 523;
        OptionKey leg_sec_key = 526; // Leg security key
        SpdrKeyType leg_sec_type = 529;
        BuySell leg_side = 532;
        sfixed32 leg_size = 535;
        double leg_ratio = 538; // divisor necessary to compare mixed instruments
        ToolPositionType leg_pos_type = 541;
        string leg_bid = 544;
        string leg_ask = 547;
        string leg_bid_sz = 550;
        string leg_ask_sz = 553;
        string leg_fair_px = 556;
        string leg_sVol = 559; // option only
        string leg_de = 562; // option only
        string leg_ve = 565; // option only
        string leg_open = 568;
        string leg_avg_px = 571;
        string leg_fill_qty = 574;
        string leg_fill_vega = 577;
        string leg_child_str = 580;
        string leg_error = 583; // leg error string (if any)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string nonce = 100; // will be from the OrderCreate message if this is a response to a previous user create/modify/preview action.
    ToolAlgoType algo_type = 103;
    ToolOrderMode order_mode = 106;
    string accnt = 109;
    string item = 112; // display description of order (single or mleg)
    string algo_desc = 115; // formatted algo description
    TickerKey ticker = 118; // Ticker key
    string bid_px = 121; // formatted bid string (nbbo 1st price level)
    string ask_px = 124; // formatted ask string
    string bid_px2 = 127; // formatted bid string (nbbo 2nd price level)
    string ask_px2 = 130; // formatted ask string
    string bid_sz = 133; // formatted bid size string (nbbo 1st price level)
    string ask_sz = 136; // formatted ask size string
    string bid_sz2nd = 139; // formatted bid size string (nbbo 2st price level)
    string ask_sz2nd = 142; // formatted ask size string
    string fair_px = 145; // formatted fair price (usually surface price)
    string s_vol = 148; // Formatted sVol string
    string prem = 151; // total (fill or order) premium for entire order
    string vega = 154; // total (fill or order) vega for entire order
    string theta = 157; // total (fill or order) theta for entire order
    string delta = 160; // total (fill or order) delta for entire order
    string ddelta = 163; // total (fill or order) $delta for entire order
    ToolOrderStatus status = 166; // display status of order (single or mleg)
    BuySell order_side = 169; // order side
    sfixed32 order_size = 172; // order size
    sfixed32 order_size_initiator = 175; // only used by responders
    string order_active_size = 178; // size currently working
    string cum_fill_qty = 181; // total contracts filled
    string avg_fill_prc = 184; // average price per contract filled
    string leaves_qty = 187; // formatted leavesQty string
    string child_order_str = 190; // formatted child order string
    string algo_state = 193; // formatted algo state
    string user_lmt_px = 196; // formatted
    string make_lmt_px = 199;
    string make_eff_lmt_px = 202; // formatted
    string take_lmt_px = 205;
    string take_eff_lmt_px = 208; // formatted
    string reject_reason = 211; // only populated if order is rejected
    string close_reason = 214; // only populated if order is closed with a reason
    string vol_drift = 217; // vol drift
    string und_drift = 220; // underlier drift
    string c_slc = 223; // number of completed slices (blank if not applicable)
    string t_slc = 226; // total slices in this order (blank if not applicable)
    google.protobuf.Timestamp gtt = 229; // order expiration time (Date)
    string bid_prc_num = 232; // raw/unformatted
    string ask_prc_num = 235; // raw/unformatted
    string bid_prc2_num = 238; // raw/unformatted
    string ask_prc2_num = 241; // raw/unformatted
    string bid_prc10m_num = 244; // raw/unformatted
    string ask_prc10m_num = 247; // raw/unformatted
    string fair_px_num = 250; // raw/unformatted
    string fair_px10m_num = 253; // raw/unformatted
    string user_lmt_px_num = 256; // raw/unformatted
    string make_eff_lmt_px_num = 259; // raw/unformatted
    string take_eff_lmt_px_num = 262; // raw/unformatted
    string c_px1_num = 265; // child order (1st price level)
    string c_px2_num = 268; // child order (2nd price level)
    string time_working = 271;
    string num_prints = 274;
    string prt_volume = 277;
    string comp_volume = 280;
    string arrive_bid = 283;
    string arrive_ask = 286;
    string arrive_mkt_sz = 289;
    string capture_pct = 292;
    string slippage = 295;
    string num_child_orders = 298;
    ToolSizeCond block_size_cond = 301;
    ToolRespCode block_resp_code = 304;
    YesNo show_public = 307;
    YesNo allow_immediate = 310;
    ToolAuctionTime auction_time = 313;
    ToolTriggerType trigger_type = 316;
    double trigger_level = 319;
    ToolAlgoTime algo_time = 322;
    ToolAuctionType auction_type = 325;
    string exch_string = 328;
    ToolReachRule take_reach_rule = 331;
    double progress_expose_time = 334;
    ToolUPrcValidRange u_prc_valid_range = 337;
    double u_prc_custom_lower = 340; // only used when uPrcValidRange is Custom
    double u_prc_custom_upper = 343; // only used when uPrcValidRange is Custom
    double min_option_px = 346;
    ToolLimitType limit_type = 349;
    double limit_value = 352;
    double limit_value_initiator = 355; // only used by responders
    ToolSpdrLimitType take_limit_type = 358;
    double take_limit_value = 361;
    ToolSpdrLimitType make_limit_type = 364;
    double make_limit_value = 367;
    ToolBalanceHandling balance_handling = 370;
    int32 num_make_exchanges = 373;
    ToolPublicSize public_size = 376;
    sfixed32 max_exposure_size = 379;
    ToolAutoHedgeTime auto_hedge_time = 382;
    ToolShortSaleFlag auto_hedge_sSale_flag = 385;
    double ref_uPrc = 388; // reference underlier price (default = underlier.mid)
    YesNo ref_uPrc_warning = 391;
    YesNo adjust_prc = 394;
    double ref_de = 397; // reference delta for all price adjustments (default = option.delta)
    YesNo ref_de_wrn = 400; // reference delta warning
    YesNo pr_cap = 403; // protection cap
    YesNo alw_leg = 406; // allow legging
    double leg_slp = 409; // leg slippage
    ToolLegExposure leg_exp = 412; // leg exposure
    string order_error_field = 415;
    string order_error_desc = 418;
    string prc_lvl = 421; // formatted price between bid and ask
    sfixed32 pas_pct = 424; // passive percentage (????)
    sfixed32 mod_pct = 427; // moderate percentage (????)
    sfixed32 agg_pct = 430; // aggressive percentage (????)
    string auction_key = 433; // baseParentNumber of auctionInit order
    string cust_qty = 436;
    CustQtyCond cust_qty_cond = 439;
    CustProgress cust_prg = 442; // from parentOrder.progressRule
    string cust_mch_prc = 445; // cust match price
    string cust_mch_size = 448; // cust match size
    string cust_sln_vol = 451; // cust solution vol (corresponds to solutionPrc @ live uPrc)
    string cust_sln_prc = 454; // cust solution price (relative to uPrc @ auction start)
    google.protobuf.Timestamp auction_st_dttm = 457; // Auction start time (Date)
    sfixed32 auction_duration = 460; // expected auction duration (in seconds)
    YesNo is_atv_mkr = 463; // is active maker, will the initiator be active in an exchange order book during the auction.
    YesNo can_trd_imm = 466; // can trade immediate
    YesNo auto_comp = 469; // will autocomplete, initiator has established an auto-complete price that will allow auction to trade at the conclusion
    BlockAuctionStatus block_auction_status = 472; // Block auction status
    string block_auction_detail = 475;
    CrossReason cross_reason = 478;
    string cross_cl_ord_id = 481; // clOrdId of the cross child order used to initiate the exchange cross
    string cross_ref_uPrc = 484; // reference underlier price used to resolve all prices used in the auction cross
    string cross_ref_uBid = 487; // reference underlier bid at initiation of auction cross
    string cross_ref_uAsk = 490; // reference underlier ask at initiation of auction cross
    string cross_timestamp = 493; // cross initiation net timestamp
    google.protobuf.Timestamp cross_dttm = 496; // cross initiation dttm (Date)
    string cross_size = 499; // size of the initial cross
    string init_cross_prc = 502; // initial price on the exch cross order
    string best_cross_prc = 505; // best exchange cross price (NWT price) on the exchange cross order
    string final_cross_prc = 508; // final exchange crossing price (initial price unless improved on exchange)
    string cust_fill_qty = 511; // cumulative fill quantity (cust)
    string face_fill_qty = 514; // cumulative fill quantity (face) [all responders combined]
    sfixed32 open_size = 517; // used for Spider Committed order types only
    google.protobuf.Timestamp ts = 613; // last update time (Date)
    repeated AuctionLevel auction_level = 586;
    repeated DetailLeg detail_leg = 520;
}


    
message OrderDetailDataVset {


    MbusInfo descriptor = 1;
    
    string ord_key = 100; // Requested orderkey.x
    YesNo is_preview = 103; // (Optional) Is this a preview
    YesNo is_auction = 106; // (Optional) Is this
}


    
message ParentExecFromStreetExec {
    message PKey {
        
        sfixed64 fill_number = 10; // SpiderRock execution number (globally unique over trailing 10 days)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    int32 version = 100; // record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    ExecStatus exec_status = 103; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    ExecShape exec_shape = 106;
    sfixed64 package_id = 109; // SR package Id
    sfixed64 parent_number = 112; // SR parent number
    int32 parent_version = 115; // SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    sfixed64 base_parent_number = 118; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 cl_ord_id = 121; // SR child order clOrdID resulting in fill
    sfixed64 alt_fill_id = 124; // alternate fill ID (usually from AwayTktGateway.pkey.clientFillID)
    string alt_order_id = 127; // alternate order ID (usually clOrdId from client)
    string alt_cross_id = 130;
    string alt_leg_ref_id = 133;
    string alt_accnt = 136; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 139; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string src_routing_code = 142; // inbound FIX routing code, if any
    sfixed64 risk_group_id = 145; // riskGroupId (parent order group ID) for this execution report
    sfixed64 trigger_group_id = 148; // WaitTrigger group Id
    string street_cl_ord_id = 151; // street side clOrdId (clOrdId or equivalent of the street side order) [SR/street gateway generated]
    string street_order_id = 154; // street side orderId (orderId or equivalent of the street side order) [from street side execReport]
    FaceSide face_side = 157; // facilitation side (if any)
    FaceShape face_shape = 160; // CrossCust = split broker / cust side, CrossFace = split broker / face side, CrossBoth = single broker cross
    SpdrOrderShape parent_shape = 163; // shape of originating parent order
    OptionKey sec_key = 166; // execution security key
    SpdrKeyType sec_type = 169; // execution security type [Stock, Future, Option]
    TickerKey ticker = 172; // base stock key (used for symbol risk aggregation)
    string accnt = 175; // SpiderRock trading accnt [broker pkey]
    string client_firm = 178; // SR client firm
    SpdrSource spdr_source = 181; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 184; // SpiderRock parent broker number [broker pkey]
    string routing_code = 187; // SpiderRock market routing code
    string engine_name = 190; // SpiderRock execution engine that handled the parent order
    string gateway_name = 193; // StreetGateway server than handled the child order (if any)
    ExecRole exec_role = 196; // SpiderRock relationship to this execution record
    string exec_broker_mPID = 199; // exec broker acronym (a FINRA assigned MPID or SR '$' broker tag)
    string exec_broker_accnt = 202; // account at executing broker (if any)
    string exec_broker_cl_firm = 205; // client/firm at executing broker (if any)
    string exec_broker_user_name = 208; // userName at execution broker (if any)
    FlipType clearing_flip_type = 211; // Clearing Flip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc)
    string clearing_flip_firm = 214; // Clearing Flip Firm (if any)
    string clearing_flip_accnt = 217; // Clearing Flip Account (if any)
    string clearing_firm = 220; // clearing firm
    string clearing_accnt = 223; // clearing firm account (if any)
    string orig_exec_iD = 226; // original execution ID string (child order)
    string last_exec_iD = 229; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    string remote_text = 232; // text comment from remote endpoint (if any)
    BuySell order_side = 235; // order side
    SpdrOrderStatus spdr_order_status = 238;
    SpdrCloseReason spdr_close_reason = 241;
    sfixed32 cum_fill_quantity = 244; // cumulative fills (this parent number only)
    double avg_fill_price = 247;
    sfixed32 cum_leg_fill_quantity = 250; // cumulative fills (spread only)
    double avg_leg_fill_price = 253;
    sfixed32 leaves_qty = 256;
    PriceType price_type = 259;
    SpdrOrderShape child_shape = 262;
    sfixed32 child_size = 265; // child order size
    double child_price = 268; // child order price
    google.protobuf.Timestamp child_dttm = 271; // child order generation date/time
    string child_exch = 274; // child order exchange
    string child_ex_dest = 277; // child order exchange destination code
    string child_exec_broker = 280; // executing broker that child order was routed to
    YesNo child_is_directed = 283; // child order isDirected flag
    YesNo child_iso_sweep = 286; // child order ISO sweep flag
    string child_order_handling = 289; // child order handling string from the algo that generated the child order responsible for this fill
    ChildHandler child_algo_handler = 292; // algo handler for this child order
    ChildCreateReason child_create_reason = 295;
    ChildCancelReason child_cancel_reason = 298;
    MakerTaker child_maker_taker = 301;
    double child_uBid = 304; // underlier market bid at @ child order send time
    double child_uAsk = 307; // underlier market ask at @ child order send time
    double child_bid = 310; // market bid at the @ child order send time
    double child_ask = 313; // market ask at the @ child order send time
    double child_mark = 316; // mid-market (SR surface price if option) @ child order send time
    float child_vol = 319; // child order volatility @ childLimitRefUPrc
    float child_prob = 322; // SR probability for the child order @ child order send time
    double child_limit_ref_uPrc = 325; // limit reference underlier price @ child order send time
    double child_limit_prc = 328; // parent order limit price @ child order send time
    float child_vol_atm = 331; // atm volatility @ child order send time
    PositionType child_pos_type = 334; // child order position type
    sfixed32 child_firm_opt_position = 337; // effective firm option position @ child order send time
    ShortSaleFlag child_sSale_flag = 340; // short sale flag
    sfixed32 child_firm_stk_position = 343; // effective firm stock position @ child order send time
    sfixed32 child_firm_open_orders = 346; // open sell orders counted in marking @ child order send time
    sfixed32 child_locate_quan = 349; // available locate quantity (if selling short) @ child order send time
    string child_locate_firm = 352; // firm granting the locate
    string child_locate_source = 355; // locate ID code (if any)
    MktStance child_mkt_stance = 358; // child order was expected to be marketable @ child send time
    YesNo child_cxl_attempted = 361; // cancel attempt was made on the child order prior to receiving this fill
    float child_cxl_fill_latency = 364; // cancel attempt -to- fill report latency (in ms)
    string child_method = 367; // execution method string
    string child_source = 370; // execution source string
    FirmType firm_type = 373; // child order firm type [Customer, ProCust, Firm, MM, etc]
    string pri_agg_group = 376; // primary aggregation group
    string sec_agg_group = 379; // secondary aggregation group
    google.protobuf.Timestamp fill_transact_dttm = 382; // transaction date/time as reported by exchange or down stream broker
    double fill_ts = 385; // fill report ts (seconds since startup; 100 nanosec resolution)
    google.protobuf.Timestamp fill_dttm = 388; // Date/time of fill arrival (SRDateTime)
    string fill_exch = 391; // ExDest code from child order execution report
    string fill_exec_id = 394; // street side execution Id
    string fill_exec_ref_id = 397; // street side execution ref Id (only used when busting an execution)
    sfixed64 fill_leg_ref_id = 400; // legRefId for multileg fills
    sfixed32 fill_leg_ratio = 403; // legRatio (if spread order)
    float fill_exch_fee = 406; // SpiderRock estimate of the exchange fee based on liquidity tags (best effort)
    string fill_market = 409; // usually from execReport.lastMkt as reported by child order venue
    double fill_price = 412; // fill price
    sfixed32 fill_quantity = 415; // fill quantity
    string fill_report_detail = 418; // extra detail (if any) from child execution
    double fill_bid = 421; // market bid @ fill arrival
    double fill_ask = 424; // market ask @ fill arrival
    double fill_mark = 427; // mid-market (or SR surface price if option) @ fill arrival
    double fill_uBid = 430; // underlier market bid @ fill arrival
    double fill_uAsk = 433; // underlier market bid @ fill arrival
    sfixed32 fill_uBid_sz = 436; // underlier bid size @ fill arrival
    sfixed32 fill_uAsk_sz = 439; // underlier ask size @ fill arrival
    float fill_vol_atm = 442; // atm volatility @ fill arrival
    double fill_mark1_m = 445; // mid-market (or SR surface price if option) @ fill arrival + 1m
    double fill_mark10_m = 448; // mid-market (or SR surface price if option) @ fill arrival + 10m
    double fill_bid1_m = 451; // market bid @ fill arrival + 1m
    double fill_ask1_m = 454; // market ask @ fill arrival + 1m
    double fill_bid10_m = 457; // market bid @ fill arrival + 10m
    double fill_ask10_m = 460; // market ask @ fill arrival + 10m
    double fill_uMark1_m = 463; // underlier mark @ fill arrival + 1m
    double fill_uMark10_m = 466; // underlier mark @ fill arrival + 10m
    float fill_vol_atm1_m = 469; // atm volatility (options only) + 1m
    float fill_vol_atm10_m = 472; // atm volatility (options only) + 10m
    FillMarkState fill_state1_m = 475;
    FillMarkState fill_state10_m = 478;
    float fill_vol = 481; // fill volatility @ fillLimitRefUPrc & fillLimitRefSDiv
    float fill_prob = 484; // T+10m probability for the fill @ fill arrival send time
    double fill_limit_ref_uPrc = 487; // limit reference underlier price @ fill arrival time
    double fill_limit_ref_sDiv = 490; // limit reference sdiv value @ fill arrival time
    double fill_limit_prc = 493; // parent order limit price @ fill arrival time
    float fill_ve = 496; // fill vega
    float fill_ga = 499; // fill gamma
    float fill_de = 502; // fill delta
    float fill_th = 505; // fill theta
    float fill_pr = 508; // fill premium over parity
    float fill_ve_ratio = 511; // fill ve / fill atm ve
    float fill_beta = 514; // SpiderRock estimate of beta to SPX
    float fill_risk_metric1 = 517; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric2 = 520; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric3 = 523; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric4 = 526; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric5 = 529; // user defined (from parent order) [used to manage order groups]
    float fill_s08_dn = 532; // underlier down 8% shock slide
    float fill_s06_up = 535; // underlier up 6% shock slide
    float fill_s15_dn = 538; // underlier down 15% shock slide
    float fill_s15_up = 541; // underlier up 15% shock slide
    float fill_brkr_rate = 544; // billing brokerage rate (tier 1)
    float fill_routing_rate = 547; // billing routing rate (tier 1)
    RiskCode risk_code = 550; // SpiderRock Risk Code (if any)
    BillingSecType billing_sec_type = 553; // SpiderRock billing security type
    BillingCategory billing_category = 556; // SpiderRock billing category
    string spdr_liquidity_tag = 559; // SpiderRock normalized liquidity tag
    string exch_liquidity_tag = 562; // liquidity tag as reported by downstream venue (if any)
    string fill_exch_detail = 565; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    OrderCapacity last_capacity = 568; // child order capacity
    string exch_firm_type = 571; // used to reflect field from a downstread execution back up to upstream fill report
    string ext_exec_broker = 574; // used to reflect field from a downstream destination back up to and upstream fill report
    RelationshipType relationship_type = 577; // type of SR <-> client relationship
    google.protobuf.Timestamp parent_dttm = 580; // parent order creation date/time
    sfixed32 parent_order_size = 583; // parent order size
    double parent_uBid = 586; // underlier market bid @ parent order arrival
    double parent_uAsk = 589; // underlier market ask @ parent order arrival
    double parent_bid = 592; // market bid @ parent order arrival
    double parent_ask = 595; // market ask @ parent order arrival
    double parent_mark = 598; // mid-market (or SR surface price) @ parent order arrival
    float parent_limit_vol = 601; // parent order limit volatilty (if any)
    double parent_limit_prc = 604; // parent order limit price @ parent order arrival
    double parent_limit_ref_uPrc = 607; // limit reference underlier price @ parent order arrival
    float parent_theo_vol = 610; // client supplied theoretical volatility (used for markup only) [copied from parent order]
    float parent_theo_prc = 613; // option price corresponding parentTheoVol
    PositionType parent_pos_type = 616; // parent order position type
    ShortSaleFlag parent_sSale_flag = 619; // short sale flag on parent order
    sfixed64 cross_notice_id = 622; // RFR / Auction crossID (if any)
    int32 num_make_exchanges = 625; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 628; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible
    YesNo can_overlap_cxl_repl = 631; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 634; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    YesNo exch_mask_enabled = 637; // exchMask != 0
    TimeInForce time_in_force = 640; // Parent order time in force
    ParentOrderHandling parent_order_handling = 643; // Primary/Take Algo Handler
    ParentBalanceHandling parent_balance_handling = 646; // Make Algo Handler
    SpdrLimitType order_limit_type = 649; // Primary Limit Type (Prc, Vol, Rel, Market, Smrt, etc)
    SpdrLimitClass order_limit_class = 652; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 655; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    OverrideCode override_code = 658; // SDiv/DDiv override rule (applies if LimitType = Vol)
    AlphaType alpha_type = 661; // Affects limit probabilities (applies if LimitClass = Probability)
    string parent_strategy = 664; // client strategy [usually client supplied]
    string user_name = 667; // user name associated with the parent order
    AutoHedge auto_hedge = 670; // auto-hedge algorithm (if any)
    ExpiryKey hedge_sec_key = 673; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 676; // auto-hedge sec type (if any)
    float hedge_beta_ratio = 679; // portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    HedgeScope hedge_scope = 682; // hedge group scope
    string user_data1 = 685; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 688; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    float years = 691; // years to expiration
    sfixed32 underliers_per_cn = 694; // option delivery underliers per contract
    UnderlierType underlier_type = 697; // type of underlier (affects $greek calculations)
    float tick_value = 700; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 703; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 706;
    float min_tick_size = 709; // minimum market price variation (dnTickSize if on a boundary)
    PriceFormat price_format = 712; // SpiderRock price display format code
    PriceFormat u_price_format = 715; // SpiderRock underlier price display format code
    double live_uPrc = 718; // SpiderRock internal use only
    double live_mark = 721; // SpiderRock internal use only
    sfixed64 src_timestamp = 724;
    sfixed64 sgw_timestamp = 727;
    sfixed64 eng_timestamp = 730;
    google.protobuf.Timestamp timestamp = 733; // timestamp of the underlying SpdrStreetExecution
}


/*
    Records inserted, updated, or replaced into the ParentOrderGateway table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.
    See the SpiderRock Execution Engine concept guide for more details.
*/    
message ParentOrderGateway {
    message PKey {
        
        OptionKey sec_key = 10; // SR SecKey
        SpdrKeyType sec_type = 13; // SR SecKeyType (Stock, Future, or Option)
        string accnt = 16; // SR Account (default = primary account associated with SRSE login)
        BuySell order_side = 19; // Parent Order Size
        sfixed64 grouping_code = 22; // Parent Grouping Code
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    SpdrActionType spdr_action_type = 103; // [Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]
    string alt_order_id = 106; // Alternate client order ID.  This order ID will be copied to all execution reports.
    string alt_auto_hedge_id = 109; // alternate order ID for child autohedge orders (if any)
    string alt_accnt = 112; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 115; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string accnt_route_code = 118; // accntRoute acronym
    string extern_ex_dest = 121; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 124; // external algo names/parameters (usually just an algo name)
    string strategy = 127; // Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.
    YesNo visible_in_sV = 130; // allow order to be visible in SV (do not use for high volume of orders)
    string security_desc = 133; // additional security description
    google.protobuf.Timestamp order_dttm = 136; // order entry time (from client;if any)
    sfixed32 order_size = 139; // parent order size (contracts) [-1 = no change;used when spdrActionType=Release]
    sfixed32 order_active_size = 142; // total activated size (total size released for execution) (-1 = all available size)
    sfixed32 cur_cum_fill_quantity = 145; // set order size = orderSize - Max(0, curCumFillQty - ee.cumFillQty) (used to ensure integrity of submitted cxl/replace orders)
    YesNo add_cum_fill_quantity = 148; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    fixed32 exch_mask = 151; // eligible exchanges (0 = all)
    sfixed32 max_exposure_size = 154; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 157; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 160; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; MktSize=expose only 'typical' market size; FullSize=expose entire order size where possible
    YesNo randomize_size = 163; // randomize public order size
    YesNo can_overlap_cxl_repl = 166; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 169; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 twap_slice_cnt = 172; // [ProgressSliceCnt] number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 175; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    AuctionResponder auction_responder = 178; // if set, parent order can be an auction responder
    float max_make_exch_fee = 181; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 184; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    IncExchFee inc_take_exch_fee = 187; // include exchange fee in probability and surface based take limit calculations
    IncExchFee inc_make_exch_fee = 190; // include exchange fee in probability and surface based make limit calculations
    MakeExchRule make_exch_rule = 193; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    int32 min_mkt_on_close_pct = 196;
    TriggerType trigger_type = 199; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 202; // stop/trigger price for parent order to go active
    UPrcCxl cxl_uPrc_range = 205; // cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]
    float min_uBid = 208; // [optional]
    float max_uAsk = 211; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 214; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    float min_option_px = 217; // [optional] option price floor for tied to stock orders
    sfixed32 max_child_orders = 220; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    SpdrStageType spdr_stage_type = 223; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    TimeInForce time_in_force = 226;
    google.protobuf.Timestamp start_dttm = 229; // [optional] (parent order start time)
    sfixed32 order_duration = 232; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 235; // [optional] (default: 2000-01-01)
    StartType start_type = 238; // [Immediate, WaitTrigger]
    sfixed64 trigger_group_id = 241; // WaitTrigger group Id; all child orders parent orders with the same triggerGroupId will optimized and released together when the group is triggered; used to effect cross exchange and cross product market ISO and price level sweeps
    sfixed64 trigger_timestamp = 244; // WaitTrigger trigger timestamp (nanoseconds since epoch)
    sfixed32 progress_timeout = 247; // cancel if [optional] (number of milliseconds)
    ParentOrderHandling parent_order_handling = 250;
    ParentBalanceHandling parent_balance_handling = 253;
    SpdrLimitType order_limit_type = 256; // Various (Prc, PrcDe, Vol, Rel, Market); establishes the primary LimitPrice for a parent order
    SpdrLimitClass take_limit_class = 259; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 262; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 265; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 268; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 271; // default=underlier.mid
    float order_ref_delta = 274; // default=option.delta
    float order_ref_gamma = 277; // default=option.gamma
    float order_vol_limit = 280; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 283; // zero = ignore;> zero = override
    float sdiv_override = 286; // Default: 0.
    string ddiv_override = 289; // Discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 292; // override default SR dividend and rate details (only used if LimitType = Vol)
    double order_prc_offset = 295; // default=0
    float order_ref_event_mult = 298;
    google.protobuf.Timestamp order_ref_event_dttm = 301;
    AlphaType take_alpha_type = 304; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 307; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 310; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 313; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 316; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 319; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    double take_surf_prc_offset = 322; // default=0
    float take_surf_vol_offset = 325; // default=0
    float take_surf_width_offset = 328; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 331; // default=0
    float make_surf_vol_offset = 334; // default=0
    float make_surf_width_offset = 337; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    AutoHedge auto_hedge = 340;
    HedgeInst hedge_instrument = 343; // Default=underlier (EQT or FUT) [Index Options use ETF]; FrontMonth=underlier (EQT) or front month (FUT) [Index Options use FM Fut]; Stock=hedgeSecKey; Future=hedgeSecKey
    ExpiryKey hedge_sec_key = 346; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 349; // portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    HedgeScope hedge_scope = 352;
    TimeInForce hedge_tIF = 355; // time in force for the autohedge order (can be Day or ExtDay)
    PositionType position_type = 358;
    ShortSaleFlag ssale_flag = 361; // Used to determine stock auto-hedge flags.
    sfixed32 locate_quan = 364; // available locate quantity (if selling short) [will be considered the primary locate for any resulting child orders]
    string locate_firm = 367; // firm granting the locate (also locate firm used on street FIX orders)
    FirmType firm_type = 370; // Used to override firmType in account config. Default: None (use SpiderRock account configuration).
    float theo_vol = 373; // client supplied theoretical volatility (used for markup only)
    RMetricSource ref_rMetric1_src = 376;
    RMetricSource ref_rMetric2_src = 379;
    RMetricSource ref_rMetric3_src = 382;
    RMetricSource ref_rMetric4_src = 385;
    RMetricSource ref_rMetric5_src = 388;
    RMetricSource ref_rMetric6_src = 391;
    RMetricSource ref_rMetric7_src = 394;
    float order_ref_rMetric1 = 397; // user supplied RMetric1 value (used in RiskGroupID risk controls)
    float order_ref_rMetric2 = 400; // user supplied RMetric2 value (used in RiskGroupID risk controls)
    float order_ref_rMetric3 = 403; // user supplied RMetric3 value (used in RiskGroupID risk controls)
    float order_ref_rMetric4 = 406; // user supplied RMetric4 value (used in RiskGroupID risk controls)
    float order_ref_rMetric5 = 409; // user supplied RMetric5 value (used in RiskGroupID risk controls)
    float order_ref_rMetric6 = 412; // user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]
    float order_ref_rMetric7 = 415; // user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    sfixed64 risk_group_id = 418; // All risk limits below are relative to this riskGroupId.  Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    float max_acc_day_dDelta_ln = 421; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 424; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 427; // accnt day $delta offset (target position)
    float max_acc_day_wt_vega_ln = 430; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 433; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 436; // accnt day (time weighted) vega offset (target position)
    float max_exp_day_wt_vega_ln = 439; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 442; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 445; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 448; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 451; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 454; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 457; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 460; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 463; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 466; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 469; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 472; // accnt+symbol day $delta offset (target position)
    float max_exp_day_rMetric6_ln = 475; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 478; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float exp_day_rMetric6_offset = 481; // accnt+expiration day rMetric6 offset (target position)
    float max_sym_day_rMetric7_ln = 484; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 487; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 490; // accnt+symbol day rMetric7 offset (target position)
    float max_grp_day_dDelta_ln = 493; // Default: -1 (not set).
    float max_grp_day_dDelta_sh = 496; // Default: -1 (not set).
    float max_grp_day_vega_ln = 499; // Default: -1 (not set).
    float max_grp_day_vega_sh = 502; // Default: -1 (not set).
    float max_grp_day_vega_abs = 505; // Default: -1 (not set).
    float grp_day_vega_ratio = 508; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 511; // Default: -1 (not set).
    float max_grp_day_premium_sh = 514; // Default: -1 (not set).
    float max_grp_day_premium_abs = 517; // Default: -1 (not set).
    float grp_day_premium_ratio = 520; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=2.0 means that neutral is bot premium = 2x sld premium)
    float max_grp_day_rMetric1_ln = 523; // Default: -1 (not set).
    float max_grp_day_rMetric1_sh = 526; // Default: -1 (not set).
    float max_grp_day_rMetric1_abs = 529; // Default: -1 (not set).
    float grp_day_rMetric1_ratio = 532; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 535; // Default: -1 (not set).
    float max_grp_day_rMetric2_sh = 538; // Default: -1 (not set).
    float max_grp_day_rMetric3_ln = 541; // Default: -1 (not set).
    float max_grp_day_rMetric3_sh = 544; // Default: -1 (not set).
    float max_grp_day_rMetric4_ln = 547; // Default: -1 (not set).
    float max_grp_day_rMetric4_sh = 550; // Default: -1 (not set).
    float max_grp_day_rMetric5_ln = 553; // Default: -1 (not set).
    float max_grp_day_rMetric5_sh = 556; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_ln = 559; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_sh = 562; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_abs = 565; // Default: -1 (not set).
    float sym_ema_cxl_dDelta_ln = 568; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 571; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 574; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 577; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    string trader_name = 580; // Name of the trader associated with the order
    string user_data1 = 583; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 586; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 589; // client supplied data field; passes through to down stream child orders
    int32 checksum = 592; // Must be set to 13.  This helps detect some column/value misalignments.
}


/*
    Records inserted, updated, or replaced into the ParentOrderGatewayExt table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.
    See the SpiderRock Execution Engine concept guide for more details.
*/    
message ParentOrderGatewayExt {
    message PKey {
        
        OptionKey sec_key = 10; // SR SecKey
        SpdrKeyType sec_type = 13; // SR SecKeyType (Stock, Future, or Option)
        string accnt = 16; // SR Account (default = primary account associated with SRSE login)
        BuySell order_side = 19; // Parent Order Size
        sfixed64 grouping_code = 22; // Parent Grouping Code
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    SpdrActionType spdr_action_type = 103; // [Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]
    string alt_order_id = 106; // Alternate client order ID.  This order ID will be copied to all execution reports.
    string alt_auto_hedge_id = 109; // alternate order ID for child autohedge orders (if any)
    string alt_accnt = 112; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 115; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string accnt_route_code = 118; // accntRoute acronym
    string extern_ex_dest = 121; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 124; // external algo names/parameters (usually just an algo name)
    string strategy = 127; // Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.
    YesNo visible_in_sV = 130; // allow order to be visible in SV (do not use for high volume of orders)
    string security_desc = 133; // additional security description
    google.protobuf.Timestamp order_dttm = 136; // order entry time (from client;if any)
    sfixed32 order_size = 139; // parent order size (contracts) [-1 = no change;used when spdrActionType=Release]
    sfixed32 order_active_size = 142; // total activated size (total size released for execution) (-1 = all available size)
    sfixed32 cur_cum_fill_quantity = 145; // set order size = orderSize - Max(0, curCumFillQty - ee.cumFillQty) (used to ensure integrity of submitted cxl/replace orders)
    YesNo add_cum_fill_quantity = 148; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    fixed32 exch_mask = 151; // eligible exchanges (0 = all)
    sfixed32 max_exposure_size = 154; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 157; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 160; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; MktSize=expose only 'typical' market size; FullSize=expose entire order size where possible
    YesNo randomize_size = 163; // randomize public order size
    YesNo can_overlap_cxl_repl = 166; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 169; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 twap_slice_cnt = 172; // [ProgressSliceCnt] number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 175; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    AuctionResponder auction_responder = 178; // if set, parent order can be an auction responder
    float max_make_exch_fee = 181; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 184; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    IncExchFee inc_take_exch_fee = 187; // include exchange fee in probability and surface based take limit calculations
    IncExchFee inc_make_exch_fee = 190; // include exchange fee in probability and surface based make limit calculations
    MakeExchRule make_exch_rule = 193; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    int32 min_mkt_on_close_pct = 196;
    TriggerType trigger_type = 199; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 202; // stop/trigger price for parent order to go active
    UPrcCxl cxl_uPrc_range = 205; // cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]
    float min_uBid = 208; // [optional]
    float max_uAsk = 211; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 214; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    float min_option_px = 217; // [optional] option price floor for tied to stock orders
    sfixed32 max_child_orders = 220; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    SpdrStageType spdr_stage_type = 223; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    TimeInForce time_in_force = 226;
    google.protobuf.Timestamp start_dttm = 229; // [optional] (parent order start time)
    sfixed32 order_duration = 232; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 235; // [optional] (default: 2000-01-01)
    StartType start_type = 238; // [Immediate, WaitTrigger]
    sfixed64 trigger_group_id = 241; // WaitTrigger group Id; all child orders parent orders with the same triggerGroupId will optimized and released together when the group is triggered; used to effect cross exchange and cross product market ISO and price level sweeps
    sfixed64 trigger_timestamp = 244; // WaitTrigger trigger timestamp (nanoseconds since epoch)
    sfixed32 progress_timeout = 247; // cancel if [optional] (number of milliseconds)
    ParentOrderHandling parent_order_handling = 250;
    ParentBalanceHandling parent_balance_handling = 253;
    SpdrLimitType order_limit_type = 256; // Various (Prc, PrcDe, Vol, Rel, Market); establishes the primary LimitPrice for a parent order
    SpdrLimitClass take_limit_class = 259; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 262; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 265; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 268; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 271; // default=underlier.mid
    float order_ref_delta = 274; // default=option.delta
    float order_ref_gamma = 277; // default=option.gamma
    float order_vol_limit = 280; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 283; // zero = ignore;> zero = override
    float sdiv_override = 286; // Default: 0.
    string ddiv_override = 289; // Discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 292; // override default SR dividend and rate details (only used if LimitType = Vol)
    double order_prc_offset = 295; // default=0
    float order_ref_event_mult = 298;
    google.protobuf.Timestamp order_ref_event_dttm = 301;
    AlphaType take_alpha_type = 304; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 307; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 310; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 313; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 316; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 319; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    double take_surf_prc_offset = 322; // default=0
    float take_surf_vol_offset = 325; // default=0
    float take_surf_width_offset = 328; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 331; // default=0
    float make_surf_vol_offset = 334; // default=0
    float make_surf_width_offset = 337; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    AutoHedge auto_hedge = 340;
    HedgeInst hedge_instrument = 343; // Default=underlier (EQT or FUT) [Index Options use ETF]; FrontMonth=underlier (EQT) or front month (FUT) [Index Options use FM Fut]; Stock=hedgeSecKey; Future=hedgeSecKey
    ExpiryKey hedge_sec_key = 346; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 349; // portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    HedgeScope hedge_scope = 352;
    TimeInForce hedge_tIF = 355; // time in force for the autohedge order (can be Day or ExtDay)
    PositionType position_type = 358;
    ShortSaleFlag ssale_flag = 361; // Used to determine stock auto-hedge flags.
    sfixed32 locate_quan = 364; // available locate quantity (if selling short) [will be considered the primary locate for any resulting child orders]
    string locate_firm = 367; // firm granting the locate (also locate firm used on street FIX orders)
    FirmType firm_type = 370; // Used to override firmType in account config. Default: None (use SpiderRock account configuration).
    float theo_vol = 373; // client supplied theoretical volatility (used for markup only)
    RMetricSource ref_rMetric1_src = 376;
    RMetricSource ref_rMetric2_src = 379;
    RMetricSource ref_rMetric3_src = 382;
    RMetricSource ref_rMetric4_src = 385;
    RMetricSource ref_rMetric5_src = 388;
    RMetricSource ref_rMetric6_src = 391;
    RMetricSource ref_rMetric7_src = 394;
    float order_ref_rMetric1 = 397; // user supplied RMetric1 value (used in RiskGroupID risk controls)
    float order_ref_rMetric2 = 400; // user supplied RMetric2 value (used in RiskGroupID risk controls)
    float order_ref_rMetric3 = 403; // user supplied RMetric3 value (used in RiskGroupID risk controls)
    float order_ref_rMetric4 = 406; // user supplied RMetric4 value (used in RiskGroupID risk controls)
    float order_ref_rMetric5 = 409; // user supplied RMetric5 value (used in RiskGroupID risk controls)
    float order_ref_rMetric6 = 412; // user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]
    float order_ref_rMetric7 = 415; // user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    sfixed64 risk_group_id = 418; // All risk limits below are relative to this riskGroupId.  Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    float max_acc_day_dDelta_ln = 421; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 424; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 427; // accnt day $delta offset (target position)
    float max_acc_day_wt_vega_ln = 430; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 433; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 436; // accnt day (time weighted) vega offset (target position)
    float max_exp_day_wt_vega_ln = 439; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 442; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 445; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 448; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 451; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 454; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 457; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 460; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 463; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 466; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 469; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 472; // accnt+symbol day $delta offset (target position)
    float max_exp_day_rMetric6_ln = 475; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 478; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float exp_day_rMetric6_offset = 481; // accnt+expiration day rMetric6 offset (target position)
    float max_sym_day_rMetric7_ln = 484; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 487; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 490; // accnt+symbol day rMetric7 offset (target position)
    float max_grp_day_dDelta_ln = 493; // Default: -1 (not set).
    float max_grp_day_dDelta_sh = 496; // Default: -1 (not set).
    float max_grp_day_vega_ln = 499; // Default: -1 (not set).
    float max_grp_day_vega_sh = 502; // Default: -1 (not set).
    float max_grp_day_vega_abs = 505; // Default: -1 (not set).
    float grp_day_vega_ratio = 508; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 511; // Default: -1 (not set).
    float max_grp_day_premium_sh = 514; // Default: -1 (not set).
    float max_grp_day_premium_abs = 517; // Default: -1 (not set).
    float grp_day_premium_ratio = 520; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=2.0 means that neutral is bot premium = 2x sld premium)
    float max_grp_day_rMetric1_ln = 523; // Default: -1 (not set).
    float max_grp_day_rMetric1_sh = 526; // Default: -1 (not set).
    float max_grp_day_rMetric1_abs = 529; // Default: -1 (not set).
    float grp_day_rMetric1_ratio = 532; // Default: +1 (not set). note: target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 535; // Default: -1 (not set).
    float max_grp_day_rMetric2_sh = 538; // Default: -1 (not set).
    float max_grp_day_rMetric3_ln = 541; // Default: -1 (not set).
    float max_grp_day_rMetric3_sh = 544; // Default: -1 (not set).
    float max_grp_day_rMetric4_ln = 547; // Default: -1 (not set).
    float max_grp_day_rMetric4_sh = 550; // Default: -1 (not set).
    float max_grp_day_rMetric5_ln = 553; // Default: -1 (not set).
    float max_grp_day_rMetric5_sh = 556; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_ln = 559; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_sh = 562; // Default: -1 (not set).
    sfixed32 max_grp_day_contracts_abs = 565; // Default: -1 (not set).
    float sym_ema_cxl_dDelta_ln = 568; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 571; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 574; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 577; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    string trader_name = 580; // Name of the trader associated with the order
    string user_data1 = 583; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 586; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 589; // client supplied data field; passes through to down stream child orders
    sfixed64 face_id = 592;
    string face_alt_order_id = 595; // alternate order ID (usually clOrdId from client)
    string face_accnt = 598;
    string face_client_firm = 601;
    string face_alt_accnt = 604; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    FirmType face_firm_type = 607;
    OrderCapacity face_order_capacity = 610;
    ShortSaleFlag face_sSsale_flag = 613; // primary short sale flag (single leg orders)
    PositionType face_position_type = 616; // primary position type (single leg orders)
    double face_best_price = 619;
    YesNo face_has_best_price = 622;
    string face_no_cross_group = 625;
    string face_exch_trader_id = 628;
    string face_large_trader_id = 631;
    string face_trading_location = 634;
    FlipType face_clearing_flip_type = 637; // clearingFlip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc) [used to override the SR account config delivery details]
    string face_clearing_flip_firm = 640; // DeliverTo firm (if any)
    string face_clearing_flip_accnt = 643; // DeliverTo accnt (if any)
    TickerKey mleg_ticker = 646; // stock ticker
    BuySell mleg_stock_side = 649; // [Buy | Sell | None]
    sfixed32 mleg_stock_shares = 652; // number of shares included (zero if none)
    sfixed64 mleg_stock_leg_id = 655; // SR stock leg ID
    string mleg_alt_stk_leg_id = 658; // client stock leg ID (usually from a FIX order)
    ShortSaleFlag mleg_sSale_flag = 661; // stock short sale flag
    ShortSaleFlag mleg_sSale_flag_face = 664; // face side short sale flag (if shape=MLegCross)
    float mleg_ref_uPrc = 667; // reference underlier price (PrcDe orders)
    int32 mleg_num_legs = 670; // number of valid legs below
    OptionKey mleg_sec_key1 = 673; // leg #1
    SpdrKeyType mleg_sec_type1 = 676;
    uint32 mleg_mult1 = 679;
    BuySell mleg_side1 = 682;
    sfixed64 mleg_leg_id1 = 685; // SR leg Id
    string mleg_alt_leg_id1 = 688; // client leg Id (usually from a FIX order)
    PositionType mleg_pos_type1 = 691;
    PositionType mleg_pos_type_face1 = 694;
    ShortSaleFlag mleg_ssale_flag1 = 697;
    ShortSaleFlag mleg_ssale_flag_face1 = 700;
    float mleg_vega1 = 703;
    double mleg_ref_uPrc1 = 706; // reference underlier price (PrcDe orders)
    float mleg_ref_delta1 = 709; // reference delta (for PrcDe order handling)
    int32 mleg_ref_earn_cnt1 = 712; // reference # of earnings moves before expiration
    OptionKey mleg_sec_key2 = 715; // leg #2
    SpdrKeyType mleg_sec_type2 = 718;
    uint32 mleg_mult2 = 721;
    BuySell mleg_side2 = 724;
    sfixed64 mleg_leg_id2 = 727; // SR leg Id
    string mleg_alt_leg_id2 = 730; // client leg Id (usually from a FIX order)
    PositionType mleg_pos_type2 = 733;
    PositionType mleg_pos_type_face2 = 736;
    ShortSaleFlag mleg_ssale_flag2 = 739;
    ShortSaleFlag mleg_ssale_flag_face2 = 742;
    float mleg_vega2 = 745;
    double mleg_ref_uPrc2 = 748; // reference underlier price (PrcDe orders)
    float mleg_ref_delta2 = 751; // reference delta (for PrcDe order handling)
    int32 mleg_ref_earn_cnt2 = 754; // reference # of earnings moves before expiration
    OptionKey mleg_sec_key3 = 757; // leg #3
    SpdrKeyType mleg_sec_type3 = 760;
    uint32 mleg_mult3 = 763;
    BuySell mleg_side3 = 766;
    sfixed64 mleg_leg_id3 = 769; // SR leg Id
    string mleg_alt_leg_id3 = 772; // client leg Id (usually from a FIX order)
    PositionType mleg_pos_type3 = 775;
    PositionType mleg_pos_type_face3 = 778;
    ShortSaleFlag mleg_ssale_flag3 = 781;
    ShortSaleFlag mleg_ssale_flag_face3 = 784;
    float mleg_vega3 = 787;
    double mleg_ref_uPrc3 = 790; // reference underlier price (PrcDe orders)
    float mleg_ref_delta3 = 793; // reference delta (for PrcDe order handling)
    int32 mleg_ref_earn_cnt3 = 796; // reference # of earnings moves before expiration
    OptionKey mleg_sec_key4 = 799; // leg #4
    SpdrKeyType mleg_sec_type4 = 802;
    uint32 mleg_mult4 = 805;
    BuySell mleg_side4 = 808;
    sfixed64 mleg_leg_id4 = 811; // SR leg Id
    string mleg_alt_leg_id4 = 814; // client leg Id (usually from a FIX order)
    PositionType mleg_pos_type4 = 817;
    PositionType mleg_pos_type_face4 = 820;
    ShortSaleFlag mleg_ssale_flag4 = 823;
    ShortSaleFlag mleg_ssale_flag_face4 = 826;
    float mleg_vega4 = 829;
    double mleg_ref_uPrc4 = 832; // reference underlier price (PrcDe orders)
    float mleg_ref_delta4 = 835; // reference delta (for PrcDe order handling)
    int32 mleg_ref_earn_cnt4 = 838; // reference # of earnings moves before expiration
    OptionKey mleg_sec_key5 = 841; // leg #5
    SpdrKeyType mleg_sec_type5 = 844;
    uint32 mleg_mult5 = 847;
    BuySell mleg_side5 = 850;
    sfixed64 mleg_leg_id5 = 853; // SR leg Id
    string mleg_alt_leg_id5 = 856; // client leg Id (usually from a FIX order)
    PositionType mleg_pos_type5 = 859;
    PositionType mleg_pos_type_face5 = 862;
    ShortSaleFlag mleg_ssale_flag5 = 865;
    ShortSaleFlag mleg_ssale_flag_face5 = 868;
    float mleg_vega5 = 871;
    double mleg_ref_uPrc5 = 874; // reference underlier price (PrcDe orders)
    float mleg_ref_delta5 = 877; // reference delta (for PrcDe order handling)
    int32 mleg_ref_earn_cnt5 = 880; // reference # of earnings moves before expiration
    OptionKey mleg_sec_key6 = 883; // leg #6
    SpdrKeyType mleg_sec_type6 = 886;
    uint32 mleg_mult6 = 889;
    BuySell mleg_side6 = 892;
    sfixed64 mleg_leg_id6 = 895; // SR leg Id
    string mleg_alt_leg_id6 = 898; // client leg Id (usually from a FIX order)
    PositionType mleg_pos_type6 = 901;
    PositionType mleg_pos_type_face6 = 904;
    ShortSaleFlag mleg_ssale_flag6 = 907;
    ShortSaleFlag mleg_ssale_flag_face6 = 910;
    float mleg_vega6 = 913;
    double mleg_ref_uPrc6 = 916; // reference underlier price (PrcDe orders)
    float mleg_ref_delta6 = 919; // reference delta (for PrcDe order handling)
    int32 mleg_ref_earn_cnt6 = 922; // reference # of earnings moves before expiration
    int32 checksum = 925; // Must be set to 13.  This helps detect some column/value misalignments.
}


    
message PingPong {
    message PKey {
        
        sfixed64 seq_no = 10;
        uint32 initiator_iD = 13;
        uint32 target_iD = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string payload = 100;
    sfixed64 sent_timestamp = 103;
}


    
message ProblemReport {
    message PKey {
        
        sfixed32 process_id = 10;
        google.protobuf.Timestamp process_start = 13;
        string machine_name = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 svn_revision = 100;
    string app_name = 103;
    string process_name = 106;
    string user_name = 109;
    ProblemReportLevel level = 112;
    string category = 115;
    string details = 118;
    string call_stack = 121;
}


    
message ProcMonComposite {
    message PKey {
        
        uint32 app_id = 10; // zero if not scheduled
        SysEnvironment sys_environment = 13; // sys environment [Stable, Current, etc]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_name = 100; // process instance name (should be unique)
    string machine_name = 103;
    SysRealm orig_sys_realm = 106; // name of the machine which is hosting process
    RunStatus orig_run_status = 109;
    ScheduledTaskScheduler scheduler = 112;
    ScheduledTaskRunDays days = 115;
    Lifespan lifespan = 118;
    string sched_server = 121;
    string sched_name = 124;
    string sched_command_line = 127;
    sfixed32 sched_process_id = 130;
    ScheduledTaskStatus sched_status = 133;
    string sched_details = 136;
    google.protobuf.Timestamp sched_timestamp = 139;
    google.protobuf.Timestamp proc_start = 142;
    string last_signal = 145; // string indicating the signal it got , for example READY, SHUTDOWN
    float cpu_usage = 148; // cpu usage (number of cores utilized)
    float memory_usage = 151; // CLR memory (GB)
    ResourceLevel server_cPU = 154;
    ResourceLevel server_memory = 157;
    float avg_mMRDelay = 160; // avg (inbound) DBL MMR ring delay (ms)
    float max_mMRDelay = 163; // max (inbound) DBL MMR ring delay (ms)
    sfixed32 packets_per_sec = 166; // MMR/MBUS packet rcvd rate (multiple msgs per packet)
    sfixed32 num_msg_drops = 169; // number of MBUS message drops
    float msg_recv_rate = 172; // total (inbound) messages per second
    float msg_send_rate = 175; // total (outbound) messages per second
    PulseError pulse_error = 178;
    string proc_detail = 181; // additional detail as reported by the process
    sfixed32 num_app_errors = 184;
    string last_app_error = 187;
    google.protobuf.Timestamp last_app_dttm = 190;
    sfixed32 num_fix_errors = 193;
    string last_fix_error = 196;
    google.protobuf.Timestamp last_fix_dttm = 199;
    sfixed32 num_msg_errors = 202;
    string last_msg_error = 205;
    google.protobuf.Timestamp last_msg_dttm = 208;
    sfixed32 num_sys_errors = 211;
    string last_sys_error = 214;
    google.protobuf.Timestamp last_sys_dttm = 217;
    google.protobuf.Timestamp timestamp = 220;
}


    
message ProcMonCompositeAck {
    message PKey {
        
        uint32 app_id = 10; // zero if not scheduled
        SysEnvironment sys_environment = 13; // sys environment [Stable, Current, etc]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_fix_error_dttm = 100;
    google.protobuf.Timestamp last_app_error_dttm = 103;
    google.protobuf.Timestamp last_net_error_dttm = 106;
    google.protobuf.Timestamp last_sys_error_dttm = 109;
    string ack_user_name = 112;
    google.protobuf.Timestamp timestamp = 115;
}


    
message ProcMonCompositeAggregation {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_records = 100;
    float cpu_usage = 103; // cpu usage (number of cores utilized)
    float memory_usage = 106; // virtual memory (GB)
    ResourceLevel server_cPU = 109;
    ResourceLevel server_memory = 112;
    float max_mMRDelay = 115; // max (inbound) DBL MMR ring delay (ms)
    sfixed32 num_msg_drops = 118;
    sfixed32 num_pulse_errors = 121;
    sfixed32 num_errors = 124;
    string last_error1 = 127;
    string last_error2 = 130;
    string last_error3 = 133;
    google.protobuf.Timestamp last_error_dttm = 136;
}


    
message ProcMonCompositeV2 {
    message PKey {
        
        string process_key = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    RunStatus orig_run_status = 100; // run status [Prod,Beta]
    SysRealm orig_sys_realm = 103; // sysRealm [NMS, CME, etc.]
    SysEnvironment orig_sys_environment = 106; // sys environment [Stable, Current, etc]
    uint32 app_id = 109; // zero if not scheduled
    string server_name = 112; // process instance name
    string machine_name = 115;
    ScheduledTaskScheduler scheduler = 118;
    ScheduledTaskRunDays days = 121;
    Lifespan lifespan = 124;
    string sched_server = 127;
    string sched_name = 130;
    string sched_command_line = 133;
    sfixed32 sched_process_id = 136;
    ScheduledTaskStatus sched_status = 139;
    string sched_details = 142;
    google.protobuf.Timestamp sched_timestamp = 145;
    google.protobuf.Timestamp proc_start = 148;
    string last_signal = 151; // string indicating the signal it got , for example READY, SHUTDOWN
    float cpu_usage = 154; // cpu usage (number of cores utilized)
    float memory_usage = 157; // CLR memory (GB)
    ResourceLevel server_cPU = 160;
    ResourceLevel server_memory = 163;
    float avg_mMRDelay = 166; // avg (inbound) DBL MMR ring delay (ms)
    float max_mMRDelay = 169; // max (inbound) DBL MMR ring delay (ms)
    sfixed32 packets_per_sec = 172; // MMR/MBUS packet rcvd rate (multiple msgs per packet)
    sfixed32 num_msg_drops = 175; // number of MBUS message drops
    float msg_recv_rate = 178; // total (inbound) messages per second
    float msg_send_rate = 181; // total (outbound) messages per second
    PulseError pulse_error = 184;
    string proc_detail = 187; // additional detail as reported by the process
    sfixed32 num_app_errors = 190;
    string last_app_error = 193;
    google.protobuf.Timestamp last_app_dttm = 196;
    sfixed32 num_fix_errors = 199;
    string last_fix_error = 202;
    google.protobuf.Timestamp last_fix_dttm = 205;
    sfixed32 num_msg_errors = 208;
    string last_msg_error = 211;
    google.protobuf.Timestamp last_msg_dttm = 214;
    sfixed32 num_sys_errors = 217;
    string last_sys_error = 220;
    google.protobuf.Timestamp last_sys_dttm = 223;
    google.protobuf.Timestamp timestamp = 226;
}


    
message ProcessStatus {
    message PKey {
        
        uint32 app_id = 10;
        string server_name = 13; // process instance name (should be unique)
        string machine_name = 16; // name of the machine which is hosting process
        SysEnvironment sys_environment = 19; // sys environment [Stable, Current, etc]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp process_start = 100;
    string last_signal = 103; // string indicating the signal it got , for example READY, SHUTDOWN
    float cpu_usage = 106; // cpu usage (number of cores utilized)
    float memory_usage = 109; // CLR memory (GB)
    ResourceLevel server_cPU = 112;
    ResourceLevel server_memory = 115;
    float avg_mMRDelay = 118; // avg (inbound) DBL MMR ring delay (ms)
    float max_mMRDelay = 121; // max (inbound) DBL MMR ring delay (ms)
    sfixed32 packets_per_sec = 124; // MMR/MBUS packet rcvd rate (multiple msgs per packet)
    sfixed32 num_msg_drops = 127; // number of MBUS message drops
    float msg_recv_rate = 130; // total (inbound) messages per second
    float msg_send_rate = 133; // total (outbound) messages per second
    PulseError pulse_error = 136;
    string proc_detail = 139;
    sfixed32 num_slow_handlers = 142; // total number of slow handlers
    sfixed32 num_app_errors = 145;
    string last_app_error = 148;
    google.protobuf.Timestamp last_app_dttm = 151;
    sfixed32 num_fix_errors = 154;
    string last_fix_error = 157;
    google.protobuf.Timestamp last_fix_dttm = 160;
    sfixed32 num_msg_errors = 163;
    string last_msg_error = 166;
    google.protobuf.Timestamp last_msg_dttm = 169;
    sfixed32 num_sys_errors = 172;
    string last_sys_error = 175;
    google.protobuf.Timestamp last_sys_dttm = 178;
    google.protobuf.Timestamp timestamp = 181;
}


    
message ProcessStatusRequest {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100;
    GetAction action = 103;
}


/*
    SpiderRock normalized exchange product definitions.  Includes future, option, and spread definitions from a number of exchanges.  TickerDefinitions, RootDefinitions and CCodeDefinitions are consistent with these records.
*/    
message ProductDefinitionV2 {
    message PKey {
        
        OptionKey sec_key = 10; // SR Security Key [can be partially filled in (look at secType)]
        SpdrKeyType sec_type = 13; // Security Type [Stock, Future, Option]
    }

    message Legs {
        
        string leg_iD = 223; // leg SecurityId (exch assigned)
        OptionKey sec_key = 226;
        SpdrKeyType sec_type = 229;
        BuySell side = 232;
        uint32 ratio = 235;
        float ref_delta = 238;
        double ref_prc = 241;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string security_iD = 100; // unique exchange id (exch assigned)
    ProductClass product_class = 103;
    sfixed64 underlier_iD = 106; // underlier product id (option only) [securityID of undKey/undType product]
    ExpiryKey und_key = 109; // SR Underlier Security Key [can be partially filled in (look at undType)] (option only)
    SpdrKeyType und_type = 112; // Underlier Security Type [Stock, Future] (option only)
    string product_group = 115; // Underlying product code.  I.E. All GE (Eurodollar) spreads, options, futures will be in the same productGroup - This is the Asset field from the SecurityDefinition message
    string security_group = 118; // Exchange specific code for a group of related securities that are all affected by market events.  I.E. All E-mini weekly options (EW) - This is SecurityGroup field from the SecurityDefinition messages
    sfixed32 market_segment_iD = 121; // Exchange specific market segment identifier
    string security_desc = 124; // full exchange symbol
    string exchange = 127; // listing exchange
    ProductType product_type = 130;
    ProductTerm product_term = 133;
    ProductIndexType product_index_type = 136;
    float product_rate = 139;
    float contract_size = 142;
    ContractUnit contract_unit = 145;
    PriceFormat price_format = 148;
    double min_tick_size = 151;
    double display_factor = 154;
    double strike_scale = 157; // manual strike price adjustment multiplier (used for some CME products if set, otherwise displayFactor is used) (okey_xx = strikePrice * manualStrikeScale)
    int32 min_lot_size = 160; // minimum lot size
    int32 book_depth = 163; // levels in the Globex quote book
    int32 implied_book_depth = 166; // levels in the globex implied quote book (0 if no implied depth)
    int32 imp_market_ind = 169; // implied market type (0 = no implied, 1 = implied in, 2 = implied out, 3 = implied in & out)
    float min_price_increment_amount = 172; // (depricate) minimum price amount (points per handle)
    float par_value = 175; // per contract par value
    float cont_multiplier = 178; // contract deliverable multipler
    double cab_price = 181; // (depricate) cabinet price (minimum closing price for OOM options)
    Currency trade_curr = 184;
    Currency settle_curr = 187;
    Currency strike_curr = 190;
    google.protobuf.Timestamp expiration = 193; // future expiration or option expiration (if product is an option). we use the last TRADING day as the expiration date.
    DateKey maturity = 196; // future maturity date or option maturity date.  this is the delivery month.
    ExerciseType exercise_type = 199; // (depricate; in RootDefinition) Exercise style
    YesNo user_defined = 202;
    int32 decay_start_year = 205;
    int32 decay_start_month = 208;
    int32 decay_start_day = 211;
    sfixed32 decay_qty = 214; // daily decay quantity
    double price_ratio = 217; // price ratio for interest rate intercommodity spreads
    google.protobuf.Timestamp timestamp = 244;
    repeated Legs legs = 220;
}


/*
    This table contains live trading bands, as advertised by the listing exchange, for futures markets with bands.
*/    
message ProductPriceBand {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double low_limit_price = 100; // Low price limit (0 if not set)
    double high_limit_price = 103; // high price limit (0 if not set)
    double max_price_var = 106; // Maximum price variation allowed (distance from last best price (bid/ask))
    google.protobuf.Timestamp timestamp = 109; // time of last state update
}


/*
    ProductRiskDetail records contain semi-static markup detail for FutureRiskSummary records.
*/    
message ProductRiskDetailV5 {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp period_end_time = 100; // DTTM of the end of the current trading period
    string client_firm = 103; // ClientFirm acronym (SR assigned) [AccountConfig.clientFirm]
    string view_group1 = 106; // Account Group #1 (SR Assigned) used to organize account groups [AccountConfig.viewGroup1]
    string view_group2 = 109; // Account Group #2 (SR Assigned) used to organize account groups [AccountConfig.viewGroup2]
    string view_group3 = 112; // Account Group #3 (SR Assigned) used to organize account groups [AccountConfig.viewGroup3]
    FutStatus fut_status = 115;
    OptStatus opt_status = 118;
    string risk_class = 121; // Symbol Risk Class Code (user supplied) [SymbolControl.riskClass]
    string theo_model = 124; // SR assigned theo model tag (associated with user supplied theo surfaces) [AccountConfig.theoModel]
    string theo_model2 = 127; // SR assigned theo model#2 tag (associated with user supplied theo surfaces) [AccountConfig.theoModel2]
    HedgeDeltaRule hedge_delta_rule = 130; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (sticky delta), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface and atm veSlope (sticky delta)) [AccountConfig.hedgeDelta]
    HoldReason hold_reason = 133; // User supplied description (only informational) [SymbolControl.holdReason]
    float binary_days = 136; // Fractional days [0 - 5.0] prior to expiration after which hedgeDeltas become binary [-1.0, -0.5, 0, +0.5, +1.0] [SymbolControl.binaryDays]
    google.protobuf.Timestamp ctrl_update = 139; // last update dttm of SymbolControl record [SymbolControl.timestamp]
    SymbolType symbol_type = 142; // SymbolType (Equity, ETF, ShortETF, ADR, CashIndex, FutureComplex)
    string name = 145; // Symbol name/description
    float beta = 148; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 151;
    float fut_volume = 154; // trailing 30 day average daily stock volume
    float opt_volume = 157; // trailing 30 day average daily option volume
    MarginType margin_type = 160; // margin slide type: NMS_Equity = +/- 15%, NMS_Index = -8%/+6%, NMS_Medium = +/-10%
    YesNo is_yield_based = 163; // is the symbol a yield based future;can affect greeks and pricing (eg, eurodollars)
    float short_term_vol = 166; // estimated/implied short term underlier volatility
    float point_value = 169; // point value of this future
    Currency point_currency = 172;
    sfixed32 underliers_per_cn = 175; // underliers per contract of the futures associated with this symbol (if any) [default = 1]
    UnderlierType underlier_type = 178;
    google.protobuf.Timestamp timestamp = 181;
}


/*
    ProductRiskSummary records contain live risk aggregation of FutureRiskSummaryV5 records.
    Records are published if/when positions change and about once per minute otherwise.
*/    
message ProductRiskSummaryV5 {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR client firm
    string risk_server_code = 103;
    double ln_dDelta = 106; // long net position delta value (today; SR marks )
    double sh_dDelta = 109; // short net position delta value (today; SR marks )
    double fut_mkt_value_mid = 112; // future position market value (today; SR mid marks)
    double opt_mkt_value_mid = 115; // option position market value (SR mid marks); =sum[opCurPosM * opr.optVolMark]
    double opt_mkt_value_vol = 118; // option position market value (SR vol marks); =sum[opCurPosM * opr.optMidMark]
    sfixed32 fc_abs_cur_pos = 121; // abs number of future contracts (position + fills);=sum[abs(fpr.cnCurPos)]
    sfixed32 fc_abs_opn_clr = 124; // abs number of start of period future contracts (CLR view);=sum[abs(fpr.cnOpnClr)]
    sfixed32 fc_abs_opn_prv = 127; // abs number of start of period future contracts (SR view);=sum[abs(fpr.cnOpnPrv)]
    sfixed32 fc_abs_opn_pos = 130; // abs number of start of period future contracts (effective);=sum[abs(fpr.cnOpnPos)]
    sfixed32 fc_abs_opn_brk = 133; // abs number of future contract start of period breaks (CLR - PRV);=sum[abs(fpr.cnOpnClr - fpr.cnOpnPrv)]
    sfixed32 fc_net_cur_pos = 136; // net future contract position;=sum[fpr.cnOpnClr + fpr.cnBot - fpr.cnSld]
    sfixed32 fc_bot = 139; // number of futures contracts bot today;=sum(frr.cnBot)
    sfixed32 fc_sld = 142; // number of futures contracts sld today;=sum(frr.cnSld)
    sfixed32 fc_bot_hdg = 145; // number of contracts bot today from hedging (spdrSource=HedgeTool)
    sfixed32 fc_sld_hdg = 148; // number of contracts sld today from hedging (spdrSource=HedgeTool)
    sfixed32 fc_bot_trh = 151; // number of contracts bot today from hedging (spdrSource=TradeHedge)
    sfixed32 fc_sld_trh = 154; // number of contracts sld today from hedging (spdrSource=TradeHedge)
    sfixed32 fc_bot_opn = 157; // number of contracts bot today from hedging (spdrSource=OpenHedge)
    sfixed32 fc_sld_opn = 160; // number of contracts sld today from hedging (spdrSource=OpenHedge)
    sfixed32 fc_bot_trd = 163; // number of contracts bot today from a trade hedging source (AutoHedge or Trades loop)
    sfixed32 fc_sld_trd = 166; // number of contracts sld today from a trade hedging source (AutoHedge or Trades loop)
    double fc_mny_bot = 169; // futures money bot today
    double fc_mny_sld = 172; // futures money sld today
    google.protobuf.Timestamp max_fut_dttm = 175; // DateTime of most recent SpdrFuturenExecution (if any)
    float fc_pnl_mid = 178; // Futures Open Pnl (SR marks); =sum[fpr.cnOpnClr * fpr.unitsPerCn * (fpr.futMark - fpr.futOpnMidMark]
    float fc_pnl_clr = 181; // Futures Open Pnl (CLR marks); =sum[fpr.cnOpnClr * fpr.unitsPerCn * (fpr.futMark - fpr.futOpnClrMark]
    float fc_pnl_day = 184; // Futures Day Pnl;=sum(fpr.dayPnl)
    sfixed32 op_cn_abs_cur_pos = 187; // abs number of option contracts (position + fills);=sum[abs(opr.cnCurPos)]
    sfixed32 op_cn_abs_opn_clr = 190; // abs number of start of period option contracts (CLR view); =sum[abs(opr.cnOpnClr)]
    sfixed32 op_cn_abs_opn_prv = 193; // abs number of start of period option contracts (SR view); =sum[abs(opr.cnOpnPrv)]
    sfixed32 op_cn_abs_opn_pos = 196; // abs number of start of period option contracts; =sum[abs(opr.cnOpnPos)]
    sfixed32 op_cn_abs_opn_brk = 199; // abs number of option contract start of period breaks (CLR - PRV);=sum[abs(opr.cnOpnClr - opr.cnOpnPrv)]
    sfixed32 op_cn_pos_call = 202; // net number of call contracts;=sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if call)
    sfixed32 op_cn_pos_put = 205; // net number of call contracts;=sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if put)
    sfixed32 op_cn_abs_pair = 208; // abs number of option contracts with CP reversals removed; =sum[abs(opr.cnOpnClr + opr.cnBot - opr.cnSld) - abs(opr.cnNetPos)]
    float op_cn_abs_atm_equiv = 211; // abs atm equivalent contracts; = sum[abs(opr.cnOpnPos + opr.cnBot - opr.cnSld) * opr.ve / opr.atmVega]
    sfixed32 op_cn_bot = 214; // number of option contracts bot today;=sum[opr.cnBot]
    sfixed32 op_cn_sld = 217; // number of option contracts sld today;=sum[opr.cnSld]
    double op_mny_bot = 220; // option money bot
    double op_mny_sld = 223; // option money sld
    float op_prem_bot = 226; // option premium bot today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnBot]
    float op_prem_sld = 229; // option premium sld today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnSld]
    google.protobuf.Timestamp max_opt_dttm = 232; // DateTime of most recent SpdrOptionExecution (if any)
    double op_pnl_vol = 235; // Option Open Pnl (SR vol marks); =sum[opr.opnPnlVolMark]
    double op_pnl_mid = 238; // Option Open Pnl (SR mid marks); =sum[opr.opnPnlMidMark]
    double op_pnl_clr = 241; // Option Open Pnl (CLR marks); =sum[opr.opnPnlClrMark]
    float op_pnl_brk = 244; // Option Mark Break (catch-up) Pnl (SR vol marks to CLR marks);=sum[(opr.cnOpnClr * opr.pointValue) * (opr.optVolMark - opr.optClrMark)]
    float op_pnl_day = 247; // Option Day Pnl;=sum[opr.dayPnl]
    float op_dn_pnl_day = 250; // Option DN Day Pnl (delta neutral);=sum[opr.dnDayPnl]
    float op_day_vega = 253; // option vega traded today
    float op_day_wVega = 256; // option (vol weighted) vega traded today
    float op_day_tVega = 259; // option (time weighted) vega traded today
    float op_day_wt_vega = 262; // option (vol time weighted) vega traded today
    float op_day_theta = 265; // Option Day Theta;=sum[opr.th * ((opr.cnBot - opr.cnSld) * opr.pointValue)]
    float op_day_delta = 268; // Option Day Delta;=sum[opr.de * ((opr.cnBot - opr.cnSld) * opr.underliersPerCn)]
    float op_trd_delta = 271; // Option Trade Delta (delta fixed at time of trade);=sum[opr.trdDelta]
    float cont_hedge_pnl = 274; // Estimated continuous hedging pnl (open positions only) [~1 minute intervals]
    float cont_hedge_pnl1 = 277; // Estimated continuous hedging pnl (open positions only) [~10 minute intervals]
    float op_edge_opened = 280; // Option Edge Opened (new risk);=sum[opr.edgeOpened]
    float op_edge_closed = 283; // Option Edge Closed (new risk);=sum[opr.edgeClosed]
    float pnl_dn = 286; // Option Pnl Attr: delta neutral pnl: =sum[volPnl - shClrM * dUPrc * opr.dePr]
    float pnl_de = 289; // Option Pnl Attr: delta pnl;=sum[shClrM * dUPrc * opr.dePr]
    float pnl_sl = 292; // Option Pnl Attr: slope pnl;=sum[shClrM * dUPrc * opr.vePr * opr.slPr]
    float pnl_ga = 295; // Option Pnl Attr: gamma pnl;=sum[shClrM * 0.5 * dUPrc * dUPrc * (opr.ga + opr.gaPr)/2]
    float pnl_th = 298; // Option Pnl Attr: theta pnl;=sum[shClrM * dTime * -opr.thPr]
    float pnl_ve = 301; // Option Pnl Attr: vega pnl;=sum[shClrM * 100 * dVol * opr.vePr]
    float pnl_vo = 304; // Option Pnl Attr: volga pnl;=sum[shClrM * 0.5 * 100 * 100 * dVol * dVol * opr.voPr]
    float pnl_va = 307; // Option Pnl Attr: vanna pnl;=sum[shClrM * 100 * dVol * dUPrc * opr.vaPr]
    float pnl_err = 310; // Option Pnl Attr: error (unexplained) pnl;=sum[shClrM * (volPnl - pnlDe - pnlGa - pnlTh - pnlVe)]
    float pnl_rate = 313; // Option Pnl Attr: rate pnl;=sum[shClrM * 100 * dRate * opr.rhPr]
    float pnl_sDiv = 316; // Option Pnl Attr: sdiv pnl;=sum[shClrM * 100 * dSDiv * opr.phPr]
    float pnl_dDiv = 319; // Option Pnl Attr: ddiv pnl;=sum[shClrM * 100 * (opr.ddiv - opr.ddivPr) / opr.uPrc * opr.phPr]
    float pnl_te = 322; // Option Pnl Attr: theo edge pnl;=sum[shClrM * ((opr.tOpx - opr.optVolMark) - (opr.tOpxPr - opr.optOpnVolMark))]
    float pct_iv_change = 325; // Option Avg IVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.iVol/opr.iVolPr)]
    float pct_iv_vega = 328; // Option Avg IVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    float pct_tv_change = 331; // Option Avg TVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.tVol/opr.tVolPr)]
    float pct_tv_vega = 334; // Option Avg TVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    float fut_width_mny = 337; // Future Market Width Value;=sum[0.5 * abs(fcCurPosM) * (fpr.futAsk - fpr.futBid)]
    float opt_width_mny = 340; // Option Market Width Value;=sum[0.5 * abs(shCurPosM) * (opr.optAsk - opr.optBid)]
    float day_dDelta = 343; // Day $Delta (bot or sld;all sources) today;
    float delta = 346; // Aggregate Position Delta;=sum[shCurPos] + sum[fcCurPosM] + sum[shCurPosM * opr.de] + sum[other.delta]
    float ddelta = 349; // Aggregate Position $Delta (Delta * DDMult)
    float de_decay = 352; // Aggregate Position DeltaDecay;=sum[shCurPosM * opr.deDecay] + sum[other.deDecay]
    float dd_decay = 355; // Aggregate Position $DeltaDecay (DeltaDecay * DDMult) [change in $delta when one trading day (1.0/252.0) is taken out of option pricing]
    float gamma = 358; // Aggregate Position Gamma;=sum[shCurPosM * opr.ga] + sum[other.gamma]
    float d_gamma = 361; // Aggregate Position $Gamma
    float theta = 364; // Aggregate Position Theta;=sum[shCurPosM * opr.th] + sum[other.theta]
    float rho = 367; // Aggregate Position Rho;=sum[shCurPosM * opr.rh] + sum[other.rho]
    float vega = 370; // Aggregate Position Vega;=sum[shCurPosM * opr.ve] + sum[other.vega]
    float t_vega = 373; // Aggregate Position Time Weight Vega;=sum[shCurPosM * opr.ve / sqrt(max(0.1, opr.years * 4))]
    float w_vega = 376; // Aggregate Position Vol Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve]
    float wt_vega = 379; // Aggregate Position Vol Time Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve / sqrt(max(0.1, opr.years * 4))]
    float ivol_ve = 382; // Aggregate Position Avg Vol Numerator (vega weighted) (avg = ivolVe / avega);=sum[abs(shCurPosM) * opr.iVol * opr.ve]
    float volga = 385; // Aggregate Position Volga;=sum[shCurPosM * opr.vo] + sum[other.volga]
    float vanna = 388; // Aggregate Position Vanna;=sum[shCurPosM * opr.va] + sum[other.vanna]
    float slope = 391; // Aggregate Position VegaDelta (uPrc/Vol correlation factor);=sum[shCurPosM * opr.sl * opr.ve] + sum[other.slope]
    float avega = 394; // Aggregate Postion Abs Vega;=sum[abs(shCurPosM ) * opr.ve]
    float atheta = 397; // Aggregate Postion Abs Theta;= sum[abs(shCurPosM) * opr.th]
    float hedge_gamma = 400; // Aggregate Postion Hedge Gamma (either iVol or tVol based;can go binary);=sum[shCurPos * opr.hedgeGa]
    float hedge_dGamma = 403; // Aggregate Postion Hedge $Gamma
    float prem_ov_par = 406; // Aggregate Position Premium Over Parity;=sum[shCurPosM *  max(0, opr.optVolMark - opr.loBound)]
    float wt_ve_dd = 409; // Aggregate Dd Time Weighted Vega;=sum[wtVega] if opr.xde < -0.30
    float wt_ve_dn = 412; // Aggregate Dn Time Weighted Vega;=sum[wtVega] if -0.30 <= opr.xde < -0.10
    float wt_ve_at = 415; // Aggregate At Time Weighted Vega;=sum[wtVega] if abs(opr.xde) <= 0.10
    float wt_ve_up = 418; // Aggregate Up Time Weighted Vega;=sum[wtVega] if +0.10 < opr.xde <= +0.30
    float wt_ve_du = 421; // Aggregate Du Time Weighted Vega;=sum[wtVega] if +0.30 < opr.xde
    float wt_ve_m1 = 424; // Aggregate M1 Time Weighted Vega; =sum[wtVega] if days < 10
    float wt_ve_m2 = 427; // Aggregate M2 Time Weighted Vega; =sum[wtVega] if 10 < days < 25
    float wt_ve_m3 = 430; // Aggregate M3 Time Weighted Vega; =sum[wtVega] if 25 < days < 65
    float wt_ve_m4 = 433; // Aggregate M4 Time Weighted Vega; =sum[wtVega] if 65 < days < 130
    float wt_ve_m5 = 436; // Aggregate M5 Time Weighted Vega; =sum[wtVega] if 130 < days
    float opn_delta = 439; // Aggregate Position Open Delta (Open Positions + Open Hedge Trades Only)
    float opn_dDelta = 442; // Aggregate Position ($) Open Delta (Open Positions + Open Hedge Trades Only)
    float pos_delta = 445; // Aggregate Position Hedge Delta (Current Position)
    float pos_dDelta = 448; // Aggregate Position Hedge Delta (Current Position)
    float pos_hedge_delta_ex = 451; // Aggregate Position Hedge Delta (Current Position) if exDate != today
    float pos_hedge_dDelta_ex = 454; // Aggregate Position ($) Hedge Delta (Current Position) if exDate != today
    float t_edge = 457; // Aggregate $ Theo Edge;=sum[shNetPosM * (opr.tOpx - opr.optVolMark)] if opr.tVol > 0.01 and opr.tOpx > 0.0 and opr.optVolMark > 0.0
    float t_edge_mult = 460; // Aggregate Abs Net Contracts (Rev/Conv contracts removed);= sum[abs(shNetPosM)]
    float t_edge_pr = 463; // Prior Day $ Theo Edge
    float t_edge_mult_pr = 466; // Prior Day Aggregate Abs Net Contracts
    int32 num_tVol_errors = 469; // number of opr.tErr != 0 or opr.tVol < 0.01
    float pair_pnl = 472; // Aggregate Dn Pair Pnl;=sum[shNetClrM * (opr.optVolMark - opr.optOpnVolMark - opr.hedgeDePr * (opr.uMark - opr.uOpnMark))]
    float pos_tEdge_wV = 475; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) >= 0)
    float neg_tEdge_wV = 478; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) < 0)
    float bad_tEdge_wV = 481; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx = 0)
    float pos_tEdge_pnl = 484; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) >= 0)
    float neg_tEdge_pnl = 487; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) < 0)
    float bad_tEdge_pnl = 490; // Aggregate Dn Pair Pnl where (opr.tOpxPr = 0)
    float span01 = 493; // span1: uPrc=unch, vol=up
    float span02 = 496; // span2: uPrc=unch, vol=down
    float span03 = 499; // span3: uPrc=+33.33%, vol=up
    float span04 = 502; // span4: uPrc=+33.33%, vol=dn
    float span05 = 505; // span5: uPrc=-33.33%, vol=up
    float span06 = 508; // span6: uPrc=-33.33%, vol=down
    float span07 = 511; // span7: uPrc=+66.67%, vol=up
    float span08 = 514; // span8: uPrc=+66.67%, vol=down
    float span09 = 517; // span9: uPrc=-66.67%, vol=up
    float span10 = 520; // span10: uPrc=-66.67%, vol=down
    float span11 = 523; // span11: uPrc=+100%, vol=up
    float span12 = 526; // span12: uPrc=+100%, vol=down
    float span13 = 529; // span13: uPrc=-100%, vol=up
    float span14 = 532; // span14: uPrc=-100%, vol=down
    float span15 = 535; // span15: uPrc=+300%; price slide * 0.33
    float span16 = 538; // span16: uPrc=-300%, price slide * 0.33
    float fut_liq_risk = 541; // Aggregate Future Liquidation Risk
    float opt_liq_risk = 544; // Aggregate Option Liquidation Risk
    sfixed32 fc_bot_c0 = 547; // hypothetical future contracts bot (~ 1 minute intervals)
    sfixed32 fc_sld_c0 = 550; // hypothetical future contracts sld
    float fc_mny_c0 = 553; // hypothetical money
    sfixed32 fc_bot_c1 = 556; // hypothetical future contracts bot (~ 10 minute intervals)
    sfixed32 fc_sld_c1 = 559; // hypothetical future contracts sld
    float fc_mny_c1 = 562; // hypothetical money
    float fut_margin = 565; // Aggregate Future Risk Margin
    int32 num_fut_errors = 568; // number of futures positions with a computation error (should be zero)
    int32 num_opt_errors = 571; // number of options positions with a computation error (should be zero)
    MktErrFlag fut_mark_flag = 574;
    MktErrFlag opt_mark_flag = 577;
    google.protobuf.Timestamp timestamp = 580;
}


/*
    This table contains live trading status records for entire product groups (futures and options) and asset groups and individual instruments
*/    
message ProductTradingStatus {
    message PKey {
        
        TickerKey ccode = 10; // product group
        string asset_code = 13; // asset code if this status update applies to a specific asset group (Can be empty)
        sfixed64 security_iD = 16; // product ID if this status update applies to a specific instrument (Can be 0)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    MarketStatus market_status = 103; // market status (open, halted, etc)
    google.protobuf.Timestamp timestamp = 106; // time of last state update (CST)
}


/*
    This table contains live trading status records for entire product groups (futures and options) and asset groups and individual instruments
*/    
message ProductTradingStatusV2 {
    message PKey {
        
        OptionKey sec_key = 10; // trading status product key. Interpretation depends on the status type
        SpdrKeyType sec_type = 13;
        TradingStatusType trading_status_type = 16; // Processing level for the product trading status: 1 = statusKey is the product group key, 2 = statusKey is the security group key, statusKey is for an individual instrument
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    MarketStatus market_status = 103; // market status (open, halted, etc)
    google.protobuf.Timestamp timestamp = 106; // time of last state update (CST)
}


    
message QuoteEventFut {
    message PKey {
        
        sfixed64 parent_number = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 seq_number = 100;
    string engine = 103;
    string client_firm = 106;
    google.protobuf.Timestamp timestamp = 109;
    double ts = 112; // seconds since parent order start
    ExpiryKey fkey = 115;
    string accnt = 118;
    SpdrSource spdr_source = 121;
    sfixed64 grouping_code = 124;
    BuySell side = 127;
    sfixed64 risk_group_id = 130;
    sfixed64 trigger_group_id = 133;
    string desc = 136;
    string child_orders = 139;
    MaxProgress max_progress = 142;
    string accnt_route_error = 145;
    SpdrBrokerStatus broker_status = 148;
    SpdrOrderStatus parent_status = 151;
    BrokerState broker_state = 154; // broker monitor state
    sfixed32 broker_counter = 157; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 160; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 163; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 166; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 169; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 172; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 175; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 178; // [enum] current state of mkt cross handler (if any)
    sfixed32 mkt_cross_counter = 181; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 184; // Twap/Vwap progress detail
    ChildEvent last_child_event = 187;
    sfixed32 order_size = 190;
    sfixed32 order_active_size = 193;
    sfixed32 active_size_algo = 196;
    sfixed32 active_size_user = 199;
    ActiveSizeState active_state_algo = 202;
    ActiveSizeState active_state_user = 205;
    sfixed32 cum_filled = 208;
    sfixed32 open_size = 211;
    sfixed32 risk_size = 214;
    SpdrRisk risk_reason = 217;
    string risk_detail = 220;
    double limit_prc = 223;
    LimitError limit_err = 226;
    string limit_err_desc = 229;
    float take_limit_prc = 232;
    float take_limit_prob = 235;
    ProbSegment take_prob_segment = 238;
    LimitError take_limit_err = 241;
    SpdrLimitClass take_limit_class = 244;
    TraceLimitType take_limit_type = 247;
    float make_limit_prc = 250;
    float make_limit_prob = 253;
    ProbSegment make_prob_segment = 256;
    LimitError make_limit_err = 259;
    SpdrLimitClass make_limit_class = 262;
    TraceLimitType make_limit_type = 265;
    StateModel state_model = 268;
    double nbbo_bid_prc = 271;
    double nbbo_ask_prc = 274;
    sfixed32 nbbo_bid_sz = 277;
    sfixed32 nbbo_ask_sz = 280;
    uint32 nbbo_bid_cnt = 283;
    uint32 nbbo_ask_cnt = 286;
    sfixed32 avg_mkt_size = 289; // characteristic market size
    float bid_take_prob = 292; // bid take probability of current nbbo market (zero exchange fee) [average size print]
    float ask_take_prob = 295; // ask take probability of current nbbo market (zero exchange fee) [average size print]
    sfixed32 qp_counter = 298; // quote probability record counter
    double qp_bid_prc = 301; // FutureQuoteProb.bidPrc
    double qp_ask_prc = 304; // FutureQuoteProb.askPrc
    sfixed64 src_timestamp = 307; // Exch/Source timestamp (native resolution)
    sfixed64 net_timestamp = 310; // SR switch timestamp (net time)
    string event_exch = 313; // packet source
    PriceFormat price_format = 316;
    double clock_ts = 319; // abs system clock timestamp (100ns granularity; time since EE startup)
    string message_id = 322; // clOrdId of new child order or cancel (if sending) or exec report (if receiving)
}


    
message QuoteEventMLeg {
    message PKey {
        
        sfixed64 parent_number = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 seq_number = 100;
    string engine = 103;
    string client_firm = 106;
    google.protobuf.Timestamp timestamp = 109;
    double ts = 112; // seconds since parent order start
    string accnt = 115;
    TickerKey ticker = 118;
    SpdrSource spdr_source = 121;
    sfixed64 grouping_code = 124;
    BuySell mleg_side = 127;
    string desc = 130;
    string child_orders = 133;
    MaxProgress max_progress = 136;
    string accnt_route_error = 139;
    SpdrOrderStatus spdr_order_status = 142;
    SpdrCloseReason spdr_close_reason = 145;
    SpdrRejectReason spdr_reject_reason = 148;
    BrokerState broker_state = 151; // broker monitor state
    sfixed32 algo_counter = 154;
    AlgoState algo_state = 157;
    sfixed32 make_counter = 160;
    AlgoState make_state = 163;
    string progress_rule_detail = 166; // Twap/Vwap progress detail
    sfixed32 order_size = 169;
    sfixed32 order_active_size = 172;
    sfixed32 active_size_algo = 175;
    sfixed32 active_size_user = 178;
    ActiveSizeState active_state_algo = 181;
    ActiveSizeState active_state_user = 184;
    double leg_partial_qty = 187;
    sfixed32 leg_complete_qty = 190;
    sfixed32 cum_square_qty = 193;
    sfixed32 cum_partial_qty = 196;
    double avg_square_prc = 199;
    sfixed32 open_size = 202;
    sfixed32 risk_size = 205;
    SpdrRisk risk_reason = 208;
    string risk_detail = 211;
    double limit_prc = 214;
    double limit_ref_uPrc = 217;
    LimitError limit_err = 220;
    string limit_err_desc = 223;
    float take_limit_prc = 226;
    float take_surf_offset = 229;
    LimitError take_limit_err = 232;
    SpdrLimitClass take_limit_class = 235;
    TraceLimitType take_limit_type = 238;
    float make_limit_prc = 241;
    float make_surf_offset = 244;
    LimitError make_limit_err = 247;
    SpdrLimitClass make_limit_class = 250;
    TraceLimitType make_limit_type = 253;
    YesNo is_valid_market = 256;
    double best_way_px = 259;
    sfixed32 best_way_sz = 262;
    double worst_way_px = 265;
    sfixed32 worst_way_sz = 268;
    float u_bid = 271;
    float u_ask = 274;
    float surface_opx = 277;
    float surface_uPrc = 280;
    sfixed64 stk_leg_iD = 283;
    BuySell stk_leg_side = 286;
    ShortSaleFlag stk_leg_sSale_flag = 289;
    sfixed32 stk_leg_size = 292;
    SpdrOrderStatus stk_leg_status = 295;
    double stk_leg_avg_fill_price = 298;
    sfixed32 stk_leg_cum_fill_quantity = 301;
    sfixed64 leg_iD1 = 304;
    BuySell leg_side1 = 307;
    sfixed32 leg_size1 = 310;
    PositionType leg_pos_flg1 = 313;
    OptionKey leg_sec_key1 = 316;
    SpdrKeyType leg_sec_type1 = 319;
    double leg_bid_px1 = 322;
    double leg_ask_px1 = 325;
    SpdrOrderStatus leg_status1 = 328;
    double leg_avg_fill_price1 = 331;
    sfixed32 leg_cum_fill_quantity1 = 334;
    sfixed64 leg_iD2 = 337;
    BuySell leg_side2 = 340;
    sfixed32 leg_size2 = 343;
    PositionType leg_pos_flg2 = 346;
    OptionKey leg_sec_key2 = 349;
    SpdrKeyType leg_sec_type2 = 352;
    double leg_bid_px2 = 355;
    double leg_ask_px2 = 358;
    SpdrOrderStatus leg_status2 = 361;
    double leg_avg_fill_price2 = 364;
    sfixed32 leg_cum_fill_quantity2 = 367;
    sfixed64 leg_iD3 = 370;
    BuySell leg_side3 = 373;
    sfixed32 leg_size3 = 376;
    PositionType leg_pos_flg3 = 379;
    OptionKey leg_sec_key3 = 382;
    SpdrKeyType leg_sec_type3 = 385;
    double leg_bid_px3 = 388;
    double leg_ask_px3 = 391;
    SpdrOrderStatus leg_status3 = 394;
    double leg_avg_fill_price3 = 397;
    sfixed32 leg_cum_fill_quantity3 = 400;
    sfixed64 leg_iD4 = 403;
    BuySell leg_side4 = 406;
    sfixed32 leg_size4 = 409;
    PositionType leg_pos_flg4 = 412;
    OptionKey leg_sec_key4 = 415;
    SpdrKeyType leg_sec_type4 = 418;
    double leg_bid_px4 = 421;
    double leg_ask_px4 = 424;
    SpdrOrderStatus leg_status4 = 427;
    double leg_avg_fill_price4 = 430;
    sfixed32 leg_cum_fill_quantity4 = 433;
    sfixed64 leg_iD5 = 436;
    BuySell leg_side5 = 439;
    sfixed32 leg_size5 = 442;
    PositionType leg_pos_flg5 = 445;
    OptionKey leg_sec_key5 = 448;
    SpdrKeyType leg_sec_type5 = 451;
    double leg_bid_px5 = 454;
    double leg_ask_px5 = 457;
    SpdrOrderStatus leg_status5 = 460;
    double leg_avg_fill_price5 = 463;
    sfixed32 leg_cum_fill_quantity5 = 466;
    sfixed64 leg_iD6 = 469;
    BuySell leg_side6 = 472;
    sfixed32 leg_size6 = 475;
    PositionType leg_pos_flg6 = 478;
    OptionKey leg_sec_key6 = 481;
    SpdrKeyType leg_sec_type6 = 484;
    double leg_bid_px6 = 487;
    double leg_ask_px6 = 490;
    SpdrOrderStatus leg_status6 = 493;
    double leg_avg_fill_price6 = 496;
    sfixed32 leg_cum_fill_quantity6 = 499;
    sfixed64 src_timestamp = 502; // Exch/Source timestamp (native resolution)
    sfixed64 net_timestamp = 505; // SR switch timestamp (net time)
    string event_exch = 508; // packet source
    double clock_ts = 511; // abs system clock timestamp (100ns granularity; time since EE startup)
    string message_id = 514; // clOrdId of new child order or cancel (if sending) or exec report (if receiving)
}


    
message QuoteEventOpt {
    message PKey {
        
        sfixed64 parent_number = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 seq_number = 100; // netTimestamp (quote event write)
    string engine = 103;
    string client_firm = 106;
    google.protobuf.Timestamp timestamp = 109;
    double ts = 112; // seconds since parent order start
    OptionKey okey = 115;
    string accnt = 118;
    SpdrSource spdr_source = 121;
    sfixed64 grouping_code = 124;
    BuySell side = 127;
    sfixed64 risk_group_id = 130;
    sfixed64 trigger_group_id = 133;
    TickerKey ticker = 136;
    string desc = 139;
    string child_orders = 142;
    MaxProgress max_progress = 145;
    string accnt_route_error = 148;
    SpdrBrokerStatus broker_status = 151;
    SpdrOrderStatus parent_status = 154;
    BrokerState broker_state = 157; // broker monitor state
    sfixed32 broker_counter = 160; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 163; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 166; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 169; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 172; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 175; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 178; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 181; // [enum] current state of mkt cross handler (if any)
    sfixed32 mkt_cross_counter = 184; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 187; // Twap/Vwap progress detail
    ChildEvent last_child_event = 190;
    sfixed32 order_size = 193;
    sfixed32 order_active_size = 196;
    sfixed32 active_size_algo = 199;
    sfixed32 active_size_user = 202;
    ActiveSizeState active_state_algo = 205;
    ActiveSizeState active_state_user = 208;
    sfixed32 cum_filled = 211;
    sfixed32 open_size = 214;
    sfixed32 risk_size = 217;
    SpdrRisk risk_reason = 220;
    string risk_detail = 223;
    float risk_grp_net_cn = 226;
    float risk_grp_net_vega = 229;
    float risk_grp_net_prem = 232;
    float risk_grp_net_dDelta = 235;
    double limit_prc = 238;
    double limit_ref_uPrc = 241;
    LimitError limit_err = 244;
    string limit_err_desc = 247;
    float take_limit_prc = 250;
    float take_limit_prob = 253;
    float take_price_prob = 256;
    ProbSegment take_prob_segment = 259;
    float take_prob_dOpx = 262;
    LimitError take_limit_err = 265;
    SpdrLimitClass take_limit_class = 268;
    TraceLimitType take_limit_type = 271;
    float make_limit_prc = 274;
    float make_limit_prob = 277;
    float make_price_prob = 280;
    ProbSegment make_prob_segment = 283;
    float make_prob_dOpx = 286;
    LimitError make_limit_err = 289;
    SpdrLimitClass make_limit_class = 292;
    TraceLimitType make_limit_type = 295;
    StateModel state_model = 298;
    StateModel u_state_model = 301;
    float nbbo_bid_prc = 304;
    float nbbo_ask_prc = 307;
    sfixed32 nbbo_bid_sz = 310;
    sfixed32 nbbo_ask_sz = 313;
    OptExch nbbo_bid_ex = 316;
    OptExch nbbo_ask_ex = 319;
    sfixed32 nbbo_bid_ex_sz = 322;
    sfixed32 nbbo_ask_ex_sz = 325;
    int32 nbbo_bid_cnt = 328;
    int32 nbbo_ask_cnt = 331;
    sfixed32 avg_mkt_size = 334; // characteristic market size
    float u_bid = 337;
    float u_ask = 340;
    float u_prt = 343;
    float bid_take_prob = 346; // bid take probability of current nbbo market (zero exchange fee) [average size print]
    float ask_take_prob = 349; // ask take probability of current nbbo market (zero exchange fee) [average size print]
    sfixed32 qp_counter = 352; // quote probability record counter
    float qp_uPrc = 355; // uPrc from the quote probability record
    float qp_bid_prc = 358; // bidPrice from the quote probability record
    float qp_ask_prc = 361; // askPrice from the quote probability record
    float qp_surf_prc = 364; // qpSurfPrc
    float qp_surf_prob = 367; // qpSurfProb (buy prob if BUY; sell prob if SELL)
    float qp_uMid = 370; // uMid from the underlier quote probability record
    float surface_vol = 373;
    float surface_sDiv = 376;
    float surface_opx = 379;
    float surface_uPrc = 382;
    float delta = 385;
    float limit_vol = 388;
    float limit_sDiv = 391;
    double u_level = 394;
    Contingency u_contingency = 397;
    PricerModel limit_model = 400;
    sfixed64 src_timestamp = 403; // Exch/Source timestamp (native resolution)
    sfixed64 net_timestamp = 406; // SR switch timestamp (net time)
    string event_exch = 409; // packet source
    PriceFormat price_format = 412;
    double clock_ts = 415; // abs system clock timestamp (100ns granularity; time since EE startup)
    string message_id = 418; // clOrdId of new child order or cancel (if sending) or exec report (if receiving)
}


    
message QuoteEventStk {
    message PKey {
        
        sfixed64 parent_number = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 seq_number = 100;
    string engine = 103;
    string client_firm = 106;
    google.protobuf.Timestamp timestamp = 109;
    double ts = 112; // seconds since parent order start
    TickerKey ticker = 115;
    string accnt = 118;
    SpdrSource spdr_source = 121;
    sfixed64 grouping_code = 124;
    BuySell side = 127;
    sfixed64 risk_group_id = 130;
    sfixed64 trigger_group_id = 133;
    string desc = 136;
    string child_orders = 139;
    MaxProgress max_progress = 142;
    string accnt_route_error = 145;
    SpdrBrokerStatus broker_status = 148;
    SpdrOrderStatus parent_status = 151;
    BrokerState broker_state = 154; // broker monitor state
    sfixed32 broker_counter = 157; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 160; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 163; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 166; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 169; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 172; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 175; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 178; // [enum] current state of mkt cross handler (if any)
    sfixed32 mkt_cross_counter = 181; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 184; // Twap/Vwap progress detail
    ChildEvent last_child_event = 187;
    sfixed32 order_size = 190;
    sfixed32 order_active_size = 193;
    sfixed32 active_size_algo = 196;
    sfixed32 active_size_user = 199;
    ActiveSizeState active_state_algo = 202;
    ActiveSizeState active_state_user = 205;
    sfixed32 cum_filled = 208;
    sfixed32 open_size = 211;
    sfixed32 risk_size = 214;
    SpdrRisk risk_reason = 217;
    string risk_detail = 220;
    double limit_prc = 223;
    LimitError limit_err = 226;
    string limit_err_desc = 229;
    float take_limit_prc = 232;
    float take_limit_prob = 235;
    ProbSegment take_prob_segment = 238;
    LimitError take_limit_err = 241;
    SpdrLimitClass take_limit_class = 244;
    TraceLimitType take_limit_type = 247;
    float make_limit_prc = 250;
    float make_limit_prob = 253;
    ProbSegment make_prob_segment = 256;
    LimitError make_limit_err = 259;
    SpdrLimitClass make_limit_class = 262;
    TraceLimitType make_limit_type = 265;
    StateModel state_model = 268;
    float nbbo_bid_prc = 271;
    float nbbo_ask_prc = 274;
    sfixed32 nbbo_bid_sz = 277;
    sfixed32 nbbo_ask_sz = 280;
    StkExch nbbo_bid_ex = 283;
    StkExch nbbo_ask_ex = 286;
    int32 nbbo_bid_cnt = 289;
    int32 nbbo_ask_cnt = 292;
    sfixed32 avg_mkt_size = 295; // characteristic market size
    float bid_take_prob = 298; // bid take probability of current nbbo market (zero exchange fee) [average size print]
    float ask_take_prob = 301; // ask take probability of current nbbo market (zero exchange fee) [average size print]
    sfixed32 qp_counter = 304; // quote probability record counter
    float qp_bid_prc = 307; // StockQuoteProb.bidPrc
    float qp_ask_prc = 310; // StockQuoteProb.askPrc
    sfixed64 src_timestamp = 313; // Exch/Source timestamp (native resolution)
    sfixed64 net_timestamp = 316; // SR switch timestamp (net time)
    string event_exch = 319; // packet source
    PriceFormat price_format = 322;
    double clock_ts = 325; // abs system clock timestamp (100ns granularity; time since EE startup)
    string message_id = 328; // clOrdId of new child order or cancel (if sending) or exec report (if receiving)
}


    
message RFQDisplayRequest {


    MbusInfo descriptor = 1;
    
    GetAction action = 100;
    string theo_accnt = 103; // accnt used for theo surfaces
    sfixed64 filter_id = 106;
    string ticker = 109; // sym,sym,sym ...
    string strategy = 112; // strategy, strategy, strategy (enum numeric values)
    string sector = 115; // sector, sector, sector (comma separated)
    string industry = 118; // ind, ind, ind (numeric values)
    string risk_class = 121; // risk class letters (comma separated)
    string opt_status = 124; // status, status, status (enum numeric values)
    string tokens = 127; // additional search tokens
    float min_years = 130;
    float max_years = 133;
    float min_underlying_price = 136;
    float max_underlying_price = 139;
    float min_theo_edge = 142;
    float min_surf_edge = 145;
    float min_buy_edge = 148;
    float min_sell_edge = 151;
    float min_spread_probability = 154;
    float min_surf_vega = 157;
    float max_surf_vega = 160;
    float min_surf_delta = 163;
    float max_surf_delta = 166;
    sfixed32 min_prt_size = 169;
    float min_prt_vega = 172; // PrtVega = PrintSize x surfVega
    sfixed32 min_prt_volume = 175;
    float min_prt_vlm_vega = 178; // VlmVega = Volume x surfVega
    float min_spread_vega = 181; // minimum vega available in spread
    sfixed32 min_spread_quantity = 184;
    LegSecType sec_type = 187; // Option = At least one option leg, Stock = Only stock legs, Future = only futures legs
    LegSecType sec_type_incl = 190; // At lest one leg of the type
    LegSecType sec_type_excl = 193; // No legs of the type
    SpreadTypeFilter spread_type = 196;
    RatioTypeFilter ratio_type = 199;
    RFQSourceType rfq_source = 202;
    string exchanges = 205;
    uint32 x_delta_buckets_incl = 208; // Bitmap of xdelta buckets to include
    uint32 x_delta_buckets_excl = 211; // Bitmap of xdelta buckets to exclude
    uint32 time_buckets_incl = 214; // Bitmap of time buckets to include
    uint32 time_buckets_excl = 217; // Bitmap of time buckets to exclude
    sfixed32 max_num_results = 220;
    float max_result_age = 223; // max age of result (in seconds)
    string user_name = 226;
}


/*
    Live spread quotes with SpiderRock markup details for equity and future option spreads.  Legs details are included in a packed field.  This table contains the most recent market for each spread.
*/    
message RFQQuoteBroadcast {
    message PKey {
        
        sfixed64 security_iD = 10; // exchange spread ID (eg. CME ProductID or ISE SecurityID)
        ExchSource exch_source = 13;
    }

    message QuoteLegs {
        
        OptionKey leg_key = 226;
        LegKeyType leg_key_type = 229;
        sfixed64 leg_security_iD = 232; // product securityID (if available, 0 otherwise) (can be another spread)
        sfixed64 leg_parent_sec_iD = 235; // product securityID of parent (if unrolled from a compound spread)
        string leg_security_desc = 238; // Security description
        uint32 leg_ratio = 241; // leg ratio (1, 2, etc)
        BuySell leg_side = 244;
        double leg_bid_price = 247; // leg market bid
        sfixed32 leg_bid_size = 250;
        double leg_ask_price = 253; // leg market ask
        sfixed32 leg_ask_size = 256;
        float leg_years = 259;
        double leg_uPrc = 262;
        float leg_opt_mult = 265; // SPC if equity, 1 if option/future
        float leg_fut_mult = 268; // 1 if equity, uMult if option/future
        float leg_surf_vol = 271; // leg surface volatility
        float leg_surf_de = 274;
        float leg_surf_ve = 277;
        float leg_surf_price = 280; // surface price as of message arrival
        float leg_theo_price = 283; // theo price
        float leg_theo_prc_b = 286; // theo buy price
        float leg_theo_prc_s = 289; // theo sell price
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // first ticker in leg list
    string security_desc = 103; // SR constructed;blank on broadcast (filled by tool or SRSE proxy)
    RFQSourceType rfq_source = 106;
    SpreadStrategy rfq_strategy = 109;
    YesNo is_covered_strategy = 112;
    YesNo is_tradeable = 115;
    double rfq_bid_price = 118; // best bid (buy) price for this RFQ/Spread book
    sfixed32 rfq_bid_quan = 121; // cumulative bid (buy) quantity
    double rfq_ask_price = 124; // best ask (sell) price for this RFQ/Spread book
    sfixed32 rfq_ask_quan = 127; // cumulative ask (sell) quantity
    double rfq_prt_price = 130; // last print price for this RFQ/Spread
    sfixed32 rfq_prt_size = 133; // last print size for this RFQ/Spread
    sfixed32 rfq_prt_volume = 136; // total print volume (for session) for this RFQ/Spread
    sfixed64 rfq_prt_time = 139;
    double bid_price = 142; // best bid (buy) price for this RFQ/Spread from individual legs
    sfixed32 bid_quan = 145; // minimum bid (buy) quantity from individual legs
    double ask_price = 148; // best ask (sell) price for this RFQ/Spread from individual legs
    sfixed32 ask_quan = 151; // minimum ask (sell) quantity from individual legs
    float surf_delta = 154; // delta of all legs
    float surf_vega = 157; // vega of all legs
    float surf_price = 160; // surfPrice (SR mid-market) of all legs
    float theo_price = 163; // theoPrice (if applicable) of all legs
    float theo_price_lo = 166; // theoPrice (if applicable) of all legs (best way)
    float theo_price_hi = 169; // theoPrice (if applicable) of all legs (worst way)
    double min_uPrc = 172; // min uPrc of all option legs
    double max_uPrc = 175; // max uPrc of all option legs
    float min_years = 178; // min years of all option legs
    float max_years = 181; // max years of all option legs
    LegSecType leg_sec_types = 184; // multi value
    string exchange = 187; // comma separated list
    sfixed32 grp_num = 190; // industry group number (equities only)
    string sector = 193; // user defined sector code (if any)
    string risk_class = 196; // risk class letter code
    OptStatus opt_status = 199;
    float pos_vega = 202;
    float pos_gamma = 205;
    float pos_theta = 208;
    float pos_delta = 211;
    sfixed64 net_timestamp = 214; // PTP timestamp of most recent message update
    sfixed64 filter_id = 217; // used by tool/toolServer session to multiplex filters
    sfixed32 num_legs = 220;
    repeated QuoteLegs quote_legs = 223;
}


    
message RFQQuoteResponse {
    message PKey {
        
        sfixed64 order_number = 10; // SR Generated order number
    }

    message QuoteLegs {
        
        OptionKey leg_key = 157;
        LegKeyType leg_key_type = 160;
        sfixed64 leg_security_iD = 163; // product securityID (if available, 0 otherwise) (can be another spread)
        sfixed64 leg_parent_sec_iD = 166; // product securityID of parent (if unrolled from a compound spread)
        string leg_security_desc = 169; // Security description
        int32 leg_size = 172; // leg ratio (1, 2, etc)
        BuySell leg_side = 175;
        LegPositionType leg_pos_type = 178;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrActionType spdr_action_type = 100;
    sfixed64 security_iD = 103; // eg. CME ProductID or ISE SecurityID
    string security_desc = 106; // Exchange supplied (CME);SR constructed (NMS)
    ExchSource exch_source = 109;
    sfixed32 resp_quantity = 112;
    double resp_price = 115;
    RFQSide resp_side = 118;
    sfixed32 resp_max_visible = 121; // Max visible quantity (iceberg quantity)
    string resp_accnt = 124;
    google.protobuf.Timestamp resp_time = 127;
    string strategy = 130;
    string user_name = 133;
    string cxl_reason = 136;
    TimeInForce time_in_force = 139;
    sfixed32 order_duration = 142; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 145; // [optional] (default: 2099-01-01)
    AutoHedge auto_hedge = 148;
    ShortSaleFlag ssale_flag = 151; // short sale flag for auto-hedge (if applicable)
    repeated QuoteLegs quote_legs = 154;
}


    
message RFQResponseReport {
    message PKey {
        
        sfixed64 order_number = 10; // SR Generated
    }

    message QuoteLegs {
        
        OptionKey leg_key = 193;
        LegKeyType leg_key_type = 196;
        sfixed64 leg_security_iD = 199; // product securityID (if available, 0 otherwise) (can be another spread)
        sfixed64 leg_parent_sec_iD = 202; // product securityID of parent (if unrolled from a compound spread)
        string leg_security_desc = 205; // Security description
        int32 leg_size = 208; // leg ratio (1, 2, etc)
        BuySell leg_side = 211;
        sfixed32 leg_cum_fill_quan = 214;
        double leg_avg_fill_price = 217;
        LegPositionType leg_pos_type = 220;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100; // eg. CME ProductID or ISE SecurityID
    string security_desc = 103; // Exchange supplied (CME);SR constructed (NMS)
    ExchSource exch_source = 106;
    string engine_name = 109;
    string exec_firm = 112; // exec firm override (CMTA)
    string exec_accnt = 115; // exec accnt (if any)
    string broker_accnt = 118;
    SpdrOrderStatus spdr_order_status = 121;
    SpdrCloseReason spdr_close_reason = 124;
    SpdrRejectReason spdr_reject_reason = 127;
    string spdr_close_detail_txt = 130;
    sfixed32 leaves_qty = 133;
    double avg_fill_price = 136;
    sfixed32 cum_fill_quantity = 139;
    sfixed64 last_fill_number = 142;
    google.protobuf.Timestamp last_fill_dttm = 145;
    string strategy = 148;
    string user_name = 151;
    string cxl_reason = 154;
    sfixed32 resp_quantity = 157;
    double resp_price = 160;
    RFQSide resp_side = 163;
    string resp_accnt = 166;
    google.protobuf.Timestamp resp_time = 169;
    TimeInForce time_in_force = 172;
    sfixed32 order_duration = 175; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 178; // [optional] (default: 2099-01-01)
    AutoHedge auto_hedge = 181;
    ShortSaleFlag ssale_flag = 184; // short sale flag for auto-hedge (if applicable)
    google.protobuf.Timestamp timestamp = 187;
    repeated QuoteLegs quote_legs = 190;
}


    
message RingAlive {
    message PKey {
        
        string ring_name = 10;
        sfixed32 process_iD = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    uint32 app_iD = 100;
    string app_name = 103;
    RingProtocol protocol = 106;
    google.protobuf.Timestamp timestamp = 109;
}


    
message RingChannelSubscribe {
    message PKey {
        
        string address = 10;
        uint32 port = 13;
        sfixed32 process_iD = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    uint32 app_iD = 100;
    string app_name = 103;
    RingProtocol ring_protocol = 106;
    string ring_name = 109; // (optional) FIX may supply this value, MBUS/MKT will allow MMRHost to control it and return it as an ack = Yes
    sfixed32 ring_segment_count = 112; // (optional) FIX may supply this value, MBUS/MKT will allow MMRHost to control it and return it as an ack = Yes
    sfixed32 ring_segment_capacity = 115; // (optional) FIX may supply this value, MBUS/MKT will allow MMRHost to control it and return it as an ack = Yes
    sfixed32 local_port = 118; // (optional) FIX may supply this value, MBUS/MKT will allow MMRHost to control it and return it as an ack = Yes
    YesNo is_unicast = 121;
    MktDataFeed feed_source = 124;
    MktDataFeedSide feed_side = 127;
    MktIfAddr if_addr_request = 130; // Indicates that the feed handler is requesting a particular market data network interface
    YesNo ack = 133;
    google.protobuf.Timestamp timestamp = 136;
}


    
message RingProcNotice {
    message PKey {
        
        string ring_name = 10; // name of a ring managed by a process MMREnqueue endpoint (eg. MMR.Proc.003456)
        sfixed32 process_iD = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    uint32 app_iD = 100;
    string app_name = 103;
    RingProtocol ring_proto = 106;
    sfixed32 ring_segment_count = 109; // (optional) FIX may supply this value, MBUS/MKT will allow MMRHost to control it and return it as an ack = Yes
    sfixed32 ring_segment_capacity = 112; // (optional) FIX may supply this value, MBUS/MKT will allow MMRHost to control it and return it as an ack = Yes
    uint32 u_sN = 115; // update sequence number
    google.protobuf.Timestamp timestamp = 118;
}


    
message RingProcNoticeAck {
    message PKey {
        
        string ring_name = 10; // name of a ring managed by a process MMREnqueue endpoint (eg. MMR.Proc.003456)
        sfixed32 process_iD = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    uint32 app_iD = 100;
    string app_name = 103;
    uint32 u_sN = 106; // update sequence number
    google.protobuf.Timestamp timestamp = 109;
}


    
message RingProcNoticeRequest {
    message PKey {
        
        sfixed32 process_iD = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    uint32 app_iD = 100;
    string app_name = 103;
    google.protobuf.Timestamp timestamp = 106;
}


/*
    RiskAggGroupState records are published by AggRiskServer immediately if/when a position update occurs. These records are consumed by execution engines and influence child order position markup.
*/    
message RiskAggGroupStateV5 {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13;
        string client_firm = 16;
        string agg_group = 19;
        DateKey trade_date = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    AggGroupType agg_group_type = 100;
    sfixed32 open_position = 103; // start-of-day position (usually from clearing firm)
    sfixed32 bot_quantity = 106; // quantity bot today (all parent executions)
    sfixed32 sld_quantity = 109; // quantity sld today (all parent executions)
    sfixed32 sld_short_qty = 112; // quantity sld short today (all parent executions)
    sfixed32 extern_opn_pos = 115; // start-of-day position (extern reports)
    sfixed32 extern_bot_quan = 118; // quantity bot today (extern reports)
    sfixed32 extern_sld_quan = 121; // quantity sld today (extern reports)
    string source = 124; // source server
    google.protobuf.Timestamp timestamp = 127;
}


    
message RiskAnalyzerRequest {


    MbusInfo descriptor = 1;
    
    string access_key = 100; // client access key (password)
    string accounts = 103;
    GetAction action = 106;
}


    
message RiskClassControl {
    message PKey {
        
        string accnt = 10;
        string risk_class = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string risk_class_label = 100; // risk class label
    sfixed32 max_dDelta = 103; // maximum symbol abs($delta) (suspends c/p trading)
    sfixed32 min_va_rs50 = 106; // (xRM) max loss [underlier +/- 50%]
    sfixed32 max_va_rs50 = 109; // (xRM) max gain [underlier +/- 50%]
    sfixed32 min_va_rs15 = 112; // (xRM) max loss [underlier +/- 15%]
    sfixed32 max_va_rs15 = 115; // (xRM) max gain [underlier +/- 15%]
    sfixed32 min_wt_vega = 118; // (xRM) minimum symbol net wtVega;wtVega = ve * vol / sqrt(max(0.1, years * 4))
    sfixed32 max_wt_vega = 121; // (xRM) maximum symbol net wtVega;wtVega = ve * vol / sqrt(max(0.1, years * 4))
    float max_wt_ve_pct_m1 = 124; // % of min/max symbol wtVega in M1 {days < 10} expirations
    float max_wt_ve_pct_m2 = 127; // % of min/max symbol wtVega in M2 {10 < days < 25} expirations
    float max_wt_ve_pct_m3 = 130; // % of min/max symbol wtVega in M3 {25 < days < 65} expirations
    float max_wt_ve_pct_m4 = 133; // % of min/max symbol wtVega in M4 {65 < days < 130} expirations
    float max_wt_ve_pct_m5 = 136; // % of min/max symbol wtVega in M5 {130 < days} expirations
    string modified_by = 139; // user who last modified this record
    google.protobuf.Timestamp timestamp = 142; // timestamp of last modification
}


    
message RiskControlRequest {


    MbusInfo descriptor = 1;
    
    string accnt = 100;
    GetAction action = 103;
}


    
message RiskCubeAggregation {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_records = 100; // total number of records in aggregation row
    sfixed32 num_stk = 103; // number of stock risk records in aggregation row
    sfixed32 num_opt = 106; // number of future risk records in aggregation row
    sfixed32 num_fut = 109; // number of option risk records in aggregation row
    float skew_dD = 112; // dd (deep downside) skew metric (xde < -0.30)
    float skew_dN = 115; // dn (downside) skew metric (-0.30 < xde < -0.10)
    float skew_aT = 118; // at (atm) skew metric (-0.10 < xde < +0.10)
    float skew_uP = 121; // up (upside) skew metric (+0.10 < xde < +0.30)
    float skew_dU = 124; // du (deep upside) skew metric (+0.30 < xde)
    sfixed32 sh_opn_pos = 127; // shares (start-of-day)
    sfixed32 fc_opn_pos = 130; // futures contracts (start-of-day)
    sfixed32 cn_opn_pos = 133; // options contracts (start-of_day)
    float cn_atm_equiv = 136; // atm equivalent contracts; (opr.cnOpnPos + opr.cnBot - opr.cnSld) * opr.ve / opr.atmVega
    sfixed32 sh_bot = 139; // shares bot
    sfixed32 sh_sld = 142; // shares sld
    sfixed32 sh_sld_shrt = 145; // shares sld short
    sfixed32 sh_cur_pos = 148; // current share position = open + bot - sld
    sfixed32 fc_bot = 151; // future contracts bot
    sfixed32 fc_sld = 154; // future contracts sld
    sfixed32 fc_cur_pos = 157; // current future contract position = open + bot - sld
    sfixed32 cn_bot = 160; // option contracts bot
    sfixed32 cn_sld = 163; // option contracts sld
    sfixed32 cn_opened = 166; // option contracts opened
    sfixed32 cn_closed = 169; // option contracts closed
    sfixed32 cn_cur_pos = 172; // current option contract position = open + bot - sld
    sfixed32 unit_opn_pos = 175; // effective opening position (shares or cn * underliersPerCn) (start-of-day)
    sfixed32 unit_cur_pos = 178; // effective current position (shares or cn * underliersPerCn) (start-of-day + trades)
    sfixed32 unit_qty_bot = 181; // effective shares bot (shares or cn * underliersPerCn)
    sfixed32 unit_qty_sld = 184; // effective shares sld (shares or cn * underliersPerCn)
    float day_pn_l = 187; // day pnl
    float day_dn_pn_l = 190; // day pnl (delta neutral)
    float day_trd_delta = 193; // day trade delta
    float day_trd_dDelta = 196; // day trade $delta
    float day_trd_gamma = 199; // day trade gamma
    float day_trd_dGamma = 202; // day trade $gamma
    float day_trd_vega = 205; // day trade vega
    float day_trd_wVega = 208; // day trade wVega (vol * vega)
    float day_trd_tVega = 211; // day trade wVega (vega / sqrt(max(0.1, years * 4)))
    float day_trd_wt_vega = 214; // day trade wtVega (vol * vega / sqrt(max(0.1, years * 4)))
    float day_trd_theta = 217; // day trade theta
    float day_edge_opened = 220; // day option edge opened (requires a theo model)
    float day_edge_closed = 223; // day option edge closed (requires a theo model)
    float opn_div_pn_l = 226; // dividends paid/received (since prior period)
    float opn_htb_pn_l = 229; // HTB cash paid / received
    float opn_pnl_vol_mark = 232; // (cur.surface - pr.surface) * cnOpnClr * und/cn
    float opn_pnl_prv_mark = 235; // (cur.mid - pr.mid) * cnOpnClr * udn/cn
    float opn_pnl_clr_mark = 238; // (cur.mid - pr.clr) * cnOpnClr * und/cn
    float opn_mark_brk_mny = 241; // (cur.surface - cur.mid) * cnOpnClr * und/cn
    float opn_theo_edge = 244; // opening edge (edge at start-of-day) (requires a theo model)
    float pos_theo_edge = 247; // current edge (positions + trades) (requires a theo model)
    float opn_pnl_de = 250; // open position * mult * hedgeDe * dUPrc			( pnlSD = sum(pnlDe) [stock + futures + options] )
    float opn_pnl_ga = 253; // open position * mult * 0.5 * optGamma * dUPrc * dUPrc
    float opn_pnl_th = 256; // open position * mult * optTheta * dTime
    float opn_pnl_ve = 259; // open position * mult * optVega * dVol
    float opn_pnl_sl = 262; // open position * mult * vol/uPrc * slope * optVega * dUPrc
    float opn_pnl_rate = 265; // open position * mult * optRho * dRate
    float opn_pnl_sDiv = 268; // open position * mult * optPhi * dSDv
    float opn_pnl_dDiv = 271; // open position * mult * optPhi * dDDv
    float opn_pnl_err = 274; // unattributed pnl: SR Vol PnL - opnPnLDe - opnPnLGa - opnPnLTh - opnPnLVe - opnPnLRat - opnPnLSDiv - opnPnLDDiv
    float opn_edge_change = 277; // open position * mult * (tEdge - tEdgePr) (requires a theo model)
    float pos_delta = 280; // live position * mult * hedgeDe
    float pos_dDelta = 283; // live position * mult * hedgeDe * UPrc
    float pos_dBeta = 286; // live position * mult * hedgeDe * beta * UPrc
    float pos_gamma = 289; // live position * mult * optGamma
    float pos_dGamma = 292; // live position * mult * optGamma * uPrc * uPrc / 100
    float pos_vega = 295; // live position * mult * optVega
    float pos_wVega = 298; // live position * mult * optVega * iVol
    float pos_tVega = 301; // live position * mult * optVega / sqrt(max(0.1, years * 4))
    float pos_wt_vega = 304; // live position * mult * optVega * iVol / sqrt(max(0.1, years * 4))
    float pos_volga = 307; // live position * mult * optVolga
    float pos_vanna = 310; // live position * mult * optVanna
    float pos_theta = 313; // live position * mult * optTheta
    float pos_rho = 316; // live position * mult * optRho
    float pos_phi = 319; // live position * mult * optPhi
    float pos_notional = 322; // live position * mult * uPrc
    float pos_mkt_value = 325; // live position * mult * cur.surface
    float pos_prem_oPar = 328; // live position * mult * premium over parity
}


/*
    RiskCubeDetail records are published by CoreRiskServers and are designed to be aggregated and analyzed over time.
    RiskCubeDetail records are published to the SpiderRock Archive Host data pipeline at the end of each trading period.
*/    
message RiskCubeDetailV5 {
    message PKey {
        
        string accnt = 10; // SR Accnt
        OptionKey sec_key = 13;
        SecType sec_type = 16; // [Call, Put, Stock, Future, Cash]
        DateKey trade_date = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    RiskCubeVersion version = 100;
    string client_firm = 103; // SR Client Firm
    string clearing_firm = 106; // Clearing Firm
    string clearing_accnt = 109; // Clearing Firm Accnt
    string risk_server_code = 112; // SR RiskServer (server that published this record)
    string view_group1 = 115; // Client defined view group #1 (can be fitered/aggregated)
    string view_group2 = 118; // Client defined view group #2 (can be fitered/aggregated)
    string view_group3 = 121; // Client defined view group #3 (can be fitered/aggregated)
    TickerKey ticker = 124; // Risk Symbol (underlier for equities; product group for future/option complexes)
    string risk_class = 127; // Symbol risk class (from SymbolControl record)
    SymbolType symbol_type = 130; // Symbol type
    float beta = 133; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 136;
    string sector = 139; // Client defined sector (from SymbolControl record)
    sfixed32 ind_num = 142; // Ind Num (00)
    sfixed32 sub_num = 145; // Sub Num (0000)
    sfixed32 grp_num = 148; // Grp Num (000000)
    sfixed32 nbr_num = 151; // Nbr Num (00000000)
    int32 e_days = 154; // days to next earnings [-5, +30]
    int32 d_days = 157; // days to next dividend [-5, +30]
    float x_delta = 160; // calls = +0.5 - delta; puts = -0.5 - delta
    ExpCode exp_code = 163; // Time-to-expiry code (W1, W2, M1, M2, M34, M56, M7C, Y1, Y2)
    SkewCode skew_code = 166; // Skew bucket code (Dd=Deep DownSide, Dn = DownSide, At = ATM, Up = UpSide, DU = FarUpSide)
    EDaysCode e_days_code = 169; // Days to next earnings event (if any)
    iVolRange i_vol_range = 172; // Implied ATM Vol Range
    float skew_dD = 175; // dd (deep downside) skew metric (xde < -0.30)
    float skew_dN = 178; // dn (downside) skew metric (-0.30 < xde < -0.10)
    float skew_aT = 181; // at (atm) skew risk metric (-0.10 < xde < +0.10)
    float skew_uP = 184; // up (upside) skew risk metric (+0.10 < xde < +0.30)
    float skew_dU = 187; // du (far upside) skew risk metric (+0.30 < xde)
    sfixed32 sh_opn_pos = 190; // shares (start-of-day)
    sfixed32 fc_opn_pos = 193; // futures contracts (start-of-day)
    sfixed32 cn_opn_pos = 196; // options contracts (start-of-day)
    float cn_atm_equiv = 199; // atm equivalent contracts; (opr.cnOpnPos + opr.cnBot - opr.cnSld) * opr.ve / opr.atmVega
    sfixed32 sh_bot = 202; // shares bot
    sfixed32 sh_sld = 205; // shares sld
    sfixed32 sh_sld_shrt = 208; // shares sld short
    sfixed32 fc_bot = 211; // future contracts bot
    sfixed32 fc_sld = 214; // future contracts sld
    sfixed32 cn_bot = 217; // option contracts bot
    sfixed32 cn_sld = 220; // option contracts sld
    sfixed32 cn_opened = 223; // option contracts opened
    sfixed32 cn_closed = 226; // option contracts closed
    string opn_dir = 229; // open (start-of-day) direction (LN or SH)
    string pos_dir = 232; // current (start-of-day + trades) direction (LN or SH)
    sfixed32 unit_opn_pos = 235; // effective opening position (shares or cn * underlierPerCn) (start-of-day)
    sfixed32 unit_cur_pos = 238; // effective current position (shares or cn * underlierPerCn) (start-of-day + trades)
    sfixed32 unit_qty_bot = 241; // effective shares bot (shares or cn * underlierPerCn)
    sfixed32 unit_qty_sld = 244; // effective shares sld (shares or cn * underlierPerCn)
    float day_pnl = 247; // day pnl
    float day_dn_pnl = 250; // day pnl (delta neutral)
    float day_trd_delta = 253; // day trade delta
    float day_trd_dDelta = 256; // day trade $delta
    float day_trd_gamma = 259; // day trade gamma
    float day_trd_dGamma = 262; // day trade $gamma
    float day_trd_vega = 265; // day trade vega
    float day_trd_wVega = 268; // day trade wVega (vega * vol)
    float day_trd_tVega = 271; // day trade tVega (vega / sqrt(max(0.1, years * 4)))
    float day_trd_wt_vega = 274; // day trade wtVega (vega * vol / sqrt(max(0.1, years * 4)))
    float day_trd_theta = 277; // day trade theta
    float day_edge_opened = 280; // day theo option edge opened (requires a theo model)
    float day_edge_closed = 283; // day theo option edge closed (requires a theo model)
    double day_mny_bot = 286; // day money bot
    double day_mny_sld = 289; // day money sld
    float opn_pnl_vol_mark = 292; // (cur.surface - pr.surface) * cnOpnClr * upc
    float opn_pnl_mid_mark = 295; // (cur.mid - pr.mid) * cnOpnClr * upc
    float opn_pnl_clr_mark = 298; // (cur.mid - pr.clr) * cnOpnClr * upc
    float opn_mark_brk_mny = 301; // (cur.surface - cur.mid) * cnOpnClr * upc
    float opn_theo_edge = 304; // opening edge (edge at the end of prior period) (requires a theo model)
    float pos_theo_edge = 307; // current edge (opening positions + trades) (requires a theo model)
    float t_vol_move = 310; // LN(tVol / tVolPr)
    float t_edge_move = 313; // LN(tVol / iVol) - LN(tVolPr / iVolPr)
    float t_edge = 316; // LN(tVol / iVol)
    float opn_pnl_de = 319; // open position * mult * hedgeDe * dUPrc			( pnlSD = sum(pnlDe) [stock + futures + options] )
    float opn_pnl_ga = 322; // open position * mult * 0.5 * optGamma * dUPrc * dUPrc
    float opn_pnl_th = 325; // open position * mult * optTheta * dTime
    float opn_pnl_ve = 328; // open position * mult * optVega * dVol
    float opn_pnl_vo = 331; // open position * mult * 0.5 * optVolga * dVol * dVol
    float opn_pnl_va = 334; // open position * mult * optVanna * dVol * dUPrc
    float opn_pnl_sl = 337; // open position * mult * vol/uPrc * slope * optVega * dUPrc
    float opn_pnl_rate = 340; // open position * mult * optRho * dRate
    float opn_pnl_sDiv = 343; // open position * mult * optPhi * dSDv
    float opn_pnl_dDiv = 346; // open position * mult * optPhi * dDDv
    float opn_pnl_err = 349; // unattributed pnl: SR Vol Pnl - opnPnlDe - opnPnlGa - opnPnlTh - opnPnlVe - opnPnlRat - opnPnlSDiv - opnPnlDDiv
    float opn_edge_change = 352; // open position * mult * (tEdge - tEdgePr) (requires a theo model)
    float pos_delta = 355; // live position * mult * hedgeDe
    float pos_dDelta = 358; // live position * mult * hedgeDe * UPrc
    float pos_dBeta = 361; // live position * mult * hedgeDe * beta * UPrc
    float pos_gamma = 364; // live position * mult * optGamma
    float pos_dGamma = 367; // live position * mult * optGamma * uPrc * uPrc / 100
    float pos_vega = 370; // live position * mult * optVega
    float pos_wVega = 373; // live position * mult * optVega * iVol
    float pos_tVega = 376; // live position * mult * optVega / sqrt(max(0.1, years * 4))
    float pos_wt_vega = 379; // live position * mult * optVega * iVol / sqrt(max(0.1, years * 4))
    float pos_volga = 382; // live position * mult * optVolg
    float pos_vanna = 385; // live position * mult * optVanna
    float pos_theta = 388; // live position * mult * optTheta
    float pos_rho = 391; // live position * mult * optRho
    float pos_phi = 394; // live position * mult * optPhi
    float pos_notional = 397; // live position * mult * uPrc
    float pos_mkt_value = 400; // live position * mult * SR surface mark
    float pos_prem_oPar = 403; // live position * mult * premium over parity
    float atm_vol = 406; // atm volatility
    float sym_vol = 409; // underlier symbol volatility (term.21d;censored)
    float sr_slope = 412; // strike veSlope (sr surface;options only)
    float prc_sVol = 415; // SR Surface Vol
    float prc_tOpx = 418; // SR Surface Price
    float prc_yOpx = 421; // SR Yesterday Surface Price
    float prc_uPrc = 424; // underlier price
    float prc_years = 427; // years-to-expiry
    float prc_rate = 430; // discount rate-to-expiry
    float prc_sdiv = 433; // continuous stock div rate-to-expiry
    float prc_ddiv = 436; // cumulative discrete dividend paid through expiry
    float u_prc_ratio = 439; // stock price multiplier
    float u_prc_move = 442; // Underlier price change
    float i_vol_move = 445; // Implied vol change (fixed strike ivol change from prior period)
    float ex_div_amt = 448; // estimated exDiv amount (if any)
    float borrow_rate = 451; // estimated stock borrow rate (if any)
    int32 model_type = 454; // SRPricingLib.CalcModelType
    sfixed32 underliers_per_cn = 457; // underliers per contract
    UnderlierType underlier_type = 460; // underlier type (used for option pricing)
    float point_value = 463; // value of one point
    Currency point_currency = 466;
    float tick_value = 469; // value of one tick
    Multihedge multihedge = 472;
    TickerKey multihedge_source = 475; // MH Ticker Key (starts with '_') (if exists)
    float multihedge_pVRatio = 478; // pv multiplier (fraction of underlier value (uPerCn x uPrc) / SUM(uPerCn x uPrc) associated with this fragment
    float span_prc_inc_up = 481; // default (exchange) span price up increment for this asset
    float span_prc_inc_dn = 484; // default (exchange) span price dn increment for this asset
    float span_vol_inc = 487; // default (exchange) span volatility increment for this asset
    SpanType prc_span_type = 490; // exchange prcSpan type
    SpanType vol_span_type = 493; // exchange volSpan type
    SpanPricingModel span_pricing_model = 496; // Exchange-defined model for SPAN option pricing calcs
    MarginType margin_type = 499; // margin slide type: NMS_Equity = +/- 15%, NMS_Index = -8%/+6%, NMS_Medium = +/-10%
    google.protobuf.Timestamp timestamp = 502;
}


    
message RiskFirmRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SysEnvironment sys_environment = 100; // original (source) sys environment [Stable, Current, etc]
    RunStatus run_status = 103; // original (source) run status [Prod,Beta]
    SysRealm sys_realm = 106; // original (source) sysRealm [NMS, CME, etc.]
    string change_reason = 109;
    string client_firm = 112;
    string risk_group = 115;
    sfixed32 leaves_sh = 118;
    sfixed32 leaves_fc = 121;
    sfixed32 leaves_cn = 124;
    double leaves_dd = 127;
    double dd_bot = 130;
    double dd_sld = 133;
    double ve_bot = 136;
    double ve_sld = 139;
    double wt_ve_bot = 142;
    double wt_ve_sld = 145;
    double pr_bot = 148;
    double pr_sld = 151;
    sfixed32 sh_bot = 154;
    sfixed32 sh_sld = 157;
    sfixed32 fc_bot = 160;
    sfixed32 fc_sld = 163;
    sfixed32 cn_bot = 166;
    sfixed32 cn_sld = 169;
    double haircut_day = 172;
    double haircut_acc = 175;
    double notional_bot = 178;
    double notional_sld = 181;
    double notional_abs = 184;
    double notional_pLvs_buy = 187;
    double notional_pLvs_sell = 190;
    sfixed32 counter = 193;
    google.protobuf.Timestamp timestamp = 196;
}


    
message RiskRecordRequest {


    MbusInfo descriptor = 1;
    
    string symbol = 100;
    string account = 103;
    GetAction action = 106;
    google.protobuf.Timestamp timestamp = 109; // checkpoint timestamp
}


/*
    RootDefinition records are sourced from the listing exchange for future options and from OCC for US equity options.  Records are updated as SpiderRock receives changes.
*/    
message RootDefinition {
    message PKey {
        
        TickerKey root = 10;
    }

    message Underlying {
        
        TickerKey ticker = 199;
        float spc = 202; // note: _root basket = sum(spc * ticker) / 100
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // master underlying
    string osi_root = 103; // long version of the root.  the short version is used in the TickerKey (for example RYAAY1, not RYAA1)
    TickerKey ccode = 106;
    ExpirationMap expiration_map = 109;
    UnderlierMode underlier_mode = 112;
    OptionType option_type = 115; // indicator for option type
    Multihedge multihedge = 118; // indicates type of multihedge
    ExerciseTime exercise_time = 121; // Exercise time type
    ExerciseType exercise_type = 124; // Exercise style
    TimeMetric time_metric = 127; // trading time metric - 252 or 365 trading days or a weekly cycle type
    PricingModel pricing_model = 130;
    MoneynessType moneyness_type = 133; // moneyness (xAxis) convention: PctStd = (K / fUPrc - 1) / (axisVol * RT), LogStd = LOG(K/fUPrc) / (axisVol * RT), NormStd = (K - fUPrc) / (axisVol * RT)
    PriceQuoteType price_quote_type = 136; // quoting style for the option series on the exchange, price (standard price quote) or volatility quoted (vol points)
    VolumeTier volume_tier = 139;
    sfixed32 position_limit = 142; // max contract limit
    string exchanges = 145; // exchange codes
    float tick_value = 148; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 151; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 154;
    double strike_scale = 157; // manual strike price adjustment multiplier (used for some CME products if set, otherwise displayFactor is used) (okey_xx = strikePrice * manualStrikeScale)
    float strike_ratio = 160; // note: effective strike = strike * strikeRatio - cashOnExercise
    float cash_on_exercise = 163; // note: cashOnExercise is positive if it decreases the effective strike price
    sfixed32 underliers_per_cn = 166; // note: always 100 if underlying list is in use
    double premium_mult = 169; // note: OCC premium/strike multiplier (usually 100)
    AdjConvention adj_convention = 172;
    OptPriceInc opt_price_inc = 175;
    PriceFormat price_format = 178; // price display format
    Currency trade_curr = 181;
    Currency settle_curr = 184;
    Currency strike_curr = 187;
    TickerKey default_surface_root = 190; // fallback ticker to use for option surfaces if no native surfaces are available
    google.protobuf.Timestamp timestamp = 193;
    repeated Underlying underlying = 196;
}


    
message RouteDefinition {
    message PKey {
        
        string routing_code = 10;
        SysEnvironment sys_environment = 13;
        SysRealm sys_realm = 16; // original (source) sysRealm [NMS, CME, etc.]
    }

    message Throttle {
        
        string ex_dest = 334; // note: '*' = route for each individual destination, 'ROUTE'= cumulative rate for the route
        sfixed32 msg_rate = 337; // maximum message rate per second for this route (<= zero mean nothing will be routed to this exDest)
        EquityFeatures equity_features = 340;
        EqtOptFeatures eqt_opt_features = 343;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 100; // server responsible for handling these routes
    RouteControl route_control = 103; // Enabled = two-way; Disabled = disconnect/logout immediately; SafeMode = Cancel open orders / reject new orders; Unused = Remove route from gateway
    MonitorCode monitor_code = 106;
    string session_giveup_firm = 109; // execution firm (eg. 659) associated with this session
    DestinationType destination_type = 112; // type of industry member
    string broker_mPID = 115; // either a FINRA assigned MPID (OATS reportable) or an SR assigned broker tag (starts with '$') [default value for this session; can be overridden by an endpoint handler]
    string sponsor_client_firm = 118; // the sponsor client firm that is the primary owner of the route.  Required but can be 'SR'.  SponsorClientFirm can see (but not edit) route definitions.
    string client_firm_list = 121; // (optional) list of additional client firms (sponsor, core, or sub) that can associate with this definition [ clientFirm,clientFirm,clientFirm,... ]
    string account_list = 124; // (optiona) valid accounts for this route. if non-empty this list is exclusive.  MSDOS-style wildcards ok.  [ account,account,account,... ]
    SessionType session_type = 127;
    SessionResetType session_reset_type = 130; // When does the session reset sequence numbers
    FixFramework fix_framework = 133;
    DeliveryCoding delivery_coding_eqt = 136; // (street side routes only) indicates what style of delivery instruction coding this session utilizes (coding is implemented inside each template)
    DeliveryCoding delivery_coding_fut = 139;
    DeliveryCoding delivery_coding_opt = 142;
    string template_name = 145; // name of FixMsgTemplate (rewrite template) used for this session (if any)
    SessionServices session_services = 148; // Manual=slow lines (no IOC; slow no-ack/cxl)
    SessionFeatures session_features = 151;
    Protocol protocol = 154;
    string sender_iD = 157;
    string target_iD = 160; // can be (*) if connectType = Acceptor
    string sender_sub_iD = 163; // (depricated in FixBase)
    string target_sub_iD = 166; // (depricated in FixBase)
    string session_user_name = 169; // deprecated.  remove once accessid and secretkey are used
    string session_password = 172;
    string access_id = 175; // Name of entity requesting access: a username, remote host ID
    string access_secret_key = 178; // Secret: a password or certificate
    google.protobuf.Timestamp access_expires = 181; // Access expires on this date
    string access_id2 = 184; // Second Name of entity requesting access: a username, remote host ID
    string access_secret_key2 = 187; // Second Secret key. a password or certificate
    google.protobuf.Timestamp access_expires2 = 190; // Second Access expires on this date
    ConnectType initiator = 193;
    FailOverRule fail_over = 196;
    string ip_addr = 199;
    sfixed32 ip_port = 202;
    string if_addr = 205;
    string ip_addr2 = 208;
    sfixed32 ip_port2 = 211;
    string if_addr2 = 214;
    YesNo use_jumbo_rcv_buffer = 217; // should be true only for routes with large scale sweeping activity
    double sweep_trigger_order_metric = 220; // determines flush order if multiple routes are part of a sweep group (largest number goes first)
    YesNo is_cxl_on_disconnect = 223;
    YesNo do_send_pending_reports = 226;
    Persistance persistance = 229;
    string rte_handler = 232; // replaces enum endpointcode with a string.  (binary overlay with previous "routeGroup" field)
    string destinations = 235; // Order sources.  Valid values:  SpdrSource enumeration, FIX routing codes.
    string session_sr_accnt = 238; // If all inbound/outbound mess are mapped to the same internal account, that account belongs here
    string session_sr_user_name = 241; // If all inbound/outbound mess are mapped to the same internal username, that username belongs here
    sfixed32 hb_interval = 244; // number of seconds
    string start_time = 247; // session start time (negative means prior day)	Mon-Fri for Daily, Sun-Fri for WeekDay Sessions, Sun for Weekly sessions
    string stop_time = 250; // session stop time								Mon-Fri for Daily, Sun-Fri for WeekDay Sessions, Fri for Weekly sessions
    DropMsgFilter drop_msg_filter = 253;
    YesNo enable_cross_notice = 256; // enable forwarding of CrossNotice messages (accountList must also contain the accnt of the CrossNotice being forwarded)
    YesNo enable_dark_quote_requests = 259; // enable forwarding of DarkQuoteRequest messages
    YesNo enable_mass_quote_requests = 262; // enable forwarding of MassQuoteRequest messages
    YesNo eventus_upload = 265; // upload FIX log file to Eventus for processing
    YesNo regulation606 = 268; // This route is subject to regulation 606 reporting
    string comment = 271; // a comment for admin viewer
    string tag_value_pairs = 274; // route specific FIX tag value pairs to add to each message (tag=value, comma-delimited)
    google.protobuf.Timestamp timestamp = 277; // timestamp of last modification
    string user_name = 280;
    sfixed32 init_branch_code = 283; // for CBOE.  Initial branchcode to use on their orders
    sfixed32 max_risk_canary_errors = 286; // If this threshold is exceeded, the route enters safe-mode.  Counter resets periodically. (-1 = disable route safe mode canary triggering)
    YesNo accept_logon_seq_num = 289; // Accept incoming logon sequence number
    sfixed32 max_resend_request_size = 292; // Max Request request size
    sfixed32 max_reconnect_attempts = 295; // Max Reconnection Attempts
    sfixed32 max_stk_child_qty = 298; // (default=100,000) maximum child order size for this route (should reflect the maximum sizing of the downstream system)
    float max_stk_child_money = 301; // (default=$5m)
    sfixed32 max_fut_child_qty = 304; // (default=10,000)
    float max_fut_child_money = 307; // (default=unlimited)
    sfixed32 max_opt_child_qty = 310; // (default=10,000)
    float max_opt_child_money = 313; // (default=$10m)
    sfixed32 max_messages_per_day = 316; // (0=unlimited)
    EquityFeatures equity_features = 319; // exDest version takes precidence (if not None)
    EqtOptFeatures eqt_opt_features = 322;
    FutureFeatures future_features = 325;
    FutOptFeatures fut_opt_features = 328;
    repeated Throttle throttle = 331;
}


    
message RouteDefinitionRequest {


    MbusInfo descriptor = 1;
    
    string account = 100;
}


    
message RouteNewOrderCounter {
    message PKey {
        
        string ex_dest = 10;
        string routing_code = 13;
        string exec_engine = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 new_order_counter = 100;
    google.protobuf.Timestamp timestamp = 103;
}


    
message RouteThrottleCounter {
    message PKey {
        
        string ex_dest = 10;
        string routing_code = 13;
        string exec_engine = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo conn_ready = 100; // EE <-> Street connection is heartbeating and ready
    LineIntegrity line_integrity = 103;
    string last_integrity_err = 106;
    string last_remote_text = 109;
    sfixed32 max_new_ord_rate = 112; // max configuration new order rate
    sfixed32 max_cancel_rate = 115; // max configuration cancel rate
    double cur_new_msg_counter = 118;
    double cur_cxl_msg_counter = 121;
    double current_new_latency = 124;
    string current_new_latency_source = 127;
    double current_cxl_latency = 130;
    string current_cxl_latency_source = 133;
    YesNo can_send = 136;
    sfixed32 reject_count = 139;
    string last_reject_error = 142;
    google.protobuf.Timestamp last_reject_dttm = 145;
    sfixed32 cxl_reject_count = 148;
    sfixed32 order_count = 151;
    double avg_order_latency = 154;
    double min_order_latency = 157;
    double max_order_latency = 160;
    sfixed32 cancel_count = 163;
    double avg_cancel_latency = 166;
    double min_cancel_latency = 169;
    double max_cancel_latency = 172;
    sfixed32 max_live_order_count = 175; // maximum number of open orders
    sfixed32 max_pend_new_orders = 178; // maximum number of pending/unacked orders
    sfixed32 max_pend_cxl_orders = 181; // maximum number of pending/unacked cancels
    float max_orders_per_sec = 184; // maximum orders sent per second
    float max_cancels_per_sec = 187; // maximum cancels sent per second
    sfixed32 num_int_err = 190;
    sfixed32 num_hi_lat = 193;
    sfixed32 num_opn_lmt = 196;
    sfixed32 num_new_win = 199;
    sfixed32 num_cxl_win = 202;
    sfixed32 num_new_thrtl = 205;
    sfixed32 num_cxl_thrtl = 208;
    sfixed32 num_err_del = 211;
    sfixed32 num_hold = 214;
    sfixed32 logon_recv = 217; // number of session Logon attempts
    sfixed32 logon_sent = 220; // number of session Logon responses
    sfixed32 resend_recv = 223; // number of resend initiations (generally indicates that inbound messages were dropped)
    sfixed32 resend_sent = 226; // number of resend responses (generally indicates that outbound messages were dropped)
    sfixed32 new_order_sent = 229;
    sfixed32 cancel_req_sent = 232;
    sfixed32 seq_number_in = 235;
    sfixed32 seq_number_out = 238;
    YesNo is_session_alive = 241;
    google.protobuf.Timestamp timestamp = 244;
}


    
message SOQConstituentSymbolMap {
    message PKey {
        
        TickerKey ticker = 10; // Underlying symbol
        OptionKey okey = 13; // Constituent symbol
        string soq_identifier = 16; // SOQ dissemination symbol
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SOQSymbolCondition sym_cond = 100; // Condition code for constituent symbol
    sfixed64 src_timestamp = 103; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 106; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with f
    google.protobuf.Timestamp timestamp = 109;
}


    
message SOQStrikeRangeUpdate {
    message PKey {
        
        TickerKey ticker = 10; // Underlying symbol
        string soq_identifier = 13; // SOQ dissemination symbol
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float lower_strike_prc = 100; // SOQ lower strike price
    float upper_strike_prc = 103; // SOQ upper strike price
    sfixed64 src_timestamp = 106; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 109; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with f
    google.protobuf.Timestamp timestamp = 112;
}


    
message SRA_AccountConfig {
    message PKey {
        
        string accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 seq = 100; // sequence number of accnt
    AccountStatus account_status = 103; // status of this account
    SraAccountType sra_account_type = 106; // type of account
    Custodian custodian = 109; // custodian firm where account is held
    string custodian_accnt = 112; // account number as known to the custodian
    string first_name = 115; // first name of client
    string last_name = 118; // last name of client
    google.protobuf.Timestamp start_date = 121; // date of first SRA trade
    google.protobuf.Timestamp end_date = 124; // date account was closed/disabled
    string strategy_mapping_code = 127; // code assigned by custodian (rep code, gnumber, etc) that maps to an SRA strategy
    string advisor_mapping_code = 130; // code assigned by custodian (rep code, gnumber, FA Number, etc) that maps to an Institutional Advisor
    string institutional_advisor = 133; // institutional advisor code (see SRA_Advisor)
    string branch_advisor = 136; // branch advisor code (see SRA_Advisor)
    string financial_advisor = 139; // financial advisor code (see SRA_Advisor)
    string umh_trade_account = 142; // only for UmhChild accounts; the trading account that this child account's positions are rolled up into and traded out of
    string omnibus_account = 145; // custodian block account. Attached to any account under custodian umbrella for omnibus trading
    float restricted_cash = 148; // minimum amount of cash that must always exist in the account
    int32 risk_tier = 151; // tier risk parameter set by SR platform
    YesNo customization_override = 154; // allows for OYE + put spreads
    float customized_beta_lB = 157; // beta mandata criteria to call out violation
    float customized_beta_uB = 160; // beta mandata criteria to call out violation
    YesNo static_maturity = 163; // ask for maturity range to set and forget
    int32 routing_template = 166; // set routing template with standard routing choices
    YesNo cmta_eligible = 169; // cmta trading eligible flag
    TaxStatus tax_status = 172; // tax status of account
    SraBillingPayment billing_payment = 175; // Arrears or in Advance payment or average daily balance
    SraBillingMethod billing_method = 178; // Billing based on AUM or Notional or Beta
    SraBillingLevel billing_level = 181; // Bill per strategy or all strategies nettd
    int32 billing_schedule_id = 184; // Billing schedule to reference in Advisor Fee table
    YesNo no_call_away_provision = 187; // Do not allow low basis stock to be called away via covered call
    int32 acc_opt_level = 190; // Opt level (-1, 0, 1, 2, 3); -1 = None
    MarginStatus margin_status = 193; // margin status. aids in risk mandate violations and flag PM accounts
    YesNo stub_bill = 196; // stub bill collected
    string schedule_a = 199; // schedule A code. Blank if not attached to this account
    sfixed32 schedule_aTable = 202; // schedule A table number
    string sales_person = 205; // Name of associate responsible for sale
    google.protobuf.Timestamp sale_start_date = 208; // Date when the sale started
    YesNo prime_brokerage = 211; // Primer brokerage
    ContractType contract_type = 214; // Contract type
    string notes = 217; // text field for SRA notes
    google.protobuf.Timestamp created = 220; // date this config was first created
    string modified_by = 223; // user who last modified this record
    google.protobuf.Timestamp timestamp = 226; // timestamp of last modification
}


    
message SRA_Advisor {
    message PKey {
        
        string code = 10; // unique code to identify this advisor e.g. IOC, CVP, GVA, etc
        SraAdvisorType advisor_type = 13; // type of advisor in the institutional/branch/financial advisor hierarchy
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string name = 100; // name of advisor
    string parent_iA = 103; // if this is a BA or FA, the parent IA it belongs to
    string parent_bA = 106; // if this is a FA, the parent BA it belongs to
    BillProcessType bill_process_type = 109; // GEN=SRA Generates, VAL=Advisor generates and SRA validates
    string contact_person = 112; // name of contact person
    string contact_email = 115; // email of contact person
    string ops_person = 118; // name of ops person
    string ops_email = 121; // email of ops person
    string billing_person = 124; // name of billing person
    string billing_email = 127; // email of billing person
    string billing_address_street1 = 130; // address street line 1
    string billing_address_street2 = 133; // address street line 2
    string billing_address_city = 136; // address city
    string billing_address_state = 139; // address state
    string billing_address_zip = 142; // address zip
    string crm_id = 145; // CRM ID of this advisor
    string notes = 148; // internal notes about this advisor
    SraBillingPayment default_billing_payment = 151; // Arrears or in Advance payment
    SraBillingMethod default_billing_method = 154; // Notional or AUM billing
    SraBillingLevel default_billing_level = 157; // Bill per strategy or all strategies nettd
    int32 default_billing_schedule_id = 160; // Billing schedule to reference in Advisor Fee table
    YesNo default_stub_bill = 163; // stub bill collected
    string default_schedule_a = 166; // Schedule A code to attach to accounts under this advisor
    ContractType default_contract_type = 169; // Contract type
    string crd = 172;
    AdvisorChannel channel = 175;
    string modified_by = 178; // user who last modified this record
    google.protobuf.Timestamp timestamp = 181; // timestamp of last modification
}


    
message SRA_AdvisorMapping {
    message PKey {
        
        Custodian custodian = 10; // custodian firm where account is held
        string mapping_key = 13; // repCode, Gnumber, etc provided by the custodian that maps to an institutional advisor
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string institutional_advisor = 100; // the institutional advisor code (see SRA_Advisor)
    string branch_advisor = 103; // the branch advisor code (see SRA_Advisor)
    string financial_advisor = 106; // the financial advisor code (see SRA_Advisor)
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


    
message SRA_Custodian {
    message PKey {
        
        Custodian custodian = 10; // custodian firm where account is held
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string abbreviation = 100; // letter unique to this custodian. Used in the account name e.g. A.T.1 belong to TD
    string internal_mPID = 103; // default value to use in accountconfig for new accounts
    string theo_model = 106; // default value to use in accountconfig for new accounts
    string sym_ctrl_accnt = 109; // default value to use in accountconfig for new accounts
    string omni_accnt = 112; // default omni accnt to fill in sra_accountconfig for new accounts
    string omni_custodian_accnt = 115; // default omni custodian accnt
    string modified_by = 118; // user who last modified this record
    google.protobuf.Timestamp timestamp = 121; // timestamp of last modification
}


    
message SRA_FeeTable {
    message PKey {
        
        sfixed32 billing_schedule_id = 10; // billing schedule identifier
        Strategy strategy = 13; // the SRA strategy
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float tier1 = 100; // upper bound of tier 1
    float tier2 = 103; // upper bound of tier 2
    float tier3 = 106; // upper bound of tier 3
    float tier4 = 109; // upper bound of tier 4
    float tier5 = 112; // upper bound of tier 5
    float fee1 = 115; // the fee for tier 1
    float fee2 = 118; // the fee for tier 2
    float fee3 = 121; // the fee for tier 3
    float fee4 = 124; // the fee for tier 4
    float fee5 = 127; // the fee for tier 5
    string modified_by = 130; // user who last modified this record
    google.protobuf.Timestamp timestamp = 133; // timestamp of last modification
}


    
message SRA_ScheduleAFirm {
    message PKey {
        
        string sa_code = 10; // the schedule A code
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string name = 100; // schedule A firm name
    sfixed32 table = 103; // schedule A table number
    google.protobuf.Timestamp start = 106; // start date (enter as yyyy-MM-dd)
    google.protobuf.Timestamp end = 109; // end date  (enter as yyyy-MM-dd)
    string billing_person = 112; // name of billing person
    string billing_email = 115; // email of billing person
    string billing_address_street1 = 118; // address street line 1
    string billing_address_street2 = 121; // address street line 2
    string billing_address_city = 124; // address city
    string billing_address_state = 127; // address state
    string billing_address_zip = 130; // address zip
    string notes = 133; // internal notes about this schedule A firm
    string modified_by = 136; // user who last modified this record
    google.protobuf.Timestamp timestamp = 139; // timestamp of last modification
}


    
message SRA_ScheduleATable {
    message PKey {
        
        sfixed32 table = 10; // schedule A table number
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo indefinite = 100; // indefinite or not
    FeeMethod fee_method = 103; // BPS is pctg of assets managed. POF is pctg of fee we collect is taken
    float year1 = 106; // year 1 rate
    float year2 = 109; // year 2 rate
    float year3 = 112; // year 3 rate
    float year4 = 115; // year 4 rate
    float year5 = 118; // year 5 rate
    string modified_by = 121; // user who last modified this record
    google.protobuf.Timestamp timestamp = 124; // timestamp of last modification
}


    
message SRA_ShadowPosition {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 13;
        SpdrKeyType sec_type = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 position = 100; // shadow position to load
    ShadowMethod load_method = 103; // shadow load method
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message SRA_StrategyConfig {
    message PKey {
        
        string accnt = 10;
        StrategyLevel strategy_level = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    Strategy strategy = 100; // target overlay strategy
    StrategyControl strategy_control = 103; // indicate if this strategy is enabled for this accnt
    string sales_tactic = 106; // Sales Tactic used to gain account/strategy
    StrategyFocus strategy_focus = 109; // allowed option positions; PSC is put spread collar
    string strategy_parameters = 112; // strategy specific unique parameters (key=value;key=value)
    float allocation_pct = 115; // account overlay allocation WtVePct
    string allowed_tickers = 118; // ticker_tk/okey_tk whitelist (key;key). if collides with blacklist - blacklist trumps.
    string allowed_tickers_pct = 121; // allocation percentages of each allowed ticker (1.0;0.5;0.8)
    string allowed_tickers_csc = 124; // covered share counts of each allowed ticker (400;100;1000)
    string allowed_tickers_tnr = 127; // target time to expiry for each allowed ticker (1.5;2.0;0.5)
    string allowed_tickers_mny = 130; // target option moneyness for each allowed ticker (0.8;1.0;1.2)
    string allowed_tickers_tgt = 133; // target price for each allowed ticker (5.00;80.00;150.00)
    string disallowed_tickers = 136; // ticker_tk/okey_tk blacklist (key;key)
    string basis_risk_ticker = 139; // symbol to use in the event of issue with allowed tickers e.g. no options, liquidity concerns
    float basis_risk_uB = 142; // basis risk upper bound
    float basis_risk_lB = 145; // basis risk lower bound
    float delta_mandate = 148; // client determined delta mandate on strikes written
    float customized_beta_lB = 151; // beta mandata criteria to call out violation
    float customized_beta_uB = 154; // beta mandata criteria to call out violation
    int32 dte_lB = 157; // lower bound of days to expiration to be used in strategy
    int32 dte_uB = 160; // upper bound of days to expiration to be used in strategy
    float leverage_ratio = 163; // ratio at which SRA trades above account notional. Majority of cases ratio is 1
    float cash_mandate = 166; // treat as if account has $X cash. Applicable for CSP, PUT, NDE
    YesNo static_maturity = 169; // ask for maturity range to set and forget
    YesNo no_call_away_provision = 172; // Do not allow low basis stock to be called away via covered call
    YesNo no_cash_deb = 175; // no cash debit
    YesNo strategic_liquidation_flag = 178; // strategic liquidation yes/no
    YesNo quarantine = 181; // toggle to show this strategy in tool
    DateKey quarantine_date = 184; // date of quarantine
    google.protobuf.Timestamp start_date = 187; // date of first SRA trade
    google.protobuf.Timestamp end_date = 190; // date account was closed/disabled
    CloseReason close_reason = 193; // close reason
    YesNo billable = 196; // billable flag
    string notes = 199; // text field for SRA notes
    string modified_by = 202; // user who last modified this record
    google.protobuf.Timestamp timestamp = 205; // timestamp of last modification
}


    
message SRA_StrategyMapping {
    message PKey {
        
        Custodian custodian = 10; // custodian firm where account is held
        string mapping_key = 13; // repCode, Gnumber, etc provided by the custodian that maps to a strategy
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    Strategy strategy = 100; // the SRA strategy
    StrategyFocus strategy_focus = 103; // allowed option positions
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message SRChoiceResponse {


    MbusInfo descriptor = 1;
    
    uint32 source_iD = 100; // Effectively the ID of the request.  Each client process manages its own space of source IDs such that each request is unique.  The server will set the SourceId for each item it returns to this value.
    string choice_name = 103;
    string kv_pairs = 106;
}


    
message SRDataIntegrity {
    message PKey {
        
        string category1 = 10; // category name  (level #1)
        string category2 = 13; // category name  (level #2)
        SysRealm sys_realm = 16;
        SysEnvironment sys_environment = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    CheckResult result = 100;
    string error = 103;
    sfixed32 ok_count = 106;
    sfixed32 rec_count = 109;
    google.protobuf.Timestamp timestamp = 112;
}


    
message SRDataIntegrityAck {
    message PKey {
        
        string category1 = 10;
        string category2 = 13;
        SysRealm sys_realm = 16;
        SysEnvironment sys_environment = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_error_dttm = 100;
    string ack_user_name = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message SRDataQuery {


    MbusInfo descriptor = 1;
    
    string handler = 100; // Identifies the name of the server-side handler for the query
    uint32 source_iD = 103; // Effectively the ID of the request.  Each client process manages its own space of source IDs such that each request is unique.  The server will set the SourceId for each item it returns to this value.
    string user_name = 106; // Name of the user
    string app_name = 109; // Name of the tool
    string machine_name = 112; // Machine name
    sfixed32 process_iD = 115; // ID of the process
    sfixed64 high_watermark = 118; // When set to -1 will cause the server to respond with the full set of data up to 'count' (see below).  Otherwise, the server will return the matching objects with a 'ts' >= 'highWatermark'
    sfixed32 count = 121; // Acts as a limit when set by the client.  The server sets it to the count of items returned.  Default is -1 (no limit).
    string parameters = 124; // If given, will contain a serialized object representing the parameters of the query
    DataQueryStatus status = 127;
    string status_details = 130; // Server-provided details regarding the status.  For example, when status == Failed will contains the error message
    string parameters2 = 133; // If given, will contain a serialized object representing more parameters of the query (exists mostly for sending large lists of accounts)
    string parameters3 = 136; // If given, will contain a serialized object representing even more parameters of the query (exists mostly for sending large lists of accounts)
    string parameters4 = 139; // If given, will contain a serialized object representing even more parameters of the query (exists mostly for sending large lists of accounts)
    string parameters5 = 142; // If given, will contain a serialized object representing even more parameters of the query (exists mostly for sending large lists of accounts)
    string parameters6 = 145; // If given, will contain a serialized object representing even more parameters of the query (exists mostly for sending large lists of accounts)
}


/*
    SRVendorDividends records contain estimated future discrete dividend payment dates and amounts for dividend paying equities.  These records are the dividend values that are incorporated into SpiderRock pricing of dividend paying options.
*/    
message SRDiscreteDividend {
    message PKey {
        
        TickerKey ticker = 10;
        PricingGroup pricing_group = 13;
        string pricing_accnt = 16;
    }

    message DateAmt {
        
        DateKey ex_date = 109; // ex-dividend date
        float amount = 112; // dividend amount (USD equivalent)
        SRDivType div_type = 115;
        SRDivSource div_source = 118;
        sfixed32 days = 121;
        float years = 124;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100; // Record timestamp
    SRDivStatus div_status = 103; // Dividend status indicator: None; DivPaying; NoDividends; DivError
    repeated DateAmt date_amt = 106;
}


    
message SRFixGatewayError {
    message PKey {
        
        string server_name = 10;
        string server_code = 13;
        string routing_code = 16;
        string msg_type = 19;
        sfixed32 msg_seq_num = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string sender_comp_iD = 100;
    string target_comp_iD = 103;
    string sender_sub_iD = 106;
    string target_sub_iD = 109;
    google.protobuf.Timestamp sending_dttm = 112;
    string message = 115;
    string error = 118;
    google.protobuf.Timestamp timestamp = 121;
}


    
message SRFixMsgTemplate {
    message PKey {
        
        string template_name = 10;
        TemplateKind template_kind = 13;
        string fix_msg_type = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string template = 100;
    string comment = 103; // user comment
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


/*
    Fed-funds + treasury rate curve (not live)
*/    
message SRGlobalRates {
    message PKey {
        
        PricingGroup pricing_group = 10; // Pricing group: Default; User; Test; Implied; Override
        string pricing_accnt = 13; // SpiderRock account
    }

    message Curve {
        
        float years = 121;
        float rate = 124;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    RateCurve rate_curve = 103; // Rate curve: None; Pointwise; Model
    float b0 = 106; // Nelson-Siegel model rate curve parameter.  Used when rateCurve set to 'Model'.
    float b1 = 109; // Nelson-Siegel model rate curve parameter.  Used when rateCurve set to 'Model'.
    float b2 = 112; // Nelson-Siegel model rate curve parameter.  Used when rateCurve set to 'Model'.
    float lm = 115; // Nelson-Siegel model rate curve parameter.  Used when rateCurve set to 'Model'.
    repeated Curve curve = 118;
}


    
message SRPricingCalc {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    PricerModel model = 100; // SRPricingLib.Model
    CalcError error = 103; // SRPricingLib.CalcError
    ExerciseType ex_type = 106; // SRPricingLib.ExerciseType
    CalcModelType model_type = 109; // SRPricingLib.CalcModelType
    VolSource source = 112; // reference volatility source (0=unknown)
    float strike = 115; // actual (effective) strike
    float obid = 118; // option bid at time of calc
    float oask = 121; // option ask at time of calc
    float vol = 124;
    float uprc = 127; // actual (effective) stock price
    float opx = 130;
    float yrs = 133;
    float sdiv = 136; // continuous dividend rate applied to pricing
    float rate = 139; // global borrow rate
    float ddiv = 142; // present value of all discrete dividends until expiration
    float dadj = 145; // dividend adjustment factor used for pricing
    float delta = 148; // reference greeks
    float gamma = 151;
    float theta = 154;
    float vega = 157;
    float rho = 160;
    float phi = 163;
    float volga = 166;
    float vanna = 169;
    float de_decay = 172;
    float su50 = 175;
    float sd50 = 178;
    float su15 = 181;
    float sd15 = 184;
    float su06 = 187;
    float sd08 = 190;
    google.protobuf.Timestamp timestamp = 193;
}


    
message SRQueryParams {
    message PKey {
        
        string user_name = 10;
        string query_grid_name = 13; // Name of the query grid (not visible to user)
        string query_name = 16; // Name of the query (assigned by the user)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string parameters = 100; // If given, will contain a SOAP serialized object representing the parameters of the query
    google.protobuf.Timestamp timestamp = 103;
}


/*
    SRVendorDividends records contain projected discrete dividend payment dates and amounts for dividend paying equities.
*/    
message SRVendorDividends {
    message PKey {
        
        TickerKey ticker = 10;
    }

    message DateAmt {
        
        DateKey div_date = 109; // ex-dividend date
        float div_value = 112; // dividend value
        string div_currency = 115; // dividend currency
        DivKind div_kind = 118; // dividend type
        DivSource div_source = 121; // dividend source
        DivFreq div_freq = 124;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    string text = 103; // extra text (if any)
    repeated DateAmt date_amt = 106;
}


/*
    SRVendorDividends records contain projected discrete dividend payment dates and amounts for dividend paying equities.
*/    
message SRVendorDividends_Extern {
    message PKey {
        
        TickerKey ticker = 10;
        DivVendor div_vendor = 13;
    }

    message DateAmt {
        
        DateKey div_date = 109; // ex-dividend date
        float div_value = 112; // dividend value
        string div_currency = 115; // dividend currency
        DivKind div_kind = 118;
        DivSource div_source = 121;
        DivFreq div_freq = 124;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100; // record update timestamp
    string text = 103; // extra text (if any)
    repeated DateAmt date_amt = 106;
}


/*
    SRVendorDividends records contain projected discrete dividend payment dates and amounts for dividend paying equities.
    VLanBridging: None
*/    
message SRVendorDividends_V7 {
    message PKey {
        
        TickerKey ticker = 13;
    }

    message DateAmt {
        
        DateKey div_date = 112; // ex-dividend date
        float div_value = 115; // dividend value
        string div_currency = 118; // dividend currency
        DivKind div_kind = 121;
        DivSource div_source = 124;
        DivFreq div_freq = 127;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 103;
    string text = 106; // extra text (if any)
    repeated DateAmt date_amt = 109;
}


    
message SRVolChartResponse {


    MbusInfo descriptor = 1;
    
    string request_id = 100;
    TickerKey ticker = 103;
    int32 year = 106; // expiration year
    int32 month = 109; // expiration month
    int32 day = 112; // expiration day
    float theo_vol = 115; // theo volatilities (from SpdrTheoExpSurface)
    string theo_comment = 118; // comment from the SpdrTheoExpSurface record
    float b_opn_vol = 121;
    float s_opn_vol = 124;
    float b_cls_vol = 127;
    float s_cls_vol = 130;
    float years = 133; // time to expiration (in years)
    float u_bid = 136; // underlying bid
    float u_ask = 139; // underlying ask
    float rate = 142; // interest rate
    float sdiv = 145; // stock dividend (borrow rate)
    float ddiv = 148; // present value of discrete dividend stream
    float dadj = 151; // present value adjustment factor
    float c_atm = 154; // call ATM volatility
    float p_atm = 157; // put ATM volatility
    float slope = 160; // ATM slope
    float c_atm_prev = 163; // previous trading period
    float p_atm_prev = 166;
    float slope_prev = 169; // ATM slope
    float atm_de = 172; // ATM delta (current)
    float atm_ga = 175; // ATM gamma
    float atm_th = 178; // ATM theta
    float atm_ve = 181; // ATM vega
    float atm_ph = 184; // ATM phi
    float pwidth = 187; // estimated ATM mkt premium width (kernel around mny=0)
    float vwidth = 190; // estimated ATM mkt volatility width (kernel around mny=0)
    int32 c_cnt = 193; // num call strikes
    int32 p_cnt = 196; // num put strikes
    float fit_error = 199; // least squares fit error sqrt(mean squared error)
    google.protobuf.Timestamp timestamp = 202;
}


    
message SecDefRequest {
    message PKey {
        
        sfixed64 sec_request_iD = 10;
    }

    message Legs {
        
        OptionKey sec_key = 112; // Symbol for leg.  Must be a valid symbol.
        SpdrKeyType sec_type = 115; // Security Type [Stock, Future, Option]
        uint32 ratio = 118; // Multiplier for leg.  Must be greater than zero.
        BuySell side = 121; // Order side for leg.
        double ref_prc = 124; // Leg reference price
        float ref_delta = 127; // Leg option delta reference value
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // SR account making request
    string alt_request_id = 103; // Alternate request ID. Can by used by client for tracking
    SecDefType sec_def_type = 106;
    string exch_trader_id = 130;
    string trading_location = 133;
    string modified_by = 136; // user who last modified this record
    google.protobuf.Timestamp timestamp = 139; // timestamp of last modification
    repeated Legs legs = 109;
}


    
message SecDefRequestGateway {
    message PKey {
        
        sfixed64 sec_request_iD = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SecDefType sec_def_type = 100;
    string accnt = 103; // routing code of exchange session handling product def request
    string alt_request_id = 106; // Alternate request ID. Can by used by client for tracking
    OptionKey sec_key1 = 109; // Symbol for leg #1.  Must be a valid symbol.
    SpdrKeyType sec_type1 = 112; // Security Type [Stock, Future, Option]
    uint32 ratio1 = 115; // Ratio for leg #1.  Must be greater than zero.
    BuySell side1 = 118; // Order side for leg #1.
    double ref_prc1 = 121; // Reference price for leg #1.
    float ref_delta1 = 124; // Reference delta for leg #1.
    OptionKey sec_key2 = 127; // Symbol for leg #2.  Must be a valid symbol.
    SpdrKeyType sec_type2 = 130; // Security Type [Stock, Future, Option]
    uint32 ratio2 = 133; // Ratio for leg #2.  Must be greater than zero.
    BuySell side2 = 136; // Order side for leg #2.
    double ref_prc2 = 139; // Reference price for leg #2.
    float ref_delta2 = 142; // Reference delta for leg #2.
    OptionKey sec_key3 = 145; // Symbol for leg #3.  Must be a valid symbol.
    SpdrKeyType sec_type3 = 148; // Security Type [Stock, Future, Option]
    uint32 ratio3 = 151; // Ratio for leg #3.  Must be greater than zero.
    BuySell side3 = 154; // Order side for leg #3.
    double ref_prc3 = 157; // Reference price for leg #3.
    float ref_delta3 = 160; // Reference delta for leg #3.
    OptionKey sec_key4 = 163; // Symbol for leg #4.  Must be a valid symbol.
    SpdrKeyType sec_type4 = 166; // Security Type [Stock, Future, Option]
    uint32 ratio4 = 169; // Ratio for leg #4.  Must be greater than zero.
    BuySell side4 = 172; // Order side for leg #4.
    double ref_prc4 = 175; // Reference price for leg #4.
    float ref_delta4 = 178; // Reference delta for leg #4.
    OptionKey sec_key5 = 181; // Symbol for leg #5.  Must be a valid symbol.
    SpdrKeyType sec_type5 = 184; // Security Type [Stock, Future, Option]
    uint32 ratio5 = 187; // Ratio for leg #5.  Must be greater than zero.
    BuySell side5 = 190; // Order side for leg #5.
    double ref_prc5 = 193; // Reference price for leg #5.
    float ref_delta5 = 196; // Reference delta for leg #5.
    OptionKey sec_key6 = 199; // Symbol for leg #6.  Must be a valid symbol.
    SpdrKeyType sec_type6 = 202; // Security Type [Stock, Future, Option]
    uint32 ratio6 = 205; // Ratio for leg #6.  Must be greater than zero.
    BuySell side6 = 208; // Order side for leg #6.
    double ref_prc6 = 211; // Reference price for leg #6.
    float ref_delta6 = 214; // Reference delta for leg #6.
    OptionKey sec_key7 = 217; // Symbol for leg #7.  Must be a valid symbol.
    SpdrKeyType sec_type7 = 220; // Security Type [Stock, Future, Option]
    uint32 ratio7 = 223; // Ratio for leg #7.  Must be greater than zero.
    BuySell side7 = 226; // Order side for leg #7.
    double ref_prc7 = 229; // Reference price for leg #7.
    float ref_delta7 = 232; // Reference delta for leg #7.
    OptionKey sec_key8 = 235; // Symbol for leg #8.  Must be a valid symbol.
    SpdrKeyType sec_type8 = 238; // Security Type [Stock, Future, Option]
    uint32 ratio8 = 241; // Ratio for leg #8.  Must be greater than zero.
    BuySell side8 = 244; // Order side for leg #8.
    double ref_prc8 = 247; // Reference price for leg #8.
    float ref_delta8 = 250; // Reference delta for leg #8.
    OptionKey sec_key9 = 253; // Symbol for leg #9.  Must be a valid symbol.
    SpdrKeyType sec_type9 = 256; // Security Type [Stock, Future, Option]
    uint32 ratio9 = 259; // Ratio for leg #9.  Must be greater than zero.
    BuySell side9 = 262; // Order side for leg #9.
    double ref_prc9 = 265; // Reference price for leg #9.
    float ref_delta9 = 268; // Reference delta for leg #9.
    OptionKey sec_key10 = 271; // Symbol for leg #10.  Must be a valid symbol.
    SpdrKeyType sec_type10 = 274; // Security Type [Stock, Future, Option]
    uint32 ratio10 = 277; // Ratio for leg #10.  Must be greater than zero.
    BuySell side10 = 280; // Order side for leg #10.
    double ref_prc10 = 283; // Reference price for leg #10.
    float ref_delta10 = 286; // Reference delta for leg #10.
    OptionKey sec_key11 = 289; // Symbol for leg #11.  Must be a valid symbol.
    SpdrKeyType sec_type11 = 292; // Security Type [Stock, Future, Option]
    uint32 ratio11 = 295; // Ratio for leg #11.  Must be greater than zero.
    BuySell side11 = 298; // Order side for leg 1#1.
    double ref_prc11 = 301; // Reference price for leg #11.
    float ref_delta11 = 304; // Reference delta for leg #11.
    OptionKey sec_key12 = 307; // Symbol for leg #12.  Must be a valid symbol.
    SpdrKeyType sec_type12 = 310; // Security Type [Stock, Future, Option]
    uint32 ratio12 = 313; // Ratio for leg #12.  Must be greater than zero.
    BuySell side12 = 316; // Order side for leg #12.
    double ref_prc12 = 319; // Reference price for leg #12.
    float ref_delta12 = 322; // Reference delta for leg #12.
    OptionKey sec_key13 = 325; // Symbol for leg #13.  Must be a valid symbol.
    SpdrKeyType sec_type13 = 328; // Security Type [Stock, Future, Option]
    uint32 ratio13 = 331; // Ratio for leg #13.  Must be greater than zero.
    BuySell side13 = 334; // Order side for leg #13.
    double ref_prc13 = 337; // Reference price for leg #13.
    float ref_delta13 = 340; // Reference delta for leg #13.
    OptionKey sec_key14 = 343; // Symbol for leg #14.  Must be a valid symbol.
    SpdrKeyType sec_type14 = 346; // Security Type [Stock, Future, Option]
    uint32 ratio14 = 349; // Ratio for leg 1#4.  Must be greater than zero.
    BuySell side14 = 352; // Order side for leg #14.
    double ref_prc14 = 355; // Reference price for leg #14.
    float ref_delta14 = 358; // Reference delta for leg #14.
    OptionKey sec_key15 = 361; // Symbol for leg #15.  Must be a valid symbol.
    SpdrKeyType sec_type15 = 364; // Security Type [Stock, Future, Option]
    uint32 ratio15 = 367; // Ratio for leg #15.  Must be greater than zero.
    BuySell side15 = 370; // Order side for leg #15.
    double ref_prc15 = 373; // Reference price for leg #15.
    float ref_delta15 = 376; // Reference delta for leg #15.
    OptionKey sec_key16 = 379; // Symbol for leg #16.  Must be a valid symbol.
    SpdrKeyType sec_type16 = 382; // Security Type [Stock, Future, Option]
    uint32 ratio16 = 385; // Ratio for leg #16.  Must be greater than zero.
    BuySell side16 = 388; // Order side for leg #16.
    double ref_prc16 = 391; // Reference price for leg #16.
    float ref_delta16 = 394; // Reference delta for leg #16.
    OptionKey sec_key17 = 397; // Symbol for leg #17.  Must be a valid symbol.
    SpdrKeyType sec_type17 = 400; // Security Type [Stock, Future, Option]
    uint32 ratio17 = 403; // Ratio for leg #17.  Must be greater than zero.
    BuySell side17 = 406; // Order side for leg #17.
    double ref_prc17 = 409; // Reference price for leg #17.
    float ref_delta17 = 412; // Reference delta for leg #17.
    OptionKey sec_key18 = 415; // Symbol for leg #18.  Must be a valid symbol.
    SpdrKeyType sec_type18 = 418; // Security Type [Stock, Future, Option]
    uint32 ratio18 = 421; // Ratio for leg #18.  Must be greater than zero.
    BuySell side18 = 424; // Order side for leg #18.
    double ref_prc18 = 427; // Reference price for leg #18.
    float ref_delta18 = 430; // Reference delta for leg #18.
    OptionKey sec_key19 = 433; // Symbol for leg #19.  Must be a valid symbol.
    SpdrKeyType sec_type19 = 436; // Security Type [Stock, Future, Option]
    uint32 ratio19 = 439; // Ratio for leg #19.  Must be greater than zero.
    BuySell side19 = 442; // Order side for leg #19.
    double ref_prc19 = 445; // Reference price for leg #19.
    float ref_delta19 = 448; // Reference delta for leg #19.
    OptionKey sec_key20 = 451; // Symbol for leg #20.  Must be a valid symbol.
    SpdrKeyType sec_type20 = 454; // Security Type [Stock, Future, Option]
    uint32 ratio20 = 457; // Ratio for leg #20.  Must be greater than zero.
    BuySell side20 = 460; // Order side for leg #20.
    double ref_prc20 = 463; // Reference price for leg #20.
    float ref_delta20 = 466; // Reference delta for leg #20.
    string modified_by = 469; // user who last modified this record
    google.protobuf.Timestamp timestamp = 472; // timestamp of last modification
}


    
message SecDefResponse {
    message PKey {
        
        sfixed64 sec_request_iD = 10;
    }

    message Legs {
        
        OptionKey sec_key = 121; // Symbol for leg.  Must be a valid symbol.
        SpdrKeyType sec_type = 124; // Security Type [Stock, Future, Option]
        uint32 ratio = 127; // Multiplier for leg.  Must be greater than zero.
        BuySell side = 130; // Order side for leg.
        double ref_prc = 133; // Leg reference price
        float ref_delta = 136; // Leg option delta reference value
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // SR account making request
    string alt_request_id = 103; // Alternate request ID. Can by used by client for tracking
    string security_desc = 106; // Security Description for instrument
    SecDefReqState sec_def_req_state = 109;
    string text = 112; // exchange result (error)
    string security_iD = 115; // unique exchange id (exch assigned)
    google.protobuf.Timestamp timestamp = 139;
    repeated Legs legs = 118;
}


    
message SectorControl {
    message PKey {
        
        string accnt = 10;
        string sector = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string sector_label = 100; // sector label (description)
    string modified_by = 103; // user who last modified this record
    google.protobuf.Timestamp timestamp = 106; // timestamp of last modification
}


    
message SecurityDefinitionHist {
    message PKey {
        
        sfixed64 security_iD = 10;
        IDSource id_source = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string description = 100;
    google.protobuf.Timestamp timestamp = 103;
}


/*
    #SecurityMaster records exist for all SpiderRock tickers including equity tickers (stocks and ETFs)
*/    
message SecurityMaster_Extern {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 security_iD = 100; // Security ID number from the source - Vendor, SR, Feed
    sfixed32 alt_iD = 103; // Alt ID number - previously used Sec ID
    SymbolType symbol_type = 106; // symbol type
    string name = 109; // Short name
    string officialname = 112; // Full/Official name
    string description = 115; // Description
    string country = 118; // ISO Issuer Country Code
    float par_value = 121; // Security Parvalue
    string par_value_currency = 124; // Security Parvalue currency
    PrimaryExchange primary_exch = 127; // Primary Exchange
    string mic = 130; // ISO Market Identification Code
    string mic_seg = 133; // ISO Market Indentification Segment Code
    sfixed32 shares_outstanding = 136; // shares outstanding, represented in thousands (actualsharesoutstanding = sharesoutstanding * 1000)
    string cusip = 139; // cusip code
    string sic = 142; // SIC (Standard Industrial Classification) code
    string cik = 145; // Central Index Key (US specific)
    string lei = 148; // Legal Entity Identifier
    string naics = 151; // North American Industry Classification System
    string cfi = 154; // ISO Classification of Financial Instruments
    string cic = 157; // Complementay Identification Code
    string fisn = 160; // Financial Instrument Short Name
    string isin = 163; // ISIN code
    string figi = 166; // FIGI code
    string bbg_composite_ticker = 169; // Bloomberg Composite Ticker
    string bbg_exchange_ticker = 172; // Bloomberg Exchange Ticker
    string bbg_composite_global_iD = 175; // Bloomberg Composite Global ID
    string bbg_global_iD = 178; // Bloomberg Global ID
    string bbg_currency = 181; // Bloomberg Trading Currency
    google.protobuf.Timestamp timestamp = 184; // record update timestamp
    string gics = 187; // Global Industry Classification Standard
}


    
message ServerChannelStats {
    message PKey {
        
        string server = 10;
        string proc_name = 13;
        sfixed32 proc_number = 16;
        string time = 19;
        uint32 app_id = 22;
        uint32 channel_number = 25;
        SysEnvironment sys_environment = 28; // original (source) sys environment [Stable, Current, etc]
        RunStatus run_status = 31; // original (source) run status [Prod,Beta]
        SysRealm sys_realm = 34; // original (source) sysRealm [NMS, CME, etc.]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ChannelType channel_type = 100;
    string channel_label = 103;
    string source_addr = 106;
    float m_bytes = 109;
    float k_bytes_per_sec = 112;
    float sys_calls_per_sec = 115;
    sfixed32 num_parts = 118;
    sfixed32 num_gaps = 121;
    float max_wait = 124;
    float max_proc = 127;
    float sum_wait = 130;
    float sum_proc = 133;
    sfixed32 send_counter = 136;
    google.protobuf.Timestamp timestamp = 139;
}


    
message ServerMessageStats {
    message PKey {
        
        string server = 10;
        string proc_name = 13;
        sfixed32 proc_number = 16;
        uint32 app_id = 19;
        string time = 22;
        uint32 msg_number = 25;
        ChannelType channel_type = 28;
        SysEnvironment sys_environment = 31; // original (source) sys environment [Stable, Current, etc]
        RunStatus run_status = 34; // original (source) run status [Prod,Beta]
        SysRealm sys_realm = 37; // original (source) sysRealm [NMS, CME, etc.]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string msg_name = 100;
    sfixed32 msg_count = 103;
    float msg_rate_per_sec = 106;
    int32 num_sources = 109;
    sfixed32 num_gaps = 112;
    sfixed64 cum_gaps = 115;
    sfixed64 cum_count = 118;
    sfixed32 send_counter = 121;
    google.protobuf.Timestamp timestamp = 124;
}


    
message SetSymbolStatus {


    MbusInfo descriptor = 1;
    
    string accnt = 100;
    TickerKey ticker = 103;
    YesNo set_opt_status = 106;
    OptStatus opt_status = 109;
    YesNo set_stk_status = 112;
    StkStatus stk_status = 115;
    string user_name = 118;
}


/*
    SodCashRecords contain a start-of-day currency position that derived from dividend or corporate action being applied to a prior period position.
    These records are computed and published by SR rotation servers.
*/    
message SodCashRecordV5 {
    message PKey {
        
        string accnt = 10;
        Currency currency = 13;
        DateKey trade_date = 16;
        SrcTransaction src_transaction = 19;
        OptionKey src_sec_key = 22; // prior period sec key that this position record derived from (if any)
        SpdrKeyType src_sec_type = 25;
        DateKey src_trade_date = 28; // prior period trade date that this position record derived from
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double sr_cash_amount = 100;
    double clr_cash_amount = 103;
    string comment = 106; // source description (if any)
    google.protobuf.Timestamp timestamp = 109;
}


/*
    SodClearingRecords contain start-of-day option position and mark details.  They can be source directly from a prime broker by SpiderRock or inserted by clients.
    They can also be modified after the start of trading. These records are the source of the CLR side positions in SR risk records.
*/    
message SodClearingRecordV5 {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 13;
        SpdrKeyType sec_type = 16;
        DateKey trade_date = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DaySide day_side = 100; // start-of-day or end-of-day
    sfixed32 clr_position = 103; // clearing position @ daySide
    double clr_mark = 106; // clearing mark @ daySide
    string comment = 109;
    google.protobuf.Timestamp timestamp = 112; // upload timestamp; will be identical per accnt
}


/*
    SodPositionRecord SR contain start-of-day position, mark, and corporate action details.
    These records are computed and published by SR rotation servers.
*/    
message SodPositionRecordV5 {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 13;
        SpdrKeyType sec_type = 16;
        DateKey trade_date = 19;
        SrcRecord src_record = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 sr_sod_position = 100; // SR position @ start-of-day
    double sr_opening_mark = 103; // SR mark @ start-of-day
    double sr_cash_in_lieu = 106;
    sfixed32 clr_sod_position = 109; // CLR position @ start-of-day
    double clr_opening_mark = 112; // CLR mark @ start-of-day
    double clr_cash_in_lieu = 115;
    string comment = 118; // source description (if any)
    google.protobuf.Timestamp timestamp = 121;
}


/*
    SodPositionRecord SR contain start-of-day position, mark, and corporate action details.  These records are computed and published by SR servers.
    VLanBridging: None
*/    
message SodPositionRecord_V7 {
    message PKey {
        
        OptionKey sec_key = 13; // EOD security key (T - 1)
        SpdrKeyType sec_type = 16;
        string accnt = 19;
        RotationSide rotation_side = 22;
        int32 spinoff_component = 25;
        DateKey trade_date = 28;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 prev_eod_position = 103; // position @ end-of-day (T - 1)
    double prev_eod_mark = 106; // mark @ end-of-day (T - 1) (mostly just for CLR side)
    PositionSource prev_opn_pos_src = 109; // opn position src (T - 1)
    sfixed64 ex_as_trans_id = 112; // exercise/assigment transaction Id (same Id for both stock and option ex/as transaction)
    sfixed32 ex_as_eod_pos = 115; // exercise/asignment position adjustment (+/-) [contracts exercise or assigned; shared bot/sld]
    sfixed32 ex_as_sod_pos = 118; // exercise/asignment position adjustment (+/-) [contracts exercise or assigned; shared bot/sld]
    double ex_as_value = 121; // exercise/assignment value received (+/-)
    double ex_as_uMark = 124; // exercise/assignment underlier settlement mark used for figuration
    sfixed64 corp_action_id = 127; // corporate action transaction Id (same Id for all stock and option positions affected by this action) [zero = no action]
    CorpActionType corp_action_type = 130;
    OptionKey sec_key_sOD = 133; // security key @ SOD (T)
    double split_ratio = 136; // 1 for 2 = 0.5, 2 for 1 = 2.0
    double split_fraction = 139;
    double mark_multiplier = 142; // sodMark = eodMark x markMultiplier
    double strike_multiplier = 145; // sodStrike = eodStrike x strikeMultiplier + strikeFactor
    double strike_factor = 148; // sodStrike = eodStrike x strikeMultiplier + strikeFactor
    sfixed32 position_multiplier = 151; // sodPosition = eodPosition x positionMultiplier
    sfixed32 sod_position = 154; // position @ start-of-day
    double sod_position_frac = 157; // fractional position @ start-of-day (cashInLieu portion)
    double sod_mark = 160; // mark @ start-of-day (mostly just for CLR side, but can force SR side by setting this value)
    double sod_cAValue = 163; // effective cash value of corp action (SR or CLR) (if any)
    google.protobuf.Timestamp timestamp = 166;
}


/*
    This table allows custom span risk calculations based on either user or SR supplied input values.
*/    
message SpanRiskCalculator {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13;
        string user_name = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double vol = 100; // volatility
    FieldSrc vol_src = 103;
    double u_prc = 106; // underlying price
    FieldSrc u_prc_src = 109;
    double years = 112; // years-to-expiration (default uses SR volatility time value)
    FieldSrc years_src = 115;
    double sdiv = 118; // continuous stock dividend using for pricing
    FieldSrc sdiv_src = 121;
    double rate = 124; // discount rate used for pricing
    FieldSrc rate_src = 127;
    ExerciseType ex_type = 130; // exercise type of the option (American or European)
    FieldSrc ex_type_src = 133;
    double eff_strike = 136; // effective strike used for pricing (default is okey.Strike)
    FieldSrc eff_strike_src = 139;
    double sym_ratio = 142; // underlying symbol ratio (for non-standard options); discrete dividend will be scaled by this factor
    FieldSrc sym_ratio_src = 145;
    string div_string = 148; // discrete dividend string  [ yearsToExpiry, years1:amt1, years2:amt2, ...] or [ -1, date1:amt1, date2:amt2, ... ]
    FieldSrc div_src = 151;
    CalcModelType model_type = 154; // LogNormalExact, LogNormalApprox, NormalExact, NormalApprox
    FieldSrc model_type_src = 157;
    CalcPrecision calc_precision = 160; // numerical precision (# of steps) if a numerical method is used;  [more steps will be slower to calculate]
    double point_value = 163; // $ value of a point in the underlying product
    FieldSrc point_value_src = 166;
    float prc_span_up = 169;
    float prc_span_dn = 172;
    PrcSpanType prc_span_type = 175;
    float vol_span = 178;
    VolSpanType vol_span_type = 181;
    SpanCalcType span_calc_type = 184;
    YesNo hedge_delta_neutral = 187; // all option will be assumed hedged delta neutral, stock and futures will not have slide values
    double adj_years = 190; // year adjustment: effYears = years + adjYears (-1 = no limit)
    double max_years = 193; // upper bound for years: effYears = MIN(maxYears, effYears) (-1 = no limit)
    float span01 = 196; // span1: uPrc=unch, vol=up
    float span02 = 199; // span2: uPrc=unch, vol=down
    float span03 = 202; // span3: uPrc=+33%, vol=up
    float span04 = 205; // span4: uPrc=+33%, vol=dn
    float span05 = 208; // span5: uPrc=-33%, vol=up
    float span06 = 211; // span6: uPrc=-33%, vol=down
    float span07 = 214; // span7: uPrc=+67%, vol=up
    float span08 = 217; // span8: uPrc=+67%, vol=down
    float span09 = 220; // span9: uPrc=-67%, vol=up
    float span10 = 223; // span10: uPrc=-67%, vol=down
    float span11 = 226; // span11: uPrc=+100%, vol=up
    float span12 = 229; // span12: uPrc=+100%, vol=down
    float span13 = 232; // span13: uPrc=-100%, vol=up
    float span14 = 235; // span14: uPrc=-100%, vol=down
    float span15 = 238; // span15: uPrc=+300%; price slide * 0.33
    float span16 = 241; // span16: uPrc=-300%, price slide * 0.33
    string error = 244; // calculation error
    google.protobuf.Timestamp timestamp = 247;
}


/*
    This table contains the exchange SPAN risk parameters used to calculation OptionSpanRiskSlides.
*/    
message SpanRiskParameters {
    message PKey {
        
        ExpiryKey fkey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float init_margin = 100;
    float maint_margin = 103;
    float long_cn_minimum = 106;
    float short_cn_minimum = 109;
    float price_span_up = 112; // SPAN price move up in points
    float price_span_dn = 115; // SPAN price move down in points
    float vol_move_up = 118;
    float vol_move_dn = 121;
    float point_value = 124; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 127;
    SpanPricingModel span_pricing_model = 130; // Exchange-defined model for SPAN option pricing calcs
    AggregationRule aggregation_rule = 133;
    google.protobuf.Timestamp timestamp = 136;
}


/*
    Records inserted into this table will result in the cancellation of all active/cancelable orders for the indicated SpiderRock trading accnt.
*/    
message SpdrAccntCancel {
    message PKey {
        
        string accnt = 10; // SR trading account
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string cxl_reason = 100;
    string alt_cancel_id = 103;
    string engine_name = 106; // set by the engine handling event (should be blank on arrival)
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


    
message SpdrAllocationNotice {
    message PKey {
        
        sfixed64 alloc_number = 10; // unique number assigned to this allocation notice
    }

    message ChildOrders {
        
        sfixed64 cl_ord_id = 151;
        sfixed32 order_size = 154;
        sfixed32 cum_fill_quantity = 157;
        double avg_fill_price = 160;
        string street_cl_ord_id = 163; // usually clOrdID.X16 but can be different if street gateway was translating clOrdId
        string street_order_id = 166; // street side order ID (for canceling order)
    }

    message Fragments {
        
        string accnt = 172; // SR alloc accnt
        string alloc_accnt = 175; // clearing firm alloc accnt (maps to Fix.AllocAccount)
        sfixed64 alloc_frag_id = 178; // unique ID of this alloc/fragment (maps to Fix.IndividualAllocID)
        sfixed32 alloc_size = 181; // accnt alloc size
    }

    message OrderLegs {
        
        TickerKey ticker = 187; // stock ticker
        BuySell stock_side = 190; // [Buy | Sell | None]
        sfixed32 stock_shares = 193; // number of shares included (zero if none)
        sfixed64 stock_leg_id = 196; // SR stock leg ID
        string alt_stk_leg_id = 199; // client stock leg ID (usually from a FIX order)
        sfixed32 sum_stk_leg_qty = 202;
        double sum_stk_leg_mny = 205;
        ShortSaleFlag ssale_flag = 208; // ssale flag
        int32 num_legs = 211; // number of valid legs below
        OptionKey sec_key1 = 214; // leg #1
        SpdrKeyType sec_type1 = 217;
        uint32 mult1 = 220;
        BuySell side1 = 223;
        sfixed64 leg_id1 = 226; // SR leg Id
        string alt_leg_id1 = 229; // client leg Id (usually from a FIX order)
        sfixed32 sum_leg_qty1 = 232;
        double sum_leg_mny1 = 235;
        PositionType position_type1 = 238; // positionType
        OptionKey sec_key2 = 241; // leg #2
        SpdrKeyType sec_type2 = 244;
        uint32 mult2 = 247;
        BuySell side2 = 250;
        sfixed64 leg_id2 = 253; // SR leg Id
        string alt_leg_id2 = 256; // client leg Id (usually from a FIX order)
        sfixed32 sum_leg_qty2 = 259;
        double sum_leg_mny2 = 262;
        PositionType position_type2 = 265; // positionType
        OptionKey sec_key3 = 268; // leg #3
        SpdrKeyType sec_type3 = 271;
        uint32 mult3 = 274;
        BuySell side3 = 277;
        sfixed64 leg_id3 = 280; // SR leg Id
        string alt_leg_id3 = 283; // client leg Id (usually from a FIX order)
        sfixed32 sum_leg_qty3 = 286;
        double sum_leg_mny3 = 289;
        PositionType position_type3 = 292; // positionType
        OptionKey sec_key4 = 295; // leg #4
        SpdrKeyType sec_type4 = 298;
        uint32 mult4 = 301;
        BuySell side4 = 304;
        sfixed64 leg_id4 = 307; // SR leg Id
        string alt_leg_id4 = 310; // client leg Id (usually from a FIX order)
        sfixed32 sum_leg_qty4 = 313;
        double sum_leg_mny4 = 316;
        PositionType position_type4 = 319; // positionType
        OptionKey sec_key5 = 322; // leg #5
        SpdrKeyType sec_type5 = 325;
        uint32 mult5 = 328;
        BuySell side5 = 331;
        sfixed64 leg_id5 = 334; // SR leg Id
        string alt_leg_id5 = 337; // client leg Id (usually from a FIX order)
        sfixed32 sum_leg_qty5 = 340;
        double sum_leg_mny5 = 343;
        PositionType position_type5 = 346; // positionType
        OptionKey sec_key6 = 349; // leg #6
        SpdrKeyType sec_type6 = 352;
        uint32 mult6 = 355;
        BuySell side6 = 358;
        sfixed64 leg_id6 = 361; // SR leg Id
        string alt_leg_id6 = 364; // client leg Id (usually from a FIX order)
        sfixed32 sum_leg_qty6 = 367;
        double sum_leg_mny6 = 370;
        PositionType position_type6 = 373; // positionType
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    string client_firm = 103;
    string omni_accnt = 106; // omnibus accnt (SR accnt)
    OptionKey sec_key = 109; // security key (stock, future, or option)
    SpdrKeyType sec_type = 112; // security type
    string mleg_leg_key = 115; // [secKey.StringKey;legRatio;side;positionEffect, secKey.StringKey;legRatio;side;positionEffect, ...]
    BuySell order_side = 118; // order side (always buy for MLEG orders)
    ShortSaleFlag ssale_flag = 121; // ssale flag (None if not stock)
    PositionType position_type = 124; // positionType (None if not equity option)
    NoticeState notice_state = 127; // indicates that this noticed is ready to forward to a custodian
    string notice_text = 130;
    AllocMethod alloc_method = 133; // method for delivery of the allocation instruction to the broker
    SpdrOrderShape order_shape = 136; // Single or MLeg
    sfixed32 cum_fill_quantity = 139; // total fill size of all ChildOrders
    double avg_fill_price = 142; // parent order average fill price
    double net_money = 145; // net allocation money
    string modified_by = 376; // user who last modified this record
    google.protobuf.Timestamp timestamp = 379; // timestamp of last modification
    repeated ChildOrders child_orders = 148;
    repeated Fragments fragments = 169;
    repeated OrderLegs order_legs = 184;
}


    
message SpdrAllocationNoticeStatus {
    message PKey {
        
        sfixed64 alloc_number = 10; // matches AllocationNotice.pkey.allocNumber
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    AllocationStatus status = 100;
    string reject_reason = 103;
    OptionKey sec_key = 106; // security key (stock, future, or option)
    SpdrKeyType sec_type = 109; // security type
    string modified_by = 112; // user who last modified this record
    google.protobuf.Timestamp timestamp = 115; // timestamp of last modification
}


/*
    SpdrAuctionAccntResponse messages are published by SR ExecEngines and represent AuctionState / ParentOrder interactions
*/    
message SpdrAuctionAccntResponse {
    message PKey {
        
        sfixed64 sr_auction_iD = 10; // unique SR AUCTION ID (required when responding to an auction notice)
        RunStatus run_status = 13;
        string accnt = 16;
        ResponseServer response_server = 19;
        sfixed64 grouping_code = 22;
        BuySell response_side = 25; // response side (usually opposite auctionSide)
    }

    message Legs {
        
        OptionKey leg_sec_key = 277;
        SpdrKeyType leg_sec_type = 280;
        BuySell leg_side = 283;
        uint32 leg_ratio = 286; // leg ratio (1, 2, etc)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100;
    SpdrKeyType sec_type = 103;
    string exch_auction_id = 106;
    string exch_auction_type = 109;
    NoticeShape auction_shape = 112;
    AuctionType auction_type = 115;
    OptExch auction_exch = 118; // exchange handling the auction
    BuySell auction_side = 121; // Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    SpreadShape spread_shape = 124; // auction spread shape
    sfixed32 auction_size = 127; // auction size
    double auction_price = 130; // auction price (can be positive or negative)
    YesNo is_auction_price_valid = 133;
    sfixed32 auction_duration = 136; // expected auction / imbalance action duration (ms)
    sfixed64 auction_start_timestamp = 139; // auction / action start timestamp
    float bid_price = 142; // nbbo bid price		@ auction start
    float ask_price = 145; // nbbo ask price
    sfixed32 cum_bid_size = 148; // cum nbbo bid size		@ auction start
    sfixed32 cum_ask_size = 151; // cum nbbo ask size
    float exch_bid_prc = 154; // exch bid price		@ auction start
    float exch_ask_prc = 157; // exch ask price
    sfixed32 exch_bid_size = 160; // exch bid size			@ auction start
    sfixed32 exch_ask_size = 163; // exch ask size
    float surface_price = 166; // SR spread surface price @ auction start
    float vega = 169; // auction vega				@ auction start
    float delta = 172; // auction delta				@ auction start
    float u_prc = 175; // underlier price			@ auction start
    sfixed32 sweep_opt_cum_fill_size = 178; // cumulative size of all fills received in the sweep window
    int32 sweep_opt_print_cnt = 181; // number of OPRA print reports received up to 250ms before the auction response cutoff time (these are considered potential sweep prints)
    sfixed32 sweep_opt_print_cum_size = 184; // cum size of all sweep prints
    fixed32 sweep_opt_print_exch_mask = 187; // exch mask of all exchanges w/sweep prints
    YesNo sweep_opt_print_is_iSO = 190; // yes if any sweep prints have ISO print types
    int32 sweep_stk_print_cnt = 193;
    int32 sweep_stk_print_cum_size = 196;
    fixed32 sweep_stk_print_exch_mask = 199;
    YesNo sweep_stk_print_is_iSO = 202;
    string user_name = 205;
    string client_firm = 208;
    sfixed64 parent_number = 211; // parent number interacting with auction
    sfixed64 risk_group_id = 214; // riskGroupId of the parent order
    YesNo did_cxl_wait = 217; // response waited on a cxl-ack
    sfixed32 limit_size = 220; // parent available / risk size
    double limit_price = 223; // best parent limit price
    double theo_price = 226; // theo price
    ResponseResult result = 229;
    string result_detail = 232;
    sfixed64 cl_ord_id = 235; // child clOrdId (if any)
    sfixed32 order_size = 238;
    double order_price = 241;
    double order_probability = 244;
    sfixed32 fill_quantity = 247;
    double fill_price = 250;
    string response_type = 253;
    sfixed64 par_timestamp = 256; // mleg parent create timestamp
    sfixed64 new_timestamp = 259; // new child order send timestamp
    double new_latency = 262; // auction start to response order send
    double ack_latency = 265; // response order send to (first) exec report response
    string response_text = 268; // all response text fields
    google.protobuf.Timestamp timestamp = 271;
    repeated Legs legs = 274;
}


    
message SpdrAuctionMarkup {
    message PKey {
        
        sfixed64 sr_auction_iD = 10; // unique SR AUCTION ID (required when responding to an auction notice)
        RunStatus run_status = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100;
    SpdrKeyType sec_type = 103;
    TickerKey ticker = 106; // must match
    string option_roots = 109; // (comma separated) if not empty all leg roots must be in list
    string exch_auction_id = 112;
    string exch_auction_type = 115;
    AuctionType auction_type = 118;
    OptExch auction_exch = 121; // exchange handling the auction
    BuySell auction_side = 124; // Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    sfixed32 auction_size = 127; // auction size (number of spreads)
    int32 num_legs = 130;
    int32 num_opt_legs = 133;
    YesNo incl_stock = 136;
    YesNo incl_multihedge = 139;
    float min_years = 142; // both markup.minYears and markup.maxYears
    float max_years = 145;
    google.protobuf.Timestamp min_expiry = 148; // both markup.minExpiry and markup.maxExpiry
    google.protobuf.Timestamp max_expiry = 151;
    float max_years_range = 154; // markup.maxExpiry - markup.minExpiry
    float min_abs_de = 157;
    float max_abs_de = 160;
    float min_xAxis = 163;
    float max_xAxis = 166;
    float min_strike = 169;
    float max_strike = 172;
    float max_strike_range = 175; // markup.maxStrike - markup.minStrike
    float delta_range = 178; // maxDelta - minDelta (option legs only)
    double auction_price = 181; // auction price (if any)
    YesNo is_auction_price_valid = 184;
    float surf_price = 187; // surface price
    float prob_price = 190; // 0.50 probability price
    float bid_price = 193; // nbbo bid price (leg market bid)
    float ask_price = 196; // nbbo ask price (leg market ask)
    SpreadShape spread_shape = 199;
    int32 num_valid_legs = 202;
    float u_prc = 205;
    sfixed32 pkg_abs_cn = 208;
    sfixed32 pkg_net_cn = 211;
    float pkg_abs_dDe = 214;
    float pkg_net_dDe = 217;
    float pkg_abs_pr = 220;
    float pkg_net_pr = 223;
    float pkg_abs_ve = 226;
    float pkg_net_ve = 229;
    float pkg_abs_tVe = 232;
    float pkg_net_tVe = 235;
    float pkg_abs_wVe = 238;
    float pkg_net_wVe = 241;
    float pkg_abs_wTVe = 244;
    float pkg_net_wTVe = 247;
    float pkg_abs_th = 250;
    float pkg_net_th = 253;
    float pkg_abs_dTh = 256;
    float pkg_abs_ga = 259;
    float pkg_net_ga = 262;
    float pkg_abs_dGa = 265;
    float pkg_net_dGa = 268;
    float pkg_net_up15_pn_l = 271;
    float pkg_net_dn15_pn_l = 274;
    float pkg_net_up50_pn_l = 277;
    float pkg_net_dn50_pn_l = 280;
    MarkupResult markup_result = 283;
    string markup_detail = 286;
    google.protobuf.Timestamp timestamp = 289;
}


/*
    SpdrAuctionResult messages are published by SR ExecEngines and have complete markup detail for the auction notice including detail about SR responses.
*/    
message SpdrAuctionResult {
    message PKey {
        
        sfixed64 sr_auction_iD = 10; // unique SR AUCTION ID (required when responding to an auction notice)
        RunStatus run_status = 13;
    }

    message Legs {
        
        OptionKey leg_sec_key = 217;
        SpdrKeyType leg_sec_type = 220;
        BuySell leg_side = 223;
        uint32 leg_ratio = 226; // leg ratio (1, 2, etc)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100;
    SpdrKeyType sec_type = 103;
    string exch_auction_id = 106;
    string exch_auction_type = 109;
    NoticeShape auction_shape = 112;
    AuctionType auction_type = 115;
    OptExch auction_exch = 118; // exchange handling the auction
    BuySell auction_side = 121; // Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    sfixed32 matched_size = 124; // already matched size
    sfixed32 auction_size = 127; // auction size (includes already matched size)
    double auction_price = 130; // auction price (can be positive or negative)
    YesNo is_auction_price_valid = 133;
    sfixed32 auction_duration = 136; // expected auction / imbalance action duration (ms)
    sfixed64 auction_start_timestamp = 139; // auction / action start timestamp
    sfixed32 min_response_size = 142; // minimum size of the response order
    AuctionLimitType client_limit_type = 145; // client / imbalance limit type (if available)
    FirmType firm_type = 148; // firm type of the client side of auction (if available)
    string member_mPID = 151; // exchange member initiating auction (if available)
    string client_accnt = 154; // client account designation (if known)
    string other_detail = 157; // additional auction detail (exchange specific)
    MarketStatus market_status = 160; // market status (pre-open, open, closed, etc)
    int32 num_updates = 163; // number of auction update messages (since start of auction)
    sfixed64 auction_final_timestamp = 166; // last auction message timestamp (excluding the auction closed notice; if any)
    sfixed32 auction_start_size = 169; // initial auction size (size @ start of auction)
    double auction_start_price = 172;
    sfixed32 auction_start_matched_size = 175; // initial auction match size (size @ start of auction)
    int32 num_responses = 178; // as reported by exchange (if available)
    sfixed32 best_response_size = 181;
    double best_response_price = 184;
    sfixed32 cum_fill_quantity = 187; // as reported by exchange (if available)
    double avg_fill_price = 190;
    double auction_final_price = 193; // avgFillPrice (exchange result, if available) or best of [avgPrintPrice, nbboMarket, or auctionStartPrice]
    sfixed64 src_timestamp = 196; // source timestamp (nanoseconds) if available
    sfixed64 net_timestamp = 199; // network timestamp message arrival @ direct exchange gateway
    sfixed64 dgw_timestamp = 202; // network timestamp mbus message send @ direct exchange gateway
    sfixed64 mmr_timestamp = 205; // network timestamp of EE/MMR Host packet received (.netTimestampRcvd)
    sfixed64 eng_timestamp = 208; // network timestamp of EE handler packet arrival
    google.protobuf.Timestamp timestamp = 211;
    double auction_start = 229; // system start time (internal use)
    AuctionMktStance auction_nbbo_stance = 232;
    AuctionMktStance auction_exch_stance = 235;
    float bid_price = 238; // nbbo bid price		@ auction start
    float ask_price = 241; // nbbo ask price
    sfixed32 cum_bid_size = 244; // cum nbbo bid size		@ auction start
    sfixed32 cum_ask_size = 247; // cum nbbo ask size
    float exch_bid_prc = 250; // exch bid price	@ auction start
    float exch_ask_prc = 253; // exch ask price
    sfixed32 exch_bid_size = 256; // exch bid size		@ auction start
    sfixed32 exch_ask_size = 259; // exch ask size
    float rsp_probability = 262; // probability that auction will be profitable (for the auction responder) [if auctionPrice specified]
    float svol = 265; // SpiderRock surface volatility		@ auction start
    float sprc = 268; // SpiderRock surface price
    float vega = 271; // option vega
    float delta = 274; // option delta
    float s_edge_start = 277; // surface edge (auction start price to SR surface; if both exist)
    float s_edge_print = 280; // surface edge (estimated final auction price to SR surface; if both exist)
    float u_bid = 283; // underlier bid price		@ auction start
    float u_ask = 286; // underlier ask price
    float u_bid_t = 289; // underlier bid price		@ auction termination
    float u_ask_t = 292; // underlier ask price
    AuctionPrintResult auction_print_result = 295;
    float first_print_size = 298; // first print (fractional if part of a spread) in the auction window (T-25ms -to- T+150ms)
    double first_print_price = 301; // print price (single or spread) of all prints making up firtPrintSize
    PrtSide first_print_side = 304; // print side
    int32 first_print_type = 307; // print type code (from OPRA feed)
    sfixed64 first_src_timestamp = 310; // src timestamp of first OPRA print
    sfixed64 first_net_timestamp = 313; // net timestamp of first OPRA print
    float first_src_latency = 316; // auction initSrcTimestamp to first print srcTimestamp
    float first_net_latency = 319; // auction initNetTimestamp to first print netTimestamp
    sfixed32 first_away_prt_size = 322; // first print on an away exchange (if any in window)
    double first_away_prt_price = 325;
    float first_away_net_latency = 328;
    int32 num_prints = 331; // all prints (all print codes) in the auction window (T-25ms -to- T+150ms)
    sfixed32 cum_print_size = 334;
    double avg_print_price = 337;
    int32 num_print_legs = 340; // total number of spread legs
    float mark_m1 = 343;
    float u_mark_m1 = 346;
    float pnl_m1 = 349;
    YesNo pnl_m1_err = 352;
    float mark_m10 = 355;
    float u_mark_m10 = 358;
    float pnl_m10 = 361;
    YesNo pnl_m10_err = 364;
    repeated Legs legs = 214;
}


    
message SpdrAuctionState {
    message PKey {
        
        sfixed64 sr_auction_iD = 10; // unique SR AUCTION ID (required when responding to an auction notice)
    }

    message Legs {
        
        OptionKey leg_sec_key = 211;
        SpdrKeyType leg_sec_type = 214;
        BuySell leg_side = 217;
        uint32 leg_ratio = 220; // leg ratio (1, 2, etc)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100;
    SpdrKeyType sec_type = 103;
    string exch_auction_id = 106;
    string exch_auction_type = 109;
    YesNo is_test_auction = 112; // test auction (should only respond from T.accnts)
    AuctionState auction_state = 115;
    NoticeShape auction_shape = 118;
    AuctionType auction_type = 121;
    OptExch auction_exch = 124; // exchange handling the auction
    string auction_ex_dest = 127; // external exDest of auction (usually means auction is off-exchange)
    BuySell auction_side = 130; // Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    sfixed32 auction_size = 133; // size available to trade
    double auction_price = 136; // auction price (can be positive or negative)
    YesNo is_auction_price_valid = 139;
    sfixed32 auction_duration = 142; // expected auction / imbalance action duration (ms)
    sfixed32 auction_start_size = 145; // initial (starting) auction size
    double auction_start_price = 148; // initial (starting) auction price
    sfixed64 auction_start_timestamp = 151; // auction start timestamp
    sfixed32 min_response_size = 154; // minimum size of the response order
    AuctionLimitType limit_type = 157; // client / imbalance limit type (if available)
    FirmType firm_type = 160; // firm type of the client side of auction (if available)
    string member_mPID = 163; // exchange member initiating auction (if available)
    string client_accnt = 166; // client account designation (if known)
    string other_detail = 169; // additional auction detail (exchange specific)
    sfixed32 matched_size = 172; // size already matched (may still be available to trade at a better price)
    int32 num_updates = 175; // number of auction updates received (not counting auction termination message)
    int32 num_responses = 178; // as reported by exchange (if available)
    sfixed32 best_response_size = 181;
    double best_response_price = 184;
    sfixed32 cum_fill_quantity = 187; // as reported by exchange (if available)
    double avg_fill_price = 190;
    MarketStatus market_status = 193; // market status (pre-open, open, closed, etc)
    sfixed64 src_timestamp = 196; // source timestamp (nanoseconds) if available
    sfixed64 net_timestamp = 199; // network timestamp message arrival @ direct exchange gateway
    sfixed64 dgw_timestamp = 202; // network timestamp mbus message send @ direct exchange gateway
    google.protobuf.Timestamp timestamp = 205;
    repeated Legs legs = 208;
}


    
message SpdrAuctionStrategyOrder {
    message PKey {
        
        sfixed64 strategy_order_number = 10; // SR assigned strategy order number
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    string accnt = 103; // [PKEY]
    TickerKey ticker = 106; // [PKEY]
    SpdrSource spdr_source = 109; // [PKEY]
    sfixed64 grouping_code = 112; // [PKEY] usually 1 (increment if more than one active order is needed for a given ticker)
    string user_name = 115;
    string alt_order_id = 118;
    string strategy = 121; // client-supplied strategy string
    sfixed32 strategy_order_priority = 124; // client-supplied order priority per ticker
    YesNo is_order_active = 127; // if Yes, strategy order is active and responding, if No strategy order is held and will not respond
    string option_roots = 130; // (comma separated) if not empty all root(s) must be in list
    AuctionType auction_type = 133; // must match (if not None)
    string auction_exch = 136; // must contain (if not empty)
    sfixed32 min_auction_size = 139; // must bound auctionSize (num contracts if single leg, num spreads if multileg)
    sfixed32 max_auction_size = 142;
    sfixed32 min_num_opt_legs = 145; // num option legs must be between [minNumLegs, maxNumLegs]
    sfixed32 max_num_opt_legs = 148;
    sfixed32 max_leg_ratio = 151; // maximum individual option leg ratio; (ie. maxLegRatio=1 would only allow 1x1 or 1x1x1 or 1x1x1x1, etc. spread)
    YesNo can_include_stock = 154; // if yes, can respond to auction notices that include a stock leg
    YesNo can_include_multi_hedge_roots = 157; // can only respond to a multihedge root if Yes or if the root is explicitly listed in optionRoots
    BuySell response_side = 160; // auction responder side (your side) (None = Both) [if Buy or Sell the ALL option leg(s) must match]
    float min_net_ve_ratio = 163; // SUM(leg.dir * leg.ratio * leg.ve) / SUM(leg.ratio * leg.ve)  must be between [minNetVeRatio, maxNetVeRatio]
    float max_net_ve_ratio = 166;
    float min_net_th_ratio = 169; // SUM(leg.dir * leg.ratio * leg.th) / SUM(leg.ratio * leg.th)  must be between [minNetThRatio, maxNetThRatio]
    float max_net_th_ratio = 172;
    CallPut cp_flag = 175; // Pair = both (must match all legs)
    float min_years = 178; // both markup.minYears and markup.maxYears must be between [minYears, maxYears]
    float max_years = 181;
    google.protobuf.Timestamp min_expiry = 184; // both markup.minExpiry and markup.maxExpiry must be between [minExpiry, maxExpiry]
    google.protobuf.Timestamp max_expiry = 187;
    float max_years_range = 190; // markup.maxExpiry - markup.minExpiry must be <= maxYearsRange (spread only)
    float min_abs_delta = 193; // both markup.minAbsDe and markup.maxAbsDe must be between [minAbsDelta, maxAbsDelta]
    float max_abs_delta = 196;
    float min_xAxis = 199; // both markup.minXAxis and markup.maxXAxis must be between [minXAxis, maxXAxis]
    float max_xAxis = 202;
    float min_strike = 205; // both markup.minStrike and markup.maxStrike must be between [minStrike and maxStrike]
    float max_strike = 208;
    float max_strike_range = 211; // markup.maxStrike - markup.minStrike must be <= maxStrikeRange (spread only)
    float max_delta_range = 214; // markup.deltaRange must be <= maxDeltaRange (spread only)
    float min_vega_ratio = 217; // (xxVega / atmVega) or (avgVega / atmVega) must be >= minVegaRatio
    string spread_shape = 220; // ["Single,RevCon,Box,Butterfly,Calendar,Vertical,Diagonal,OtherSpread"] if not empty markup.spreadShape must be in list
    YesNo allow_improve = 223; // if Yes, responses may improve a fixed auctions price (up to surface/theo/probability edge limits)
    sfixed32 max_response_size = 226; // maximum spread per response (will respond for 100% if auction size <= maxResponseSize)
    float min_surf_edge_buy = 229; // spread surface edge must be >= sEdgeOffset + sEdgeScale * minSurfEdgeBuy * sqrt(years)
    float min_surf_edge_sell = 232; // spread surface edge must be >= sEdgeOffset + sEdgeScale * minSurfEdgeSell * sqrt(years)
    float min_probability = 235; // option response probability must be >= minProbability
    string theo_model = 238; // required if minTheoEdge is specified
    float min_theo_edge_buy = 241; // spread theo edge must be >= sEdgeOffset + sEdgeScale * minTheoEdgeBuy * sqrt(years)
    float min_theo_edge_sell = 244; // spread theo edge must be >= sEdgeOffset + sEdgeScale * minTheoEdgeSell * sqrt(years)
    AutoHedge auto_hedge = 247;
    HedgeInst hedge_instrument = 250; // Default=actual underlier (EQT or FUT) [IndexOptions use ETF]; FrontMonth=actual underlier (EQT) or front month (FUT) [IndexOptions use FM Fut]; Stock=hedgeSecKey.TickerKey; Future=hedgeSecKey.ExpiryKey
    ExpiryKey hedge_sec_key = 253; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 256; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 259; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 262; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    RMetricSource ref_rMetric1_src = 265;
    RMetricSource ref_rMetric2_src = 268;
    RMetricSource ref_rMetric3_src = 271;
    RMetricSource ref_rMetric4_src = 274;
    RMetricSource ref_rMetric5_src = 277;
    RMetricSource ref_rMetric6_src = 280;
    RMetricSource ref_rMetric7_src = 283;
    float order_ref_rMetric1 = 286; // user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]
    float order_ref_rMetric2 = 289; // user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]
    float order_ref_rMetric3 = 292; // user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]
    float order_ref_rMetric4 = 295; // user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]
    float order_ref_rMetric5 = 298; // user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]
    float order_ref_rMetric6 = 301; // user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]
    float order_ref_rMetric7 = 304; // user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    float max_acc_day_wt_vega_ln = 307; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 310; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 313; // accnt day (time weighted) vega offset (target position)
    float max_acc_day_dDelta_ln = 316; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 319; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 322; // accnt day $delta offset (target position)
    float max_exp_day_wt_vega_ln = 325; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 328; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 331; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 334; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 337; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 340; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 343; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 346; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 349; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 352; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 355; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 358; // accnt+symbol day $delta offset (target position)
    float max_exp_day_rMetric6_ln = 361; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 364; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float exp_day_rMetric6_offset = 367; // accnt+expiration day rMetric6 offset (target position)
    float max_sym_day_rMetric7_ln = 370; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 373; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 376; // accnt+symbol day rMetric7 offset (target position)
    sfixed64 risk_group_id = 379; // if zero, a new unique number will be created for each accnt/ticker combo
    float max_grp_day_dDelta_ln = 382; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 385; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_ln = 388; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 391; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 394; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float max_grp_day_premium_ln = 397; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 400; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 403; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float max_grp_day_rMetric1_ln = 406; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 409; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 412; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float max_grp_day_rMetric2_ln = 415; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 418; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 421; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 424; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 427; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 430; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 433; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 436; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_ln = 439; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 442; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 445; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float min_grp_day_uUp15 = 448; // net grp up15% slide pnl must be > minGrpDayUUp15
    float min_grp_day_uDn15 = 451; // net grp dn15% slide pnl must be > minGrpDayUDn15
    float min_grp_day_uUp50 = 454; // net grp up50% slide pnl must be > minGrpDayUUp50
    float min_grp_day_uDn50 = 457; // net grp dn50% slide pnl must be > minGrpDayUDn50
    google.protobuf.Timestamp timestamp = 460;
}


    
message SpdrAuctionStrategyState {
    message PKey {
        
        string accnt = 10; // [PKEY]
        TickerKey ticker = 13; // [PKEY]
        sfixed64 grouping_code = 16; // [PKEY] usually 1 (increment if more than one active order is needed for a given ticker)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 strategy_order_number = 100; // SR generated number
    string client_firm = 103;
    string user_name = 106;
    string alt_order_id = 109;
    SpdrOrderStatus strategy_status = 112;
    sfixed32 num_single_expose_auctions = 115;
    sfixed32 num_single_improve_auction = 118;
    sfixed32 num_spread_expose_auctions = 121;
    sfixed32 num_spread_improve_auction = 124;
    sfixed32 num_single_expose_responses = 127;
    sfixed32 num_single_improve_responses = 130;
    sfixed32 num_spread_expose_responses = 133;
    sfixed32 num_spread_improve_responses = 136;
    sfixed32 cum_cn_bot = 139;
    sfixed32 cum_cn_sld = 142;
    float cum_dDelta_bot = 145;
    float cum_dDelta_sld = 148;
    float cum_hedge_dDBot = 151;
    float cum_hedge_dDSld = 154;
    float cum_vega_bot = 157;
    float cum_vega_sld = 160;
    float cum_wt_vega_bot = 163;
    float cum_wt_vega_sld = 166;
    float cum_premium_bot = 169;
    float cum_premium_sld = 172;
    float cum_rMetric1_bot = 175;
    float cum_rMetric1_sld = 178;
    float cum_rMetric2_bot = 181;
    float cum_rMetric2_sld = 184;
    float cum_rMetric3_bot = 187;
    float cum_rMetric3_sld = 190;
    float cum_rMetric4_bot = 193;
    float cum_rMetric4_sld = 196;
    float cum_rMetric5_bot = 199;
    float cum_rMetric5_sld = 202;
    float cum_rMetric6_bot = 205;
    float cum_rMetric6_sld = 208;
    float cum_rMetric7_bot = 211;
    float cum_rMetric7_sld = 214;
    float net_grp_day_uUp15 = 217; // net grp up15% slide pnl
    float net_grp_day_uDn15 = 220; // net grp dn15% slide pnl
    float net_grp_day_uUp50 = 223; // net grp up50% slide pnl
    float net_grp_day_uDn50 = 226; // net grp dn50% slide pnl
    float tot_working_secs = 229;
    sfixed32 num_strike_filter = 232;
    sfixed32 num_expiry_filter = 235;
    sfixed32 num_spread_filter = 238;
    sfixed32 num_other_filter = 241;
    sfixed32 num_limit_miss = 244;
    sfixed32 num_risk_hold = 247;
    google.protobuf.Timestamp timestamp = 250;
}


/*
    SpdrAutoHedgeControl contains autohedge / risk group control details.  Can be uploaded from SRSE, created from ExecutionEngines, or created by SR tools.
*/    
message SpdrAutoHedgeControl {
    message PKey {
        
        string accnt = 10;
        sfixed64 risk_group_id = 13; // riskGroupId = 0 means hedgeScope = Accnt
        ExpiryKey hedge_sec_key = 16; // Execution Hedge SecKey (from SpdrParentExecution.hedgeSecKey)
        SpdrKeyType hedge_sec_type = 19; // Execution Hedge SecType (Stock or Future)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR client firm code
    string alt_order_id = 103; // alternate order ID (usually clOrdId from client)
    string alt_accnt = 106; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 109; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string src_routing_code = 112; // inbound FIX routing code or SRSE/tool server appID (if any)
    string accnt_route_code = 115; // accntRoute acronym
    string extern_ex_dest = 118; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 121; // external algo names/parameters (usually just an algo name)
    string strategy = 124; // client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    string user_name = 127; // name of the user entering the order
    AutoHedge auto_hedge = 130; // auto-hedge algorithm (used for restoring tickets)
    HedgeTarget hedge_target = 133;
    float min_hedge_dDelta = 136; // do not generate autohedge orders if total group $Delta is between [minHedgeDDelta and maxHedgeDDelta] (eg.[-$100,000, +$100,000])
    float max_hedge_dDelta = 139;
    sfixed32 order_size = 142; // initial (and maximum) size of a hedge parent buy or sell order.  note: actual working size will be controlled by the autohedge server based on filled deltas but working size cannot exceed orderSize
    ShortSaleFlag ssale_flag = 145;
    sfixed32 max_exposure_size = 148; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 151; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 154; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible
    YesNo can_overlap_cxl_repl = 157; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 160; // Immediate = all size immediately available; TWAP = size released in time intervals;VWAP = size released in volume intervals;TwapForce = size released in intervals/execution forced at the end of interval
    int32 progress_slice_cnt = 163; // number of twap slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 166; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 169; // target vwap participation rate (target % of trade activity)
    int32 min_mkt_on_close_pct = 172; // Minimum pct [0 - 100] of order reserved for the on-close auction
    float max_make_exch_fee = 175; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 178; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    IncExchFee inc_take_exch_fee = 181; // include exchange fee in probability
    IncExchFee inc_make_exch_fee = 184; // include exchange fee in probability
    MakeExchRule make_exch_rule = 187; // ActiveMaker exchange preference rule: 'MaxPart' will pick exchanges to maximize participation; 'FeeOrder' will pick exchanges to minimize fees [maximize rebates]; 'ImprvOnly' will only make when improving NBBO.
    sfixed32 max_child_orders = 190; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 193; // eligible exchanges (0 = all)
    TimeInForce time_in_force = 196;
    google.protobuf.Timestamp start_dttm = 199; // [optional] (parent order start time)
    sfixed32 order_duration = 202; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 205; // [optional] (default: 2099-01-01)
    ParentOrderHandling parent_order_handling = 208;
    ParentBalanceHandling parent_balance_handling = 211;
    SpdrLimitType order_limit_type = 214;
    SpdrLimitClass take_limit_class = 217; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 220; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    double order_prc_limit = 223; // Applies if LimitType = Prc[]
    double order_prc_offset = 226; // default=0
    StateModel state_model = 229;
    AlphaType take_alpha_type = 232; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 235; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 238; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    float make_alpha_factor = 241; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    float take_probability = 244; // takeProbLimit = takeProbability [if AlphaType = Static]
    float make_probability = 247; // makeProbLimit = makeProbability [if AlphaType = Static]
    google.protobuf.Timestamp timestamp = 250; // record timestamp
}


/*
    SpdrAutoHedgeState records are published by autohedge servers and describe the current state of an autohedge controller that is managing RiskGroup autohedge orders.
*/    
message SpdrAutoHedgeState {
    message PKey {
        
        string accnt = 10;
        sfixed64 risk_group_id = 13;
        ExpiryKey hedge_sec_key = 16; // Execution Hedge SecKey (from SpdrAutoHedgeControl.targetSecKey)
        SpdrKeyType hedge_sec_type = 19; // Execution Hedge SecType (from SpdrAutoHedgeControl.targetSecType) [can be None]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 grouping_code = 100;
    string client_firm = 103; // SR client firm code
    TickerKey ticker = 106; // ticker group (eg. @ES, @ZN)
    string security_desc = 109;
    ShortSaleFlag ssale_flag = 112;
    HedgeGroupState hedge_state = 115;
    string hedge_text = 118;
    double u_prc = 121;
    YesNo is_delta_mixed = 124;
    string accumulator_error = 127;
    double grp_delta_bot = 130; // option delta bot (in ctrlDe units)
    double grp_delta_sld = 133;
    double grp_dDelta_bot = 136; // option $delta bot (using uMid at time of option fill)
    double grp_dDelta_sld = 139;
    google.protobuf.Timestamp last_grp_fill_dttm = 142;
    double ctrl_delta_bot = 145; // hedge target delta (units) bot
    double ctrl_delta_sld = 148;
    double ctrl_dDelta_bot = 151; // hedge target $delta bot (using actual fill price)
    double ctrl_dDelta_sld = 154;
    google.protobuf.Timestamp last_ctrl_fill_dttm = 157;
    double last_hedge_mark = 160; // hedgeSecKey last live mark (mid-market) (as of record publish time)
    sfixed32 abs_opt_cn = 163; // total number of option contracts executed in this hedge group
    double net_delta = 166; // grpDeltaBot - grpDeltaSld + ctrlDeltaBot - ctrlDeltaSld
    double net_dDelta = 169; // grpDDeltaBot - grpDDeltaSld + ctrlDDeltaBot - ctrlDDeltaSld
    float open_hedge_time = 172; // size weighted average time (in seconds) hedge risk has been open (executions to fills)
    float hedge_target_vol = 175; // implied / expected today (annualized) volatility for hedge target
    float expected_prc_range = 178; // SQRT(avgHedgeTime x hedgeTargetVol) cone
    double opn_delta_bot = 181; // open risk delta bot (in ctrlDe units)
    double opn_delta_sld = 184;
    double opn_dDelta_bot = 187; // open risk $delta bot (in ctrlDe units)
    double opn_dDelta_sld = 190;
    double cls_delta_bot = 193; // close risk delta bot (in ctrlDe units)
    double cls_delta_sld = 196;
    double cls_dDelta_bot = 199; // close risk $delta bot (in ctrlDe units)
    double cls_dDelta_sld = 202;
    float slippage_pn_l = 205; // opnDeltaBot * (clsDeltaPrcSld - opnDeltaPrcBot) + opnDeltaSld * (opnDeltaPrcSld - clsDeltaPrcBot)
    float slippage_unit_pn_l = 208; // slippagePnL / (grpDeltaBot + grpDeltaSld) [pnl / unit (share or fc)]
    float slippage_norm_pn_l = 211; // slippageUnitPnL / expectedPrcRange
    float min_dDelta_band = 214;
    float max_dDelta_band = 217;
    sfixed64 b_parent_number = 220;
    sfixed32 b_active_size = 223;
    string b_brkr_status = 226;
    string b_brkr_error = 229;
    sfixed64 s_parent_number = 232;
    sfixed32 s_active_size = 235;
    string s_brkr_status = 238;
    string s_brkr_error = 241;
    double dd_mult = 244;
    sfixed32 underliers_per_cn = 247; // future underliers per contract
    UnderlierType underlier_type = 250; // type of underlier (affects $greek calculations)
    float point_value = 253; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 256;
    double live_hedge_mark = 259; // hedgeSecKey live mark (mid-market) [zero in SRSE]
    string updt_reason = 262;
    google.protobuf.Timestamp timestamp = 265; // SR system timestamp
}


    
message SpdrAvailExecAllocation {
    message PKey {
        
        sfixed64 avail_exec_number = 10; // unique number for this message
    }

    message ChildOrders {
        
        sfixed64 cl_ord_id = 145; // childOrders in the above allocation
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string omni_accnt = 100; // omnibus accnt (SR accnt)
    OptionKey sec_key = 103; // security key (stock, future, or option)
    SpdrKeyType sec_type = 106; // security type
    BuySell order_side = 109; // order side (always buy for MLEG orders)
    ShortSaleFlag ssale_flag = 112; // ssale flag (None if not stock)
    PositionType position_type = 115; // positionType (None if not equity option)
    SpdrSource spdr_source = 118; // parent order source
    sfixed64 grouping_code = 121; // unique broker code
    string mleg_leg_key = 124; // [secKey.StringKey;legRatio;side;positionEffect, secKey.StringKey;legRatio;side;positionEffect, ...]
    sfixed64 base_parent_number = 127; // SR BaseParentNumber these executions belong to (can be zero if executions are drop)
    sfixed32 cum_fill_qty = 130; // net cumFillQty (total for the day)
    double avg_fill_prc = 133; // average fill price
    ExecAllocStatus alloc_status = 136; // allocation status
    google.protobuf.Timestamp timestamp = 139;
    repeated ChildOrders child_orders = 142;
}


/*
    SpdrAwayExecution records are published by ToolServers, SRSE, and FIX drop recv gateways.  They are consumed by AwayExecutionMarkupServer which, in turn, publishes corresponding SpdrParentExecution records, including M1 and M10 updates.
*/    
message SpdrAwayExecution {
    message PKey {
        
        string accnt = 10; // SR accnt
        sfixed64 client_fill_id = 13; // client fill ID (should be unique for each accnt)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 fill_number = 100; // SpiderRock execution number (globally unique over trailing 10 days) [copied in SpdrParentExecution.pkey.fillNumber]
    string engine_name = 103;
    string client_firm = 106; // SR client firm
    SpdrSource spdr_source = 109; // SR source code
    ExecStatus exec_status = 112; // SR execution status (Fill,Bust,Correct,Reject)
    string client_order_id = 115; // client order ID (should be unique for each clientFirm) (if any) [copied into SpdrParentExecution.altOrderId]
    string src_routing_code = 118; // inbound FIX routing code (drop server) (if any)
    sfixed64 risk_group_id = 121; // riskGroupId (parent order group ID) for this away execution report (will be incorporated into a corresponding EE risk group counter if != 0)
    OptionKey sec_key = 124; // SR security key
    SpdrKeyType sec_type = 127; // SR security type [Stock, Future, Option]
    ExecRole exec_role = 130; // SpiderRock relationship to this execution record
    string exec_broker = 133; // used to reflect field from a downstream destination back up to and upstream fill report
    string exec_broker_mPID = 136; // exec broker acronym (a FINRA assigned MPID or SR '$' broker tag)
    BuySell fill_side = 139; // fill side
    double fill_price = 142; // fill price
    PriceType fill_price_type = 145;
    sfixed32 fill_quantity = 148; // fill quantity
    sfixed32 child_size = 151; // child order size
    string fill_exch = 154; // fill exchange (if any)
    google.protobuf.Timestamp fill_dttm = 157; // fill date/time
    double fill_ref_uPrc = 160; // reference underlier price @ fill arrival time
    string orig_exec_iD = 163; // original execution ID string (child order)
    string last_exec_iD = 166; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    google.protobuf.Timestamp fill_transact_dttm = 169; // transaction date/time as reported by exchange or down stream broker
    string fill_report_detail = 172; // extra detail (if any) from child execution
    ShortSaleFlag ssale_flag = 175;
    PositionType position_type = 178;
    float theo_vol = 181; // client supplied theoretical volatility (used for markup only)
    string comment = 184; // text comment (if any)
    string user_data1 = 187; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 190; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string strategy = 193; // client-supplied strategy string
    string modified_by = 196; // user who last modified this record
    google.protobuf.Timestamp timestamp = 199; // timestamp of last modification
}


/*
    SpdrBlockAuctionDetail messages are published once at the start of an auction.
*/    
message SpdrBlockAuctionDetail {
    message PKey {
        
        sfixed64 base_parent_number = 10; // baseParentNumber of the parent broker that is initiating the auction
    }

    message DirectedCounterParty {
        
        string client_firm = 172;
    }

    message OrderLegs {
        
        TickerKey ticker = 178;
        BuySell stock_side = 181; // [Buy | Sell | None]
        sfixed32 stock_shares = 184; // number of shares included (zero if none)
        int32 num_legs = 187; // number of valid legs below
        OptionKey sec_key1 = 190; // leg #1
        SpdrKeyType sec_type1 = 193;
        uint32 mult1 = 196;
        BuySell side1 = 199;
        OptionKey sec_key2 = 202; // leg #2
        SpdrKeyType sec_type2 = 205;
        uint32 mult2 = 208;
        BuySell side2 = 211;
        OptionKey sec_key3 = 214; // leg #3
        SpdrKeyType sec_type3 = 217;
        uint32 mult3 = 220;
        BuySell side3 = 223;
        OptionKey sec_key4 = 226; // leg #4
        SpdrKeyType sec_type4 = 229;
        uint32 mult4 = 232;
        BuySell side4 = 235;
        OptionKey sec_key5 = 238; // leg #5
        SpdrKeyType sec_type5 = 241;
        uint32 mult5 = 244;
        BuySell side5 = 247;
        OptionKey sec_key6 = 250; // leg #6
        SpdrKeyType sec_type6 = 253;
        uint32 mult6 = 256;
        BuySell side6 = 259;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    SpdrOrderShape auction_shape = 103; // Auction Shape [Single or MLeg]
    TickerKey ticker = 106; // base stock ticker
    string accnt = 109; // SR accnt (initiating parent order)
    string client_firm = 112; // SR client firm (initiating parent order)
    string user_name = 115; // SR user name (initiating parent order)
    OptionKey sec_key = 118; // SecKey (initiating parent order)
    SpdrKeyType sec_type = 121; // SecType (initiating parent order)
    BuySell order_side = 124; // OrderSide (initiating parent order)
    SpdrSource spdr_source = 127; // spdrSource (initiating parent order)
    sfixed64 grouping_code = 130; // grouping code (initiating parent order)
    sfixed32 cust_quantity = 133;
    CustQtyCond cust_qty_cond = 136;
    sfixed32 auction_duration = 139; // expected maximum duration of the auction
    YesNo is_active_maker = 142; // will the initiator be active in an exchange order book during the auction.
    YesNo can_trade_immediate = 145;
    double ref_uPrc = 148;
    float ref_delta = 151;
    float ref_gamma = 154;
    PriceFormat price_format = 157;
    sfixed64 net_timestamp = 160;
    google.protobuf.Timestamp timestamp = 163;
    DirectedScope directed_scope = 166;
    repeated DirectedCounterParty directed_counter_party = 169;
    repeated OrderLegs order_legs = 175;
}


/*
    SpdrBlockAuctionState records are published frequently while a block auction is active.
*/    
message SpdrBlockAuctionState {
    message PKey {
        
        sfixed64 base_parent_number = 10; // SR parent number
    }

    message Responder {
        
        sfixed64 parent_number = 319; // baseParentNumber of response
        sfixed64 base_parent_number = 322;
        string accnt = 325;
        string client_firm = 328;
        int32 best_level = 331; // best auction SolutionLevel that responder would participate in
        sfixed32 response_size = 334; // response order size
        double response_limit_price = 337; // live response limit price @ record publish
        LimitError response_limit_error = 340;
        string response_limit_desc = 343;
    }

    message SolutionLevel {
        
        PriceLevel inc_nBBO = 295; // solution includes NBBO at this level (level1 = best, level2 = 2nd best)
        int32 num_responders = 298;
        double match_price = 301; // current auction cross price (in auction price increments)
        sfixed32 match_size = 304; // current auction size available @ match price
        YesNo can_accept = 307; // can the initiator accept this solution
        float solution_vol = 310; // solution vol (corresponds to solutionPrc @ live uPrc) [SR Vol]
        float ref_solution_prc = 313; // solution price [from SR Vol @ refUPrc]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    string accnt = 103; // SR accnt (initiating parent order)
    string client_firm = 106; // SR client firm (initiating parent order)
    string user_name = 109; // SR user name (initiating parent order)
    OptionKey sec_key = 112; // SecKey (initiating parent order)
    SpdrKeyType sec_type = 115; // SecType (initiating parent order)
    BuySell order_side = 118; // OrderSide (initiating parent order)
    SpdrSource spdr_source = 121; // spdrSource (initiating parent order)
    sfixed64 grouping_code = 124; // grouping code (initiating parent order)
    TickerKey ticker = 127; // underlier ticker
    sfixed32 cust_quantity = 130;
    CustQtyCond cust_qty_cond = 133; // from parentOrder.takeReachRule
    CustProgress cust_progress = 136; // from parentOrder.progressRule
    google.protobuf.Timestamp auction_start_dttm = 139;
    sfixed32 auction_duration = 142; // [expected] auction expiration
    YesNo is_active_maker = 145; // will the initiator be active in an exchange order book during the auction.
    YesNo can_trade_immediate = 148;
    YesNo will_auto_complete = 151; // initiator has established an auto-complete price that will allow auction to trade at the conclusion
    double take_limit_price = 154;
    LimitError take_limit_error = 157;
    string take_limit_desc = 160;
    double make_limit_price = 163;
    LimitError make_limit_error = 166;
    string make_limit_desc = 169;
    double ref_uPrc = 172; // reference uPrc established at the start of the auction
    float ref_delta = 175; // reference delta for all price adjustments
    float ref_gamma = 178; // reference gamma for all price adjustments
    SpdrOrderStatus cust_order_status = 181;
    SpdrCloseReason cust_order_result = 184;
    sfixed32 block_auction_counter = 187;
    BlockAuctionStatus block_auction_status = 190;
    string block_auction_detail = 193;
    sfixed32 num_responders = 196;
    CrossReason cross_reason = 199;
    sfixed64 cross_cl_ord_id = 202; // clOrdId of the cross child order used to initiate the exchange cross
    double cross_ref_uPrc = 205; // reference underlier price used to resolve all prices used in the auction cross
    double cross_ref_uBid = 208; // reference underlier bid at initiation of auction cross
    double cross_ref_uAsk = 211; // reference underlier ask at initiation of auction cross
    float cross_bid_prc = 214; // reference nbbo bid at initiation of auction cross
    float cross_ask_prc = 217; // reference nbbo ask at initiation of auction cross
    sfixed32 cross_bid_size = 220; // reference cum nbbo bid size at initiation of auction cross
    sfixed32 cross_ask_size = 223; // reference cum nbbo ask size at initiation of auction cross
    float cross_surf_prc = 226;
    float cross_surf_vol = 229;
    sfixed64 cross_timestamp = 232; // cross initiation net timestamp (hi precision)
    google.protobuf.Timestamp cross_init_dttm = 235; // cross initiation dttm (system precision)
    sfixed32 init_cross_size = 238; // size of the initial cross on exchange
    double init_cross_price = 241; // initial price on the exch cross order
    sfixed32 cust_fill_quantity = 244; // cumulative fill quantity (cust)
    double cust_avg_fill_price = 247;
    sfixed32 face_fill_quantity = 250; // cumulative fill quantity (face) [all responders combined]
    double face_avg_fill_price = 253;
    float cpx1 = 256; // child price level #1 (ActiveMaker orders; if any)
    sfixed32 csz1 = 259; // cumulative size represented at this price
    fixed32 cex1 = 262; // bit mask of all exchanges where we are at this price
    float u_prc = 265; // underlier price (usually mid-market)
    float nbbo_bid = 268; // current option nbbo bid (at time of record publish)
    float nbbo_ask = 271; // current option nbbo ask (at time of record publish)
    sfixed32 nbbo_bid_sz = 274; // current option nbbo cum bid size (at time of record publish)
    sfixed32 nbbo_ask_sz = 277; // current option nbbo cum ask size (at time of record publish)
    float surface_prc = 280; // SR surface price @ record publish
    float surface_vol = 283; // SR surface volatility @ record publish
    sfixed32 num_updates = 286; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 289; // SR system timestamp (record publish)
    repeated Responder responder = 316;
    repeated SolutionLevel solution_level = 292;
}


    
message SpdrBrkrStateAggregationV2 {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_records = 100; // Total number of brokers
    sfixed32 num_pending_orders = 103; // number of orders waiting to be triggered/released by a trader
    sfixed32 num_active_brkrs = 106; // number of active/working parent orders (trading or ready trade)
    sfixed32 num_held_brkrs = 109; // number of active/stalled parent orders (risk hold or otherwise)
    sfixed32 num_working_brkrs = 112; // number of brokers with child orders
    sfixed32 num_closed_brkrs = 115; // number of brokers that are closed/terminated
    sfixed32 num_reject_brkrs = 118; // number of brokers that are closed/rejected
    sfixed32 sum_active_stk_qty = 121; // total broker open quantity (leaves) that could potentially execute (may currently be on risk hold) - stock
    sfixed32 sum_active_opt_qty = 124; // total broker open quantity (leaves) that could potentially execute (may currently be on risk hold) - option
    sfixed32 sum_active_fut_qty = 127; // total broker open quantity (leaves) that could potentially execute (may currently be on risk hold) - futures
    sfixed32 sum_active_mLeg_qty = 130;
    sfixed32 num_child_orders = 133; // number of active child orders in the market (usually in exchange order books)
    sfixed32 tot_child_orders = 136; // total number of child orders creates (both open and closed)
    float sum_child_dDelta_ln = 139; // total child order (+) $delta current in the market
    float sum_child_dDelta_sh = 142; // total child order (-) $delta current in the market
    sfixed32 cum_fill_qty_stk = 145; // total fill quantity of parent orders - stock (for fills via SpiderRock)
    sfixed32 cum_fill_qty_opt = 148; // total fill quantity of parent orders - option (for fills via SpiderRock)
    sfixed32 cum_fill_qty_fut = 151; // total fill quantity of parent orders - futures (for fills via SpiderRock)
    double cum_fill_vega = 154; // total fill vega (for fills via SpiderRock)
    float cum_fill_theta = 157; // total fill theta (for fills via SpiderRock)
    float cum_fill_dDelta = 160; // total fill $delta (for fills via SpiderRock)
    float tot_active_seconds = 163;
    float tot_with_seconds = 166; // total number of seconds with one or more working child orders that are with of nbbo
    float tot_alone_seconds = 169; // total number of seconds with one or more working child orders that make up 100% of nbbo
    float tot_working_seconds = 172; // total number of seconds with one or more working child orders that are part of nbbo
    sfixed32 num_active_prints = 175; // total quantity printed while parent order was active; [any exchange; all prints]
    float sum_risk_hold_secs = 178; // total number of seconds with parent order active but on risk hold (zero child order risk size)
    sfixed32 sum_make_throttle_skips = 181; // total number of child orders not sent to market due to outbound lines being in a queued/throttled state
    float sum_make_throttle_delay = 184; // cumulative seconds of queue skip delay (seconds that a child order was not in the market dues to outbound lines being in a queued/throttled state)
}


/*
    Records inserted into this table causes the corresponding parent broker to cancel the current underlying parent order if active and cancellable.
*/    
message SpdrBrokerCancel {
    message PKey {
        
        string accnt = 10; // SR trading account
        OptionKey sec_key = 13; // Composite Security Key
        SpdrKeyType sec_type = 16; // Security Type [Stock, Future, Option]
        sfixed64 grouping_code = 19;
        SpdrSource spdr_source = 22;
        BuySell order_side = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string cxl_reason = 100;
    string alt_cancel_id = 103;
    string engine_name = 106; // set by the engine handling event (should be blank on arrival)
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


/*
    Records inserted into this table causes the corresponding parent broker to force-cancel and terminate the current underlying parent order.
*/    
message SpdrBrokerForceCancel {
    message PKey {
        
        string accnt = 10; // SR trading account
        OptionKey sec_key = 13; // Composite Security Key
        SpdrKeyType sec_type = 16; // Security Type [Stock, Future, Option]
        sfixed64 grouping_code = 19;
        SpdrSource spdr_source = 22;
        BuySell order_side = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string cxl_reason = 100;
    string engine_name = 103; // set by the engine handling event (should be blank on arrival)
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


/*
    SpdrChildExecution records are published when a child order fill is received.  These records update if busted or corrected by a downstream venue.
    SpdrChildExecution records are published to the SpiderRock elastic cluster as they arrive.
*/    
message SpdrChildExecution {
    message PKey {
        
        sfixed64 fill_number = 10; // SR fill number (same as SpdrParentOrder.pkey.fillNumber)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 cl_ord_id = 100; // SR child order clOrdId
    SpdrOrderShape child_shape = 103;
    ExecShape exec_shape = 106;
    string street_cl_ord_id = 109; // usually clOrdID.X16 but can be different if street gateway was translating clOrdId
    string street_order_id = 112; // street side order ID (for canceling order)
    sfixed64 parent_number = 115; // parent order number
    int32 parent_version = 118; // SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    sfixed64 base_parent_number = 121; // base order number (first parent number in chain)
    string alt_order_id = 124; // parent client clOrdId
    string alt_leg_ref_id = 127; // alt (usually FIX) legRefId
    string accnt = 130; // SR trading accnt
    string client_firm = 133; // SR client firm
    FaceSide face_side = 136;
    FaceShape face_shape = 139; // CrossCust = split broker / cust side, CrossFace = split broker / face side, CrossBoth = single broker cross
    sfixed64 face_side_cl_ord_id = 142; // either custClOrdId, faceClOrdId, or zero
    OptionKey sec_key = 145;
    SpdrKeyType sec_type = 148;
    TickerKey ticker = 151;
    BuySell order_side = 154;
    PriceType price_type = 157;
    sfixed32 order_exch = 160;
    string order_ex_dest = 163;
    YesNo iso_sweep = 166;
    YesNo is_directed = 169; // child order isDirected flag
    string engine_name = 172; // SpiderRock execution engine that handled the parent order
    string routing_code = 175;
    RelationshipType relationship_type = 178; // type of SR <-> client relationship
    FirmType firm_type = 181; // firm type markup on child order
    OrderCapacity order_capacity = 184; // order capacity markup on child order
    ShortSaleFlag ssale_flag = 187; // short sale flag @ child order send
    PositionType position_type = 190; // position type @ child order send
    sfixed32 locate_quan = 193; // locate quantity @ child order send
    OrderStatus order_status = 196;
    sfixed32 cum_fill_quantity = 199; // copied from child order immediately after this fill has been incorporated
    double avg_fill_price = 202;
    sfixed32 leaves_qty = 205;
    uint32 leg_ratio = 208;
    string fill_proc_detail = 211;
    YesNo cxl_attempted = 214; // cancel attempted before fill report received
    YesNo is_risk_cancel = 217;
    string cxl_reason_text = 220;
    float cxl2_fill_latency = 223; // cancel attempt to fill report elapsed time (@ execution engine)
    ChildHandler algo_handler = 226; // algo handler for this child order
    ExecTransType exec_trans_type = 229;
    int32 version = 232; // cancel/correct version number (initial fill is version=1)
    double fill_ts = 235; // fill report ts (seconds since startup; 100 nanosec resolution)
    google.protobuf.Timestamp fill_dttm = 238; // fill DateTime (from SRDateTime)
    sfixed32 fill_size = 241; // fill size (from execReport.lastSize)
    BuySell fill_side = 244; // fill size (from execReport.side)
    double fill_price = 247; // fill price (from execReport.lastPrice)
    google.protobuf.Timestamp fill_transact_dttm = 250; // fill DateTime (from execReport.fillDttm)
    string fill_market = 253; // fill market (from execReport.lastMarket)
    string fill_sRLiq_tag = 256; // fill SR normalized liquidity tag
    string fill_exch_liq_tag = 259; // fill exchange liquidity code
    string fill_exch_detail = 262; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    float fill_exch_fee = 265; // fill exchange fee (either estimated by SR or as reported by street gateway)
    string fill_exec_id = 268; // fill execution id (from execReport.execId)
    string fill_ref_exec_id = 271; // fill ref execution id (from execReport.refExecId) [only set on a cancel or correct]
    sfixed64 fill_leg_ref_id = 274; // fill leg ref id (from execReport.legRefId)
    sfixed32 fill_leg_ratio = 277; // legRatio (if spread order)
    string fill_firm_type = 280; // fill firm type (as reported from street side)
    string fill_exec_broker = 283; // fill execution broker (as reported from street side)
    OrderCapacity fill_order_capacity = 286; // fill order capacity (as reported from street side)
    string fill_contra_detail = 289; // fill contra party additional detail (if available)
    OrderCapacity fill_contra_capacity = 292; // fill order capacity of contra party (if available)
    string fill_report_detail = 295; // all non-standard fix tags received on child fill report (custom packing) [used for passing values back to client or drop gateways]
    string fill_street_text = 298;
    double nbbo_bid = 301; // nbbo bid @ fill time
    double nbbo_ask = 304; // nbbo ask @ fill time
    sfixed32 nbbo_bid_sz = 307; // nbbo bid size @ fill time
    sfixed32 nbbo_ask_sz = 310; // nbbo ask size @ fill time
    double exch_bid = 313; // exch bid @ fill time
    double exch_ask = 316; // exch ask @ fill time
    sfixed32 exch_bid_sz = 319; // exch bid size @ fill time
    sfixed32 exch_ask_sz = 322; // exch ask size @ fill time
    double u_prc = 325; // underlier price @ fill time
    double u_bid = 328; // underlier bid @ fill time
    double u_ask = 331; // underlier ask @ fill time
    sfixed32 u_bid_sz = 334; // underlier bid size @ fill time
    sfixed32 u_ask_sz = 337; // underlier ask size @ fill time
    double u_bid_cxl = 340; // underlier bid when cancel sent (if any)
    double u_ask_cxl = 343; // underlier ask when cancel sent (if any)
    sfixed64 src_timestamp = 346; // source timestamp (fixMessage.sendingTime) from street side [might not be high precision]
    sfixed64 sgw_timestamp = 349; // street gateway arrival timestamp
    sfixed64 eng_timestamp = 352; // execution engine arrival timestamp
    google.protobuf.Timestamp timestamp = 355;
}


/*
    SpdrChildExecutionCorrect records are manual modifications to child execution records
*/    
message SpdrChildExecutionCorrect {
    message PKey {
        
        sfixed64 fill_number = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 fill_size = 100; // set size = 0 to bust a previous fill
    double fill_price = 103;
    string comment = 106;
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


/*
    SpdrChildExecutionSummary records are created at the end of a trading period and contain a summary of trading activity for the period; Aggregation of SpdrParentExecution x SpdrChildOrder (inner join) by clOrdId
*/    
message SpdrChildExecutionSummary {
    message PKey {
        
        string accnt = 10;
        SpdrKeyType sec_type = 13;
        TickerSrc ticker_src = 16;
        SpdrSource spdr_source = 19;
        SpdrOrderShape child_shape = 22;
        MktWidthCode mkt_width_code = 25; // from (SpdrChildOrder.nbboAsk - SpdrChildOrde.nbboBid)
        ChildHandler algo_handler = 28;
        string routing_code = 31;
        string exec_broker_mPID = 34;
        string order_ex_dest = 37;
        DateKey trading_period = 40;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_child_executions = 100;
    float sum_child_prc_imprv = 103; // fill price to cross price at time of fill report
    sfixed32 sum_child_fill_qty = 106;
    float sum_child_fill_vega = 109;
    float sum_child_m1_pn_l = 112; // fill price to mid mkt (+1 minute)
    float sum_child_m10_pn_l = 115; // fill price to mid mkt (+10 minutes)
    float sum_child_exch_fee = 118;
    float sum_child_brkr_fee = 121;
    sfixed32 num_limit_slippage = 124; // number of fills with limit slippage
    float sum_limit_slippage = 127; // limit slippage sum (if any)
    sfixed32 num_fill_prob = 130; // fill probability at time of fill report
    float sum_fill_prob = 133;
    sfixed32 num_surface_edge = 136; // surface edge at time of fill report
    float sum_surface_edge = 139;
}


/*
    SpdrChildOrder records are published when SpiderRock sends orders to downstream exchanges or venues.  These records update as the state of the child order updates.
    SpdrChildOrder records are published to the SpiderRock elastic cluster when they have reached a terminal state.
*/    
message SpdrChildOrder {
    message PKey {
        
        sfixed64 cl_ord_id = 10;
    }

    message FaceLegs {
        
        sfixed64 last_leg_ref_id = 1042;
        google.protobuf.Timestamp last_fill_dttm = 1045;
        sfixed32 cum_square_qty = 1048; // cum spread quantity filled (all legs received)
        double avg_square_prc = 1051;
        google.protobuf.Timestamp last_square_dttm = 1054;
        sfixed32 cum_partial_qty = 1057; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
        ShortSaleFlag ssale_flag = 1060;
        sfixed32 stock_cum_fill_qty = 1063;
        double stock_avg_fill_prc = 1066;
        int32 num_legs = 1069; // number of valid legs below
        PositionType pos_type1 = 1072;
        sfixed32 leg_cum_fill_qty1 = 1075;
        double leg_avg_fill_prc1 = 1078;
        PositionType pos_type2 = 1081;
        sfixed32 leg_cum_fill_qty2 = 1084;
        double leg_avg_fill_prc2 = 1087;
        PositionType pos_type3 = 1090;
        sfixed32 leg_cum_fill_qty3 = 1093;
        double leg_avg_fill_prc3 = 1096;
        PositionType pos_type4 = 1099;
        sfixed32 leg_cum_fill_qty4 = 1102;
        double leg_avg_fill_prc4 = 1105;
        PositionType pos_type5 = 1108;
        sfixed32 leg_cum_fill_qty5 = 1111;
        double leg_avg_fill_prc5 = 1114;
        PositionType pos_type6 = 1117;
        sfixed32 leg_cum_fill_qty6 = 1120;
        double leg_avg_fill_prc6 = 1123;
    }

    message FaceSide {
        
        FaceAllocType alloc_type = 706; // note: only ExecAccnt FaceSide(s) are included in corresponding NewOrderCross/NewOrderMLegCross messages
        int32 alloc_id = 709; // allocation ID for this FaceSide record (1 - 10)
        sfixed64 alloc_cl_ord_id = 712; // unique allocClOrdID for this FaceSide record (SRGuid)
        string alt_order_id = 715; // parent client clOrdId
        string accnt = 718;
        string client_firm = 721;
        string alt_account = 724; // altAccount
        string agg_group = 727; // aggregation group accntFace
        string no_cross_group = 730; // no-cross group for this accnt
        FirmType firm_type = 733;
        OrderCapacity order_capacity = 736;
        ShortSaleFlag ssale_flag = 739; // primary short sale flag (single leg orders)
        PositionType position_type = 742; // primary position type (single leg orders)
        FutCustType fut_cust_type = 745;
        FutClearingRange fut_clear_rng = 748;
        sfixed32 alloc_size = 751; // size/quantity of this allocation slice; (SUM: faceSide.allocRequestQty) == top.orderSize
        sfixed32 alloc_cum_fill_qty = 754; // cum fill quantity (SUM: ExecReport.lastQuantity)
        double alloc_avg_price = 757; // avg fill price (AVG: ExecReport.lastPrice)
        sfixed32 alloc_leaves_qty = 760; // open allocationRequestQty (leavesQty)
        sfixed32 cum_fill_qty_exec = 763; // from ExecReport.cumFillQuantity
        double avg_fill_prc_exec = 766; // from ExecReport.avgFillPrice
        sfixed32 last_msg_seq_num = 769; // largest execReport.msgSeqNum process for this child order
        int32 num_executions = 772; // num ExecReports w/lastQuantity > 0
        sfixed32 firm_position = 775;
        sfixed32 open_sell_sh = 778;
        sfixed32 locate_quan = 781; // available locate quantity (if selling short) @ child order send time
        string locate_firm = 784; // firm granting the locate
        string locate_source = 787; // locate ID code (if any)
        string exch_trader_id = 790;
        string large_trader_id = 793;
        string trading_location = 796;
        string clearing_firm = 799; // from AccountConfig
        string clearing_accnt = 802; // from AccountConfig
        string accnt_route_code = 805;
        string exec_broker_accnt = 808;
        string exec_broker_cl_firm = 811;
        string exec_broker_user_name = 814;
        RelationshipType relationship_type = 817; // type of SR <-> client relationship
        FlipType clearing_flip_type = 820; // Clearing Flip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc)
        string clearing_flip_firm = 823; // DeliverTo firm (if any)
        string clearing_flip_accnt = 826; // DeliverTo accnt (if any)
        string cat_src_brkr_iMID = 829; // B/D firm FDID (only exists if a B/D is the source) (supplied by FINRA fbo client) (from ClientFirm.catSrcBrkrIMID)
        CatAccntType cat_src_accnt_type = 832; // CAT account holder type (from AccountConfig.catSrcAccntType [Eqt, Opt])
        CatFirmType cat_src_firm_type = 835; // CAT source type (from AccountConfig.catSrcType [Eqt, Opt])
        string cat_dest_firm_iMID = 838; // Destination Firm IMID (supplied by FINRA fbo destination; can be B/D or Exchange) (always exists) (from AccountRouteConfig.catDestFirmIMID [Eqt, Opt])
        CatDeptType cat_dest_dept_type = 841; // CAT destination type (from AccountRouteConfig.castDestType [Eqt, Opt])
        google.protobuf.Timestamp cat_parent_create_dttm = 844; // ParentOrder CreateDttm
    }

    message OrderLegs {
        
        sfixed64 last_leg_ref_id = 853;
        google.protobuf.Timestamp last_fill_dttm = 856;
        sfixed32 cum_square_qty = 859; // cum spread quantity filled (all legs received)
        double avg_square_prc = 862;
        google.protobuf.Timestamp last_square_dttm = 865;
        sfixed32 cum_partial_qty = 868; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
        TickerKey ticker = 871; // stock ticker
        BuySell stock_side = 874; // [Buy | Sell | None]
        sfixed32 stock_shares = 877; // number of shares included (zero if none)
        sfixed64 stock_leg_id = 880;
        ShortSaleFlag ssale_flag = 883;
        sfixed32 stock_cum_fill_qty = 886;
        double stock_avg_fill_prc = 889;
        int32 num_legs = 892; // number of valid legs below
        OptionKey sec_key1 = 895; // leg #1
        SpdrKeyType sec_type1 = 898;
        uint32 mult1 = 901;
        BuySell side1 = 904;
        sfixed64 leg_id1 = 907;
        PositionType pos_type1 = 910;
        sfixed32 leg_cum_fill_qty1 = 913;
        double leg_avg_fill_prc1 = 916;
        OptionKey sec_key2 = 919; // leg #2
        SpdrKeyType sec_type2 = 922;
        uint32 mult2 = 925;
        BuySell side2 = 928;
        sfixed64 leg_id2 = 931;
        PositionType pos_type2 = 934;
        sfixed32 leg_cum_fill_qty2 = 937;
        double leg_avg_fill_prc2 = 940;
        OptionKey sec_key3 = 943; // leg #3
        SpdrKeyType sec_type3 = 946;
        uint32 mult3 = 949;
        BuySell side3 = 952;
        sfixed64 leg_id3 = 955;
        PositionType pos_type3 = 958;
        sfixed32 leg_cum_fill_qty3 = 961;
        double leg_avg_fill_prc3 = 964;
        OptionKey sec_key4 = 967; // leg #4
        SpdrKeyType sec_type4 = 970;
        uint32 mult4 = 973;
        BuySell side4 = 976;
        sfixed64 leg_id4 = 979;
        PositionType pos_type4 = 982;
        sfixed32 leg_cum_fill_qty4 = 985;
        double leg_avg_fill_prc4 = 988;
        OptionKey sec_key5 = 991; // leg #5
        SpdrKeyType sec_type5 = 994;
        uint32 mult5 = 997;
        BuySell side5 = 1000;
        sfixed64 leg_id5 = 1003;
        PositionType pos_type5 = 1006;
        sfixed32 leg_cum_fill_qty5 = 1009;
        double leg_avg_fill_prc5 = 1012;
        OptionKey sec_key6 = 1015; // leg #6
        SpdrKeyType sec_type6 = 1018;
        uint32 mult6 = 1021;
        BuySell side6 = 1024;
        sfixed64 leg_id6 = 1027;
        PositionType pos_type6 = 1030;
        sfixed32 leg_cum_fill_qty6 = 1033;
        double leg_avg_fill_prc6 = 1036;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    int32 child_version = 100; // child order instance number (1 = original order; 1st cancel/replace, etc)
    sfixed64 cust_cl_ord_id = 103; // cust side.clOrdId (non-zero when shape = Cross or MLegCross)
    string alt_order_id = 106; // parent/client clOrdId
    string alt_account = 109; // altAccount
    string alt_user_name = 112; // altUserName
    int32 record_version = 115; // record instance number (1 = original record; 2 = 1st update, etc)
    RecordSource record_source = 118;
    sfixed64 risk_group_id = 121; // parent order risk group Id
    sfixed64 trigger_group_id = 124; // WaitTrigger group Id
    sfixed64 trigger_timestamp = 127; // WaitTrigger trigger timestamp (nanoseconds since epoch)
    sfixed64 parent_number = 130; // order number from parent order
    int32 parent_version = 133; // SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    sfixed64 base_parent_number = 136; // base order number (first parent number in chain)
    sfixed64 parent390_number = 139; // parent order number for 390 counting purposes (can be forwarded to downstream brokers)
    sfixed64 package_id = 142; // parent order package Id
    SpdrSource spdr_source = 145;
    sfixed64 grouping_code = 148;
    string response_id = 151; // usually an exch auction response ID
    string response_type = 154; // usually an exch auction response type
    string street_cl_ord_id = 157; // usually clOrdID.X16 but can be different if street gateway was translating clOrdId
    string street_order_id = 160; // street side order ID (for canceling order)
    YesNo street_directed = 163; // was this order directed after being sent downstream?  (usually yes unless a smartrouter is involved)
    YesNo street_held = 166; // was this order "Held" (yes) or "Not Held" after being sent downstream (usually yes)
    string accnt = 169; // primary (customer side) account
    string client_firm = 172; // primary (customer side) client firm
    string pri_agg_group = 175; // primary aggregation group
    string sec_agg_group = 178; // secondary aggregation group
    string no_cross_group = 181; // no-cross group for this accnt
    string user_name = 184;
    SpdrOrderShape child_shape = 187;
    RouteType route_type = 190;
    OptionKey sec_key = 193;
    SpdrKeyType sec_type = 196; // note: MLeg and Stock both mean only the TickerKey portion of the secKey is valid
    ExpiryKey fkey = 199; // underlier (if option on future); reference future (if trade at settlement; priceType != None)
    TickerKey ticker = 202; // base stock key (all orders)
    string stripe = 205;
    string engine_name = 208; // machine name of the execution engine that created the child order
    DestinationType destination_type = 211; // type of industry member
    string routing_code = 214; // routing code order was sent on
    sfixed32 order_size = 217;
    BuySell order_side = 220;
    YesNo is_flip_side = 223;
    PriceType price_type = 226;
    double order_price = 229;
    double exch_order_price = 232; // eg. iLink price
    double exch_display_factor = 235;
    double exch_min_tick_size = 238;
    int32 exch_price_precision = 241;
    sfixed32 order_exch = 244;
    string order_ex_dest = 247;
    YesNo is_directed = 250; // child order isDirected flag
    TimeInForce time_in_force = 253;
    google.protobuf.Timestamp order_expire_dttm = 256;
    YesNo mass_qte = 259;
    YesNo iso_sweep = 262;
    YesNo make_only = 265;
    YesNo do_not_route = 268;
    string wait_trigger_id = 271;
    SGContingency contingency = 274; // StreetGW fast contingency (if any exists)
    double contingent_level = 277; // StreetGW contingency trigger level
    OptionKey contingent_sec_key = 280;
    SGContingentAction action = 283;
    float tick2_action = 286; // latency (seconds) between tick srcTimestamp and sgw send time
    float action_latency = 289; // latency (seconds) between sqw send time and action acknowledgement time
    SpdrOrderType order_type = 292;
    double peg_offset = 295; // price offset to be used with 'Peg' order types; (+) = more aggressive, (-) = less aggressive
    YesNo is_peg_order = 298; // Yes if order sent to exchange as 'Peg' style (returned in exec report)
    TradingSession trading_session = 301;
    sfixed32 underliers_per_cn = 304; // option delivery underliers per contract
    UnderlierType underlier_type = 307; // type of underlier (affects $greek calculations)
    float tick_value = 310; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 313; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 316;
    float u_prc_ratio = 319; // UPrcRatio (SymbolRatio)
    string security_iD = 322; // from ProductDefinition.securityID
    string security_desc = 325; // from ProductDefinition.securityDesc
    string product_group = 328; // from ProductDefinition.productGroup
    ProductClass product_class = 331; // from ProductDefinition.productClass
    ExpiryKey und_key = 334; // from ProductDefinition.undKey
    SpdrKeyType und_type = 337; // from ProductDefinition.undType
    string child_order_handling = 340;
    ChildHandler algo_handler = 343; // algo handler for this child order
    string strategy = 346; // parent order strategy string (can be user supplied)
    string method = 349; // SpiderRock execution method
    string source = 352; // SpiderRock order source
    string extern_param = 355;
    string mkt_data_detail = 358;
    string mm_pref_code = 361;
    string risk_reset_code = 364;
    FirmType firm_type = 367;
    OrderCapacity order_capacity = 370;
    ShortSaleFlag ssale_flag = 373; // primary short sale flag (single leg orders)
    PositionType position_type = 376; // primary position type (single leg orders)
    FutCustType fut_cust_type = 379;
    FutClearingRange fut_clear_rng = 382;
    sfixed32 firm_position = 385;
    sfixed32 open_sell_sh = 388;
    sfixed32 locate_quan = 391; // available locate quantity (if selling short) @ child order send time
    string locate_firm = 394; // firm granting the locate (also locate firm used on street FIX orders)
    string locate_source = 397; // locate ID code (if any)
    YesNo require_locate = 400; // locate check enforced in SR systems
    string exch_trader_id = 403;
    string large_trader_id = 406;
    string trading_location = 409;
    string clearing_firm = 412; // clearing firm from account config [not visible in fix templates]
    string clearing_accnt = 415; // clearing accnt from account config [not visible in fix templates]
    string accnt_route_code = 418;
    string exec_broker_mPID = 421; // exec broker acronym (a FINRA assigned MPID or SR '$' broker tag) [broker that is order was routed to]
    string exec_broker_accnt = 424;
    string exec_broker_cl_firm = 427;
    string exec_broker_user_name = 430;
    FlipType clearing_flip_type = 433; // [visible in all fix templates]
    string clearing_flip_firm = 436; // [visible in all fix templates]
    string clearing_flip_accnt = 439; // [visible in all fix templates]
    RelationshipType relationship_type = 442; // type of SR <-> client relationship
    OrderStatus order_status = 445;
    ChildRejectReason reject_reason = 448;
    google.protobuf.Timestamp order_create_dttm = 451; // order send time
    float order_create_latency = 454; // order send to order ack latency (in milliseconds)
    ChildCreateReason order_create_reason = 457;
    RoutePriority order_create_priority = 460;
    string order_cancel_text = 463; // cancel reason (from algo handler)
    google.protobuf.Timestamp order_cancel_dttm = 466; // order cancel time
    float order_cancel_latency = 469; // cancel send to cancel ack latency (in milliseconds)
    ChildCancelReason order_cancel_reason = 472;
    RoutePriority order_cancel_priority = 475;
    sfixed64 order_send_timestamp = 478; // net timestamp of child order send (EE to SGW)
    google.protobuf.Timestamp order_working_dttm = 481; // order send ack time (acknowleged working/new) (first exec report indicating the order is active)
    google.protobuf.Timestamp order_closed_dttm = 484; // order terminated ack time (first exec report indicating the order is in a terminal state;eg. cancelled, filled, rejected, etc)
    YesNo order_cancel_flag = 487; // indicated the algo handler attempted to cancel the order while it was in a working state (does not necessarily mean that a cancel message was generated and send)
    YesNo is_persistent = 490; // indicates whether the child order should persist till rotation period (even if not filled)
    string last_street_text = 493; // text message on the (initial) exec report terminating the order sequence
    sfixed32 cum_fill_quantity = 496; // cum fill quantity (SUM: ExecReport.lastQuantity)
    double avg_fill_price = 499; // avg fill price (AVG: ExecReport.lastPrice)
    sfixed32 cum_fill_qty_exec = 502; // from ExecReport.cumFillQuantity
    double avg_fill_prc_exec = 505; // from ExecReport.avgFillPrice
    sfixed32 last_msg_seq_num = 508; // largest execReport.msgSeqNum process for this child order
    int32 num_executions = 511; // num ExecReports w/lastQuantity > 0
    sfixed32 leaves_qty = 514;
    double u_level = 517; // EE level contingency threshold
    Contingency u_contingency = 520;
    MakerTaker maker_taker = 523;
    double parent_lmt_price = 526;
    double parent_lmt_ref_uPrc = 529;
    double nbbo_bid = 532; // nbbo bid @ child order send
    double nbbo_ask = 535; // nbbo ask @ child order send
    sfixed32 nbbo_bid_sz = 538; // nbbo bid size @ child order send
    sfixed32 nbbo_ask_sz = 541; // nbbo ask size @ child order send
    double exch_bid = 544; // exch bid @ child order send
    double exch_ask = 547; // exch ask @ child order send
    sfixed32 exch_bid_sz = 550; // exch bid size @ child order send
    sfixed32 exch_ask_sz = 553; // exch ask size @ child order send
    MktStance mkt_stance = 556;
    double u_prc = 559; // underlier price when child order sent
    double u_bid = 562; // underlier bid when child order sent
    double u_ask = 565; // underlier ask when child order sent
    sfixed32 u_bid_sz = 568; // underlier bid size when child order sent
    sfixed32 u_ask_sz = 571; // underlier ask size when child order sent
    double u_bid_cxl = 574; // underlier bid when cancel sent (if any)
    double u_ask_cxl = 577; // underlier ask when cancel sent (if any)
    float surf_vol = 580; // option only
    float surf_price = 583; // option only
    float child_vol = 586; // child order volatility [price, parentLmtRefUPrc]
    float child_prob = 589; // probability @ child send time
    float child_vol_atm = 592; // atm volatility @ child send time
    float cn_de = 595; // per contract delta
    float cn_dd = 598; // per contract $delta
    float cn_ga = 601; // per contract gamma
    float cn_th = 604; // per contract theta
    float cn_ve = 607; // per contract vega
    float cn_wt_ve = 610; // per contract time weighted vega
    float cn_pr = 613; // per contract premium over parity
    float cn_rm1 = 616; // per contract user risk metric #1
    float cn_rm2 = 619;
    float cn_rm3 = 622;
    float cn_rm4 = 625;
    float cn_rm5 = 628;
    float cn_rm6 = 631;
    float cn_rm7 = 634;
    float cn_su06 = 637;
    float cn_sd08 = 640;
    float cn_su15 = 643;
    float cn_sd15 = 646;
    string cat_src_brkr_iMID = 649; // B/D firm FDID (only exists if a B/D is the source) (supplied by FINRA fbo client) (from ClientFirm.catSrcBrkrIMID)
    CatAccntType cat_src_accnt_type = 652; // CAT account holder type (from AccountConfig.catSrcAccntType [Eqt, Opt])
    CatFirmType cat_src_firm_type = 655; // CAT source type (from AccountConfig.catSrcFirmType [Eqt, Opt])
    string cat_dest_firm_iMID = 658; // Destination Firm IMID (supplied by FINRA fbo destination; can be B/D or Exchange) (always exists) (from AccountRouteConfig.catDestFirmIMID [Eqt, Opt])
    CatDeptType cat_dest_dept_type = 661; // CAT destination type (from AccountRouteConfig.castDestType [Eqt, Opt])
    google.protobuf.Timestamp cat_parent_create_dttm = 664; // ParentOrder CreateDttm
    string user_data1 = 667; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 670; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 673; // client supplied data field; passes through to down stream child orders
    google.protobuf.Timestamp timestamp = 676;
    sfixed64 face_cl_ord_id = 679; // face side.clOrdId (alternate clOrdID)
    CrossHandling face_cross_handling = 682;
    YesNo face_has_best_price = 685;
    double face_best_order_price = 688; // best limit price of facilitation side
    FaceParticipation face_participation = 691; // min or max facilitation participation
    sfixed32 face_cum_fill_quantity = 694; // cum fill quantity (SUM: faceSide.lastQuantity) [all allocation sides]
    double face_avg_fill_price = 697; // avg fill price (SUM: faceSide.avgFillPrice * faceSide.lastQuantity) / (SUM: faceSide.lastQuantity)
    sfixed32 face_leaves_qty = 700; // (SUM: faceSide.leavesQty)
    YesNo stock_leg = 847; // for OATS reporting purposes
    repeated FaceLegs face_legs = 1039;
    repeated FaceSide face_side = 703;
    repeated OrderLegs order_legs = 850;
}


/*
    SpdrChildOrderCancel records are published by SRSE to indicate a child order has been manually cancelled.
*/    
message SpdrChildOrderCancel {
    message PKey {
        
        sfixed64 cl_ord_id = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string modified_by = 100; // user who last modified this record
    google.protobuf.Timestamp timestamp = 103; // timestamp of last modification
}


    
message SpdrChildOrderPending {
    message PKey {
        
        sfixed64 cl_ord_id = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string init_pending_reason = 100; // init child order pending reason
    int32 child_version = 103; // child order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    int32 record_version = 106; // record instance number (1 = original record; 2 = 1st update, etc)
    RecordSource record_source = 109;
    sfixed64 risk_group_id = 112; // parent order risk group Id
    sfixed64 parent_number = 115; // order number from parent order
    sfixed64 base_parent_number = 118; // base order number (first parent number in chain)
    SpdrSource spdr_source = 121;
    sfixed64 grouping_code = 124;
    string street_cl_ord_id = 127; // usually clOrdID.X16 but can be different if street gateway was translating clOrdId
    string street_order_id = 130; // street side order ID (for canceling order)
    string accnt = 133; // primary (customer side) account
    string client_firm = 136; // primary (customer side) client firm
    string user_name = 139;
    SpdrOrderShape child_shape = 142;
    RouteType route_type = 145;
    OptionKey sec_key = 148;
    SpdrKeyType sec_type = 151; // note: MLeg and Stock both mean only the TickerKey portion of the secKey is valid
    ExpiryKey fkey = 154; // underlier (if option on future); reference future (if trade at settlement; priceType != None)
    TickerKey ticker = 157; // base stock key (all orders)
    string routing_code = 160; // routing code order was sent on
    sfixed32 order_size = 163;
    BuySell order_side = 166;
    PriceType price_type = 169;
    double order_price = 172;
    double exch_order_price = 175; // eg. iLink price
    double exch_display_factor = 178;
    sfixed32 order_exch = 181;
    string order_ex_dest = 184;
    TimeInForce time_in_force = 187;
    google.protobuf.Timestamp order_expire_dttm = 190;
    YesNo mass_qte = 193;
    YesNo iso_sweep = 196;
    YesNo make_only = 199;
    YesNo do_not_route = 202;
    SpdrOrderType order_type = 205;
    TradingSession trading_session = 208;
    string child_order_handling = 211;
    ChildHandler algo_handler = 214; // algo handler for this child order
    OrderStatus order_status = 217;
    ChildRejectReason reject_reason = 220;
    string order_cancel_text = 223; // cancel reason (from algo handler)
    google.protobuf.Timestamp order_cancel_dttm = 226; // order cancel time
    ChildCancelReason order_cancel_reason = 229;
    RoutePriority order_cancel_priority = 232;
    google.protobuf.Timestamp order_working_dttm = 235; // order send ack time (acknowleged working/new) (first exec report indicating the order is active)
    google.protobuf.Timestamp order_closed_dttm = 238; // order terminated ack time (first exec report indicating the order is in a terminal state;eg. cancelled, filled, rejected, etc)
    YesNo order_cancel_flag = 241; // indicated the algo handler attempted to cancel the order while it was in a working state (does not necessarily mean that a cancel message was generated and send)
    string last_street_text = 244; // text message on the (initial) exec report terminating the order sequence
    sfixed32 cum_fill_quantity = 247; // cum fill quantity (SUM: ExecReport.lastQuantity)
    double avg_fill_price = 250; // avg fill price (AVG: ExecReport.lastPrice)
    sfixed32 cum_fill_qty_exec = 253; // from ExecReport.cumFillQuantity
    double avg_fill_prc_exec = 256; // from ExecReport.avgFillPrice
    sfixed32 last_msg_seq_num = 259; // largest execReport.msgSeqNum process for this child order
    int32 num_executions = 262; // num ExecReports w/lastQuantity > 0
    sfixed32 leaves_qty = 265;
    google.protobuf.Timestamp timestamp = 268;
    sfixed64 face_cl_ord_id = 271; // face side.clOrdId (alternate clOrdID)
    CrossHandling face_cross_handling = 274;
    YesNo face_has_best_price = 277;
    double face_best_order_price = 280; // best limit price of facilitation side
    FaceParticipation face_participation = 283; // min or max facilitation participation
    sfixed32 face_cum_fill_quantity = 286; // cum fill quantity (SUM: faceSide.lastQuantity) [all allocation sides]
    double face_avg_fill_price = 289; // avg fill price (SUM: faceSide.avgFillPrice * faceSide.lastQuantity) / (SUM: faceSide.lastQuantity)
    sfixed32 face_leaves_qty = 292; // (SUM: faceSide.leavesQty)
}


/*
    SpdrChildOrderPendingAck records are published by the SystemMonitor to communicate to other SystemMonitor users that a SpdrOrderPending message has been seen (and hopefully dealt with accordingly) to remove the corresponding row from any grids
*/    
message SpdrChildOrderPendingAck {
    message PKey {
        
        sfixed64 cl_ord_id = 10; // clOrdId of the SpdrChildOrderPending message
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_pending_update_dttm = 100;
    string ack_user_name = 103;
    google.protobuf.Timestamp timestamp = 106;
}


/*
    SpdrChildOrderSummary records are created at the end of a trading period and contain a summary of trading activity for the period; Summary of SpdrChildOrder records
*/    
message SpdrChildOrderSummary {
    message PKey {
        
        string accnt = 10;
        SpdrKeyType sec_type = 13;
        TickerSrc ticker_src = 16;
        SpdrSource spdr_source = 19;
        SpdrOrderShape child_shape = 22;
        MktWidthCode mkt_width_code = 25;
        ChildHandler algo_handler = 28;
        string routing_code = 31;
        string exec_broker_mPID = 34;
        string order_ex_dest = 37;
        DateKey trading_period = 40;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    sfixed32 num_markets = 103; // number of unique secKeys
    sfixed32 num_child_orders = 106;
    sfixed32 sum_child_order_size = 109;
    float sum_child_mkt_width = 112; // mkt width at child order create time
    float sum_active_seconds = 115; // total seconds child order is active (create to cancel/fill)
    sfixed32 num_mkt_prints = 118; // number of comparable market prints (same series; same side; same day) [options only]
    float sum_mkt_print_m1_pn_l = 121;
    float sum_mkt_print_m10_pn_l = 124;
    sfixed32 sum_marketable_size = 127; // size that would be expected to fill immediately when child order is generated
    sfixed32 num_order_latency = 130;
    float sum_order_latency = 133;
    sfixed32 num_cancel_latency = 136;
    float sum_cancel_latency = 139;
    sfixed32 num_fill_after_cxl = 142;
    float sum_fill2_cxl_latency = 145;
    sfixed32 num_contingent_cxl = 148;
    sfixed32 num_child_off_mkt = 151;
    sfixed32 num_child_mkt_join = 154;
    sfixed32 num_child_mkt_imprv = 157;
    sfixed32 num_child_marketable = 160;
}


    
message SpdrChildReject {
    message PKey {
        
        sfixed64 cl_ord_id = 10; // SR fill number (same as SpdrParentOrder.pkey.fillNumber)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrOrderShape child_shape = 100;
    ExecShape exec_shape = 103;
    string street_exec_id = 106; // Reject ExecReport execId
    string street_cl_ord_id = 109; // usually clOrdID.X16 but can be different if street gateway was translating clOrdId
    string street_order_id = 112; // street side order ID (for canceling order)
    string street_text = 115;
    sfixed64 parent_number = 118; // parent order number
    sfixed64 base_parent_number = 121; // base order number (first parent number in chain)
    string accnt = 124; // SR trading accnt
    string client_firm = 127; // SR client firm
    OptionKey sec_key = 130;
    SpdrKeyType sec_type = 133;
    TickerKey ticker = 136;
    sfixed32 order_exch = 139;
    string order_ex_dest = 142;
    string routing_code = 145;
    RelationshipType relationship_type = 148; // type of SR <-> client relationship
    sfixed64 src_timestamp = 151; // source timestamp (fixMessage.sendingTime) from street side [might not be high precision]
    sfixed64 sgw_timestamp = 154; // street gateway arrival timestamp
    sfixed64 eng_timestamp = 157; // execution engine arrival timestamp
    google.protobuf.Timestamp timestamp = 160;
}


/*
    SpdrChildTrigger records are used to trigger distributed release of (SGW) staged child orders.  These message at published by execution engines and consumed by street gateways
*/    
message SpdrChildTrigger {
    message PKey {
        
        string trigger_key = 10;
        string queue_key = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100;
    int32 num_queues = 103; // number of queues that are expected to send SpdrChildTrigger orders for this triggerKey (2x8 for equities; 2x1 for futures)
    sfixed64 net_timestamp = 106; // record send timestamp
    google.protobuf.Timestamp timestamp = 109;
}


    
message SpdrClearingReport {
    message PKey {
        
        sfixed64 report_number = 10; // SpiderRock clearing report number (globally unique over trailing 10 days)
    }

    message Party {
        
        string party_id = 166;
        sfixed32 party_role = 169;
    }

    message PartySub {
        
        string party_id = 175; // maps to item in PartyList
        string party_sub_id = 178;
        sfixed32 party_sub_id_type = 181;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ClearingReportSource clr_source = 100;
    sfixed32 client_seq_num_in = 103; // inbound client seq number (FIX messages only)
    google.protobuf.Timestamp sending_time = 106; // direct copy from client's message
    google.protobuf.Timestamp transact_time = 109; // direct copy from client's message
    DateKey trade_date = 112;
    string trade_report_id = 115;
    string trade_report_ref_id = 118;
    YesNo previously_reported = 121;
    string cl_ord_id = 124;
    string order_id = 127;
    string exec_id = 130;
    string clearing_accnt = 133;
    string client_firm = 136;
    OptionKey sec_key = 139;
    SpdrKeyType sec_type = 142;
    BuySell order_side = 145;
    ShortSaleFlag ssale_flag = 148;
    string exch = 151;
    sfixed32 last_qty = 154;
    double last_px = 157;
    google.protobuf.Timestamp timestamp = 160;
    repeated Party party = 163;
    repeated PartySub party_sub = 172;
}


/*
    SpdrClientFirmRiskMgmt records are created/published by SpiderRock Execution Engines and show exchange level risk management child order rejects.
*/    
message SpdrClientFirmRiskMgmt {
    message PKey {
        
        string client_firm = 10;
        TickerKey ticker = 13; // will be empty if riskMgmtLevel = ClientFirm
        string order_ex_dest = 16;
        RiskMgmtLevel risk_mgmt_level = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_rejects = 100;
    string accnt = 103; // most recently rejected accnt
    OptionKey sec_key = 106; // most recently rejected secKey
    SpdrKeyType sec_type = 109;
    SpdrSource spdr_source = 112;
    string user_name = 115;
    string reject_text = 118; // most recent rejectText
    google.protobuf.Timestamp timestamp = 121;
}


/*
    SpdrClientOrder records are published by SRFixClientGateway servers and are used to maintain/reload state for all handled orders
*/    
message SpdrClientOrder {
    message PKey {
        
        sfixed64 base_parent_number = 10; // SR parent order number (EE)
        ServerType server_type = 13;
        string server_code = 16; // ClientGW or DropServer ServerCode
        string machine_name = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string fix_route_up = 100; // Client Fix Route
    string sender_comp_id = 103; // senderCompID/targetCompID of the Client -> ClientGW session
    string target_comp_id = 106;
    string sender_sub_id = 109; // senderSubID/targetSubID of the Client -> ClientGW session
    string target_sub_id = 112;
    google.protobuf.Timestamp fix_session_date = 115;
    int32 fix_session_counter = 118;
    sfixed32 client_seq_num_in = 121;
    string template_name = 124; // rewrite template name
    string accnt = 127;
    string client_firm = 130;
    SpdrOrderShape order_shape = 133;
    string cur_cl_ord_id = 136; // current client ClOrdId
    string base_cl_ord_id = 139; // initial client ClOrdId
    OptionKey sec_key = 142;
    SpdrKeyType sec_type = 145;
    sfixed64 rpt_parent_number = 148;
    int32 rpt_parent_version = 151;
    sfixed32 rpt_order_size = 154;
    BuySell rpt_order_side = 157;
    google.protobuf.Timestamp rpt_order_dttm = 160;
    string rpt_order_status = 163;
    SpdrOrderStatus rpt_spdr_order_status = 166;
    SpdrCloseReason rpt_spdr_close_reason = 169;
    SpdrRejectReason rpt_spdr_reject_reason = 172;
    SROrdStatus ord_status = 175;
    sfixed32 rpt_leaves_qty = 178;
    sfixed32 rpt_cum_fill_qty = 181;
    double rpt_avg_fill_price = 184;
    sfixed32 rpt_cum_partial_qty = 187; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    sfixed32 rpt_leaves_qty_face = 190;
    sfixed32 rpt_cum_fill_qty_face = 193;
    double rpt_avg_fill_price_face = 196;
    int32 num_executions = 199; // number of SpdrParentExecution received for this baseParentNumber
    int32 num_pending_execs = 202; // number of pending (not yet processed) SpdrParentExecutions
    int32 num_modified_exec = 205; // number of execution reports modified or busted
    sfixed32 cum_fill_quantity = 208; // from exec reports
    double avg_fill_price = 211;
    sfixed32 cum_partial_qty = 214; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    int32 num_executions_face = 217; // number of SpdrParentExecution received for this baseParentNumber
    int32 num_pending_execs_face = 220; // number of pending (not yet processed) SpdrParentExecutions
    int32 num_modified_exec_face = 223; // number of execution reports modified or busted
    sfixed32 cum_fill_quantity_face = 226; // from exec reports
    double avg_fill_price_face = 229;
    string report_text = 232; // FIX tag/value pairs necessary to construct an exec report message
    string last_error = 235;
    google.protobuf.Timestamp timestamp = 238;
}


    
message SpdrCompositeAggregation {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_records = 100;
    float sum_parent_size = 103;
    float sum_parent_mkt_width = 106;
    float avg_parent_size = 109;
    float avg_parent_mkt_width = 112;
    float avg_parent_limit_vol = 115;
    float sum_child_size = 118;
    float sum_child_mkt_width = 121;
    float avg_child_size = 124;
    float avg_child_mkt_width = 127;
    float avg_child_limit_vol = 130;
    float avg_fill_size = 133;
    float avg_fill_price = 136;
    float avg_fill_vol = 139;
    float avg_fill_probability = 142;
    float avg_fill_mkt_width = 145;
    float avg_fill_uMkt_width = 148;
    float avg_fill_theo_edge = 151;
    float avg_fill_unit_edge = 154;
    float avg_fill_m1_pn_l = 157;
    float avg_fill_m10_pn_l = 160;
    float avg_fill_day_pn_l = 163;
    float avg_fill_dn_day_pn_l = 166;
    float sum_fill_size = 169;
    float sum_fill_money = 172;
    float sum_fill_delta = 175;
    float sum_fill_dDelta = 178;
    float sum_fill_dBeta = 181;
    float sum_fill_vega = 184;
    float sum_fill_wVega = 187;
    float sum_fill_tVega = 190;
    float sum_fill_wt_vega = 193;
    float sum_fill_theta = 196;
    float sum_fill_premium = 199;
    float sum_fill_notional = 202;
    float sum_fill_mkt_width = 205;
    float sum_fill_uMkt_width = 208;
    float sum_fill_theo_edge = 211;
    float sum_fill_unit_edge = 214;
    float sum_fill_m1_pn_l = 217;
    float sum_fill_m10_pn_l = 220;
    float sum_fill_day_pn_l = 223;
    float sum_fill_dn_day_pn_l = 226;
    float sum_fill_m1_uDrift = 229;
    float sum_fill_m10_uDrift = 232;
    float sum_fill_day_uDrift = 235;
    float sum_fill_exch_fees = 238;
    float sum_fill_brokerage = 241;
    float sum_fill_vol = 244;
    float sum_fill_probability = 247;
    float sum_fill_gamma = 250;
    float sum_fill_price = 253;
}


/*
    SpdrCompositeAlertAckV2 records are created/published when users acknowledge an alert
*/    
message SpdrCompositeAlertAckV2 {
    message PKey {
        
        sfixed64 alert_number = 10; // SpiderRock alert number (globally unique over trailing 10 days)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string modified_by = 100; // user who last modified this record
    google.protobuf.Timestamp timestamp = 103; // timestamp of last modification
}


/*
    SpdrCompositeAlertV2 records are created/published by tool servers.  They can come from SpdrParentExecution reject records or other sources
*/    
message SpdrCompositeAlertV2 {
    message PKey {
        
        sfixed64 alert_number = 10; // SpiderRock alert number (globally unique over trailing 10 days)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp date = 100; // trade date
    sfixed32 version = 103; // record version number
    string accnt = 106; // SpiderRock Accnt Code
    string client_firm = 109; // SpiderRock ClientFirm Code
    string user_name = 112; // SpiderRock UserName Code
    string alert_label = 115;
    string alert_detail = 118;
    google.protobuf.Timestamp timestamp = 121;
}


    
message SpdrCompositeErrorAck {
    message PKey {
        
        string pkey_string = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_error_dttm = 100;
    string ack_user_name = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message SpdrCompositeExecution {
    message PKey {
        
        sfixed64 fill_number = 10; // SpiderRock execution number (globally unique over trailing 10 days)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp date = 100; // trade date
    int32 version = 103; // record version number; starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    string cl_ord_id = 106; // clOrdId resulting in fill (child order)
    sfixed64 parent_number = 109; // SpiderRock parent number
    string alt_order_id = 112; // alternate order ID (usually clOrdId from client)
    string src_routing_code = 115; // inbound FIX routing code, if any
    SpdrSource spdr_source = 118; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 121; // SpiderRock parent broker number [broker pkey]
    string accnt = 124; // SpiderRock Accnt Code
    string client_firm = 127; // SpiderRock ClientFirm Code
    string pri_agg_group = 130; // primary aggregation group
    string sec_agg_group = 133; // secondary aggregation group
    OptionKey sec_key = 136; // Security Key [can be partially filled in (look at secType)]
    SpdrKeyType sec_type = 139; // Security Type [Stock, Future, Option]
    TickerKey ticker = 142; // SpiderRock underlier ticker key [synthetic for futures]
    string risk_class = 145; // user supplied risk class code (from SymbolControl record)
    SymbolType symbol_type = 148; // symbol type
    string sector = 151; // user supplied sector code (from SymbolControl record)
    sfixed32 ind_num = 154; // ind code (00)
    sfixed32 sub_num = 157; // sub code (0000)
    sfixed32 grp_num = 160; // grp code (000000)
    sfixed32 nbr_num = 163; // nbr code (00000000)
    int32 edays = 166; // days to next earnings [-5, +60]
    ExpCode exp_code = 169; // expiration tenor code
    SkewCode skew_code = 172; // strike skew code
    WidthCode width_code = 175; // market width code
    PriceFormat price_format = 178; // SpiderRock price display format code
    PriceFormat u_price_format = 181; // SpiderRock underlier price display code
    float years = 184; // years to expiration
    sfixed32 underliers_per_cn = 187; // underliers per contract (futures and options)
    UnderlierType underlier_type = 190; // underlier type (affects $greek calcs)
    float tick_value = 193; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 196; // $NLV value of a point
    Currency point_currency = 199;
    float u_prc_ratio = 202; // UPrcRatio (SymbolRatio) from product definition
    string routing_code = 205; // SpiderRock market routing code
    string orig_exec_iD = 208; // original execution ID string (child order)
    string last_exec_iD = 211; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    google.protobuf.Timestamp transact_dttm = 214; // transaction date/time as reported by exchange or down stream broker
    ExecStatus exec_status = 217; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    string remote_text = 220; // text comment from endpoint (if any)
    SpdrLimitType order_limit_type = 223; // parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]
    SpdrLimitClass order_limit_class = 226; // parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)
    ParentOrderHandling parent_order_handling = 229; // base parent order algo [take style algo]
    ParentBalanceHandling parent_balance_handling = 232; // base parent order balance handling [make style algo]
    sfixed32 parent_order_size = 235; // parent order size
    string method = 238; // execution method string
    string strategy = 241; // client strategy [usually client supplied]
    string user_name = 244; // SpiderRock user name associated with the parent order
    string origin = 247; // parent order origin string
    string source = 250; // execution source string
    string server = 253; // SpiderRock execution engine that handled the parent order
    string clearing_firm = 256; // clearing firm (delivery)
    string clearing_accnt = 259; // clearing firm account (if any)
    OrderCapacity last_capacity = 262; // child order capacity
    ExecRole exec_role = 265; // SpiderRock relationship to this execution record (Direct, Drop, etc)
    string exec_broker_mPID = 268; // exec broker acronym (usually an MPID)
    string exec_broker_accnt = 271; // account at executing broker (if any)
    string exec_broker_cl_firm = 274; // client/firm at executing broker (if any)
    string exec_broker_user_name = 277; // username at executing broker (if any)
    FlipType clearing_flip_type = 280; // clearingFlip Type (CMTA or Giveup)
    string clearing_flip_firm = 283; // clearingFlip Broker/MPID
    string clearing_flip_accnt = 286; // clearingFlip additional detail (sub-accnt)
    sfixed64 risk_group_id = 289; // riskGroupId (parent order group ID) for this execution report
    float fill_brkr_rate = 292; // billing brokerage rate (tier 1)
    float fill_routing_rate = 295; // billing routing rate (tier 1)
    BillingSecType billing_sec_type = 298; // SpiderRock billing security type
    BillingCategory billing_category = 301; // SpiderRock billing category
    FirmType firm_type = 304; // chld order firm type [Customer, ProCust, Firm, MM, etc]
    BuySell side = 307; // parent/child order side
    PriceType price_type = 310; // order limit price type
    ShortSaleFlag ssale_flag = 313; // child order short sale flag
    ShortSaleFlag spdr_sSale_flag = 316; // parent order short sale flag
    PositionType position_type = 319; // child order position type
    AutoHedge auto_hedge = 322; // SpiderRock auto-hedge algorithm (if any)
    google.protobuf.Timestamp order_dttm = 325; // Date/time of parent order arrival
    double order_uBid = 328; // underlier market bid @ parent order arrival
    double order_uAsk = 331; // underlier market ask @ parent order arrival
    double order_bid = 334; // option market bid @ parent order arrival (options only)
    double order_ask = 337; // option market ask @ parent order arrival (options only)
    float order_surf_prc = 340; // SpiderRock surface price @ parent order arrival (options only)
    float order_limit_vol = 343; // parent order limit volatilty (options only)
    double order_limit_prc = 346; // parent order limit price @ parent order arrival
    double order_limit_ref_uPrc = 349; // limit reference underlier price @ parent order arrival (options only)
    sfixed32 child_size = 352; // child order size
    double child_price = 355; // child order price
    string child_exch = 358; // child order exchange code (SpiderRock)
    string child_ex_dest = 361; // child order exchange code (downstream)
    google.protobuf.Timestamp child_dttm = 364; // child order send date/time
    double child_uBid = 367; // underlier market bid @ child order send time
    double child_uAsk = 370; // underlier market bid @ child order send time
    double child_bid = 373; // option market bid @ child order send time (options only)
    double child_ask = 376; // option market ask @ child order send time (options only)
    float child_surf_prc = 379; // SpiderRock surface price @ child order send time (options only)
    float child_vol = 382; // child order volatilty (options only)
    float child_prob = 385; // child order probability (T+x)
    double child_limit_prc = 388; // parent order limit price @ child order send time
    double child_limit_ref_uPrc = 391; // limit reference underlier price @ child order send time (options only)
    string child_order_handling = 394; // algo that generated the child order responsible for this fill
    MktStance child_mkt_stance = 397; // child order was expected to be marketable @ child send time
    YesNo cancel_attempted = 400; // cancel attempt was made on the child order prior to receiving this fill
    string fill_exch = 403; // ExDest code from child order execution report (lastMkt)
    double fill_price = 406; // fill price
    double fill_ts = 409; // fill report ts (seconds since startup; 100 nanosec resolution)
    google.protobuf.Timestamp fill_dttm = 412; // Date/time of fill arrival
    sfixed32 fill_size = 415; // fill quantity
    sfixed32 eff_fill_size = 418; // fill size x underliers per contract
    float fill_vol = 421; // fill volatilty (options only)
    float fill_prob = 424; // fill order probability (T+x)
    double fill_limit_prc = 427; // parent order limit price @ fill arrival time
    double fill_limit_ref_uPrc = 430; // limit reference underlier price @ fill arrival time (options only)
    float fill_de = 433; // fill delta
    float fill_ve = 436; // fill vega
    float fill_th = 439; // fill theta
    float fill_pr = 442; // fill premium over parity
    double fill_uPrc = 445; // fill underlier mid-market
    float fill_beta = 448; // SpiderRock estimate of beta to SPX
    float fill_risk_metric1 = 451; // user defined (from parent order)
    float fill_risk_metric2 = 454; // user defined (from parent order)
    float fill_risk_metric3 = 457; // user defined (from parent order)
    float fill_risk_metric4 = 460; // user defined (from parent order)
    float fill_risk_metric5 = 463; // user defined (from parent order)
    float fill_risk_metric6 = 466; // user defined (from parent order)
    float fill_risk_metric7 = 469; // user defined (from parent order)
    float fill_s08_dn = 472; // underlier down 8% shock slide (equities only)
    float fill_s06_up = 475; // underlier up 6% shock slide (equities only)
    float fill_s15_dn = 478; // underlier down 15% shock slide (equities only)
    float fill_s15_up = 481; // underlier up 15% shock slide (equities only)
    float fill_tv = 484; // theo vol (user supplied)
    float fill_tp = 487; // theo price
    double fill_uBid = 490; // underlier market bid @ fill arrival
    double fill_uAsk = 493; // underlier market ask @ fill arrival
    double fill_bid = 496; // option market bid @ fill arrival
    double fill_ask = 499; // option market ask @ fill arrival
    float fill_surf_prc = 502; // SpiderRock surface price @ fill arrival
    double fill_post_uMark1_m = 505; // underlier mark @ fill arrival + 1M
    double fill_post_uMark10_m = 508; // underlier mark @ fill arrival + 10M
    double fill_post_mark1_m = 511; // SpiderRock mid or surface mark @ fill arrival + 1M
    double fill_post_mark10_m = 514; // SpiderRock mid or surface mark @ fill arrival + 10M
    RiskCode risk_code = 517; // SpiderRock Risk Code (if any)
    string exch_liquidity_tag = 520; // liquidity tag (exchange)
    string spdr_liquidity_tag = 523; // SpiderRock normalized liquidity tag
    string fill_exch_detail = 526; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    float notional_value = 529; // cn * mult * uPrc
    float market_value = 532; // cn * mult * fillPrice
    float order_mkt_width = 535; // market width @ parent order arrival
    float child_mkt_width = 538; // market width @ child order send time
    float fill_mkt_width = 541; // market width @ fill arrival
    float trd_delta = 544; // trade delta
    float trd_dDelta = 547; // trade $delta
    float trd_gamma = 550; // trade gamma
    float trd_dGamma = 553; // trade dollar gamma
    float trd_vega = 556; // trade vega
    float trd_theta = 559; // trade theta
    float trd_wt_vega = 562; // trade wtVega: (vega * vol / sqrt(max(0.1, years * 4))
    float trd_prem = 565; // trade premium over parity
    float trd_beta = 568; // trade beta
    float trd_dBeta = 571; // trade $beta
    float surf_edge = 574; // SR surface edge (user supplied theo vol/prc to SpiderRock surface price)
    float surf_edge_unit = 577; // SR surface edge normalized to $100 underlier
    float theo_edge = 580; // theo edge (user supplied theo vol/prc to SpiderRock surface price)
    float theo_edge_unit = 583; // theo edge normalized to $100 underlier
    float exch_fee = 586; // SpiderRock exchange fee estimate
    float half_width_pn_l = 589; // estimated half-width PnL
    float day_dn_pn_l = 592; // delta neutral PnL (to EOD)
    float day_m1_pn_l = 595; // delta neutral PnL (Fill + 1M)
    float day_m10_pn_l = 598; // delta neutral PnL (Fill + 10M)
    float u_drift_day_pn_l = 601; // underlier delta drift PnL (to EOD)
    float u_drift_m1_pn_l = 604; // underlier delta drift PnL (Fill + 1M)
    float u_drift_m10_pn_l = 607; // underlier delta drift PnL (Fill + 10M)
    float day_pn_l = 610; // actual PnL to EOD
    double live_mark = 613; // SpiderRock internal use
    double live_uPrc = 616; // SpiderRock internal use
    double pend_mark = 619; // SpiderRock internal use
    double pend_uPrc = 622; // SpiderRock internal use
    string trd_mark_error = 625; // trade mark error code
    string day_mark_error = 628; // day mark error code
    string user_data1 = 631; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 634; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    google.protobuf.Timestamp timestamp = 637; // SR system timestamp
}


/*
    SpdrCompositeExecutionV2 records are created/published by tool servers from underlying SpdrParentExecution records.  Used for displaying broker/parent order/child order details in the OrderManager.V2
*/    
message SpdrCompositeExecutionV2 {
    message PKey {
        
        sfixed64 fill_number = 10; // SpiderRock execution number (globally unique over trailing 10 days)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp date = 100; // trade date
    int32 version = 103; // record version number; starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    string cl_ord_id = 106; // clOrdId resulting in fill (child order)
    sfixed64 parent_number = 109; // SpiderRock parent number
    string alt_order_id = 112; // alternate order ID (usually clOrdId from client)
    string src_routing_code = 115; // inbound FIX routing code, if any
    SpdrSource spdr_source = 118; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 121; // SpiderRock parent broker number [broker pkey]
    string accnt = 124; // SpiderRock Accnt Code
    string client_firm = 127; // SpiderRock ClientFirm Code
    string pri_agg_group = 130; // primary aggregation group
    string sec_agg_group = 133; // secondary aggregation group
    OptionKey sec_key = 136; // Security Key [can be partially filled in (look at secType)]
    SpdrKeyType sec_type = 139; // Security Type [Stock, Future, Option]
    TickerKey ticker = 142; // SpiderRock underlier ticker key [synthetic for futures]
    string risk_class = 145; // user supplied risk class code (from SymbolControl record)
    SymbolType symbol_type = 148; // symbol type
    string sector = 151; // user supplied sector code (from SymbolControl record)
    sfixed32 ind_num = 154; // ind code (00)
    sfixed32 sub_num = 157; // sub code (0000)
    sfixed32 grp_num = 160; // grp code (000000)
    sfixed32 nbr_num = 163; // nbr code (00000000)
    int32 edays = 166; // days to next earnings [-5, +60]
    ExpCode exp_code = 169; // expiration tenor code
    SkewCode skew_code = 172; // strike skew code
    WidthCode width_code = 175; // market width code
    PriceFormat price_format = 178; // SpiderRock price display format code
    PriceFormat u_price_format = 181; // SpiderRock underlier price display code
    float years = 184; // years to expiration
    sfixed32 underliers_per_cn = 187; // underliers per contract (futures and options)
    UnderlierType underlier_type = 190; // underlier type (affects $greek calcs)
    float tick_value = 193; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 196; // $NLV value of a point
    Currency point_currency = 199;
    float u_prc_ratio = 202; // UPrcRatio (SymbolRatio) from product definition
    string routing_code = 205; // SpiderRock market routing code
    string orig_exec_iD = 208; // original execution ID string (child order)
    string last_exec_iD = 211; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    google.protobuf.Timestamp transact_dttm = 214; // transaction date/time as reported by exchange or down stream broker
    ExecStatus exec_status = 217; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    string remote_text = 220; // text comment from endpoint (if any)
    SpdrLimitType order_limit_type = 223; // parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]
    SpdrLimitClass order_limit_class = 226; // parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)
    ParentOrderHandling parent_order_handling = 229; // base parent order algo [take style algo]
    ParentBalanceHandling parent_balance_handling = 232; // base parent order balance handling [make style algo]
    sfixed32 parent_order_size = 235; // parent order size
    string method = 238; // child create reason
    string strategy = 241; // client strategy [usually client supplied]
    string user_name = 244; // SpiderRock user name associated with the parent order
    string origin = 247; // parent order origin string
    string source = 250; // execution source string
    string server = 253; // SpiderRock execution engine that handled the parent order
    string clearing_firm = 256; // clearing firm (delivery)
    string clearing_accnt = 259; // clearing firm account (if any)
    OrderCapacity last_capacity = 262; // child order capacity
    ExecRole exec_role = 265; // SpiderRock relationship to this execution record (Direct, Drop, etc)
    string exec_broker_mPID = 268; // exec broker acronym (usually an MPID)
    string exec_broker_accnt = 271; // account at executing broker (if any)
    string exec_broker_cl_firm = 274; // client/firm at executing broker (if any)
    string exec_broker_user_name = 277; // user executing broker (if any)
    FlipType clearing_flip_type = 280; // clearingFlip Type (CMTA or Giveup)
    string clearing_flip_firm = 283; // clearingFlip Broker/MPID
    string clearing_flip_accnt = 286; // clearingFlip additional detail (sub-accnt)
    sfixed64 risk_group_id = 289; // riskGroupId (parent order group ID) for this execution report
    sfixed64 trigger_group_id = 292;
    float fill_brkr_rate = 295; // billing brokerage rate (tier 1)
    float fill_routing_rate = 298; // billing routing rate (tier 1)
    BillingSecType billing_sec_type = 301; // SpiderRock billing security type
    BillingCategory billing_category = 304; // SpiderRock billing category
    FirmType firm_type = 307; // chld order firm type [Customer, ProCust, Firm, MM, etc]
    BuySell side = 310; // parent/child order side
    PriceType price_type = 313; // order limit price type
    ShortSaleFlag ssale_flag = 316; // child order short sale flag
    ShortSaleFlag spdr_sSale_flag = 319; // parent order short sale flag
    PositionType position_type = 322; // child order position type
    AutoHedge auto_hedge = 325; // SpiderRock auto-hedge algorithm (if any)
    google.protobuf.Timestamp order_dttm = 328; // Date/time of parent order arrival
    double order_uBid = 331; // underlier market bid @ parent order arrival
    double order_uAsk = 334; // underlier market ask @ parent order arrival
    double order_uMark = 337; // underlier mid mark @ parent order arrival
    double order_bid = 340; // option market bid @ parent order arrival (options only)
    double order_ask = 343; // option market ask @ parent order arrival (options only)
    double order_mark = 346; // mid-market (or SR surface price) @ parent order arrival
    float order_surf_prc = 349; // SpiderRock surface price @ parent order arrival (options only)
    float order_limit_vol = 352; // parent order limit volatilty (options only)
    double order_limit_prc = 355; // parent order limit price @ parent order arrival
    double order_limit_ref_uPrc = 358; // limit reference underlier price @ parent order arrival (options only)
    sfixed32 child_size = 361; // child order size
    double child_price = 364; // child order price
    string child_exch = 367; // child order exchange code (SpiderRock)
    string child_ex_dest = 370; // child order exchange code (downstream)
    google.protobuf.Timestamp child_dttm = 373; // child order send date/time
    double child_uBid = 376; // underlier market bid @ child order send time
    double child_uAsk = 379; // underlier market bid @ child order send time
    double child_bid = 382; // option market bid @ child order send time (options only)
    double child_ask = 385; // option market ask @ child order send time (options only)
    float child_surf_prc = 388; // SpiderRock surface price @ child order send time (options only)
    float child_vol = 391; // child order volatilty (options only)
    float child_prob = 394; // child order probability (T+x)
    double child_limit_prc = 397; // parent order limit price @ child order send time
    double child_limit_ref_uPrc = 400; // limit reference underlier price @ child order send time (options only)
    string child_order_handling = 403; // algo that generated the child order responsible for this fill
    MktStance child_mkt_stance = 406; // child order was expected to be marketable @ child send time
    YesNo cancel_attempted = 409; // cancel attempt was made on the child order prior to receiving this fill
    string fill_exch = 412; // ExDest code from child order execution report (lastMkt)
    double fill_price = 415; // fill price
    double fill_ts = 418; // fill report ts (seconds since startup; 100 nanosec resolution)
    google.protobuf.Timestamp fill_dttm = 421; // Date/time of fill arrival
    sfixed32 fill_size = 424; // fill quantity
    sfixed32 eff_fill_size = 427; // fill size x underliers per contract
    float fill_vol = 430; // fill volatilty (options only)
    float fill_prob = 433; // fill order probability (T+x)
    double fill_limit_prc = 436; // parent order limit price @ fill arrival time
    double fill_limit_ref_uPrc = 439; // limit reference underlier price @ fill arrival time (options only)
    float fill_de = 442; // fill delta
    float fill_ve = 445; // fill vega
    float fill_th = 448; // fill theta
    float fill_pr = 451; // fill premium over parity
    double fill_uPrc = 454; // fill underlier mid-market
    float fill_beta = 457; // SpiderRock estimate of beta to SPX
    float fill_risk_metric1 = 460; // user defined (from parent order)
    float fill_risk_metric2 = 463; // user defined (from parent order)
    float fill_risk_metric3 = 466; // user defined (from parent order)
    float fill_risk_metric4 = 469; // user defined (from parent order)
    float fill_risk_metric5 = 472; // user defined (from parent order)
    float fill_risk_metric6 = 475; // user defined (from parent order)
    float fill_risk_metric7 = 478; // user defined (from parent order)
    float fill_s08_dn = 481; // underlier down 8% shock slide (equities only)
    float fill_s06_up = 484; // underlier up 6% shock slide (equities only)
    float fill_s15_dn = 487; // underlier down 15% shock slide (equities only)
    float fill_s15_up = 490; // underlier up 15% shock slide (equities only)
    float fill_tv = 493; // theo vol (user supplied)
    float fill_tp = 496; // theo price
    double fill_uBid = 499; // underlier market bid @ fill arrival
    double fill_uAsk = 502; // underlier market ask @ fill arrival
    double fill_bid = 505; // option market bid @ fill arrival
    double fill_ask = 508; // option market ask @ fill arrival
    float fill_surf_prc = 511; // SpiderRock surface price @ fill arrival
    double fill_post_uMark1_m = 514; // underlier mark @ fill arrival + 1M
    double fill_post_uMark10_m = 517; // underlier mark @ fill arrival + 10M
    double fill_post_mark1_m = 520; // SpiderRock mid or surface mark @ fill arrival + 1M
    double fill_post_mark10_m = 523; // SpiderRock mid or surface mark @ fill arrival + 10M
    RiskCode risk_code = 526; // SpiderRock Risk Code (if any)
    string exch_liquidity_tag = 529; // liquidity tag (exchange)
    string spdr_liquidity_tag = 532; // SpiderRock normalized liquidity tag
    string fill_exch_detail = 535; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    float notional_value = 538; // cn * mult * uPrc
    float market_value = 541; // cn * mult * fillPrice
    float order_mkt_width = 544; // market width @ parent order arrival
    float child_mkt_width = 547; // market width @ child order send time
    float fill_mkt_width = 550; // market width @ fill arrival
    float trd_delta = 553; // trade delta
    float trd_dDelta = 556; // trade $delta
    float trd_gamma = 559; // trade gamma
    float trd_dGamma = 562; // trade dollar gamma
    float trd_vega = 565; // trade vega
    float trd_wt_vega = 568; // trade wtVega: (vega * vol / sqrt(max(0.1, years * 4))
    float trd_prem = 571; // trade premium over parity
    float trd_theta = 574; // trade theta
    float trd_beta = 577; // trade beta
    float trd_dBeta = 580; // trade $beta
    float surf_edge = 583; // SR surface edge (user supplied theo vol/prc to SpiderRock surface price)
    float surf_edge_unit = 586; // SR surface edge normalized to $100 underlier
    float theo_edge = 589; // theo edge (user supplied theo vol/prc to SpiderRock surface price)
    float theo_edge_unit = 592; // theo edge normalized to $100 underlier
    float cl_arrive_pn_l = 595; // arrival PnL (client arrival mark to fill mark) [from clArriveMark on parent order]
    float arrive_pn_l = 598; // arrival PnL (parent arrival mark to fill mark)
    float arrive_dn_pn_l = 601; // arrival Dn PnL (arrivalPnL - uDriftArrivalPnL)
    float u_drift_arrive_pn_l = 604; // underlier delta drift PnL (arrival uMark to fill uMark)
    float exch_fee = 607; // SpiderRock exchange fee estimate
    float half_width_pn_l = 610; // estimated half-width PnL
    float day_dn_pn_l = 613; // delta neutral PnL (to EOD)
    float day_m1_pn_l = 616; // delta neutral PnL (Fill + 1M)
    float day_m10_pn_l = 619; // delta neutral PnL (Fill + 10M)
    float u_drift_day_pn_l = 622; // underlier delta drift PnL (to EOD)
    float u_drift_m1_pn_l = 625; // underlier delta drift PnL (Fill + 1M)
    float u_drift_m10_pn_l = 628; // underlier delta drift PnL (Fill + 10M)
    float day_pn_l = 631; // actual PnL to EOD
    double live_mark = 634; // SpiderRock internal use
    double live_uPrc = 637; // SpiderRock internal use
    double pend_mark = 640; // SpiderRock internal use
    double pend_uPrc = 643; // SpiderRock internal use
    string trd_mark_error = 646; // trade mark error code
    string day_mark_error = 649; // day mark error code
    string user_data1 = 652; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 655; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    google.protobuf.Timestamp timestamp = 658; // SR system timestamp
}


    
message SpdrCompositeMark {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double mark = 100;
    double u_mark = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message SpdrCompositeReject {
    message PKey {
        
        string accnt = 10; // SpiderRock Accnt Code
        string user_name = 13; // SpiderRock user name associated with the parent order
        string remote_text = 16; // text comment from endpoint (if any)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 fill_number = 100; // SpiderRock execution number of most recent reject (globally unique over trailing 10 days)
    google.protobuf.Timestamp date = 103; // trade date
    sfixed32 reject_count = 106; // number of times this reject has been triggered
    string cl_ord_id = 109; // clOrdId resulting in fill (child order)
    sfixed64 parent_number = 112; // SpiderRock parent number
    string alt_order_id = 115; // alternate order ID (usually clOrdId from client)
    string src_routing_code = 118; // inbound FIX routing code, if any
    SpdrSource spdr_source = 121; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 124; // SpiderRock parent broker number [broker pkey]
    string client_firm = 127; // SpiderRock ClientFirm Code
    string pri_agg_group = 130; // primary aggregation group
    string sec_agg_group = 133; // secondary aggregation group
    OptionKey sec_key = 136; // Security Key [can be partially filled in (look at secType)]
    SpdrKeyType sec_type = 139; // Security Type [Stock, Future, Option]
    TickerKey ticker = 142; // SpiderRock underlier ticker key [synthetic for futures]
    SymbolType symbol_type = 145; // symbol type
    PriceFormat price_format = 148; // SpiderRock price display format code
    PriceFormat u_price_format = 151; // SpiderRock underlier price display code
    float years = 154; // years to expiration
    sfixed32 underliers_per_cn = 157; // underliers per contract (futures and options)
    UnderlierType underlier_type = 160; // underlier type (affects $greek calcs)
    float tick_value = 163; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 166; // $NLV value of a point
    Currency point_currency = 169;
    float u_prc_ratio = 172; // UPrcRatio (SymbolRatio) from product definition
    string routing_code = 175; // SpiderRock market routing code
    string machine_name = 178; // name of the machine which is hosting server
    string orig_exec_iD = 181; // original execution ID string (child order)
    string last_exec_iD = 184; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    google.protobuf.Timestamp transact_dttm = 187; // transaction date/time as reported by exchange or down stream broker
    ExecStatus exec_status = 190; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    SpdrLimitType order_limit_type = 193; // parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]
    SpdrLimitClass order_limit_class = 196; // parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)
    ParentOrderHandling parent_order_handling = 199; // base parent order algo [take style algo]
    ParentBalanceHandling parent_balance_handling = 202; // base parent order balance handling [make style algo]
    sfixed32 parent_order_size = 205; // parent order size
    string method = 208; // execution method string
    string strategy = 211; // client strategy [usually client supplied]
    string origin = 214; // parent order origin string
    string source = 217; // execution source string
    string server = 220; // SpiderRock execution engine that handled the parent order
    string clearing_firm = 223; // clearing firm (delivery)
    string clearing_accnt = 226; // clearing firm account (if any)
    OrderCapacity last_capacity = 229; // child order capacity
    ExecRole exec_role = 232; // SpiderRock relationship to this execution record (Direct, Drop, etc)
    string exec_broker_mPID = 235; // exec broker acronym (usually an MPID)
    string exec_broker_accnt = 238; // account at executing broker/prime (if any)
    string exec_broker_cl_firm = 241; // client/firm at executing broker/prime (if any)
    string exec_broker_user_name = 244;
    FlipType clearing_flip_type = 247; // clearingFlip Type (CMTA or Giveup)
    string clearing_flip_firm = 250; // clearingFlip Broker/MPID
    string clearing_flip_accnt = 253; // clearingFlip additional detail (sub-accnt)
    sfixed64 risk_group_id = 256; // riskGroupId (parent order group ID) for this execution report
    FirmType firm_type = 259; // chld order firm type [Customer, ProCust, Firm, MM, etc]
    BuySell side = 262; // parent/child order side
    ShortSaleFlag ssale_flag = 265; // child order short sale flag
    ShortSaleFlag spdr_sSale_flag = 268; // parent order short sale flag
    PositionType position_type = 271; // child order position type
    AutoHedge auto_hedge = 274; // SpiderRock auto-hedge algorithm (if any)
    google.protobuf.Timestamp order_dttm = 277; // Date/time of parent order arrival
    double order_uBid = 280; // underlier market bid @ parent order arrival
    double order_uAsk = 283; // underlier market ask @ parent order arrival
    double order_bid = 286; // option market bid @ parent order arrival (options only)
    double order_ask = 289; // option market ask @ parent order arrival (options only)
    float order_surf_prc = 292; // SpiderRock surface price @ parent order arrival (options only)
    float order_limit_vol = 295; // parent order limit volatilty (options only)
    double order_limit_prc = 298; // parent order limit price @ parent order arrival
    double order_limit_ref_uPrc = 301; // limit reference underlier price @ parent order arrival (options only)
    sfixed32 child_size = 304; // child order size
    double child_price = 307; // child order price
    string child_exch = 310; // child order exchange code (SpiderRock)
    string child_ex_dest = 313; // child order exchange code (downstream)
    google.protobuf.Timestamp child_dttm = 316; // child order send date/time
    double child_uBid = 319; // underlier market bid @ child order send time
    double child_uAsk = 322; // underlier market bid @ child order send time
    double child_bid = 325; // option market bid @ child order send time (options only)
    double child_ask = 328; // option market ask @ child order send time (options only)
    float child_surf_prc = 331; // SpiderRock surface price @ child order send time (options only)
    float child_vol = 334; // child order volatilty (options only)
    float child_prob = 337; // child order probability (T+x)
    double child_limit_prc = 340; // parent order limit price @ child order send time
    double child_limit_ref_uPrc = 343; // limit reference underlier price @ child order send time (options only)
    string child_order_handling = 346; // algo that generated the child order responsible for this fill
    MktStance child_mkt_stance = 349; // child order was expected to be marketable @ child send time
    YesNo cancel_attempted = 352; // cancel attempt was made on the child order prior to receiving this fill
    float order_mkt_width = 355; // market width @ parent order arrival
    float child_mkt_width = 358; // market width @ child order send time
    string user_data1 = 361; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 364; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    google.protobuf.Timestamp timestamp = 367; // SR system timestamp
}


    
message SpdrCompositeRejectV2 {
    message PKey {
        
        string accnt = 10; // SpiderRock Accnt Code
        string user_name = 13; // SpiderRock user name associated with the parent order
        string remote_text = 16; // text comment from endpoint (if any)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 fill_number = 100; // SpiderRock execution number of most recent reject (globally unique over trailing 10 days)
    google.protobuf.Timestamp date = 103; // trade date
    sfixed32 reject_count = 106; // number of times this reject has been triggered
    string cl_ord_id = 109; // clOrdId resulting in fill (child order)
    sfixed64 parent_number = 112; // SpiderRock parent number
    string alt_order_id = 115; // alternate order ID (usually clOrdId from client)
    string src_routing_code = 118; // inbound FIX routing code, if any
    SpdrSource spdr_source = 121; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 124; // SpiderRock parent broker number [broker pkey]
    string client_firm = 127; // SpiderRock ClientFirm Code
    OptionKey sec_key = 130; // Security Key [can be partially filled in (look at secType)]
    SpdrKeyType sec_type = 133; // Security Type [Stock, Future, Option]
    PriceFormat price_format = 136; // SpiderRock price display format code
    PriceFormat u_price_format = 139; // SpiderRock underlier price display code
    string routing_code = 142; // SpiderRock market routing code
    string machine_name = 145; // name of the machine which is hosting server
    string engine_name = 148; // SpiderRock execution engine that handled the parent order
    string gateway_name = 151; // StreetGateway server than handled the child order (if any)
    ExecStatus exec_status = 154; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    SpdrLimitType order_limit_type = 157; // parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]
    SpdrLimitClass order_limit_class = 160; // parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)
    ParentOrderHandling parent_order_handling = 163; // base parent order algo [take style algo]
    ParentBalanceHandling parent_balance_handling = 166; // base parent order balance handling [make style algo]
    sfixed32 parent_order_size = 169; // parent order size
    string method = 172; // execution method string
    string strategy = 175; // client strategy [usually client supplied]
    string origin = 178; // parent order origin string
    string source = 181; // execution source string
    sfixed64 risk_group_id = 184; // riskGroupId (parent order group ID) for this execution report
    AutoHedge auto_hedge = 187; // SpiderRock auto-hedge algorithm (if any)
    google.protobuf.Timestamp order_dttm = 190; // Date/time of parent order arrival
    BuySell order_side = 193; // parent/child order side
    sfixed32 child_size = 196; // child order size
    double child_price = 199; // child order price
    string child_exch = 202; // child order exchange code (SpiderRock)
    string child_ex_dest = 205; // child order exchange code (downstream)
    google.protobuf.Timestamp child_dttm = 208; // child order send date/time
    string child_order_handling = 211; // algo that generated the child order responsible for this fill
    MktStance child_mkt_stance = 214; // child order was expected to be marketable @ child send time
    google.protobuf.Timestamp timestamp = 217; // SR system timestamp
}


    
message SpdrControlRequest {


    MbusInfo descriptor = 1;
    
    string key = 100; // not used with all request types
    string account = 103; // not used with all request types
    string source_account = 106; // not used with all request types
    CopyItems copy_items = 109;
    ControlTab control_tab = 112;
    sfixed64 last_sequence_number = 115;
    google.protobuf.Timestamp poll_timestamp = 118;
    string user_name = 121;
    GetAction action = 124;
}


    
message SpdrCoreMacro {
    message PKey {
        
        string macro_name = 10;
        string client_firm = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
}


/*
    SpdrCrossNotice messages are used to indicate that potential cross existed at a point in time
*/    
message SpdrCrossNotice {
    message PKey {
        
        sfixed64 cross_notice_number = 10; // SR Guid Number for this cross event
        sfixed32 face_index = 13;
    }

    message OrderLegs {
        
        OptionKey sec_key = 148; // leg
        SpdrKeyType sec_type = 151;
        uint32 mult = 154;
        BuySell side = 157;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 parent_number = 100; // parent order associated with the request
    OptionKey sec_key = 103;
    SpdrKeyType sec_type = 106;
    string cust_accnt = 109;
    string cust_client_firm = 112;
    BuySell cust_side = 115;
    double cust_limit = 118;
    sfixed32 cust_quantity = 121;
    string face_accnt = 124;
    string face_client_firm = 127;
    double face_limit = 130;
    sfixed32 face_open_quantity = 133;
    sfixed32 face_avail_quantity = 136;
    YesNo face_can_cross = 139;
    google.protobuf.Timestamp timestamp = 142;
    repeated OrderLegs order_legs = 145;
}


    
message SpdrDropExecution {
    message PKey {
        
        sfixed64 drop_number = 10; // SR drop record number
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string routing_code = 100;
    sfixed32 routing_seq_num = 103;
    OptionKey sec_key = 106;
    SpdrKeyType sec_type = 109;
    string security_desc = 112;
    string security_type = 115;
    string symbol = 118; // symbol (+ '.' + symbolSfx)
    google.protobuf.Timestamp maturity_date = 121;
    double strike = 124;
    CallPut call_put = 127;
    string account = 130; // FixTag.1
    string giveup_firm = 133;
    string giveup_accnt = 136;
    string clearing_firm = 139;
    string clearing_accnt = 142;
    string drop_data1 = 145;
    string drop_data2 = 148;
    string cl_ord_id = 151; // child order clOrdId (if available)
    int32 fill_version = 154; // cancel/correct version number (initial fill is version=1)
    ExecStatus fill_exec_status = 157; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    google.protobuf.Timestamp fill_dttm = 160; // fill DateTime (from SRDateTime)
    sfixed32 fill_quantity = 163; // fill size (from execReport.lastSize)
    BuySell fill_side = 166; // fill side (from execReport.side)
    ShortSaleFlag fill_sSale_flag = 169; // fill side (from execReport.side)
    PositionType fill_position_type = 172;
    double fill_price = 175; // fill price (from execReport.lastPrice)
    google.protobuf.Timestamp fill_transact_dttm = 178; // fill DateTime (from execReport.fillDttm)
    string fill_market = 181; // fill market (from execReport.lastMarket)
    string fill_sRLiq_tag = 184; // fill SR normalized liquidity tag
    string fill_exch_liq_tag = 187; // fill exchange liquidity code
    float fill_exch_fee = 190; // fill exchange fee (if available)
    string fill_exec_id = 193; // fill execution id (from execReport.execId)
    string fill_ref_exec_id = 196; // fill ref execution id (from execReport.refExecId) [only set on a cancel or correct]
    sfixed64 fill_leg_ref_id = 199; // fill leg ref id (from execReport.legRefId)
    string fill_firm_type = 202; // fill firm type (as reported from street side)
    string fill_exec_broker = 205; // fill execution broker (as reported from street side)
    OrderCapacity fill_order_capacity = 208; // fill order capacity (as reported from street side)
    string fill_contra_detail = 211; // fill contra party additional detail (if available)
    OrderCapacity fill_contra_capacity = 214; // fill order capacity of contra party (if available)
    string fill_street_text = 217;
    sfixed64 net_timestamp = 220; // drop gateway arrival timestamp
    google.protobuf.Timestamp timestamp = 223;
}


    
message SpdrDropExecutionAck {
    message PKey {
        
        sfixed64 drop_number = 10; // SR drop record number
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string routing_code = 100;
    OptionKey sec_key = 103;
    SpdrKeyType sec_type = 106;
    string client_firm = 109;
    int32 fill_version = 112;
    DropExecStatus drop_exec_status = 115;
    string other_detail = 118;
    string error_detail = 121;
    sfixed64 fill_number = 124; // SR Fill Number (if Accepted)
    google.protobuf.Timestamp fill_dttm = 127;
    google.protobuf.Timestamp timestamp = 130;
}


    
message SpdrEngineControl {
    message PKey {
        
        string server_code = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrEngineState spdr_engine_state = 100;
    float collar_multiplier = 103; // multiplier for all collar checks [1.0 - 10.0]
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message SpdrEngineStatus {
    message PKey {
        
        string server_code = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    uint32 app_id = 100;
    string stripe = 103;
    RunStatus run_status = 106;
    SysRealm sys_realm = 109;
    SysEnvironment sys_environment = 112;
    sfixed32 process_id = 115;
    string machine_name = 118;
    string engine_error = 121;
    SpdrEngineState spdr_engine_state = 124;
    AutoEngineState auto_engine_state = 127;
    EngineFeedState eqt_feed_state = 130;
    EngineFeedState fut_feed_state = 133;
    EngineFeedState eqt_opt_feed_state = 136;
    EngineFeedState fut_opt_feed_state = 139;
    float avg_stk_quote_prob_rate = 142; // number of messages per second (trailing 1 seconds)
    float avg_fut_quote_prob_rate = 145; // number of messages per second (trailing 1 seconds)
    float avg_opt_quote_prob_rate = 148; // number of messages per second (trailing 1 seconds)
    float avg_exch_auction_mLeg_rate = 151; // number of messages per second (trailing 1 seconds)
    float avg_exch_auction_single_rate = 154; // number of messages per second (trailing 1 seconds)
    float parent_order_message_rate = 157; // number of messages per second (trailing 60 seconds)
    float parent_limit_message_rate = 160; // number of messages per second (trailing 60 seconds)
    sfixed32 num_street_sessions = 163;
    sfixed32 num_gateway_sessions = 166;
    float avg_gateway_msgs_sent = 169; // number of messages per second (trailing 5 seconds)
    float avg_gateway_msgs_rcvd = 172; // number of messages per second (trailing 5 seconds)
    sfixed64 cum_gateway_msgs_sent = 175;
    sfixed64 cum_gateway_msgs_rcvd = 178;
    sfixed32 num_auto_hedge_symbols = 181;
    YesNo warmup_executions_oK = 184;
    google.protobuf.Timestamp engine_start_dttm = 187;
    sfixed32 num_active_stk_brokers = 190;
    sfixed32 num_active_fut_brokers = 193;
    sfixed32 num_active_opt_brokers = 196;
    sfixed32 num_active_dma_brokers = 199;
    sfixed32 num_active_mLeg_brokers = 202;
    sfixed32 num_parent_orders = 205;
    sfixed32 num_parent_rejects = 208;
    google.protobuf.Timestamp last_parent_order = 211;
    google.protobuf.Timestamp last_parent_reject = 214;
    google.protobuf.Timestamp timestamp = 217;
}


    
message SpdrExchRiskDrop {
    message PKey {
        
        sfixed64 exch_drop_number = 10; // SR Unique ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string routing_code = 100; // drop session routing code
    sfixed32 routing_seq_num = 103; // drop session routingSeqNum
    string route_risk_group = 106; // unique code grouping this drop session with 1 or more outbound street sessions
    OptionKey sec_key = 109;
    SpdrKeyType sec_type = 112;
    string account = 115; // FixTag.1
    string drop_data1 = 118;
    string drop_data2 = 121;
    string cl_ord_id = 124; // child order clOrdId
    int32 fill_version = 127; // cancel/correct version number (initial fill is version=1)
    ExecStatus fill_exec_status = 130; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    google.protobuf.Timestamp fill_dttm = 133; // fill DateTime (from SRDateTime)
    sfixed32 fill_quantity = 136; // fill size (from execReport.lastSize)
    BuySell fill_side = 139; // fill side (from execReport.side)
    double fill_price = 142; // fill price (from execReport.lastPrice)
    google.protobuf.Timestamp fill_transact_dttm = 145; // fill DateTime (from execReport.fillDttm)
    string fill_market = 148; // fill market (from execReport.lastMarket)
    string fill_exec_id = 151; // fill execution id (from execReport.execId)
    string fill_ref_exec_id = 154; // fill ref execution id (from execReport.refExecId) [only set on a cancel or correct]
    sfixed64 fill_leg_ref_id = 157; // fill leg ref id (from execReport.legRefId)
    string fill_street_text = 160;
    sfixed64 net_timestamp = 163; // drop gateway arrival timestamp
    google.protobuf.Timestamp timestamp = 166;
}


/*
    SpdrExchRiskMgmt records are created/published by SpiderRock Execution Engines and show exchange level risk management child order rejects.
*/    
message SpdrExchRiskMgmt {
    message PKey {
        
        string client_firm = 10;
        string exch = 13;
        string security_group = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    RiskStatus status = 100;
    sfixed32 num_rejects = 103;
    OptionKey sec_key = 106; // most recently rejected secKey
    SpdrKeyType sec_type = 109;
    string accnt = 112; // most recently rejected accnt
    string reject_text = 115; // most recent rejectText
    SpdrSource spdr_source = 118;
    google.protobuf.Timestamp expires = 121; // Time the riggered Risk limit expires
    string modified_by = 124; // user who last modified this record
    google.protobuf.Timestamp timestamp = 127; // timestamp of last modification
}


/*
    SpdrExchRiskMgmt records are created/published by SpiderRock Execution Engines and show exchange level risk management child order rejects.
*/    
message SpdrExchRiskReset {
    message PKey {
        
        string client_firm = 10;
        string exch = 13;
        string security_group = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string modified_by = 100; // user who last modified this record
    google.protobuf.Timestamp timestamp = 103; // timestamp of last modification
}


    
message SpdrExecutionAggregationV2 {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_records = 100; // total number of records aggregated
    float sum_parent_size = 103; // total parent order size
    float sum_parent_mkt_width = 106; // total parent market width
    float avg_parent_size = 109; // average parent size
    float avg_parent_mkt_width = 112; // average parent market width
    float avg_parent_limit_vol = 115; // average parent order volatility (options only)
    float sum_child_size = 118; // total child order size
    float sum_child_mkt_width = 121; // total child market width
    float avg_child_size = 124; // average child size
    float avg_child_mkt_width = 127; // average child market width
    float avg_child_limit_vol = 130; // average child order volatility (options only)
    double avg_fill_size = 133; // average fill quantity
    double avg_fill_price = 136; // average fill price (FillMoney / FillSz)
    float avg_fill_vol = 139; // average fill volatility (options only)
    float avg_fill_probability = 142; // average fill order probability
    float avg_fill_mkt_width = 145; // average market width @ fill arrival
    float avg_fill_uMkt_width = 148; // average underlier market width @ fill arrival
    float avg_fill_theo_edge = 151; // average fill theo edge
    float avg_fill_unit_edge = 154; // average fill unit edge
    float avg_fill_m1_pn_l = 157; // average fill delta neutral PnL (Fill + 1M)
    float avg_fill_m10_pn_l = 160; // average fill delta neutral PnL (Fill + 10M)
    float avg_fill_day_pn_l = 163; // average (PnL to EOD)
    float avg_fill_dn_day_pn_l = 166; // average fill delta neutral PnL (to EOD)
    double sum_fill_size = 169; // total fill quantity
    double sum_fill_money = 172; // total fill money
    float sum_fill_delta = 175; // total fill delta
    float sum_fill_dDelta = 178; // total fill $delta
    float sum_fill_dBeta = 181; // total fill $beta
    float sum_fill_vega = 184; // total fill vega
    float sum_fill_wVega = 187; // total fill wvega
    float sum_fill_tVega = 190; // total fill tvega
    float sum_fill_wt_vega = 193; // total fill wtvega
    float sum_fill_premium = 196; // total fill premium over parity
    float sum_fill_notional = 199; // total fill notional value
    float sum_fill_mkt_width = 202; // total fill market width
    float sum_fill_uMkt_width = 205; // total fill underlier market width
    float sum_fill_theo_edge = 208; // total fill theo edge
    float sum_fill_unit_edge = 211; // total fill unit edge
    float sum_fill_m1_pn_l = 214; // total fill delta neutral PnL (Fill + 1M)
    float sum_fill_m10_pn_l = 217; // total fill delta neutral PnL (Fill + 10M)
    float sum_fill_day_pn_l = 220; // total fill PnL (to EOD)
    float sum_fill_dn_day_pn_l = 223; // total fill delta neutral PnL (to EOD)
    float sum_fill_m1_uDrift = 226; // total fill underlier delta drift PnL (Fill + 1M)
    float sum_fill_m10_uDrift = 229; // total fill underlier delta drift PnL (Fill + 10M)
    float sum_fill_day_uDrift = 232; // total fill underlier delta drift PnL (to EOD)
    float sum_fill_exch_fees = 235; // total estimated fill exchange fees
    float sum_fill_brokerage = 238; // total fill billing brokerage rate
    float sum_fill_vol = 241; // total fill volatility (options only)
    float sum_fill_probability = 244; // total fill order probability
    float sum_fill_gamma = 247; // total fill gamma
    float sum_fill_price = 250; // total fill price
}


    
message SpdrExecutionAllocation {
    message PKey {
        
        sfixed64 alloc_number = 10; // unique number for this allocation request
    }

    message ChildOrders {
        
        sfixed64 cl_ord_id = 133;
    }

    message Fragments {
        
        string alloc_accnt = 139; // SR alloc accnt
        sfixed32 alloc_size = 142; // target alloc size
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 base_parent_number = 100; // Filled only when generated from SpdrParentAllocation. 0 otherwise
    string omni_accnt = 103; // omnibus accnt (SR accnt)
    OptionKey sec_key = 106; // security key (stock, future, or option)
    SpdrKeyType sec_type = 109; // security type
    string mleg_leg_key = 112; // [secKey.StringKey;legRatio;side;positionEffect, secKey.StringKey;legRatio;side;positionEffect, ...]
    BuySell order_side = 115; // order side (always buy for MLEG orders)
    ShortSaleFlag ssale_flag = 118; // ssale flag (None if not stock)
    PositionType position_type = 121; // positionType (None if not equity option)
    AllocationRule allocation_rule = 124;
    YesNo ready_to_send = 127; // indicates that this noticed is ready to forward to a custodian
    string modified_by = 145; // user who last modified this record
    google.protobuf.Timestamp timestamp = 148; // timestamp of last modification
    repeated ChildOrders child_orders = 130;
    repeated Fragments fragments = 136;
}


    
message SpdrExecutionAllocationStatus {
    message PKey {
        
        sfixed64 alloc_number = 10; // unique number for this allocation request
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100; // security key (stock, future, or option)
    SpdrKeyType sec_type = 103; // security type
    AllocStatus alloc_status = 106;
    string alloc_detail = 109;
    string modified_by = 112; // user who last modified this record
    google.protobuf.Timestamp timestamp = 115; // timestamp of last modification
}


    
message SpdrFaceAllocation {
    message PKey {
        
        sfixed64 cl_ord_id = 10;
        int32 face_index = 13;
        OptionKey sec_key = 16; // security key (stock, future, or option)
        SpdrKeyType sec_type = 19; // security type
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 base_parent_number = 100; // base parent number of cust side broker
    string cust_accnt = 103; // customer side accnt
    string cust_client_firm = 106;
    sfixed32 order_size = 109; // num of contracts (or spreads) attempted in cross child order (clOrdId)
    double order_price = 112; // limit price from cross child order (clOrdId)
    BuySell order_side = 115; // top level order side (side of cust) from cross child order (clOrdId)
    sfixed32 leaves_qty_cust = 118;
    sfixed32 leaves_qty_face = 121;
    sfixed32 cum_fill_size_cust = 124;
    sfixed32 cum_fill_size_face = 127;
    double avg_fill_price_cust = 130;
    double avg_fill_price_face = 133;
    int32 num_legs = 136;
    int32 num_face_sides = 139;
    sfixed64 leg_iD = 142;
    sfixed32 leg_size = 145;
    double leg_avg_fill_price_cust = 148; // average fill price of this leg (cust side)
    double leg_avg_fill_price_face = 151; // average fill price of this leg (face side)
    string face_accnt = 154; // facilitation accnt
    string face_client_firm = 157;
    BuySell face_side = 160; // facilitation side (for delivery to faceAccnt)
    sfixed32 face_alloc_size = 163; // faceCross.allocSize
    float face_alloc_fraction = 166; // percentage of child order expected to allocate to this face side
    sfixed32 face_leg_alloc_size = 169; // allocation fragment size (if fully allocated) [faceAllocSize * legSize]
    google.protobuf.Timestamp timestamp = 172;
}


    
message SpdrFixLogData {
    message PKey {
        
        string id = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp date = 100;
    string cl_order_iD = 103;
    string file_name = 106;
    string log_message = 109;
    string message_type = 112;
    string data_format = 115;
    string environment = 118;
    string sender_iD = 121;
    string target_iD = 124;
    google.protobuf.Timestamp timestamp = 127;
}


/*
    Records inserted into this table causes the corresponding parent order to be cancelled if it is active and cancellable.
*/    
message SpdrFixParentCancel {
    message PKey {
        
        string alt_cancel_id = 10; // usually client FIX clOrdId of the inbound OrderCancel request
        string src_routing_code = 13; // client FIX session
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 client_seq_num_in = 100;
    string alt_order_id = 103; // usually client FIX origClOrdId (order to be cancelled)
    OptionKey sec_key = 106; // Composite Security Key
    SpdrKeyType sec_type = 109; // Security Type [Stock, Future, Option]
    string cxl_reason = 112;
    SpdrCloseReason spdr_close_reason = 115; // Valid values from CGW: UserCxl, System
    string engine_name = 118; // set by the engine handling event (should be blank on arrival)
    string modified_by = 121; // user who last modified this record
    google.protobuf.Timestamp timestamp = 124; // timestamp of last modification
}


    
message SpdrFixParentExecution {
    message PKey {
        
        sfixed64 fill_number = 10;
        string unique_msg_iD = 13; // internal stream unique messageId.  Usually either an execId, clOrdId, or crossId.   Unique across drop stream (drop server and client firm)
        string server_code = 16; // SR Drop Server Code
        string client_firm = 19; // SR Client Firm
        StreamType stream_type = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // SR internal account (used for permissioning/routing)
    OptionKey sec_key = 103;
    SpdrKeyType sec_type = 106;
    sfixed64 base_parent_number = 109; // SpiderRock base parent number
    sfixed64 parent_number = 112; // SpiderRock parent number
    int32 fill_version = 115;
    sfixed64 cl_ord_id = 118; // SR Child Order Number (matches SpdrChildOrder.pkey.clOrdId)
    BuySell side = 121;
    ExecStatus exec_status = 124; // SpiderRock execution status (Fill,Bust,Correct)
    sfixed32 last_fill_qty = 127;
    double last_fill_price = 130;
    google.protobuf.Timestamp last_fill_dttm = 133;
    sfixed32 cum_fill_qty = 136; // from SpdrParentExecution.cumFillQty
    double avg_fill_price = 139; // from SpdrParentExecution.avgFillPrice
    string fix_cl_ord_id = 142; // stream clOrdID<11>
    string fix_cross_id = 145; // stream crossID<548>
    string fix_exec_id = 148; // stream execID<17>
    string fix_exec_type = 151; // stream execType<150>
    string fix_ord_status = 154; // stream ordStatus<39>
    sfixed32 fix_cum_fill_qty = 157; // stream cumQty<14>
    double fix_avg_fill_px = 160; // stream avgPx<6>
    google.protobuf.Timestamp fix_transact_dttm = 163; // stream transactTime<60>
    sfixed64 net_timestamp = 166; // drop gateway arrival timestamp
    google.protobuf.Timestamp timestamp = 169;
}


/*
    Record indicates that either a SpdrParentOrder (Add or Replace) or FixParentCancel request failed
*/    
message SpdrFixParentReject {
    message PKey {
        
        string alt_order_id = 10; // usually client FIX clOrdId
        string src_routing_code = 13; // client FIX session
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 client_seq_num_in = 100;
    string alt_prev_order_id = 103; // usually client FIX origClOrdId
    sfixed64 parent_number = 106;
    string accnt = 109; // accnt
    OptionKey sec_key = 112; // security key
    SpdrKeyType sec_type = 115; // security type [Stock, Future, Option]
    RejectType reject_type = 118;
    SpdrOrderStatus spdr_order_status = 121;
    SpdrCloseReason spdr_close_reason = 124;
    SpdrRejectReason spdr_reject_reason = 127;
    string text = 130;
    google.protobuf.Timestamp timestamp = 133;
}


/*
    SpdrFutBrkrEvent records are published when a new or clx/replace parent order arrives causes a broker to beging working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
*/    
message SpdrFutBrkrEvent {
    message PKey {
        
        sfixed64 parent_number = 10;
        EventRecType rec_type = 13; // type of record [New,Repl,Close]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ExpiryKey fkey = 100;
    string accnt = 103;
    SpdrSource spdr_source = 106;
    sfixed64 grouping_code = 109;
    BuySell order_side = 112;
    string client_firm = 115; // SR client firm code
    TickerKey ticker = 118; // ticker group (eg. @ES, @ZN)
    string alt_accnt = 121; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 124; // alternate (client assigned) user name (optional)
    uint32 event_number = 127;
    SpdrStageType stage_type = 130; // parent is a staged order [StageLock, StageModify, StageReview]
    sfixed64 base_parent_number = 133; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 prev_parent_number = 136; // SPDR order number (order being cancelled/replaced) (zero if none)
    string engine_name = 139; // server stripe
    SpdrBrokerStatus spdr_broker_status = 142;
    SpdrOrderStatus spdr_order_status = 145;
    SpdrCloseReason spdr_close_reason = 148;
    SpdrRejectReason spdr_reject_reason = 151;
    string spdr_comment = 154; // additional detail if parent closed or rejected
    float mar_haircut_utilized1 = 157; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_haircut_utilized2 = 160; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_haircut_utilized3 = 163; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #3)
    float mar_total_exposure_utilized1 = 166; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_total_exposure_utilized2 = 169; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_total_exposure_utilized3 = 172; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #3)
    double bid_prc = 175;
    double ask_prc = 178;
    sfixed32 bid_size = 181;
    sfixed32 ask_size = 184;
    sfixed32 arrive_cum_size = 187; // cum size at NBBO price on parent order arrival
    sfixed32 arrive_limit_size = 190; // immediately marketable size up to limit price on parent order arrival
    double arrive_limit_prc = 193; // expected average fill price if all immediately marketable size executed as advertized
    double avg_fill_prc = 196; // average fill price of all fills attributed parent order
    sfixed32 cum_fill_quan = 199; // cumulative fill quantity attributed to parent order
    uint32 num_child_orders = 202; // total number of child orders generated servicing parent order
    sfixed32 open_order_size = 205;
    sfixed32 action_order_size = 208;
    sfixed32 risk_limit_size = 211; // risk limit size
    SpdrRisk risk_limit_desc = 214; // reason for size reduction
    string risk_limit_detail = 217; // addition risk detail
    double limit_price = 220; // simple limit
    double make_limit_price = 223; // make limit
    LimitError make_limit_err = 226;
    double take_limit_price = 229; // take limit
    LimitError take_limit_err = 232;
    BrokerState broker_state = 235; // broker monitor state
    AlgoState make_state = 238; // [enum] current state of non-marketable order handler (maker)
    AlgoState take_state = 241; // [enum] current state of marketable order handler (taker)
    MktCrossState mkt_cross_state = 244; // [enum] current state of mkt cross handler (if any)
    ChildEvent last_child_event = 247;
    SpdrMarketState spdr_mkt_state = 250;
    sfixed32 num_orders = 253;
    sfixed32 leaves_qty = 256;
    fixed32 child_order_mask = 259; // bit-mask of all exchange for which a child order was generated
    PriceFormat price_format = 262;
    string modified_by = 265; // user who last modified this record
    google.protobuf.Timestamp timestamp = 268; // timestamp of last modification
}


/*
    SpdrFutBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders.
*/    
message SpdrFutBrkrState {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 13;
        SpdrSource spdr_source = 16;
        sfixed64 grouping_code = 19;
        BuySell order_side = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string engine_name = 100; // server stripe
    sfixed64 parent_number = 103; // SR parent number
    sfixed64 base_parent_number = 106;
    string alt_order_id = 109; // alternate order ID (usually clOrdId from client)
    sfixed64 package_id = 112; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string client_firm = 115; // SR client firm code
    TickerKey ticker = 118; // ticker group (eg. @ES, @ZN)
    string description = 121; // readable description of future/spread
    string alt_accnt = 124; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 127; // alternate (client assigned) user name (optional)
    SpdrStageType stage_type = 130; // parent is a staged order [StageLock, StageModify, StageReview]
    YesNo is_flagged = 133; // broker state records is flagged for action (user alert only)
    PriceFormat price_format = 136;
    sfixed32 underliers_per_cn = 139; // option delivery underliers per contract
    UnderlierType underlier_type = 142; // type of underlier (affects $greek calculations)
    float tick_value = 145; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 148; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 151;
    double nbbo_bid = 154; // current market bid (at time of record publish)
    double nbbo_ask = 157; // current market ask (at time of record publish)
    sfixed32 nbbo_bid_sz = 160; // current market cum bid size (at time of record publish)
    sfixed32 nbbo_ask_sz = 163; // current market cum ask size (at time of record publish)
    SpdrOrderStatus spdr_order_status = 166; // status of the most recent parent order handled by this broker
    SpdrCloseReason spdr_close_reason = 169; // close reason of most recent parent order
    SpdrRejectReason spdr_reject_reason = 172; // reject reason (if any) of most recent parent order
    string spdr_comment = 175;
    sfixed32 order_size = 178; // order size of most recent parent order
    sfixed32 order_active_size = 181; // total activated size (total size released for execution) (-1 = all available size)
    sfixed32 leaves_quantity = 184; // current child order leaves quantity (quantity actively working in the market;all child orders)
    double avg_fill_price = 187; // average fill price
    sfixed32 cum_fill_quantity = 190; // cumulative fill quantity
    google.protobuf.Timestamp last_fill_dttm = 193;
    sfixed32 risk_limit_size = 196; // parent risk limit size
    SpdrRisk risk_limit_desc = 199; // reason for size reduction
    double limit_price = 202; // simple limit
    double make_limit_price = 205; // make limit
    LimitError make_limit_err = 208;
    double take_limit_price = 211; // take limit
    LimitError take_limit_err = 214;
    string strategy = 217; // parent order strategy (description only)
    string user_name = 220; // user that entered the most recent parent order
    YesNo visible_in_sV = 223; // allow order to be visible in SV (do not use for high volume of orders)
    sfixed32 max_exposure_size = 226; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 229; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 232; // public order size handling
    YesNo can_overlap_cxl_repl = 235; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 238; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 progress_slice_cnt = 241; // number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 244; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 247; // target vwap participation rate (target % of trade activity)
    TriggerType trigger_type = 250; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 253; // stop/trigger level for parent order to go active (can be either a price or vol)
    sfixed32 max_child_orders = 256; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 259; // eligible exchanges (0 = all)
    TimeInForce time_in_force = 262;
    google.protobuf.Timestamp start_dttm = 265; // [optional] (parent order start time)
    sfixed32 order_duration = 268; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 271; // [optional] (default: 2099-01-01)
    google.protobuf.Timestamp expire_dttm = 274; // expected order expiration dttm
    ParentOrderHandling parent_order_handling = 277;
    ParentBalanceHandling parent_balance_handling = 280;
    SpdrLimitType order_limit_type = 283;
    SpdrLimitClass take_limit_class = 286; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 289; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 292; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 295; // Applies if LimitType = Prc[]
    double order_prc_offset = 298; // default=0
    AlphaType take_alpha_type = 301; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 304; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 307; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 310; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 313; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 316; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    StateModel state_model = 319;
    string extern_ex_dest = 322;
    google.protobuf.Timestamp order_dttm = 325; // order entry date/time
    MaxProgress max_progress = 328; // maximum point of progress for most recent parent order
    string max_progress_detail = 331; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 334; // time of last max progress advance
    BrokerState broker_state = 337; // broker monitor state
    sfixed32 broker_counter = 340; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 343; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 346; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 349; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 352; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 355; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 358; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 361; // [enum] current state of mkt cross handler (if any)
    sfixed32 mkt_cross_counter = 364; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 367; // Twap/Vwap progress detail
    ExchEvent exch_event = 370; // [enum] last exchange event state (from handler check)
    ChildEvent last_child_event = 373; // [enum] last child event code from broker/child order handler
    SpdrMarketState spdr_mkt_state = 376; // [enum] market state
    sfixed32 order_ratio = 379; // (various) can be a mleg leg ratio
    float cpx1 = 382; // child price level #1
    sfixed32 csz1 = 385; // cumulative size represented at this price
    float cpx2 = 388; // child price level #2
    sfixed32 csz2 = 391; // cumulative size represented at this price
    int32 c_more = 394; // number of additional child orders at inferior prices (if any)
    sfixed32 arrive_sweep_count = 397; // number of parent orders arriving with immediately available sweep qty
    sfixed32 arrive_sweep_order_qty = 400; // total size of all child orders generated due to parent order arrival sweep
    sfixed32 arrive_sweep_fill_qty = 403; // total fill size due to parent order arrival sweep
    sfixed32 num_sweep_child_orders = 406; // child orders generated in initial arrival sweep
    sfixed32 prt_cn_active = 409; // total contracts printed while parent order was active
    float prt_cn_active_mny = 412; // total of (contracts printed x print price) while parent order was active;  vwap price (while parent is active) = prtCnActiveMny / prtCnActive
    sfixed32 prt_cn_limit_oK = 415; // total contracts printed at or better than parent limit while parent was active
    float prt_cn_limit_oKMny = 418; // total of (contracts printed x print price) @ or better than parent limit while parent order was active;  vwap (limitOK) price (while parent is active) = prtCnLimitOKMny / prtCnLimitOK
    sfixed32 prt_cn_compete = 421; // total contracts printed on an exchange on which we had a competitive child order on that exchange; SUM(MIN(PrintSize, OpenChildOrderSize)) [childOrder.exch = print.exch]
    sfixed32 mk_check_cnt = 424; // total number of times order was checked for making
    float min_mk_prob = 427; // min make probability while broker active
    float avg_mk_prob = 430; // average make probability while broker active
    sfixed32 tk_check_cnt = 433; // total number of times order was checked for taking
    float max_tk_prob = 436; // max take probability while broker active
    float avg_tk_prob = 439; // average take probability while broker active
    sfixed32 prt_prb_cnt = 442; // total number of print probability records while broker active (all limit types)
    sfixed32 prt_prb_check = 445; // number of print probability records with active probability printTake handler
    sfixed32 prt_prb_lmt_oK = 448; // number of print probability records that pass broker takeLimit
    sfixed32 tk_cn_lmt_oK = 451; // total contracts available to take at parent limit or better while broker active
    float avg_qte_sz_ratio = 454; // average ratio of child size / nbbo size during the life of the working order when child order is at nbbo
    sfixed32 cnt_qte_sz_ratio = 457; // sample counter for above [1 second intervals];qteCnRatio / qteCnRatioCnt = avg of child size / nbbo size while broker active
    float min_qte_width = 460; // minimum quote width during active order window
    float avg_qte_width = 463; // average quote width (during active order window)
    sfixed32 cnt_qte_width = 466;
    sfixed32 num_imprv_chld = 469; // number of child orders that improved an existing market
    float total_seconds = 472; // number of seconds that the parent order was active
    float working_seconds = 475; // number of seconds with one or more working child orders that are part of nbbo
    float alone_seconds = 478; // number of seconds with one or more working child orders that make up 100% of nbbo
    sfixed32 num_risk_cancels = 481; // number of child orders cancels for risk reasons
    float risk_hold_seconds = 484; // number of seconds with parent order active but on risk hold (zero child order risk size)
    float risk_thrtl_seconds = 487; // number of seconds with parent order active but in risk throttle condition (temporary hold after fast/mass risk cancel)
    sfixed32 num_make_throttle_skips = 490; // number of childs orders not send to market dues to outbound lines being in a queued/throttled state
    float sum_make_throttle_delay = 493; // cumulative seconds of queue skip delay (seconds that a child order was not in the market dues to outbound lines being in a queued/throttled state)
    sfixed32 num_new_orders = 496; // number of child orders generated by this broker (all parent orders)
    sfixed32 num_exec_reports = 499; // number of child execution reports handled by this broker (all parent orders)
    sfixed32 num_fill_reports = 502; // number of child fill reports handled by this broker (all parent orders)
    uint32 num_parent_limits = 505; // number of parent limit messages received for this broker
    sfixed64 risk_group_id = 508; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    sfixed64 trigger_group_id = 511; // WaitTrigger group Id
    float net_acc_day_dDelta = 514; // net (+/-) account day $delta;cumulative day $delta (stock, future, option) for the account this order is associated with
    float net_sym_day_dDelta = 517; // net (+/-) symbol day $delta;cumulative $delta (stock, futures, options) for the ticker+account this order is associated with
    float net_grp_day_dDelta = 520; // net (+/-) day risk group $delta;cumulative (stock, futures, options) for the riskGroupId+account this order is associated with
    float max_grp_day_dDelta_ln = 523; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 526; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 529; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    AutoHedge auto_hedge = 532;
    HedgeInst hedge_instrument = 535; // auto-hedge instrument (from parent order)
    ExpiryKey hedge_sec_key = 538; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 541; // auto-hedge sec type (Stock or Future)
    float hedge_beta_ratio = 544; // auto-hedge ratio [from parent order (if supplied) or computed by SR]
    HedgeScope hedge_scope = 547; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 550; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string user_data1 = 553; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    string user_data2 = 556; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    sfixed32 num_updates = 559; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 562; // SR system timestamp
}


    
message SpdrFutExchControl {
    message PKey {
        
        FutExch fut_exch = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrExchState spdr_exch_state = 100;
    SpdrExchType spdr_exch_type = 103;
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message SpdrFutExchStatus {
    message PKey {
        
        FutExch fut_exch = 10;
        string server_code = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrExchState spdr_exch_state = 100;
    AutoExchState auto_exch_state = 103;
    string exch_exception = 106;
    sfixed32 num_open_child_orders = 109;
    sfixed32 num_child_orders_sent = 112;
    float exchange_msg_rate = 115;
    google.protobuf.Timestamp timestamp = 118;
}


    
message SpdrFutPrintCluster {
    message PKey {
        
        ExpiryKey fkey = 10;
        sfixed32 print_cluster_iD = 13; // unique SR Print Cluster ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double bid_prc1 = 100; // best (max) bid price during print event
    double ask_prc1 = 103; // best (min) ask price during print event
    sfixed32 bid_size1 = 106; // max cumulative size @ best bid price
    sfixed32 ask_size1 = 109; // max cumulative size @ best ask price
    double bid_prc2 = 112; // 2nd best bid price during print event
    double ask_prc2 = 115; // 2nd best ask price during print event
    sfixed32 bid_size2 = 118; // max cumulative size @ 2nd best bid price
    sfixed32 ask_size2 = 121; // max cumulative size @ 2nd best ask price
    double bid_prc3 = 124; // 3rd best bid price during print event
    double ask_prc3 = 127; // 3rd best ask price during print event
    sfixed32 bid_size3 = 130; // max cumulative size @ 3rd best bid price
    sfixed32 ask_size3 = 133; // max cumulative size @ 3rd best ask price
    double bid_prc4 = 136; // 4th best bid price during print event
    double ask_prc4 = 139; // 4th best ask price during print event
    sfixed32 bid_size4 = 142; // max cumulative size @ 4th best bid price
    sfixed32 ask_size4 = 145; // max cumulative size @ 4th best ask price
    float avg_bid_size = 148; // 10 minute EMA average of cum bid size @ best price level
    float avg_ask_size = 151; // 10 minute EMA average of cum ask szie @ best price level
    float avg_mkt_width = 154; // 10 minute EMA average of bid/ask width
    float avg_realized_vol = 157; // 10 minute EMA average realized volatility
    double print_min_price = 160;
    double print_max_price = 163;
    double print_avg_price = 166; // volume weighted average print price
    int32 print_cnt = 169; // number of option print reports received up in cluster window
    sfixed32 print_cum_size = 172; // cum size of all prints
    sfixed64 net_timestamp_st = 175; // (SR) net timestamp of the first print message in the sweep set
    sfixed64 net_timestamp_en = 178; // (SR) net timestamp of the final print message in the sweep set
    sfixed64 src_timestamp_st = 181; // source timestamp of the first print message in the sweep set
    sfixed64 src_timestamp_en = 184; // source timestamp of the final print message in the sweep set
    double fwdrice_m1 = 187; // projected mid-price (T+1) minute conditional on print cluster
    double fwd_price_m10 = 190; // projected mid-price (T+10) minutes conditional on print cluster
    double bid_price_m1 = 193; // nbbo market T+1 minute
    double ask_price_m1 = 196;
    double bid_price_m10 = 199; // nbbo market T+10 minutes
    double ask_price_m10 = 202;
    google.protobuf.Timestamp timestamp = 205;
}


/*
    SpdrFutureRiskControl records are used to establish supervisory control of future and future option trading in SpiderRock execution engines.  These records are only viewable and editable by RiskAdmin users with access to the control record account(s).
*/    
message SpdrFutureRiskControl {
    message PKey {
        
        string accnt = 10;
        string risk_symbol = 13; // underlying symbol (e.g. MSFT, *, SPY, @CL) or symbol/expiration (eg. @ES/EXP, @ES/2016-02-24)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo disabled = 100; // used to disable the futures limit
    float max_pos_delta_abs = 103; // net position delta in futures, including options on futures delta: abs(deltaPos + deltaBot - deltaSld)
    float max_day_delta_abs = 106; // net delta in futures traded in a single trading day: abs(deltaBot - deltaSld)
    float max_day_delta_bot = 109; // allowable delta in futures purchased in a trading session: deltaBot
    float max_day_delta_sld = 112; // allowable delta in futures sold in a trading session: deltaSld
    string modified_by = 115; // user who last modified this record
    google.protobuf.Timestamp timestamp = 118; // timestamp of last modification
}


/*
    Values in this table represent current (live) SpiderRock future risk counters for an account + riskSymbol (ticker or ticker/exp) combination.  These records are typically only visible to RiskAdmin users with access to the counter record account(s).
*/    
message SpdrFutureRiskRecord {
    message PKey {
        
        string accnt = 10;
        string risk_symbol = 13; // underlying futures symbol (e.g. *, @ES, @CL) or symbol/expiration (e.g. */EXP, @ZN/EXP, @GE/2016-12-19)
        string risk_engine = 16; // EE engine name (typically X)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float delta_bot = 100; // trading session futures delta bot [underlying + option delta + open orders]
    float delta_sld = 103; // trading session futures delta sld [underlying + option delta + open orders]
    float delta_pos = 106; // total position open delta [underlying + option delta], updated as trades are filled
    google.protobuf.Timestamp timestamp = 109; // timestamp of latest change
}


/*
    SpdrLiquidityRequest messages are used to indicate that liquidity support is requested for an order.
*/    
message SpdrLiquidityRequest {
    message PKey {
        
        sfixed64 request_number = 10; // note: usually the baseParentNumber of the associated request
    }

    message DirectedCounterParty {
        
        string client_firm = 163;
    }

    message OrderLegs {
        
        sfixed64 leg_id = 169; // SR leg Id
        OptionKey sec_key = 172; // leg
        SpdrKeyType sec_type = 175;
        uint32 mult = 178;
        BuySell side = 181;
        double ref_uPrc = 184; // reference underlier price (PrcDe orders)
        float ref_delta = 187; // reference delta (for PrcDe order handling)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 parent_number = 100; // parent order associated with the request
    YesNo is_live_request = 103; // yes if request is from a production / live accnt
    OptionKey sec_key = 106;
    SpdrKeyType sec_type = 109;
    LiquidityReqType request_type = 112;
    LiquidityReqEvent request_event = 115;
    BuySell cust_side = 118;
    sfixed32 cust_quantity = 121;
    CustQtyCond cust_qty_cond = 124;
    double cust_limit = 127;
    YesNo has_cust_limit = 130;
    YesNo is_cust_limit_tied = 133;
    double ref_uPrc = 136;
    double ref_delta = 139;
    double ref_gamma = 142;
    sfixed32 min_response_qty = 145;
    sfixed32 request_duration = 148; // number of seconds auction is expected to stay open
    sfixed64 net_timestamp = 151;
    google.protobuf.Timestamp timestamp = 154;
    DirectedScope directed_scope = 157;
    repeated DirectedCounterParty directed_counter_party = 160;
    repeated OrderLegs order_legs = 166;
}


/*
    SpdrMLegBrkrEvent records are published when a new or clx/replace parent order arrives causes a broker to beging working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
*/    
message SpdrMLegBrkrEvent {
    message PKey {
        
        sfixed64 parent_number = 10;
        EventRecType rec_type = 13; // type of record [New,Repl,Close]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    string accnt = 103;
    SpdrSource spdr_source = 106;
    sfixed64 grouping_code = 109;
    BuySell order_side = 112;
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    uint32 event_number = 124;
    SpdrStageType stage_type = 127; // parent is a staged order [StageLock, StageModify, StageReview]
    sfixed64 base_parent_number = 130; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 prev_parent_number = 133; // SPDR order number (order being cancelled/replaced) (zero if none)
    string engine_name = 136; // server stripe
    SpdrBrokerStatus spdr_broker_status = 139;
    SpdrOrderStatus spdr_order_status = 142;
    SpdrCloseReason spdr_close_reason = 145;
    SpdrRejectReason spdr_reject_reason = 148;
    string spdr_comment = 151; // additional detail if parent closed or rejected
    float mar_haircut_utilized1 = 154; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_haircut_utilized2 = 157; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_haircut_utilized3 = 160; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #3)
    float mar_total_exposure_utilized1 = 163; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_total_exposure_utilized2 = 166; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_total_exposure_utilized3 = 169; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #3)
    sfixed32 cum_square_qty = 172; // cum spread quantity filled (all legs received)
    double avg_square_prc = 175;
    sfixed32 cum_partial_qty = 178; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    double u_bid = 181;
    double u_ask = 184;
    float bid_prc = 187;
    float ask_prc = 190;
    sfixed32 bid_size = 193;
    sfixed32 ask_size = 196;
    sfixed32 open_order_size = 199;
    ExpiryKey hedge_sec_key = 202; // auto-hedge sec key
    SpdrKeyType hedge_sec_type = 205; // auto-hedge sec type
    sfixed32 risk_limit_size = 208; // risk limit size
    SpdrRisk risk_limit_desc = 211; // reason for size reduction
    string risk_limit_detail = 214; // addition risk detail
    double limit_price = 217;
    LimitError limit_err = 220;
    string limit_err_desc = 223;
    AlgoState algo_state = 226;
    sfixed32 algo_counter = 229;
    AlgoState make_state = 232;
    sfixed32 make_counter = 235;
    BrokerState broker_state = 238; // broker monitor state
    SpdrMarketState spdr_mkt_state = 241;
    fixed32 child_order_mask = 244; // bit-mask of all exchange for which a child order was generated
    uint32 num_child_orders = 247; // total number of child orders generated by this parent broker (parent number)
    uint32 num_day_child_orders = 250; // total number of child orders generated by this parent broker (all day; base parent number)
    string modified_by = 253; // user who last modified this record
    google.protobuf.Timestamp timestamp = 256; // timestamp of last modification
}


/*
    SpdrMLegBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders.
*/    
message SpdrMLegBrkrState {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13;
        SpdrSource spdr_source = 16;
        sfixed64 grouping_code = 19;
        BuySell order_side = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string engine_name = 100; // execution engine
    sfixed64 parent_number = 103; // SPDR parent number (most recent/currently active)
    sfixed64 base_parent_number = 106;
    string alt_order_id = 109; // alternate order ID (usually clOrdId from client)
    sfixed64 package_id = 112; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    SpdrStageType stage_type = 124; // parent is a staged order [StageLock, StageModify, StageReview]
    YesNo is_flagged = 127; // broker state records is flagged for action (user alert only)
    BuySell stock_side = 130;
    ShortSaleFlag ssale_flag = 133;
    sfixed32 locate_quan = 136; // available locate quantity (if selling short) @ child order send time
    string locate_firm = 139; // firm granting the locate (also locate firm used on street FIX orders)
    sfixed32 stock_shares = 142; // number of shares included (zero if none)
    sfixed64 stock_leg_id = 145;
    sfixed32 stock_fill_quan = 148;
    double stock_avg_fill_price = 151;
    float ref_uPrc = 154; // reference underlier price (PrcDe orders)
    float live_uPrc = 157;
    PriceFormat u_price_format = 160; // underlier price format code
    float stock_cpx = 163; // [child] best price
    sfixed32 stock_csz = 166; // [child] cumulative share represented at best price
    fixed32 stock_cex = 169; // [child] bit mask of all exchanges where we are representing this order
    int32 num_legs = 172; // number of valid legs below
    OptionKey sec_key1 = 175; // leg #1
    SpdrKeyType sec_type1 = 178;
    uint32 ratio1 = 181;
    BuySell side1 = 184;
    PositionType position_type1 = 187;
    sfixed64 leg_id1 = 190;
    sfixed32 fill_quan1 = 193;
    double avg_fill_price1 = 196;
    float vega1 = 199;
    double ref_uPrc1 = 202; // reference underlier price (PrcDe orders)
    float ref_delta1 = 205; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt1 = 208; // reference # of earnings moves before expiration
    double live_uPrc1 = 211;
    PriceFormat price_format1 = 214; // option price format code
    float leg_cpx1 = 217; // [child] best price
    sfixed32 leg_csz1 = 220; // [child] cumulative share represented at best price
    fixed32 leg_cex1 = 223; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key2 = 226; // leg #2
    SpdrKeyType sec_type2 = 229;
    uint32 ratio2 = 232;
    BuySell side2 = 235;
    PositionType position_type2 = 238;
    sfixed64 leg_id2 = 241;
    sfixed32 fill_quan2 = 244;
    double avg_fill_price2 = 247;
    float vega2 = 250;
    double ref_uPrc2 = 253; // reference underlier price (PrcDe orders)
    float ref_delta2 = 256; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt2 = 259; // reference # of earnings moves before expiration
    double live_uPrc2 = 262;
    PriceFormat price_format2 = 265; // option price format code
    float leg_cpx2 = 268; // [child] best price
    sfixed32 leg_csz2 = 271; // [child] cumulative share represented at best price
    fixed32 leg_cex2 = 274; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key3 = 277; // leg #3
    SpdrKeyType sec_type3 = 280;
    uint32 ratio3 = 283;
    BuySell side3 = 286;
    PositionType position_type3 = 289;
    sfixed64 leg_id3 = 292;
    sfixed32 fill_quan3 = 295;
    double avg_fill_price3 = 298;
    float vega3 = 301;
    double ref_uPrc3 = 304; // reference underlier price (PrcDe orders)
    float ref_delta3 = 307; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt3 = 310; // reference # of earnings moves before expiration
    double live_uPrc3 = 313;
    PriceFormat price_format3 = 316; // option price format code
    float leg_cpx3 = 319; // [child] best price
    sfixed32 leg_csz3 = 322; // [child] cumulative share represented at best price
    fixed32 leg_cex3 = 325; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key4 = 328; // leg #4
    SpdrKeyType sec_type4 = 331;
    uint32 ratio4 = 334;
    BuySell side4 = 337;
    PositionType position_type4 = 340;
    sfixed64 leg_id4 = 343;
    sfixed32 fill_quan4 = 346;
    double avg_fill_price4 = 349;
    float vega4 = 352;
    double ref_uPrc4 = 355; // reference underlier price (PrcDe orders)
    float ref_delta4 = 358; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt4 = 361; // reference # of earnings moves before expiration
    double live_uPrc4 = 364;
    PriceFormat price_format4 = 367; // option price format code
    float leg_cpx4 = 370; // [child] best price
    sfixed32 leg_csz4 = 373; // [child] cumulative share represented at best price
    fixed32 leg_cex4 = 376; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key5 = 379; // leg #5
    SpdrKeyType sec_type5 = 382;
    uint32 ratio5 = 385;
    BuySell side5 = 388;
    PositionType position_type5 = 391;
    sfixed64 leg_id5 = 394;
    sfixed32 fill_quan5 = 397;
    double avg_fill_price5 = 400;
    float vega5 = 403;
    double ref_uPrc5 = 406; // reference underlier price (PrcDe orders)
    float ref_delta5 = 409; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt5 = 412; // reference # of earnings moves before expiration
    double live_uPrc5 = 415;
    PriceFormat price_format5 = 418; // option price format code
    float leg_cpx5 = 421; // [child] best price
    sfixed32 leg_csz5 = 424; // [child] cumulative share represented at best price
    fixed32 leg_cex5 = 427; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key6 = 430; // leg #6
    SpdrKeyType sec_type6 = 433;
    uint32 ratio6 = 436;
    BuySell side6 = 439;
    PositionType position_type6 = 442;
    sfixed64 leg_id6 = 445;
    sfixed32 fill_quan6 = 448;
    double avg_fill_price6 = 451;
    float vega6 = 454;
    double ref_uPrc6 = 457; // reference underlier price (PrcDe orders)
    float ref_delta6 = 460; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt6 = 463; // reference # of earnings moves before expiration
    double live_uPrc6 = 466;
    PriceFormat price_format6 = 469; // option price format code
    float leg_cpx6 = 472; // [child] best price
    sfixed32 leg_csz6 = 475; // [child] cumulative share represented at best price
    fixed32 leg_cex6 = 478; // [child] bit mask of all exchanges where we are representing this order
    float mleg_vega = 481; // net vega per spread
    float mleg_wt_vega = 484; // net wt vega per spread
    float mleg_delta = 487; // net delta per spread
    float mleg_gamma = 490; // net gamma per spread
    float mleg_theta = 493; // net theta per spread
    string description = 496; // user defined
    sfixed32 order_size = 499; // order size of most recent parent order
    sfixed32 order_active_size = 502; // total activated size (total size released for execution) (-2 = all available size)
    sfixed32 leaves_quantity = 505; // current child order leaves quantity (quantity actively working in the market;all child orders)
    SpdrOrderStatus spdr_order_status = 508;
    SpdrCloseReason spdr_close_reason = 511;
    SpdrRejectReason spdr_reject_reason = 514;
    string spdr_close_detail_txt = 517;
    int32 open_legs = 520;
    sfixed32 cum_square_qty = 523; // cumulative spread quantity filled (all legs received)
    double avg_square_prc = 526;
    sfixed32 cum_partial_qty = 529; // cumulative spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    float fill_vega = 532; // net vega filled
    float fill_wt_vega = 535; // net wt vega filled
    float fill_delta = 538; // net delta filled
    float fill_dDelta = 541; // net $delta filled
    float fill_gamma = 544; // net gamma filled
    float fill_theta = 547; // net theta filled
    google.protobuf.Timestamp last_fill_dttm = 550;
    sfixed32 risk_limit_size = 553; // risk limit size
    SpdrRisk risk_limit_desc = 556; // reason for size reduction
    MaxProgress max_progress = 559; // maximum point of progress for most recent parent order
    string max_progress_detail = 562; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 565; // time of last max progress advance
    AlgoState algo_state = 568; // [enum] current state of order handler (maker)
    sfixed32 algo_counter = 571; // number of times order checked by algo handler (note: most checks result in no action)
    AlgoState make_state = 574; // [enum] current state of make handler (maker)
    sfixed32 make_counter = 577; // number of times order checked by make algo handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 580; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 583; // number of times order checked by market response handler (note: most checks result in no action)
    BrokerState broker_state = 586; // broker monitor state
    sfixed32 broker_counter = 589; // number of times order checked by broker monitor (note: most checks result in no action)]
    SpdrMarketState spdr_mkt_state = 592; // [enum] market state
    SpdrBrokerStatus spdr_broker_status = 595;
    string progress_rule_detail = 598; // Twap/Vwap progress detail
    google.protobuf.Timestamp last_child_reject_dttm = 601; // last child order reject dttm (if any)
    string last_child_reject_text = 604; // last child order reject reason/text (if any)
    sfixed64 risk_group_id = 607; // autohedge risk group
    sfixed64 trigger_group_id = 610; // WaitTrigger group Id
    sfixed64 hedge_grouping_code = 613; // autohedge risk group
    AutoHedge auto_hedge = 616;
    HedgeInst hedge_instrument = 619; // auto-hedge instrument (from parent order)
    ExpiryKey hedge_sec_key = 622; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 625; // auto-hedge sec type (Stock or Future)
    float hedge_beta_ratio = 628; // auto-hedge ratio [from parent order (if supplied) or computed by SR]
    HedgeScope hedge_scope = 631; // hedge group scope [RiskGroup or Accnt]
    string extern_hedge_ex_dest = 634; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    string extern_hedge_params = 637; // external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    float best_way_prc = 640; // current leg market nbbo bid (at time of record publish)
    float wrst_way_prc = 643; // current leg market nbbo ask (at time of record publish)
    sfixed32 best_way_sz = 646; // current leg market nbbo cum bid size (at time of record publish)
    sfixed32 wrst_way_sz = 649; // current leg market nbbo cum ask size (at time of record publish)
    float surface_prc = 652; // SR spread surface price @ record publish
    float surface_vol = 655;
    float surface_uPrc = 658;
    double limit_price = 661; // spread limit price
    LimitError limit_err = 664; // limit price error code
    float min_uBid = 667; // Used in conjunction with minMaxType & maxUAsk. When set, implements a lower bound on the underlying price and will either suspend or cancel an order when violated.
    float max_uAsk = 670; // Used in conjunction with minMaxType & minUBid. When set, implements an upper bound on the underlying price and will either suspend or cancel an order when violated.
    MinMaxType min_max_type = 673; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    BuySell lead_side = 676; // for legged orders, which side to lead with.  (optional, None ok)
    double max_completion_slippage = 679; // maximum price slippage to complete an open basket or a cross auction (face side slippage)
    float order_ref_premium = 682; // reference premium (mleg orders only)
    string strategy = 685; // parent order strategy (description only)
    string user_name = 688; // user that entered the most recent parent order
    YesNo visible_in_sV = 691; // allow order to be visible in SV (do not use for high volume of orders)
    string spdr_comment = 694;
    sfixed32 max_exposure_size = 697; // maximum simultaneous cumulative child order public size exposure (-2 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 2]
    int32 num_make_exchanges = 700; // number of exchanges (2 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 703; // public order size handling
    ProgressRule progress_rule = 706; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 progress_slice_cnt = 709; // number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 712; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    sfixed32 max_child_orders = 715; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 718; // eligible exchanges (0 = all)
    TimeInForce time_in_force = 721;
    google.protobuf.Timestamp start_dttm = 724; // [optional] (parent order start time)
    sfixed32 order_duration = 727; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 730; // [optional] (default: 2099-02-02)
    ParentOrderHandling parent_order_handling = 733;
    ParentBalanceHandling parent_balance_handling = 736;
    SpdrLimitType order_limit_type = 739;
    SpdrLimitClass limit_class = 742; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    double order_prc_limit = 745; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 748; // default=underlier.mid
    double order_prc_offset = 751; // default=0
    AlphaType alpha_type = 754; // Applies if limitClass = Probability
    float alpha_factor = 757; // [-2,+2] ProbLimit = MAX(alphaProbability, ProbAvg + AlphaFactor * ProbStd) [if AlphaType = Relative]
    float alpha_probability = 760; // ProbLimit = alphaProbability [if AlphaType = Static]
    double surf_prc_offset = 763; // default=0
    float surf_vol_offset = 766; // default=0
    float order_ref_event_mult = 769;
    google.protobuf.Timestamp order_ref_event_dttm = 772;
    float mleg_prob_limit = 775; // live prob limit
    float mleg_surf_offset = 778; // live surface offset (in premium)
    string extern_ex_dest = 781;
    google.protobuf.Timestamp order_dttm = 784; // order entry date/time
    float min_surf_vol = 787; // (minimum) SR spread surface vol [vega weighted] while parent order was working
    float max_surf_vol = 790; // (maximum) SR spread surface vol [vega weighted] while parent order was working
    float min_surf_prc = 793; // (minimum) SR spread surface price while parent order was working
    float max_surf_prc = 796; // (maximum) SR spread surface price while parent order was working
    float min_surf_uPrc = 799; // (minimum) SR spread surface uPrc while parent order was working
    float max_surf_uPrc = 802; // (maximum) SR spread surface uPrc while parent order was working
    float min_qte_width = 805; // minimum quote width during active order window
    float avg_qte_width = 808; // average quote width (during active order window)
    sfixed32 cnt_qte_width = 811;
    float total_seconds = 814; // number of seconds that the parent order was active
    float working_seconds = 817; // number of seconds with one or more working child orders in an exchange order book
    float net_acc_day_wt_vega = 820; // net (+/-) account day wtVega; cumulative day wtVega (vol * vega / sqrt(T)) for the account this order is associated with
    float net_acc_day_dDelta = 823; // net (+/-) account day $delta; cumulative day $delta (stock, future, option) for the account this order is associated with
    float net_sym_day_wt_vega = 826; // net (+/-) symbol day (time weighted) vega; cumulative wt vega (options only) for the ticker+account this order is associated with
    float net_sym_day_dDelta = 829; // net (+/-) symbol day $delta; cumulative $delta (stock, futures, options) for the ticker+account this order is associated with
    float net_grp_day_vega = 832; // net (+/-) day risk group vega; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_day_dDelta = 835; // net (+/-) day risk group $delta; cumulative (stock, futures, options) for the riskGroupId+account this order is associated with
    float net_grp_day_premium = 838; // net (+/-) day risk group premium over parity; cumulative (options) for the riskGroupId+account this order is associated with
    sfixed32 net_grp_day_contracts = 841; // net (+/-) day risk group contracts; cumulative (futures, options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric1 = 844; // net (+/-) day risk group rmetric1; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric2 = 847; // net (+/-) day risk group rmetric2; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric3 = 850; // net (+/-) day risk group rmetric3; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric4 = 853; // net (+/-) day risk group rmetric4; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric5 = 856; // net (+/-) day risk group rmetric5; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric7 = 859; // net (+/-) sym day risk rmetric7; cumulative (options) for the riskGroupId+account this order is associated with
    float net_sym_ema_cxl_dDelta = 862; // acct+symbol 60s EMA $delta risk counter (options only)
    float net_sym_ema_cxl_wt_vega = 865; // acct+symbol 60s EMA wtVega risk counter
    float max_grp_day_dDelta_ln = 868; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 871; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 874; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float max_grp_day_vega_ln = 877; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 880; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 883; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 886; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 889; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 892; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 895; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_premium_ratio = 898; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot premium = 0.5x sld premium)
    sfixed32 max_grp_day_contracts_ln = 901; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 904; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 907; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float sym_ema_cxl_dDelta_ln = 910; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 913; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 916; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 919; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    float cpx1 = 922;
    sfixed32 csz1 = 925; // cumulative size represented at this price
    fixed32 cex1 = 928; // bit mask of all exchanges where we are representing this order
    float cpx2 = 931;
    sfixed32 csz2 = 934; // cumulative size represented at this price
    fixed32 cex2 = 937; // bit mask of all exchanges where we are representing this order
    int32 c_more = 940;
    sfixed32 num_new_orders = 943; // number of new child orders
    uint32 num_parent_limits = 946; // number of parent limit messages received for this broker
    string user_data1 = 949; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    string user_data2 = 952; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    sfixed32 num_updates = 955; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 958;
}


    
message SpdrOPRAControl {
    message PKey {
        
        OptionKey okey = 10;
        OptExch opt_exch = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrExchState spdr_exch_state = 100;
    google.protobuf.Timestamp timestamp = 103;
}


    
message SpdrOmniOrder {
    message PKey {
        
        sfixed64 omni_order_number = 10; // unique number for this message
    }

    message ChildOrders {
        
        sfixed64 cl_ord_id = 145; // childOrders in the above allocation
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string omni_accnt = 100; // omnibus accnt (SR accnt)
    OptionKey sec_key = 103; // security key (stock, future, or option)
    SpdrKeyType sec_type = 106; // security type
    BuySell order_side = 109; // order side (always buy for MLEG orders)
    ShortSaleFlag ssale_flag = 112; // ssale flag (None if not stock)
    PositionType position_type = 115; // positionType (None if not equity option)
    SpdrSource spdr_source = 118; // parent order source
    sfixed64 grouping_code = 121; // unique broker code
    sfixed64 base_parent_number = 124; // SR BaseParentNumber these executions belong to (can be zero if executions are drop)
    string mleg_leg_key = 127; // [secKey.StringKey;legRatio;side;positionEffect, secKey.StringKey;legRatio;side;positionEffect, ...]
    sfixed32 cum_fill_qty = 130; // net cumFillQty (total for the day)
    double avg_fill_prc = 133; // average fill price
    OmniAllocStatus alloc_status = 136; // allocation status
    google.protobuf.Timestamp timestamp = 139;
    repeated ChildOrders child_orders = 142;
}


    
message SpdrOpenFutureOrders {
    message PKey {
        
        string accnt = 10;
        string engine_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 open_bid_cn = 100;
    sfixed32 open_ask_cn = 103;
    float open_bid_dDelta = 106;
    float open_ask_dDelta = 109;
    google.protobuf.Timestamp timestamp = 112;
}


    
message SpdrOpenOptionOrders {
    message PKey {
        
        string accnt = 10;
        string engine_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 open_bid_cn = 100;
    sfixed32 open_ask_cn = 103;
    float open_bid_vega = 106;
    float open_ask_vega = 109;
    float open_bid_dDelta = 112;
    float open_ask_dDelta = 115;
    sfixed32 child_order_counter = 118;
    google.protobuf.Timestamp timestamp = 121;
}


    
message SpdrOpenStockOrders {
    message PKey {
        
        string accnt = 10;
        string engine_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 open_bid_sh = 100;
    sfixed32 open_ask_sh = 103;
    float open_bid_dDelta = 106;
    float open_ask_dDelta = 109;
    google.protobuf.Timestamp timestamp = 112;
}


/*
    SpdrOptBrkrEvent records are published when a new or clx/replace parent order arrives causes a broker to beging working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
*/    
message SpdrOptBrkrEvent {
    message PKey {
        
        sfixed64 parent_number = 10;
        EventRecType rec_type = 13; // type of record [New,Modify,Replace,Close,Reject]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey okey = 100;
    string accnt = 103;
    SpdrSource spdr_source = 106;
    sfixed64 grouping_code = 109;
    BuySell order_side = 112;
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    uint32 event_number = 124;
    SpdrStageType stage_type = 127; // parent is a staged order [StageLock, StageModify, StageReview]
    sfixed64 base_parent_number = 130; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 prev_parent_number = 133; // SPDR order number (order being cancelled/replaced) (zero if none)
    string engine_name = 136; // server stripe
    TickerKey ticker = 139; // SpiderRock underlier stock key
    SpdrBrokerStatus spdr_broker_status = 142;
    SpdrOrderStatus spdr_order_status = 145; // parent order status
    SpdrCloseReason spdr_close_reason = 148; // parent order close reason (if closed)
    SpdrRejectReason spdr_reject_reason = 151; // parent order reject reason (if any)
    string spdr_comment = 154; // additional detail (close/reject reason;last child order error)
    float mar_haircut_utilized1 = 157; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_haircut_utilized2 = 160; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_haircut_utilized3 = 163; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #3)
    float mar_total_exposure_utilized1 = 166; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_total_exposure_utilized2 = 169; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_total_exposure_utilized3 = 172; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #3)
    double u_bid = 175; // Underlier bid price @ record publish
    double u_ask = 178; // Underlier ask price @ record publish
    float bid_prc = 181; // option nbbo bid price @ record publish
    float ask_prc = 184; // option nbbo ask price @ record publish
    sfixed32 bid_size = 187; // option nbbo bid size @ record publish
    sfixed32 ask_size = 190; // option nbbo ask size @ record publish
    float surface_prc = 193; // SR surface price @ record publish
    float surface_vol = 196; // SR surface volatility @ record publish
    sfixed32 arrive_nbbo_size = 199; // size of the single largest exchange @ parent order arrival
    OptExch arrive_nbbo_exch = 202; // exchange representing largest size @ order arrival
    sfixed32 arrive_cum_size = 205; // cum size of all exchanges at NBBO price @ parent order arrival
    int32 arrive_num_exch = 208; // num exchanges making up cum size @ parent order arrival
    sfixed32 arrive_limit_size = 211; // immediately marketable size up to limit price on parent order arrival
    double arrive_limit_prc = 214; // expected average fill price if all immediately marketable size executed as advertized
    double avg_fill_prc = 217; // average fill price of all fills attributed parent order
    sfixed32 cum_fill_quan = 220; // cumulative fill quantity attributed to parent order
    uint32 num_child_orders = 223; // total number of child orders generated by this parent broker
    sfixed32 open_order_size = 226; // open order size
    sfixed32 action_order_size = 229; // order size available for immediate action (note: not all algo combinations allow immediate action)
    sfixed32 risk_limit_size = 232; // risk limit size (distance to most restrictive risk limit associated with this parent order)
    SpdrRisk risk_limit_desc = 235; // reason for size reduction (identifies the most restrictive risk limit)
    string risk_limit_detail = 238; // addition risk detail
    double limit_ref_uPrc = 241; // effective reference underlier price @ record publish (usually either mid or bid/ask depending on limit type)
    double limit_price = 244; // parent simple prc limit (if any)
    float limit_vol = 247; // parent simple vol limit (if any)
    double make_limit_price = 250; // effective order limit price @ record publish
    LimitError make_limit_err = 253; // limit price error code (if any)
    string make_limit_err_desc = 256; // additional limit price error descriptive text
    double take_limit_price = 259; // effective order limit price @ record publish
    LimitError take_limit_err = 262; // limit price error code (if any)
    string take_limit_err_desc = 265; // additional limit price error descriptive text
    BrokerState broker_state = 268; // broker monitor state
    AlgoState make_state = 271; // [enum] current state of non-marketable order handler (maker)
    AlgoState take_state = 274; // [enum] current state of marketable order handler (taker)
    MktCrossState mkt_cross_state = 277; // [enum] current state of mkt cross handler (if any)
    ChildEvent last_child_event = 280; // most recent child handling event
    SpdrMarketState spdr_mkt_state = 283; // market state code
    sfixed32 num_orders = 286; // number active child orders @ record send
    sfixed32 leaves_qty = 289; // number of active child order contracts (sum of all active child orders) @ record send
    sfixed32 child_order_leaves = 292; // number of open child orders @ record send
    float arrival_sDiv = 295; // effective sdiv rate @ parent order arrival (fixed for life of parent order)
    float arrival_rate = 298; // effective interest rate @ parent order arrival (fixed for life of parent order)
    float arrival_dDiv = 301; // effective cumulative discrete dividend @ parent order arrival (fixed for life of parent order)
    ExpiryKey hedge_sec_key = 304; // auto-hedge sec key
    SpdrKeyType hedge_sec_type = 307; // auto-hedge sec type
    float theo_opx = 310; // option theo prc (from theoVol)
    float theo_vol = 313; // option theo vol (from theoModel;if any)
    fixed32 child_order_mask = 316; // bit-mask of all exchange for which a child order was generated
    PriceFormat price_format = 319; // price display format code
    PriceFormat u_price_format = 322; // underlier price display format code
    string modified_by = 325; // user who last modified this record
    google.protobuf.Timestamp timestamp = 328; // timestamp of last modification
}


/*
    SpdrOptBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders.
*/    
message SpdrOptBrkrState {
    message PKey {
        
        OptionKey okey = 10;
        string accnt = 13;
        SpdrSource spdr_source = 16;
        sfixed64 grouping_code = 19;
        BuySell order_side = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string engine_name = 100; // server stripe
    sfixed64 parent_number = 103; // SR parent number
    sfixed64 base_parent_number = 106;
    string alt_order_id = 109; // alternate order ID (usually clOrdId from client)
    sfixed64 package_id = 112; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    SpdrStageType stage_type = 124; // parent is a staged order [StageLock, StageModify, StageReview]
    YesNo is_flagged = 127; // broker state records is flagged for action (user alert only)
    string exp_key = 130; // expiration month code [eg. M1, M2, etc.]
    TickerKey ticker = 133; // underlier ticker
    float u_prc = 136; // underlier price (usually mid-market)
    float vol = 139; // [depricated]
    PriceFormat price_format = 142; // option price format code
    PriceFormat u_price_format = 145; // underlier price format code
    sfixed32 underliers_per_cn = 148; // option delivery underliers per contract
    UnderlierType underlier_type = 151; // type of underlier (affects $greek calculations)
    float tick_value = 154; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 157; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 160;
    float u_prc_ratio = 163;
    float u_prc_order = 166; // underlier price at the time of order entry
    float nbbo_bid = 169; // current option nbbo bid (at time of record publish)
    float nbbo_ask = 172; // current option nbbo ask (at time of record publish)
    sfixed32 nbbo_bid_sz = 175; // current option nbbo cum bid size (at time of record publish)
    sfixed32 nbbo_ask_sz = 178; // current option nbbo cum ask size (at time of record publish)
    float surface_prc = 181; // SR surface price @ record publish
    float surface_vol = 184; // SR surface volatility @ record publish
    SpdrBrokerStatus spdr_broker_status = 187;
    SpdrOrderStatus spdr_order_status = 190; // status of the most recent parent order handled by this broker
    SpdrCloseReason spdr_close_reason = 193; // close reason of most recent parent order
    SpdrRejectReason spdr_reject_reason = 196; // reject reason (if any) of most recent parent order
    string spdr_comment = 199;
    sfixed32 order_size = 202; // order size of most recent parent order
    sfixed32 order_active_size = 205; // total activated size (total size released for execution) (-1 = all available size)
    sfixed32 leaves_quantity = 208; // current child order leaves quantity (quantity actively working in the market;all child orders)
    double avg_fill_price = 211; // average fill price
    sfixed32 cum_fill_quantity = 214; // cumulative fill quantity
    float avg_fill_vol = 217; // average fill volatility
    float cum_fill_vega = 220; // cumulative fill quantity
    float cum_fill_theta = 223; // cumulative fill quantity
    google.protobuf.Timestamp last_fill_dttm = 226;
    AutoHedge auto_hedge = 229;
    HedgeInst hedge_instrument = 232; // auto-hedge instrument (from parent order)
    ExpiryKey hedge_sec_key = 235; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 238; // auto-hedge sec type (Stock or Future)
    float hedge_beta_ratio = 241; // auto-hedge ratio [from parent order (if supplied) or computed by SR]
    HedgeScope hedge_scope = 244; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 247; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string extern_hedge_ex_dest = 250; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    string extern_hedge_params = 253; // external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    sfixed32 risk_limit_size = 256; // risk limit size (maximum size to nearest risk limit)
    SpdrRisk risk_limit_desc = 259; // reason for size reduction
    double limit_price = 262; // simple limit
    double make_limit_price = 265; // make limit
    LimitError make_limit_err = 268;
    double take_limit_price = 271; // take limit
    LimitError take_limit_err = 274;
    string strategy = 277; // parent order strategy (description only)
    string user_name = 280; // user that entered the most recent parent order
    YesNo visible_in_sV = 283; // allow order to be visible in SV (do not use for high volume of orders)
    PositionType position_type = 286;
    ShortSaleFlag ssale_flag = 289;
    sfixed32 locate_quan = 292; // available locate quantity (if selling short) @ child order send time
    string locate_firm = 295; // firm granting the locate (also locate firm used on street FIX orders)
    sfixed32 max_exposure_size = 298; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 301; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 304; // public order size handling
    YesNo can_overlap_cxl_repl = 307; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 310; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 progress_slice_cnt = 313; // number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 316; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 319; // target vwap participation rate (target % of trade activity)
    TriggerType trigger_type = 322; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 325; // stop/trigger level for parent order to go active (can be either a price or vol)
    UPrcCxl cxl_uPrc_range = 328; // cancel spdr order if/when outside stock price range
    float min_uBid = 331; // [optional]
    float max_uAsk = 334; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 337; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    float min_option_px = 340; // [optional] option price floor for tied to stock orders
    sfixed32 max_child_orders = 343; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 346; // eligible exchanges (0 = all)
    TimeInForce time_in_force = 349;
    google.protobuf.Timestamp start_dttm = 352; // [optional] (parent order start time)
    sfixed32 order_duration = 355; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 358; // [optional] (default: 2099-01-01)
    google.protobuf.Timestamp expire_dttm = 361; // expected order expiration dttm
    ParentOrderHandling parent_order_handling = 364;
    ParentBalanceHandling parent_balance_handling = 367;
    SpdrLimitType order_limit_type = 370;
    SpdrLimitClass take_limit_class = 373; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 376; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 379; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 382; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 385; // default=underlier.mid
    float order_ref_delta = 388; // default=option.delta
    float order_ref_gamma = 391; // default=option.gamma
    float order_ref_sDiv = 394;
    RefSDivType order_ref_sDiv_type = 397;
    float order_vol_limit = 400; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 403; // zero = ignore;> zero = override
    float sdiv_override = 406;
    string ddiv_override = 409; // discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 412;
    double order_prc_offset = 415; // default=0
    AlphaType take_alpha_type = 418; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 421; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 424; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 427; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 430; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 433; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    double take_surf_prc_offset = 436; // default=0
    float take_surf_vol_offset = 439; // default=0
    float take_surf_width_offset = 442; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 445; // default=0
    float make_surf_vol_offset = 448; // default=0
    float make_surf_width_offset = 451; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    StateModel state_model = 454;
    StateModel u_state_model = 457;
    float order_ref_event_mult = 460;
    google.protobuf.Timestamp order_ref_event_dttm = 463;
    string extern_ex_dest = 466;
    float theo_opx = 469; // option theo prc (from theoVol)
    float theo_vol = 472; // option theo vol (from theoModel;if any)
    google.protobuf.Timestamp order_dttm = 475; // order entry date/time
    MaxProgress max_progress = 478; // maximum point of progress for most recent parent order
    string max_progress_detail = 481; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 484; // time of last max progress advance
    BrokerState broker_state = 487; // broker monitor state
    sfixed32 broker_counter = 490; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 493; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 496; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 499; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 502; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 505; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 508; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 511; // [enum] current state of mkt cross handler (if any)
    sfixed32 mkt_cross_counter = 514; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 517; // Twap/Vwap progress detail
    ExchEvent exch_event01 = 520;
    ExchEvent exch_event02 = 523;
    ExchEvent exch_event03 = 526;
    ExchEvent exch_event04 = 529;
    ExchEvent exch_event05 = 532;
    ExchEvent exch_event06 = 535;
    ExchEvent exch_event07 = 538;
    ExchEvent exch_event08 = 541;
    ExchEvent exch_event09 = 544;
    ExchEvent exch_event10 = 547;
    ExchEvent exch_event11 = 550;
    ExchEvent exch_event12 = 553;
    ExchEvent exch_event13 = 556;
    ExchEvent exch_event14 = 559;
    ExchEvent exch_event15 = 562;
    ExchEvent exch_event16 = 565;
    ExchEvent exch_event17 = 568;
    ExchEvent exch_event18 = 571;
    ExchEvent exch_event19 = 574;
    ExchEvent exch_event20 = 577;
    ExchEvent exch_event21 = 580;
    ExchEvent exch_event22 = 583;
    ChildEvent last_child_event = 586; // [enum] last event code from broker/child order handler(s)
    SpdrMarketState spdr_mkt_state = 589; // [enum] market state
    float cpx1 = 592; // child price level #1
    sfixed32 csz1 = 595; // cumulative size represented at this price
    fixed32 cex1 = 598; // bit mask of all exchanges where we are at this price
    float cpx2 = 601; // child price level #2
    sfixed32 csz2 = 604; // cumulative size represented at this price
    fixed32 cex2 = 607; // bit mask of all exchanges where we are at this price
    int32 c_more = 610; // number of additional child orders at inferior prices (if any)
    sfixed32 arrive_sweep_count = 613; // number of parent orders arriving with immediately available sweep qty
    sfixed32 arrive_sweep_order_qty = 616; // total size of all child orders generated due to parent order arrival sweep
    sfixed32 arrive_sweep_fill_qty = 619; // total fill size due to parent order arrival sweep
    sfixed32 num_sweep_child_orders = 622; // child orders generated in initial arrival sweep
    sfixed32 auction_link = 625; // total linkage auction contracts while parent order was active
    sfixed32 auction_face = 628; // total facilitation auction contracts while parent order was active
    sfixed32 auction_resp = 631; // total auction response contracts
    sfixed32 prt_active_cnt = 634; // total print events while parent order was active; [any exchange; all prints]
    sfixed32 prt_cn_active = 637; // total contracts printed while parent order was active; [any exchange; all prints]
    float prt_cn_active_mny = 640; // total of (contracts printed x print price) while parent order was active
    sfixed32 prt_eligible_cnt = 643; // total eligible (public) print events while parent order was active; [any exchange; all eligible prints]
    sfixed32 prt_cn_eligible = 646; // total eligible (public) contracts printed while parent order was active; [any exchange; all eligible prints]
    sfixed32 prt_cn_limit_oK = 649; // total contracts printed at or better than parent limit while parent was active; SUM(MIN(PrintSize,OpenParentOrderSize)) [any exchange]
    sfixed32 prt_cn_compete = 652; // total contracts printed on an exchange on which we had a competitive child order on that exchange; SUM(MIN(PrintSize, OpenChildOrderSize)) [childOrder.exch = print.exch]
    sfixed32 prt_cn_away_chld = 655; // total contracts printed on an away exchange when we had a competitive child order(s) in the market and the away exchange was competitive prior to the print; SUM(MIN(PrintSize, OpenChildOrderSize)) [childOrder.exch != print.exch]
    sfixed32 prt_cn_no_compete = 658; // total contracts printed on an exchange when the print exchange was not competitive prior to the print (non quote-competitive prints)
    sfixed32 prt_cn_no_comp_nbbo = 661; // total contracts printed on an exchange when the NBBO was not competitive prior to the print (non nbbo-competitive prints)
    sfixed32 mk_check_cnt = 664; // total number of times order was checked for making
    float min_mk_prob = 667; // min make probability while broker active
    float avg_mk_prob = 670; // average make probability while broker active
    float cur_mk_prob = 673; // current make probability
    sfixed32 tk_check_cnt = 676; // total number of times order was checked for taking
    float max_tk_prob = 679; // max take probability while broker active
    float avg_tk_prob = 682; // average take probability while broker active
    float cur_tk_prob = 685; // current take probability
    sfixed32 prt_prb_cnt = 688; // total number of print probability records while broker active (all limit types)
    sfixed32 prt_prb_check = 691; // number of print probability records with active probability printTake handler
    sfixed32 prt_prb_lmt_oK = 694; // number of print probability records that pass broker takeLimit
    sfixed32 tk_cn_lmt_oK = 697; // total contracts available to take at parent limit or better while broker active
    float avg_qte_sz_ratio = 700; // average ratio of child size / nbbo size during the life of the working order when child order is at nbbo
    sfixed32 cnt_qte_sz_ratio = 703; // sample counter for above [1 second intervals]; qteCnRatio / qteCnRatioCnt = avg of child size / nbbo size while broker active
    float min_qte_width = 706; // minimum quote width during active order window
    float avg_qte_width = 709; // average quote width (during active order window)
    sfixed32 cnt_qte_width = 712;
    sfixed32 num_imprv_chld = 715; // number of child orders that improved an existing market
    float total_seconds = 718; // number of seconds that the parent order was active
    float working_seconds = 721; // number of seconds with one or more working child orders that are part of nbbo
    float alone_seconds = 724; // number of seconds with one or more working child orders that make up 100% of nbbo
    sfixed32 num_risk_cancels = 727; // number of child orders cancels for risk reasons
    float risk_hold_seconds = 730; // number of seconds with parent order active but on risk hold (zero child order risk size)
    float risk_thrtl_seconds = 733; // number of seconds with parent order active but in risk throttle condition (temporary hold after fast/mass risk cancel)
    sfixed32 num_make_throttle_skips = 736; // number of childs orders not send to market dues to outbound lines being in a queued/throttled state
    float sum_make_throttle_delay = 739; // cumulative seconds of queue skip delay (seconds that a child order was not in the market dues to outbound lines being in a queued/throttled state)
    sfixed64 risk_group_id = 742; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    sfixed64 trigger_group_id = 745; // WaitTrigger group Id
    float net_acc_day_wt_vega = 748; // net (+/-) account day wtVega;cumulative day wtVega (vol * vega / sqrt(T)) for the account this order is associated with
    float net_acc_day_dDelta = 751; // net (+/-) account day $delta;cumulative day $delta (stock, future, option) for the account this order is associated with
    float net_sym_day_wt_vega = 754; // net (+/-) symbol day (time weighted) vega;cumulative wt vega (options only) for the ticker+account this order is associated with
    float net_sym_day_dDelta = 757; // net (+/-) symbol day $delta;cumulative $delta (stock, futures, options) for the ticker+account this order is associated with
    float net_exp_day_wt_vega = 760; // net (+/-) expiration day wtVega;cumulative weighted vega (vol * vega / sqrt(T)) for the ticker+expiration this orders is associated with
    float net_grp_day_vega = 763; // net (+/-) day risk group vega;cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_day_dDelta = 766; // net (+/-) day risk group $delta;cumulative (stock, futures, options) for the riskGroupId+account this order is associated with
    float net_grp_day_premium = 769; // net (+/-) day risk group premium over parity;cumulative (options) for the riskGroupId+account this order is associated with
    sfixed32 net_grp_day_contracts = 772; // net (+/-) day risk group contracts;cumulative (futures, options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric1 = 775; // net (+/-) day risk group rmetric1;cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric2 = 778; // net (+/-) day risk group rmetric2;cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric3 = 781; // net (+/-) day risk group rmetric3;cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric4 = 784; // net (+/-) day risk group rmetric4;cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric5 = 787; // net (+/-) day risk group rmetric5;cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric6 = 790; // net (+/-) day risk group rmetric6;cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric7 = 793; // net (+/-) day risk group rmetric7;cumulative (options) for the riskGroupId+account this order is associated with
    float max_grp_day_dDelta_ln = 796; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 799; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 802; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float max_grp_day_vega_ln = 805; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 808; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 811; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 814; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 817; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 820; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 823; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_premium_ratio = 826; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot premium = 0.5x sld premium)
    sfixed32 max_grp_day_contracts_ln = 829; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 832; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 835; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    sfixed32 order_ratio = 838; // (various) can be a mleg leg ratio
    float order_rate = 841; // rate being used in order pricing (most recent parent order)
    float order_dDiv = 844; // ddiv calculated from discrete dividend string supplied on most recent parent order (or default)
    string order_dDiv_str = 847; // dividend string used in order pricing
    float cn_de = 850; // delta per contract
    float cn_dd = 853; // $delta per contract
    float cn_ve = 856; // vega per contract
    float cn_ga = 859;
    float cn_th = 862;
    float cn_pr = 865; // premium per contract
    float order_ref_theta = 868;
    float order_ref_years = 871;
    sfixed32 num_new_orders = 874; // number of child orders generated by this broker (all parent orders)
    sfixed32 num_exec_reports = 877; // number of child execution reports handled by this broker (all parent orders)
    sfixed32 num_fill_reports = 880; // number of child fill reports handled by this broker (all parent orders)
    uint32 num_parent_limits = 883; // number of parent limit messages received for this broker
    string user_data1 = 886; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    string user_data2 = 889; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    sfixed32 num_updates = 892; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 895; // SR system timestamp
}


    
message SpdrOptExchControl {
    message PKey {
        
        OptExch opt_exch = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrExchState spdr_exch_state = 100;
    SpdrExchType spdr_exch_type = 103;
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message SpdrOptExchStatus {
    message PKey {
        
        OptExch opt_exch = 10;
        string server_code = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrExchState spdr_exch_state = 100;
    AutoExchState auto_exch_state = 103;
    string exch_exception = 106;
    sfixed32 num_open_child_orders = 109;
    sfixed32 num_child_orders_sent = 112;
    float exchange_msg_rate = 115;
    google.protobuf.Timestamp timestamp = 118;
}


    
message SpdrOptPrintCluster {
    message PKey {
        
        OptionKey okey = 10;
        sfixed32 print_cluster_iD = 13; // unique SR Print Cluster ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float nbbo_bid_prc1 = 100; // best (max) bid price during print event
    float nbbo_ask_prc1 = 103; // best (min) ask price during print event
    sfixed32 nbbo_bid_size1 = 106; // max cumulative size @ best bid price
    sfixed32 nbbo_ask_size1 = 109; // max cumulative size @ best ask price
    fixed32 nbbo_bid_mask1 = 112; // sum of masks @ best bid price
    fixed32 nbbo_ask_mask1 = 115; // sum of masks @ best ask price
    float nbbo_bid_prc2 = 118; // 2nd best bid price during print event
    float nbbo_ask_prc2 = 121; // 2nd best ask price during print event
    sfixed32 nbbo_bid_size2 = 124; // max cumulative size @ 2nd best bid price
    sfixed32 nbbo_ask_size2 = 127; // max cumulative size @ 2nd best ask price
    fixed32 nbbo_bid_mask2 = 130; // sum of masks @ 2nd best bid price
    fixed32 nbbo_ask_mask2 = 133; // sum of masks @ 2nd best ask price
    float avg_bid_size = 136; // 10 minute EMA average of cum bid size @ best price level
    float avg_ask_size = 139; // 10 minute EMA average of cum ask szie @ best price level
    float avg_mkt_width = 142; // 10 minute EMA average of bid/ask width
    float min_surf_vol = 145;
    float min_surf_prc = 148;
    float max_surf_vol = 151;
    float max_surf_prc = 154;
    float de = 157;
    float ga = 160;
    float ve = 163;
    float yrs = 166;
    double und_bid_prc1 = 169; // best (max) bid price during print event
    double und_ask_prc1 = 172; // best (min) ask price during print event
    sfixed32 und_bid_size1 = 175; // max cumulative size @ best bid price
    sfixed32 und_ask_size1 = 178; // max cumulative size @ best ask price
    fixed32 und_bid_mask1 = 181; // sum of masks @ best bid price
    fixed32 und_ask_mask1 = 184; // sum of masks @ best ask price
    double und_bid_prc2 = 187; // 2nd best bid price during print event
    double und_ask_prc2 = 190; // 2nd best ask price during print event
    sfixed32 und_bid_size2 = 193; // max cumulative size @ 2nd best bid price
    sfixed32 und_ask_size2 = 196; // max cumulative size @ 2nd best ask price
    fixed32 und_bid_mask2 = 199; // sum of masks @ 2nd best bid price
    fixed32 und_ask_mask2 = 202; // sum of masks @ 2nd best ask price
    float und_avg_bid_size = 205; // 10 minute EMA average of cum bid size @ best price level
    float und_avg_ask_size = 208; // 10 minute EMA average of cum ask szie @ best price level
    float und_avg_mkt_width = 211; // 10 minute EMA average of bid/ask width
    float und_avg_realized_vol = 214; // 10 minute EMA average realized volatility of underlier
    double und_prt_min_price = 217;
    double und_prt_max_price = 220;
    double und_prt_avg_price = 223; // volume weighted average print price
    int32 und_prt_print_cnt = 226; // number of underlier print reports received up in cluster window
    sfixed32 und_prt_print_cum_size = 229; // cum size of all underlier prints
    fixed32 und_prt_print_exch_mask = 232; // exch mask of all exchanges w/prints
    sfixed32 und_prt_print_cum_size_iSO = 235; // cum size of all ISO sweep prints
    fixed32 und_prt_print_exch_mask_iSO = 238; // exch mask of all exchanges w/sweep prints
    PrtSide prt_side = 241; // option print cluster side
    float ini_print_price = 244; // initial print price (first print in cluster)
    float min_print_price = 247;
    float max_print_price = 250;
    float avg_print_price = 253; // volume weighted average print price
    int32 print_cnt = 256; // number of option print reports received up in cluster window
    sfixed32 print_cum_size = 259; // cum size of all prints
    fixed32 print_exch_mask = 262; // exch mask of all exchanges w/prints
    sfixed32 print_cum_size_iSO = 265; // cum size of all ISO sweep prints
    fixed32 print_exch_mask_iSO = 268; // exch mask of all exchanges w/sweep print types
    sfixed32 prt_cum_size_auction = 271; // cum size of all auction prints
    fixed32 prt_exch_mask_auction = 274; // exch mask of all exchanges w/auction print types
    sfixed64 net_timestamp_st = 277; // (SR) net timestamp of the first print message in the sweep set
    sfixed64 net_timestamp_en = 280; // (SR) net timestamp of the final print message in the sweep set
    sfixed64 src_timestamp_st = 283; // source timestamp of the first print message in the sweep set
    sfixed64 src_timestamp_en = 286; // source timestamp of the final print message in the sweep set
    OptExch opt_exch_auction = 289; // first exchange advertising and exposure auction (if any)
    int32 num_auction_exch = 292; // number of exchange advertising exposure auctions during the event
    fixed32 auction_exch_mask = 295; // exch mask of all exchanges advertising exposure auctions during event
    sfixed32 cum_auction_size = 298; // cumulative advertized size of exposure auctions during event
    sfixed64 src_timestamp_auction = 301; // src timestamp from the first exchange exposure auction advertised (if any)
    sfixed64 net_timestamp_auction = 304; // net timestamp from the first exchange exposure auction advertised (if any)
    float fwd_nbbo_price_m1 = 307; // projected NBBO price (T+1) minute conditional on print cluster
    float fwd_nbbo_price_m10 = 310; // projected NBBO price (T+10) minutes conditional on print cluster
    float fwd_uPrc_m1 = 313; // projected underlier price (T+1)
    float fwd_uPrc_m10 = 316; // projected underlier price (T+10)
    float nbbo_bid_price_m1 = 319; // nbbo market T+1 minute
    float nbbo_ask_price_m1 = 322;
    float surf_prc_m1 = 325;
    float u_bid_m1 = 328;
    float u_ask_m1 = 331;
    float nbbo_bid_price_m10 = 334; // nbbo market T+10 minutes
    float nbbo_ask_price_m10 = 337;
    float surf_prc_m10 = 340;
    float u_bid_m10 = 343;
    float u_ask_m10 = 346;
    google.protobuf.Timestamp timestamp = 349;
}


/*
    SpdrOptTheoRecords can be used to override theoretical volatilities for specific strikes when using SpdrTheoExpSurface records.
*/    
message SpdrOptTheoRecord {
    message PKey {
        
        OptionKey okey = 10;
        string theo_model = 13;
        string client_firm = 16; // client firm this theo model is associated with (controls visibility)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float theo_vol = 100; // mid-point (fair) volatility
    float bVol = 103; // buy vol
    float sVol = 106; // sell vol
    float bEdge = 109; // edge premium spread when buying
    float sEdge = 112; // edge premium spread when selling
    BuySellConvention buy_sell_convention = 115; // rule used to interpret BVol, SVol, BEdge, and SEdge
    float ref_uPrc = 118; // Reference uPrc for dynamic vol: vol = TheoVol + vegaSlope * (uPrc - refUPrc).
    float vega_slope = 121; // Set to zero for no dynamic.  hedge delta = delta + vegaSlope * vega;requires account.hedgeType = [TVol (theo delta + vegaSlope) or TvS (surface delta + vegaSlope)] (default is surface delta only)
    TheoStatus theo_status = 124; // indicates where theos for this ticker will be utilized
    google.protobuf.Timestamp timestamp = 127;
}


    
message SpdrParentAllocation {
    message PKey {
        
        sfixed64 base_parent_number = 10;
    }

    message Fragments {
        
        string alloc_accnt = 136; // target SR alloc accnt
        float alloc_fraction = 139; // target alloc size (if parent order 100% fills)
        sfixed32 alloc_size = 142; // target alloc size (assuming parent order 100% fills)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string omni_accnt = 100; // omnibus accnt (SR accnt)
    OptionKey sec_key = 103; // security key (stock, future, or option)
    SpdrKeyType sec_type = 106; // security type
    string mleg_leg_key = 109; // [secKey.StringKey;legRatio;side;positionEffect, secKey.StringKey;legRatio;side;positionEffect, ...]
    BuySell order_side = 112; // order side (always buy for MLEG orders)
    ShortSaleFlag ssale_flag = 115; // ssale flag (None if not stock)
    PositionType position_type = 118; // positionType (None if not equity option)
    SpdrSource spdr_source = 121; // parent order source
    sfixed64 grouping_code = 124; // unique broker code
    AllocationRule allocation_rule = 127;
    YesNo ready_to_send = 130; // indicates that this noticed is ready to forward to a custodian
    string modified_by = 145; // user who last modified this record
    google.protobuf.Timestamp timestamp = 148; // timestamp of last modification
    repeated Fragments fragments = 133;
}


    
message SpdrParentAllocationStatus {
    message PKey {
        
        sfixed64 base_parent_number = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100; // security key (stock, future, or option)
    SpdrKeyType sec_type = 103; // security type
    AllocStatus alloc_status = 106;
    string alloc_detail = 109;
    string modified_by = 112; // user who last modified this record
    google.protobuf.Timestamp timestamp = 115; // timestamp of last modification
}


/*
    SpdrParentBrkrDetail records are created/published by SpiderRock Execution Engines. Each record describes the current active detail of a single parent broker.
*/    
message SpdrParentBrkrDetail {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 13;
        SpdrKeyType sec_type = 16;
        SpdrSource spdr_source = 19;
        sfixed64 grouping_code = 22;
        BuySell order_side = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_name = 100; // SR user name string
    string client_firm = 103; // SR client firm string
    string engine_name = 106; // server stripe
    sfixed64 parent_number = 109; // SR parent number
    sfixed64 base_parent_number = 112;
    sfixed64 risk_group_id = 115; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    sfixed64 trigger_group_id = 118;
    sfixed64 cross_notice_id = 121; // SR crossNoticeId (from SpdrCrossNotice.crossNoticeId) [required when parentOrderHandling = CrossResponse]
    string strategy = 124; // parent order strategy (description only)
    sfixed32 max_exposure_size = 127; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 130; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 133; // public order size handling
    YesNo can_overlap_cxl_repl = 136; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 139; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 progress_slice_cnt = 142; // number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 145; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 148; // target vwap participation rate (target % of trade activity)
    int32 min_mkt_on_close_pct = 151; // Minimum pct [0 - 100] of order reserved for the on-close auction
    TriggerType trigger_type = 154; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 157; // stop/trigger price for parent order to go active
    TimeInForce time_in_force = 160;
    google.protobuf.Timestamp start_dttm = 163; // [optional] (parent order start time)
    sfixed32 order_duration = 166; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 169; // [optional] (default: 2099-01-01)
    UPrcCxl cxl_uPrc_range = 172; // cancel spdr order if/when outside stock price range
    float min_uBid = 175; // [optional]
    float max_uAsk = 178; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 181; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    float min_option_px = 184; // [optional] option price floor for tied to stock orders
    sfixed32 max_child_orders = 187; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 190; // eligible exchanges (0 = all)
    string extern_ex_dest = 193;
    PositionType position_type = 196;
    ShortSaleFlag ssale_flag = 199;
    sfixed32 locate_quan = 202; // available locate quantity (if selling short) @ child order send time
    string locate_firm = 205; // firm granting the locate (also locate firm used on street FIX orders)
    ParentOrderHandling parent_order_handling = 208;
    ParentBalanceHandling parent_balance_handling = 211;
    SpdrLimitType order_limit_type = 214;
    SpdrLimitClass take_limit_class = 217; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 220; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 223; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 226; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 229; // default=underlier.mid
    float order_ref_delta = 232; // default=option.delta
    float order_ref_gamma = 235; // default=option.gamma
    float order_ref_theta = 238;
    float order_ref_years = 241;
    float order_vol_limit = 244; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 247; // zero = ignore;> zero = override
    float sdiv_override = 250;
    string ddiv_override = 253; // discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 256;
    double order_prc_offset = 259; // default=0
    AlphaType take_alpha_type = 262; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 265; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 268; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 271; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 274; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 277; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    double take_surf_prc_offset = 280; // default=0
    float take_surf_vol_offset = 283; // default=0
    float take_surf_width_offset = 286; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 289; // default=0
    float make_surf_vol_offset = 292; // default=0
    float make_surf_width_offset = 295; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    float max_acc_day_wt_vega_ln = 298; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 301; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 304; // accnt day (time weighted) vega offset (target position)
    float max_acc_day_dDelta_ln = 307; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 310; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 313; // accnt day $delta offset (target position)
    float max_exp_day_wt_vega_ln = 316; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 319; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 322; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 325; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 328; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 331; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 334; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 337; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 340; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 343; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 346; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 349; // accnt+symbol day $delta offset (target position)
    float max_exp_day_rMetric6_ln = 352; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 355; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float exp_day_rMetric6_offset = 358; // accnt+expiration day rMetric6 offset (target position)
    float max_sym_day_rMetric7_ln = 361; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 364; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 367; // accnt+symbol day rMetric7 offset (target position)
    float max_grp_day_dDelta_ln = 370; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 373; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 376; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float max_grp_day_vega_ln = 379; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 382; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 385; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 388; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 391; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 394; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 397; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_premium_ratio = 400; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot premium = 0.5x sld premium)
    float max_grp_day_rMetric1_ln = 403; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 406; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 409; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_rMetric1_ratio = 412; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 415; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 418; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 421; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 424; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 427; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 430; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 433; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 436; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_ln = 439; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 442; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 445; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float sym_ema_cxl_dDelta_ln = 448; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 451; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 454; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 457; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    sfixed32 arrive_sweep_count = 460; // number of parent orders arriving with immediately available sweep qty
    sfixed32 arrive_sweep_order_qty = 463; // total size of all child orders generated due to parent order arrival sweep
    sfixed32 arrive_sweep_fill_qty = 466; // total fill size due to parent order arrival sweep
    sfixed32 num_sweep_child_orders = 469; // child orders generated in initial arrival sweep
    sfixed32 auction_link = 472; // total linkage auction contracts while parent order was active
    sfixed32 auction_face = 475; // total facilitation auction contracts while parent order was active
    sfixed32 auction_resp = 478; // total auction response contracts
    sfixed32 prt_active_cnt = 481; // total print events while parent order was active; [any exchange; all prints]
    sfixed32 prt_qty_active = 484; // total quantity printed while parent order was active; [any exchange; all prints]
    float prt_qty_active_mny = 487; // total of (quantity printed x print price) while parent order was active
    sfixed32 prt_eligible_cnt = 490; // total eligible (public) print events while parent order was active; [any exchange; all eligible prints]
    sfixed32 prt_qty_eligible = 493; // total eligible (public) quantity printed while parent order was active; [any exchange; all eligible prints]
    sfixed32 prt_qty_limit_oK = 496; // total quantity printed at or better than parent limit while parent was active; SUM(MIN(PrintSize,OpenParentOrderSize)) [any exchange]
    sfixed32 prt_qty_compete = 499; // total quantity printed on an exchange on which we had a competitive child order on that exchange; SUM(MIN(PrintSize, OpenChildOrderSize)) [childOrder.exch = print.exch]
    sfixed32 prt_qty_away_chld = 502; // total quantity printed on an away exchange when we had a competitive child order(s) in the market and the away exchange was competitive prior to the print; SUM(MIN(PrintSize, OpenChildOrderSize)) [childOrder.exch != print.exch]
    sfixed32 prt_qty_no_compete = 505; // total quantity printed on an exchange when the print exchange was not competitive prior to the print (non quote-competitive prints)
    sfixed32 prt_qty_no_comp_nbbo = 508; // total quantity printed on an exchange when the NBBO was not competitive prior to the print (non nbbo-competitive prints)
    sfixed32 mk_check_cnt = 511; // total number of times order was checked for making
    float min_mk_prob = 514; // min make probability while broker active
    float avg_mk_prob = 517; // average make probability while broker active
    float cur_mk_prob = 520; // current make probability
    sfixed32 tk_check_cnt = 523; // total number of times order was checked for taking
    float max_tk_prob = 526; // max take probability while broker active
    float avg_tk_prob = 529; // average take probability while broker active
    float cur_tk_prob = 532; // current take probability
    sfixed32 prt_prb_cnt = 535; // total number of print probability records while broker active (all limit types)
    sfixed32 prt_prb_check = 538; // number of print probability records with active probability printTake handler
    sfixed32 prt_prb_lmt_oK = 541; // number of print probability records that pass broker takeLimit
    sfixed32 tk_qty_lmt_oK = 544; // total quantity available to take at parent limit or better while broker active
    float avg_qte_sz_ratio = 547; // average ratio of child size / nbbo size during the life of the working order when child order is at nbbo
    sfixed32 cnt_qte_sz_ratio = 550; // sample counter for above [1 second intervals]; qteCnRatio / qteCnRatioCnt = avg of child size / nbbo size while broker active
    float min_qte_width = 553; // minimum quote width during active order window
    float avg_qte_width = 556; // average quote width (during active order window)
    sfixed32 cnt_qte_width = 559;
    UpdateSource update_src = 562;
    sfixed32 num_updates = 565; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 568; // SR system timestamp
}


/*
    SpdrParentBrkrEvent records are published when a new or cxl/replace parent order arrives causes a broker to begin working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
*/    
message SpdrParentBrkrEvent {
    message PKey {
        
        sfixed64 parent_number = 10;
        EventRecType rec_type = 13; // type of record [New,Modify,Replace,Close,Reject]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100;
    SpdrKeyType sec_type = 103;
    string accnt = 106;
    SpdrSource spdr_source = 109;
    sfixed64 grouping_code = 112;
    BuySell order_side = 115;
    string client_firm = 118; // SR client firm code
    string alt_accnt = 121; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 124; // alternate (client assigned) user name (optional)
    uint32 event_number = 127;
    SpdrStageType stage_type = 130; // parent is a staged order [StageLock, StageModify, StageReview]
    sfixed64 base_parent_number = 133; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 prev_parent_number = 136; // SPDR order number (order being cancelled/replaced) (zero if none)
    string engine_name = 139; // server stripe
    TickerKey ticker = 142; // SpiderRock underlier stock key
    SpdrBrokerStatus spdr_broker_status = 145;
    SpdrOrderStatus spdr_order_status = 148; // parent order status
    SpdrCloseReason spdr_close_reason = 151; // parent order close reason (if closed)
    SpdrRejectReason spdr_reject_reason = 154; // parent order reject reason (if any)
    string spdr_comment = 157; // additional detail (close/reject reason; last child order error)
    float mar_haircut_utilized1 = 160; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_haircut_utilized2 = 163; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_haircut_utilized3 = 166; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #3)
    float mar_total_exposure_utilized1 = 169; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_total_exposure_utilized2 = 172; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_total_exposure_utilized3 = 175; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #3)
    double bid_prc = 178; // bid (nbbo) price @ record publish
    double ask_prc = 181; // ask (nbbo) price @ record publish
    float bid_iVol = 184; // bid (nbbo) ivol @ record publish
    float ask_iVol = 187; // ask (nbbo) ivol @ record publish
    sfixed32 bid_size = 190; // bid size (nbbo cum) @ record publish
    sfixed32 ask_size = 193; // ask size (nbbo cum) @ record publish
    double u_bid = 196; // underlier bid price @ record publish (options only)
    double u_ask = 199; // underlier ask price @ record publish (options only)
    float surface_prc = 202; // SR surface price @ record publish
    float surface_vol = 205; // SR surface volatility @ record publish
    float surface_yrs = 208; // SR surface calc value @ record publish
    float surface_sDiv = 211; // SR surface calc value @ record publish
    float surface_rate = 214; // SR surface calc value @ record publish
    float surface_uPrc = 217; // SR surface calc value @ record publish
    float surface_de = 220; // SR surface calc value @ record publish
    float surface_ga = 223; // SR surface calc value @ record publish
    float surface_th = 226; // SR surface calc value @ record publish
    float surface_ve = 229; // SR surface calc value @ record publish
    float surface_ro = 232; // SR surface calc value @ record publish
    float surface_ph = 235; // SR surface calc value @ record publish
    sfixed32 arrive_nbbo_size = 238; // size of the single largest exchange @ parent order arrival
    OptExch arrive_nbbo_exch = 241; // exchange representing largest size @ order arrival
    sfixed32 arrive_cum_size = 244; // cum size of all exchanges at NBBO price @ parent order arrival
    int32 arrive_num_exch = 247; // num exchanges making up cum size @ parent order arrival
    sfixed32 arrive_limit_size = 250; // immediately marketable size up to limit price on parent order arrival
    double arrive_limit_prc = 253; // expected average fill price if all immediately marketable size executed as advertized
    double avg_fill_prc = 256; // average fill price of all fills attributed parent order
    sfixed32 cum_fill_quan = 259; // cumulative fill quantity attributed to parent order
    uint32 num_child_orders = 262; // total number of child orders generated by this parent broker (parent number)
    uint32 num_day_child_orders = 265; // total number of child orders generated by this parent broker (all day; base parent number)
    sfixed32 open_order_size = 268; // open order size
    sfixed32 action_order_size = 271; // order size available for immediate action (note: not all algo combinations allow immediate action)
    sfixed32 risk_limit_size = 274; // risk limit size (distance to most restrictive risk limit associated with this parent order)
    SpdrRisk risk_limit_desc = 277; // reason for size reduction (identifies the most restrictive risk limit)
    string risk_limit_detail = 280; // addition risk detail
    double limit_ref_uPrc = 283; // effective reference underlier price @ record publish (usually either mid or bid/ask depending on limit type)
    double limit_price = 286; // parent simple prc limit (if any)
    float limit_vol = 289; // parent simple vol limit (if any)
    double make_limit_price = 292; // effective order limit price @ record publish
    LimitError make_limit_err = 295; // limit price error code (if any)
    string make_limit_err_desc = 298; // additional limit price error descriptive text
    double take_limit_price = 301; // effective order limit price @ record publish
    LimitError take_limit_err = 304; // limit price error code (if any)
    string take_limit_err_desc = 307; // additional limit price error descriptive text
    BrokerState broker_state = 310; // broker monitor state
    AlgoState make_state = 313; // [enum] current state of non-marketable order handler (maker)
    AlgoState take_state = 316; // [enum] current state of marketable order handler (taker)
    MktCrossState mkt_cross_state = 319; // [enum] current state of mkt cross handler (if any)
    ChildEvent last_child_event = 322; // most recent child handling event
    SpdrMarketState spdr_mkt_state = 325; // market state code
    sfixed32 num_orders = 328; // number active child orders @ record send
    sfixed32 leaves_qty = 331; // number of active child order contracts (sum of all active child orders) @ record send
    sfixed32 child_order_leaves = 334; // number of open child orders @ record send
    float arrival_sDiv = 337; // effective sdiv rate @ parent order arrival (fixed for life of parent order)
    float arrival_rate = 340; // effective interest rate @ parent order arrival (fixed for life of parent order)
    float arrival_dDiv = 343; // effective cumulative discrete dividend @ parent order arrival (fixed for life of parent order)
    ExpiryKey hedge_sec_key = 346; // auto-hedge sec key
    SpdrKeyType hedge_sec_type = 349; // auto-hedge sec type
    float theo_opx = 352; // option theo prc (from theoVol)
    float theo_vol = 355; // option theo vol (from theoModel;if any)
    fixed32 child_order_mask = 358; // bit-mask of all exchange for which a child order was generated
    PriceFormat price_format = 361; // price display format code
    PriceFormat u_price_format = 364; // underlier price display format code
    string modified_by = 367; // user who last modified this record
    google.protobuf.Timestamp timestamp = 370; // timestamp of last modification
}


/*
    SpdrParentBrkrState records are created/published by SpiderRock Execution Engines. Each record describes the current state of one (or more) parent orders. If a parent order is canceled/replaced then entire chain is represented by a single broker state record.
*/    
message SpdrParentBrkrState {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 13;
        SpdrKeyType sec_type = 16;
        SpdrSource spdr_source = 19;
        sfixed64 grouping_code = 22;
        BuySell order_side = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_name = 100; // SR user name string
    string client_firm = 103; // SR client firm string
    sfixed64 parent_number = 106; // SR parent number
    sfixed64 base_parent_number = 109;
    sfixed64 risk_group_id = 112; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    sfixed64 trigger_group_id = 115;
    string strategy = 118; // parent order strategy string (can be user supplied)
    string alt_order_id = 121; // alternate order ID (usually clOrdId from client)
    sfixed64 package_id = 124; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string alt_accnt = 127; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 130; // alternate (client assigned) user name (optional)
    SpdrStageType stage_type = 133; // parent is a staged order [StageLock, StageModify, StageReview]
    YesNo is_flagged = 136; // broker state records is flagged for action (user alert only)
    TickerKey ticker = 139; // underlier ticker
    double u_prc = 142; // underlier price (usually mid-market)
    double u_prc_order = 145; // underlier price at the time of last parent order arrival
    double nbbo_bid = 148; // current option nbbo bid (at time of record publish)
    double nbbo_ask = 151; // current option nbbo ask (at time of record publish)
    sfixed32 nbbo_bid_sz = 154; // current option nbbo cum bid size (at time of record publish)
    sfixed32 nbbo_ask_sz = 157; // current option nbbo cum ask size (at time of record publish)
    float surface_prc = 160; // SR surface price @ record publish
    float surface_vol = 163; // SR surface volatility @ record publish
    float order_ref_sDiv = 166;
    RefSDivType order_ref_sDiv_type = 169;
    SpdrBrokerStatus spdr_broker_status = 172;
    SpdrOrderStatus spdr_order_status = 175; // status of the most recent parent order handled by this broker
    SpdrCloseReason spdr_close_reason = 178; // close reason of most recent parent order
    SpdrRejectReason spdr_reject_reason = 181; // reject reason (if any) of most recent parent order
    YesNo is_permanently_closed = 184; // indicates that this broker is permanently closed (cannot be cxl/replaced or re-opened) [auto-hedge orders only]
    sfixed32 num_extern_risk_hold = 187; // num external risk management rejects received
    string last_extern_risk_text = 190; // last external (exch?) risk management reject
    google.protobuf.Timestamp last_extern_risk_reject = 193;
    string spdr_comment = 196;
    sfixed32 order_size = 199; // order size of most recent parent order
    sfixed32 order_active_size = 202; // total activated size (total size released for execution) (-1 = all available size)
    google.protobuf.Timestamp update_dttm = 205;
    google.protobuf.Timestamp good_till_dttm = 208; // [expected] order expiration date/time (most recent parent order in cxl/replace chain)
    sfixed32 leaves_quantity = 211; // current child order leaves quantity (quantity actively working in the market;all child orders)
    double avg_fill_price = 214; // average fill price
    double avg_fill_uPrice = 217; // average fill underlier price
    sfixed32 cum_fill_quantity = 220; // cumulative fill quantity
    float avg_fill_vol = 223; // average fill volatility
    float cum_fill_vega = 226; // cumulative fill vega
    float cum_fill_theta = 229; // cumulative fill theta
    float cum_fill_dDelta = 232; // cumulative fill $Delta
    google.protobuf.Timestamp last_fill_dttm = 235;
    sfixed32 risk_limit_size = 238; // risk limit size (maximum size to nearest risk limit)
    SpdrRisk risk_limit_desc = 241; // reason for size reduction
    double limit_price = 244; // simple limit
    LimitError limit_err = 247;
    string limit_err_desc = 250;
    float best_limit_offset = 253; // (possible price improvement) (gap between best price and init/limit price) (Face/Matrix orders)
    float make_prob_limit = 256;
    float make_surf_offset = 259;
    double make_limit_price = 262; // make limit
    LimitError make_limit_err = 265;
    float take_prob_limit = 268;
    float take_surf_offset = 271;
    double take_limit_price = 274; // take limit
    LimitError take_limit_err = 277;
    AutoHedge auto_hedge = 280;
    HedgeInst hedge_instrument = 283; // auto-hedge instrument (from parent order)
    ExpiryKey hedge_sec_key = 286; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 289; // auto-hedge sec type (Stock or Future)
    float hedge_beta_ratio = 292; // auto-hedge ratio [from parent order (if supplied) or computed by SR]
    HedgeScope hedge_scope = 295; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 298; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string extern_hedge_ex_dest = 301; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    string extern_hedge_params = 304; // external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    string user_data1 = 307; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 310; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    MaxProgress max_progress = 313; // maximum point of progress for most recent parent order
    string max_progress_detail = 316; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 319; // time of last max progress advance
    BrokerState broker_state = 322; // broker monitor state
    sfixed32 broker_counter = 325; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 328; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 331; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 334; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 337; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 340; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 343; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 346; // [enum] current state of mkt cross handler (if any)
    sfixed32 mkt_cross_counter = 349; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 352; // Twap/Vwap progress detail
    ChildEvent last_child_event = 355; // [enum] last event code from broker/child order handler(s)
    google.protobuf.Timestamp last_child_reject_dttm = 358; // last child order reject dttm (if any)
    string last_child_reject_text = 361; // last child order reject reason/text (if any)
    SpdrMarketState spdr_mkt_state = 364; // [enum] market state
    float cpx1 = 367; // child price level #1
    sfixed32 csz1 = 370; // cumulative size represented at this price
    fixed32 cex1 = 373; // bit mask of all exchanges where we are at this price
    int32 cnt1 = 376; // number of child orders at price level #1
    float cpx2 = 379; // child price level #2
    sfixed32 csz2 = 382; // cumulative size represented at this price
    fixed32 cex2 = 385; // bit mask of all exchanges where we are at this price
    int32 cnt2 = 388; // number of child orders at price level #2
    int32 c_more = 391; // number of additional child orders at inferior prices (if any)
    string expiry_key = 394;
    float cn_vol = 397;
    float cn_yrs = 400;
    float cn_uPrc = 403;
    float cn_de = 406; // delta per contract
    float cn_dd = 409; // $delta per contract
    float cn_ve = 412; // vega per contract
    float cn_ga = 415;
    float cn_th = 418;
    float cn_pr = 421; // premium per contract
    float dd_mult = 424;
    PriceFormat price_format = 427; // option price format code
    PriceFormat u_price_format = 430; // underlier price format code
    sfixed32 underliers_per_cn = 433; // option delivery underliers per contract
    UnderlierType underlier_type = 436; // type of underlier (affects $greek calculations)
    float tick_value = 439; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 442; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 445;
    float net_acc_day_wt_vega = 448; // net (+/-) account day wtVega;cumulative day wtVega (vol * vega / sqrt(T)) for the account this broker is associated with
    float net_acc_day_dDelta = 451; // net (+/-) account day $delta;cumulative day $delta (stock, future, option) for the account this broker is associated with
    float net_exp_day_wt_vega = 454; // net (+/-) expiration day wtVega;cumulative weighted vega (vol * vega / sqrt(T)) for the ticker+expiration this broker is associated with
    float net_exp_day_rMetric6 = 457; // net (+/-) expiration day RMetric6;cumulative weighted Rm6 for the ticker+expiration this broker is associated with
    float net_sym_day_wt_vega = 460; // net (+/-) symbol day (time weighted) vega;cumulative wt vega (options only) for the ticker+account this broker is associated with
    float net_sym_day_dDelta = 463; // net (+/-) symbol day $delta;cumulative $delta (stock, futures, options) for the ticker+account this broker is associated with
    float net_sym_day_rMetric7 = 466; // net (+/-) symbol day RMetric7;cumulative Rm7 (stock, futures, options) for the ticker+account this broker is associated with
    float net_grp_day_vega = 469; // net (+/-) day risk group vega;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_day_dDelta = 472; // net (+/-) day risk group $delta;cumulative (stock, futures, options) for the riskGroupId+account this broker is associated with
    float net_grp_day_premium = 475; // net (+/-) day risk group premium over parity;cumulative (options) for the riskGroupId+account this broker is associated with
    sfixed32 net_grp_day_contracts = 478; // net (+/-) day risk group contracts;cumulative (futures, options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric1 = 481; // net (+/-) day risk group rmetric1;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric2 = 484; // net (+/-) day risk group rmetric2;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric3 = 487; // net (+/-) day risk group rmetric3;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric4 = 490; // net (+/-) day risk group rmetric4;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric5 = 493; // net (+/-) day risk group rmetric5;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_sym_ema_cxl_dDelta = 496; // acct+symbol 60s EMA $delta risk counter (options only)
    float net_sym_ema_cxl_wt_vega = 499; // acct+symbol 60s EMA wtVega risk counter
    float theo_vol = 502;
    float theo_prc = 505;
    sfixed32 num_new_orders = 508; // number of child orders generated by this broker (all parent orders)
    uint32 num_parent_limits = 511; // number of parent limit messages received for this broker
    float broker_vwap_mark = 514; // trade weighted average price (duration of parent order)
    float broker_vwap_uMark = 517; // option-trade weighted average underlier price (duration of parent order)
    float broker_qwap_mark = 520; // average quote mid-market (duration of parent order)
    float broker_qwap_uMark = 523; // average underlier quote mid-market (duration of parent order)
    float vwap_pn_l = 526; // dir * qty * (brokerVwapMark - avgFillPrice)
    float vwap_dn_pn_l = 529; // vwapPnL - uDriftVwapPnL
    float u_drift_vwap_pn_l = 532; // (dir * (de * qty * (brokerVwapUMark - avgFillUPrice)))
    float qwap_pn_l = 535; // dir * qty * (brokerQwapMark - avgFillPrice)
    float qwap_dn_pn_l = 538; // qwapPnL - uDriftQwapPnL
    float u_drift_qwap_pn_l = 541; // (dir * (de * qty * (brokerQwapUMark - avgFillUPrice)))
    sfixed32 num_imprv_chld = 544; // number of child orders that improved an existing market
    float active_seconds = 547; // number of seconds that the parent order was active
    float with_seconds = 550; // number of seconds with one or more working child orders that are with of nbbo
    float alone_seconds = 553; // number of seconds with one or more working child orders that make up 100% of nbbo
    float working_seconds = 556; // number of child order seconds (can be greater than activeSeconds if working on more than one exchange)
    sfixed32 num_risk_cancels = 559; // number of child orders cancels for risk reasons
    float risk_hold_seconds = 562; // number of seconds with parent order active but on risk hold (zero child order risk size)
    float risk_thrtl_seconds = 565; // number of seconds with parent order active but in risk throttle condition (temporary hold after fast/mass risk cancel)
    sfixed32 num_make_throttle_skips = 568; // number of childs orders not send to market dues to outbound lines being in a queued/throttled state
    float sum_make_throttle_delay = 571; // cumulative seconds of queue skip delay (seconds that a child order was not in the market dues to outbound lines being in a queued/throttled state)
    UpdateSource update_src = 574;
    sfixed32 num_updates = 577; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 580; // SR system timestamp
}


/*
    SpdrParentBrokerSummary records are created at the end of a trading period and contain a summary of trading activity for the period; Summary of Stk/Fut/Opt/MLeg Brkr State records.
*/    
message SpdrParentBrokerSummary {
    message PKey {
        
        string accnt = 10;
        SpdrKeyType sec_type = 13;
        TickerSrc ticker_src = 16;
        SpdrSource spdr_source = 19;
        ParentOrderHandling parent_order_handling = 22;
        DateKey trading_period = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    sfixed32 num_orders = 103; // number of parent orders
    sfixed32 num_brokers = 106; // number of parent brokers
    sfixed32 num_sec_keys = 109; // number of unique secKeys
    sfixed32 num_underliers = 112; // number of unique underlier secKeys
    sfixed32 sum_order_size = 115; // total parent order size
    sfixed32 sum_sweep_mkt_size = 118; // size that would be expected to fill immediately after parent order arrival
    sfixed32 sum_sweep_fill_qty = 121; // size that filled as a result of an initial sweep
    float sum_active_seconds = 124; // total seconds parent order is active
    float sum_working_seconds = 127; // total seconds with at least one working child order
    sfixed32 num_child_orders = 130; // total number of child orders generated
    sfixed32 cum_fill_qty = 133;
    sfixed32 sum_vwap_qty = 136; // SUM: cumFillQty [if avgVwapPrice exists] (stock and futures only)
    float sum_vwap_pn_l = 139; // SUM: (avgVWapPrice - avgFillPrice) * cumFillQty [if avgVwapPrice exists] (stock and futures only)
}


/*
    Records inserted into this table causes the corresponding parent order to be cancelled if it is active and cancellable.
    Either put in a custom datasource or deprecate from SRSE (Natively not allowed to be modified via SRSE)
*/    
message SpdrParentCancel {
    message PKey {
        
        string accnt = 10;
        sfixed64 parent_number = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string cxl_reason = 100;
    string alt_cancel_id = 103;
    string engine_name = 106; // set by the engine handling event (should be blank on arrival)
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


/*
    SpdrParentExecution records are published every time a parent order execution is received.  They also update as additional post execution mark information is available at F+1m and F+10m.
*/    
message SpdrParentExecution {
    message PKey {
        
        sfixed64 fill_number = 10; // SpiderRock execution number (globally unique over trailing 10 days)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    int32 version = 100; // record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    ExecStatus exec_status = 103; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    ExecShape exec_shape = 106;
    sfixed64 package_id = 109; // SR package Id
    sfixed64 parent_number = 112; // SR parent number
    int32 parent_version = 115; // SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    sfixed64 base_parent_number = 118; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 cl_ord_id = 121; // SR child order clOrdID resulting in fill
    string review_cl_ord_id = 124; // review session clOrdId (usually from inbound review FIX session)
    sfixed64 alt_fill_id = 127; // alternate fill ID (usually from AwayTktGateway.pkey.clientFillID)
    string alt_order_id = 130; // alternate order ID (usually clOrdId from client)
    string alt_cross_id = 133;
    string alt_leg_ref_id = 136;
    string alt_accnt = 139; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 142; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string src_routing_code = 145; // inbound FIX routing code, if any
    sfixed64 risk_group_id = 148; // riskGroupId (parent order group ID) for this execution report
    sfixed64 trigger_group_id = 151; // WaitTrigger group Id
    sfixed64 trigger_timestamp = 154; // WaitTrigger trigger timestamp (nanoseconds since epoch)
    string street_cl_ord_id = 157; // street side clOrdId (clOrdId or equivalent of the street side order) [SR/street gateway generated]
    string street_order_id = 160; // street side orderId (orderId or equivalent of the street side order) [from street side execReport]
    FaceSide face_side = 163; // facilitation side (if any)
    FaceShape face_shape = 166; // CrossCust = split broker / cust side, CrossFace = split broker / face side, CrossBoth = single broker cross
    SpdrOrderShape parent_shape = 169; // shape of originating parent order
    OptionKey sec_key = 172; // execution security key
    SpdrKeyType sec_type = 175; // execution security type [Stock, Future, Option]
    TickerKey ticker = 178; // base stock key (used for symbol risk aggregation)
    string accnt = 181; // SpiderRock trading accnt [broker pkey]
    string client_firm = 184; // SR client firm
    SpdrSource spdr_source = 187; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 190; // SpiderRock parent broker number [broker pkey]
    string routing_code = 193; // SpiderRock market routing code
    string engine_name = 196; // SpiderRock execution engine that handled the parent order
    string gateway_name = 199; // StreetGateway server than handled the child order (if any)
    ExecRole exec_role = 202; // SpiderRock relationship to this execution record
    string exec_broker_mPID = 205; // exec broker acronym (a FINRA assigned MPID or SR '$' broker tag)
    string exec_broker_accnt = 208; // account at executing broker (if any)
    string exec_broker_cl_firm = 211; // client/firm at executing broker (if any)
    string exec_broker_user_name = 214; // userName at execution broker (if any)
    FlipType clearing_flip_type = 217; // Clearing Flip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc)
    string clearing_flip_firm = 220; // Clearing Flip Firm (if any)
    string clearing_flip_accnt = 223; // Clearing Flip Account (if any)
    string clearing_firm = 226; // clearing firm
    string clearing_accnt = 229; // clearing firm account (if any)
    string orig_exec_iD = 232; // original execution ID string (child order)
    string last_exec_iD = 235; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    string remote_text = 238; // text comment from remote endpoint (if any)
    BuySell order_side = 241; // order side
    SpdrOrderStatus spdr_order_status = 244;
    SpdrCloseReason spdr_close_reason = 247;
    sfixed32 cum_fill_quantity = 250; // cumulative fills (this parent number only)
    double avg_fill_price = 253;
    sfixed32 cum_leg_fill_quantity = 256; // cumulative fills (spread only)
    double avg_leg_fill_price = 259;
    sfixed32 leaves_qty = 262;
    PriceType price_type = 265;
    SpdrOrderShape child_shape = 268;
    sfixed32 child_size = 271; // child order size
    double child_price = 274; // child order price
    google.protobuf.Timestamp child_dttm = 277; // child order generation date/time
    string child_exch = 280; // child order exchange
    string child_ex_dest = 283; // child order exchange destination code
    string child_exec_broker = 286; // executing broker that child order was routed to
    YesNo child_is_directed = 289; // child order isDirected flag
    YesNo child_iso_sweep = 292; // child order ISO sweep flag
    string child_order_handling = 295; // child order handling string from the algo that generated the child order responsible for this fill
    ChildHandler child_algo_handler = 298; // algo handler for this child order
    ChildCreateReason child_create_reason = 301;
    ChildCancelReason child_cancel_reason = 304;
    MakerTaker child_maker_taker = 307;
    double child_uBid = 310; // underlier market bid at @ child order send time
    double child_uAsk = 313; // underlier market ask at @ child order send time
    double child_bid = 316; // market bid at the @ child order send time
    double child_ask = 319; // market ask at the @ child order send time
    double child_mark = 322; // mid-market (SR surface price if option) @ child order send time
    float child_vol = 325; // child order volatility @ childLimitRefUPrc
    float child_prob = 328; // SR probability for the child order @ child order send time
    double child_limit_ref_uPrc = 331; // limit reference underlier price @ child order send time
    double child_limit_prc = 334; // parent order limit price @ child order send time
    float child_vol_atm = 337; // atm volatility @ child order send time
    PositionType child_pos_type = 340; // child order position type
    sfixed32 child_firm_opt_position = 343; // effective firm option position @ child order send time
    ShortSaleFlag child_sSale_flag = 346; // short sale flag
    sfixed32 child_firm_stk_position = 349; // effective firm stock position @ child order send time
    sfixed32 child_firm_open_orders = 352; // open sell orders counted in marking @ child order send time
    sfixed32 child_locate_quan = 355; // available locate quantity (if selling short) @ child order send time
    string child_locate_firm = 358; // firm granting the locate
    string child_locate_source = 361; // locate ID code (if any)
    MktStance child_mkt_stance = 364; // child order was expected to be marketable @ child send time
    YesNo child_cxl_attempted = 367; // cancel attempt was made on the child order prior to receiving this fill
    float child_cxl_fill_latency = 370; // cancel attempt -to- fill report latency (in ms)
    string child_method = 373; // execution method string
    string child_source = 376; // execution source string
    FirmType firm_type = 379; // child order firm type [Customer, ProCust, Firm, MM, etc]
    string pri_agg_group = 382; // primary aggregation group
    string sec_agg_group = 385; // secondary aggregation group
    google.protobuf.Timestamp fill_transact_dttm = 388; // transaction date/time as reported by exchange or down stream broker
    double fill_ts = 391; // fill report ts (seconds since startup; 100 nanosec resolution)
    google.protobuf.Timestamp fill_dttm = 394; // Date/time of fill arrival (SRDateTime)
    string fill_exch = 397; // ExDest code from child order execution report
    string fill_exec_id = 400; // street side execution Id
    string fill_exec_ref_id = 403; // street side execution ref Id (only used when busting an execution)
    sfixed64 fill_leg_ref_id = 406; // legRefId for multileg fills
    sfixed32 fill_leg_ratio = 409; // legRatio (if spread order)
    float fill_exch_fee = 412; // SpiderRock estimate of the exchange fee based on liquidity tags (best effort)
    string fill_market = 415; // usually from execReport.lastMkt as reported by child order venue
    double fill_price = 418; // fill price
    sfixed32 fill_quantity = 421; // fill quantity
    string fill_report_detail = 424; // extra detail (if any) from child execution
    double fill_bid = 427; // market bid @ fill arrival
    double fill_ask = 430; // market ask @ fill arrival
    double fill_mark = 433; // mid-market (or SR surface price if option) @ fill arrival
    double fill_uMark = 436; // underlier mark @ fill arrival
    double fill_uBid = 439; // underlier market bid @ fill arrival
    double fill_uAsk = 442; // underlier market bid @ fill arrival
    sfixed32 fill_uBid_sz = 445; // underlier bid size @ fill arrival
    sfixed32 fill_uAsk_sz = 448; // underlier ask size @ fill arrival
    float fill_vol_atm = 451; // atm volatility @ fill arrival
    double fill_mark1_m = 454; // mid-market (or SR surface price if option) @ fill arrival + 1m
    double fill_mark10_m = 457; // mid-market (or SR surface price if option) @ fill arrival + 10m
    double fill_bid1_m = 460; // market bid @ fill arrival + 1m
    double fill_ask1_m = 463; // market ask @ fill arrival + 1m
    double fill_bid10_m = 466; // market bid @ fill arrival + 10m
    double fill_ask10_m = 469; // market ask @ fill arrival + 10m
    double fill_uMark1_m = 472; // underlier mark @ fill arrival + 1m
    double fill_uMark10_m = 475; // underlier mark @ fill arrival + 10m
    float fill_vol_atm1_m = 478; // atm volatility (options only) + 1m
    float fill_vol_atm10_m = 481; // atm volatility (options only) + 10m
    FillMarkState fill_state1_m = 484;
    FillMarkState fill_state10_m = 487;
    float fill_vol = 490; // fill volatility @ fillLimitRefUPrc & fillLimitRefSDiv
    float fill_vol_s = 493; // fill volatility @ surfaceUPrc & surfaceSDiv
    float fill_prob = 496; // T+10m probability for the fill @ fill arrival send time
    double fill_limit_ref_uPrc = 499; // limit reference underlier price @ fill arrival time
    double fill_limit_ref_sDiv = 502; // limit reference sdiv value @ fill arrival time
    double fill_limit_prc = 505; // parent order limit price @ fill arrival time
    float fill_ve = 508; // fill vega
    float fill_ga = 511; // fill gamma
    float fill_de = 514; // fill delta
    float fill_th = 517; // fill theta
    float fill_pr = 520; // fill premium over parity
    float fill_ve_ratio = 523; // fill ve / fill atm ve
    float fill_beta = 526; // SpiderRock estimate of beta to SPX
    float fill_risk_metric1 = 529; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric2 = 532; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric3 = 535; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric4 = 538; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric5 = 541; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric6 = 544; // user defined (from parent order) [used to manage order risk]
    float fill_risk_metric7 = 547; // user defined (from parent order) [used to manage order risk]
    float fill_s08_dn = 550; // underlier down 8% shock slide
    float fill_s06_up = 553; // underlier up 6% shock slide
    float fill_s15_dn = 556; // underlier down 15% shock slide
    float fill_s15_up = 559; // underlier up 15% shock slide
    float fill_s50_dn = 562; // underlier down 50% shock slide
    float fill_s50_up = 565; // underlier up 50% shock slide
    float fill_brkr_rate = 568; // billing brokerage rate (tier 1)
    float fill_routing_rate = 571; // billing routing rate (tier 1)
    RiskCode risk_code = 574; // SpiderRock Risk Code (if any)
    BillingSecType billing_sec_type = 577; // SpiderRock billing security type
    BillingCategory billing_category = 580; // SpiderRock billing category
    string spdr_liquidity_tag = 583; // SpiderRock normalized liquidity tag
    string exch_liquidity_tag = 586; // liquidity tag as reported by downstream venue (if any)
    string fill_exch_detail = 589; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    OrderCapacity last_capacity = 592; // child order capacity
    string exch_firm_type = 595; // used to reflect field from a downstread execution back up to upstream fill report
    string ext_exec_broker = 598; // used to reflect field from a downstream destination back up to and upstream fill report
    RelationshipType relationship_type = 601; // type of SR <-> client relationship
    float cl_arrive_mark = 604; // client specified arrival mark (passed through from parent order)
    google.protobuf.Timestamp parent_dttm = 607; // parent order creation date/time
    sfixed32 parent_order_size = 610; // parent order size
    double parent_uBid = 613; // underlier market bid @ parent order arrival
    double parent_uAsk = 616; // underlier market ask @ parent order arrival
    double parent_uMark = 619; // underlier mid mark @ parent order arrival
    double parent_bid = 622; // market bid @ parent order arrival
    double parent_ask = 625; // market ask @ parent order arrival
    double parent_mark = 628; // mid-market (or SR surface price) @ parent order arrival
    double parent_surf_vol = 631; // SR surf vol @ parent order arrival
    float parent_limit_vol = 634; // parent order limit volatilty (if any)
    double parent_limit_prc = 637; // parent order limit price @ parent order arrival
    double parent_limit_ref_uPrc = 640; // limit reference underlier price @ parent order arrival
    float parent_theo_vol = 643; // client supplied theoretical volatility (used for markup only) [copied from parent order]
    float parent_theo_prc = 646; // option price corresponding parentTheoVol
    PositionType parent_pos_type = 649; // parent order position type
    ShortSaleFlag parent_sSale_flag = 652; // short sale flag on parent order
    sfixed64 cross_notice_id = 655; // RFR / Auction crossNoticeId (if any)
    int32 num_make_exchanges = 658; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 661; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible
    YesNo can_overlap_cxl_repl = 664; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 667; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    YesNo exch_mask_enabled = 670; // exchMask != 0
    TimeInForce time_in_force = 673; // Parent order time in force
    ParentOrderHandling parent_order_handling = 676; // Primary/Take Algo Handler
    ParentBalanceHandling parent_balance_handling = 679; // Make Algo Handler
    SpdrLimitType order_limit_type = 682; // Primary Limit Type (Prc, Vol, Rel, Market, Smrt, etc)
    SpdrLimitClass order_limit_class = 685; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 688; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    OverrideCode override_code = 691; // SDiv/DDiv override rule (applies if LimitType = Vol)
    AlphaType alpha_type = 694; // Affects limit probabilities (applies if LimitClass = Probability)
    string parent_strategy = 697; // client strategy [usually client supplied]
    string user_name = 700; // user name associated with the parent order
    AutoHedge auto_hedge = 703; // auto-hedge algorithm (if any)
    ExpiryKey hedge_sec_key = 706; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 709; // auto-hedge sec type (if any)
    float hedge_beta_ratio = 712; // portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    HedgeScope hedge_scope = 715; // hedge group scope
    string user_data1 = 718; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 721; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    float years = 724; // years to expiration
    sfixed32 underliers_per_cn = 727; // option delivery underliers per contract
    UnderlierType underlier_type = 730; // type of underlier (affects $greek calculations)
    float tick_value = 733; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 736; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 739;
    float u_prc_ratio = 742; // UPrcRatio (SymbolRatio) from product definition
    float min_tick_size = 745; // minimum market price variation (dnTickSize if on a boundary)
    PriceFormat price_format = 748; // SpiderRock price display format code
    PriceFormat u_price_format = 751; // SpiderRock underlier price display format code
    double live_uPrc = 754; // SpiderRock internal use only
    double live_mark = 757; // SpiderRock internal use only
    sfixed64 src_timestamp = 760;
    sfixed64 sgw_timestamp = 763;
    sfixed64 eng_timestamp = 766;
    google.protobuf.Timestamp timestamp = 769; // timestamp of this record [not necessarily the timstamp of the fill itself]
}


/*
    SpdrParentLimit records are supplied by clients (via SRSE) for use with parent orders having orderLimitType=Aux.  This table can be updated either before or after a parent order begins working and will influence the limit(s) used when working child orders.  Updates to this table do not constitute cancel/replace operations for the parent order.
*/    
message SpdrParentLimit {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 13;
        SpdrKeyType sec_type = 16;
        SpdrSource spdr_source = 19;
        BuySell order_side = 22;
        sfixed64 grouping_code = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 order_active_size = 100; // OrderActiveSize = -1 will use all available parent order size; OrderActiveSize = 0 will cancel any existing child orders;
    YesNo add_cum_fill_quantity = 103; // If Yes then OrderActiveSize is calculated @ order arrival as requested OrderActiveSize + existing 'CumFillQuantity'.
    SpdrLimitType order_limit_type = 106;
    SpdrLimitClass take_limit_class = 109; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 112; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    double order_prc_limit = 115; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 118; // default=underlier.mid
    float order_ref_delta = 121; // default=option.delta
    float order_ref_gamma = 124; // default=option.gamma
    float order_vol_limit = 127; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 130; // (depricated) zero = ignore;> zero = override
    float sdiv_override = 133; // (depricated)
    string ddiv_override = 136; // (depricated) discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 139; // (depricated)
    double order_prc_offset = 142; // default=0
    StateModel state_model = 145;
    StateModel u_state_model = 148;
    AlphaType take_alpha_type = 151; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 154; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 157; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    float make_alpha_factor = 160; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    float take_probability = 163; // takeProbLimit = takeProbability [if AlphaType = Static]
    float make_probability = 166; // makeProbLimit = makeProbability [if AlphaType = Static]
    double take_surf_prc_offset = 169; // default=0
    float take_surf_vol_offset = 172; // default=0
    float take_surf_width_offset = 175; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 178; // default=0
    float make_surf_vol_offset = 181; // default=0
    float make_surf_width_offset = 184; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    float order_ref_event_mult = 187;
    google.protobuf.Timestamp order_ref_event_dttm = 190;
    fixed32 exch_mask = 193; // eligible exchanges (0 = all), a non-zero mask must be in the subset of the SpdrParentOrder exchMask
    TimeInForce time_in_force = 196; // None = do not override parent order;  Any other value cause the values below to supercede the same fields in the parent order
    google.protobuf.Timestamp start_dttm = 199; // [optional] (parent order start time)
    sfixed32 order_duration = 202; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 205; // [optional] (default: 2000-01-01)
    sfixed32 progress_expose_time = 208; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking) (If the order is an Alpha type order, updating this will reset the alpha progression)
    float max_acc_day_wt_vega_ln = 211; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 214; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 217; // accnt day (time weighted) vega offset (target position)
    float max_acc_day_dDelta_ln = 220; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 223; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 226; // accnt day $delta offset (target position)
    float max_exp_day_wt_vega_ln = 229; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 232; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 235; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 238; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 241; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 244; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 247; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 250; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 253; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 256; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 259; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 262; // accnt+symbol day $delta offset (target position)
    float max_exp_day_rMetric6_ln = 265; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 268; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float exp_day_rMetric6_offset = 271; // accnt+expiration day rMetric6 offset (target position)
    float max_sym_day_rMetric7_ln = 274; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 277; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 280; // accnt+symbol day rMetric7 offset (target position)
    float max_grp_day_dDelta_ln = 283; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 286; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 289; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float max_grp_day_vega_ln = 292; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 295; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 298; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 301; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 304; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 307; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 310; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_premium_ratio = 313; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot premium = 0.5x sld premium)
    float max_grp_day_rMetric1_ln = 316; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 319; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 322; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_rMetric1_ratio = 325; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 328; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 331; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 334; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 337; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 340; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 343; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 346; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 349; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_ln = 352; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 355; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 358; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float sym_ema_cxl_dDelta_ln = 361; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 364; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 367; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 370; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    float theo_vol = 373; // client supplied theoretical volatility (used for markup only)
    string accnt_route_code = 376; // accntRoute (overrides accntRoute in the parent order and account config)
    string route_code_alt1 = 379; // alt flow allocation route
    float route_alloc_alt1 = 382; // percentage of flow to allocate to routeCodeAlt1
    string route_code_alt2 = 385; // alt flow allocation route
    float route_alloc_alt2 = 388; // percentage of flow to allocate to routeCodeAlt2
    float cl_arrive_mark = 391; // client specified arrival mark (passed through to ParentExecution; markup only)
    string user_data1 = 394; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 397; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string modified_by = 400; // user who last modified this record
    google.protobuf.Timestamp timestamp = 403; // timestamp of last modification
}


/*
    SpdrParentOrder records are visible in SRSE immediately after receipt.  Parent orders received via FIX, SRSE or SpiderRock GUI tools, or 3rd party vendor systems are all visible in this table.
    Parent orders can be for stocks, futures, options or spreads.  And they can be one-sided (agency) or two-sided (facilitation) orders.  Parent order records should be immutable and not update.
    SpdrParentOrder records are published to the SpiderRock elatic cluster on arrival.
*/    
message SpdrParentOrder {
    message PKey {
        
        sfixed64 parent_number = 10; // SPDR order number
    }

    message DirectedCounterParty {
        
        string client_firm = 703;
    }

    message FaceSide {
        
        sfixed64 face_id = 709;
        string alt_order_id = 712; // alternate order ID (usually clOrdId from client)
        string accnt = 715;
        string client_firm = 718;
        string alt_accnt = 721; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
        FirmType firm_type = 724;
        OrderCapacity order_capacity = 727;
        ShortSaleFlag ssale_flag = 730; // primary short sale flag (single leg orders)
        PositionType position_type = 733; // primary position type (single leg orders)
        double best_price = 736;
        YesNo has_best_price = 739;
        string no_cross_group = 742;
        string exch_trader_id = 745;
        string large_trader_id = 748;
        string trading_location = 751;
        FlipType clearing_flip_type = 754; // clearingFlip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc) [used to override the SR account config delivery details]
        string clearing_flip_firm = 757; // DeliverTo firm (if any)
        string clearing_flip_accnt = 760; // DeliverTo accnt (if any)
    }

    message OrderLegs {
        
        TickerKey ticker = 766; // stock ticker
        BuySell stock_side = 769; // [Buy | Sell | None]
        sfixed32 stock_shares = 772; // number of shares included (zero if none)
        sfixed64 stock_leg_id = 775; // SR stock leg ID
        string alt_stk_leg_id = 778; // client stock leg ID (usually from a FIX order)
        ShortSaleFlag ssale_flag = 781; // stock short sale flag
        ShortSaleFlag ssale_flag_face = 784; // face side short sale flag (if shape=MLegCross)
        float ref_uPrc = 787; // reference underlier price (PrcDe orders)
        int32 num_legs = 790; // number of valid legs below
        OptionKey sec_key1 = 793; // leg #1
        SpdrKeyType sec_type1 = 796;
        uint32 mult1 = 799;
        BuySell side1 = 802;
        sfixed64 leg_id1 = 805; // SR leg Id
        string alt_leg_id1 = 808; // client leg Id (usually from a FIX order)
        PositionType pos_type1 = 811;
        PositionType pos_type_face1 = 814;
        ShortSaleFlag ssale_flag1 = 817;
        ShortSaleFlag ssale_flag_face1 = 820;
        float vega1 = 823;
        double ref_uPrc1 = 826; // reference underlier price (PrcDe orders)
        float ref_delta1 = 829; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt1 = 832; // reference # of earnings moves before expiration
        OptionKey sec_key2 = 835; // leg #2
        SpdrKeyType sec_type2 = 838;
        uint32 mult2 = 841;
        BuySell side2 = 844;
        sfixed64 leg_id2 = 847; // SR leg Id
        string alt_leg_id2 = 850; // client leg Id (usually from a FIX order)
        PositionType pos_type2 = 853;
        PositionType pos_type_face2 = 856;
        ShortSaleFlag ssale_flag2 = 859;
        ShortSaleFlag ssale_flag_face2 = 862;
        float vega2 = 865;
        double ref_uPrc2 = 868; // reference underlier price (PrcDe orders)
        float ref_delta2 = 871; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt2 = 874; // reference # of earnings moves before expiration
        OptionKey sec_key3 = 877; // leg #3
        SpdrKeyType sec_type3 = 880;
        uint32 mult3 = 883;
        BuySell side3 = 886;
        sfixed64 leg_id3 = 889; // SR leg Id
        string alt_leg_id3 = 892; // client leg Id (usually from a FIX order)
        PositionType pos_type3 = 895;
        PositionType pos_type_face3 = 898;
        ShortSaleFlag ssale_flag3 = 901;
        ShortSaleFlag ssale_flag_face3 = 904;
        float vega3 = 907;
        double ref_uPrc3 = 910; // reference underlier price (PrcDe orders)
        float ref_delta3 = 913; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt3 = 916; // reference # of earnings moves before expiration
        OptionKey sec_key4 = 919; // leg #4
        SpdrKeyType sec_type4 = 922;
        uint32 mult4 = 925;
        BuySell side4 = 928;
        sfixed64 leg_id4 = 931; // SR leg Id
        string alt_leg_id4 = 934; // client leg Id (usually from a FIX order)
        PositionType pos_type4 = 937;
        PositionType pos_type_face4 = 940;
        ShortSaleFlag ssale_flag4 = 943;
        ShortSaleFlag ssale_flag_face4 = 946;
        float vega4 = 949;
        double ref_uPrc4 = 952; // reference underlier price (PrcDe orders)
        float ref_delta4 = 955; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt4 = 958; // reference # of earnings moves before expiration
        OptionKey sec_key5 = 961; // leg #5
        SpdrKeyType sec_type5 = 964;
        uint32 mult5 = 967;
        BuySell side5 = 970;
        sfixed64 leg_id5 = 973; // SR leg Id
        string alt_leg_id5 = 976; // client leg Id (usually from a FIX order)
        PositionType pos_type5 = 979;
        PositionType pos_type_face5 = 982;
        ShortSaleFlag ssale_flag5 = 985;
        ShortSaleFlag ssale_flag_face5 = 988;
        float vega5 = 991;
        double ref_uPrc5 = 994; // reference underlier price (PrcDe orders)
        float ref_delta5 = 997; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt5 = 1000; // reference # of earnings moves before expiration
        OptionKey sec_key6 = 1003; // leg #6
        SpdrKeyType sec_type6 = 1006;
        uint32 mult6 = 1009;
        BuySell side6 = 1012;
        sfixed64 leg_id6 = 1015; // SR leg Id
        string alt_leg_id6 = 1018; // client leg Id (usually from a FIX order)
        PositionType pos_type6 = 1021;
        PositionType pos_type_face6 = 1024;
        ShortSaleFlag ssale_flag6 = 1027;
        ShortSaleFlag ssale_flag_face6 = 1030;
        float vega6 = 1033;
        double ref_uPrc6 = 1036; // reference underlier price (PrcDe orders)
        float ref_delta6 = 1039; // reference delta (for PrcDe order handling)
        int32 ref_earn_cnt6 = 1042; // reference # of earnings moves before expiration
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    RunStatus run_status = 100; // original (source) run status [Prod,Beta]
    SpdrActionType spdr_action_type = 103;
    SpdrOrderShape parent_shape = 106; // Parent Shape [Single, Cross, MLeg, MLegCross]
    sfixed32 client_seq_num_in = 109; // inbound client seq number (FIX orders only)
    string alt_order_id = 112; // alternate order ID (usually clOrdId from client)
    string alt_prev_order_id = 115; // alternate prev order ID (usually origClOrdId from client during cxl/replace)
    string alt_cross_id = 118; // alternate cross ID (usually crossId from FIX client)
    string alt_auto_hedge_id = 121; // alternate order ID for child autohedge orders (if any)
    string alt_accnt = 124; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 127; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string src_routing_code = 130; // inbound FIX routing code or SRSE/tool server appID (if any)
    sfixed64 package_id = 133; // references spread orderNumber, if a legged spread order or auto-hedge order
    OptionKey sec_key = 136; // Composite Security Key
    SpdrKeyType sec_type = 139; // Security Type [Stock, Future, Option]
    string security_desc = 142; // additional security description
    string accnt = 145; // SR trading account
    string client_firm = 148; // SR client firm
    SpdrSource spdr_source = 151;
    sfixed64 grouping_code = 154; // unique broker code;broker.pkey = (key + accnt + spdrSource + groupingCode)
    FlipType clearing_flip_type = 157; // clearingFlip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc) [used to override the SR account config delivery details]
    string clearing_flip_firm = 160; // DeliverTo firm (if any)
    string clearing_flip_accnt = 163; // DeliverTo accnt (if any)
    string accnt_route_code = 166; // accntRoute acronym
    string extern_ex_dest = 169; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config) (eg. #Nighthawk)
    string extern_params = 172; // external algo names/parameters (usually just an algo name)
    string strategy = 175; // client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    string user_name = 178; // name of the user entering the order
    YesNo visible_in_sV = 181; // allow order to be visible in SV (do not use for high volume of orders)
    google.protobuf.Timestamp order_dttm = 184; // order entry time (from client;if any)
    BuySell order_side = 187;
    sfixed32 order_size = 190; // maximum fill size (contracts)
    sfixed32 order_active_size = 193; // total activated size (total size released for execution) (-1 = all available size)
    sfixed32 cur_cum_fill_quantity = 196; // set order size = orderSize - Max(0, curCumFillQty - ee.cumFillQty) (used to ensure integrity of submitted cxl/replace orders)
    YesNo add_cum_fill_quantity = 199; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    sfixed32 max_exposure_size = 202; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 205; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 208; // public order size handling: None=algo default; Randomize=randomize public size; MktSize=expose typical market size; FullSize=expose entire order size where possible; FullSizeR=randomize full size
    YesNo can_overlap_cxl_repl = 211; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 214; // Immediate = all size immediately available; TWAP = work from arrival to expiration; VWAP = work order not faster than participation rate
    int32 progress_slice_cnt = 217; // number of slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 220; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 223; // target vwap participation rate (target % of trade activity)
    int32 min_mkt_on_close_pct = 226; // Minimum pct [0 - 100] of order reserved for the on-close (MOC) auction
    TriggerType trigger_type = 229; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 232; // stop/trigger level for parent order to go active (can be either a price or vol)
    AuctionResponder auction_responder = 235; // if set, parent order can be an auction responder
    float max_make_exch_fee = 238; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 241; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    IncExchFee inc_take_exch_fee = 244; // include exchange fee in probability and surface based take limit calculations
    IncExchFee inc_make_exch_fee = 247; // include exchange fee in probability and surface based make limit calculations
    MakeExchRule make_exch_rule = 250; // ActiveMaker exch preference: 'MaxPart' = max participation; 'FeeOrder' = minimize fees [max rebates]; 'ImprvOnly' will only make when improving NBBO; 'RoundRobin' will rotate through exch list; 'ProRataOptim' will post on pro-rata only.
    UPrcCxl cxl_uPrc_range = 253; // cancel parent order if/when outside the uPrice range [ _Halt = also cancel if halted ]
    float min_uBid = 256; // [optional]
    float max_uAsk = 259; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 262; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    float min_option_px = 265; // [optional] option price floor for tied to stock orders
    sfixed32 max_child_orders = 268; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 271; // eligible exchanges (0 = all)
    SpdrStageType spdr_stage_type = 274; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    TimeInForce time_in_force = 277;
    google.protobuf.Timestamp start_dttm = 280; // [optional] (parent order start time)
    sfixed32 order_duration = 283; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 286; // [optional] (default: 2099-01-01)
    StartType start_type = 289; // WaitTrigger associates this order with a triggerGroupId.  The initial wave of child orders from the TriggerGroup will be send when a (final) parent order with startType=TriggerAll or when an external trigger signal is received.
    sfixed64 trigger_group_id = 292; // triggerGroupId is required if startType=WaitTrigger; note that child orders from all parent orders in the trigger group will be organized and released optimally when the triggerGroup is released
    sfixed64 trigger_timestamp = 295; // WaitTrigger trigger timestamp (nanoseconds since epoch)
    sfixed32 progress_timeout = 298; // cancel if [optional] (number of milliseconds)
    ParentOrderHandling parent_order_handling = 301;
    ParentBalanceHandling parent_balance_handling = 304;
    SpdrLimitType order_limit_type = 307;
    SpdrLimitClass take_limit_class = 310; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit), SurfProb  = BEST(LimitPrice, SurfLimit, ProbLimit)
    SpdrLimitClass make_limit_class = 313; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit), SurfProb  = BEST(LimitPrice, SurfLimit, ProbLimit)
    ReachRule take_reach_rule = 316; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 319; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 322; // default=underlier.mid
    float order_ref_delta = 325; // default=option.delta
    float order_ref_gamma = 328; // default=option.gamma
    float order_vol_limit = 331; // Applies if LimitType = Vol[] [uses SR dividends and borrow rates]
    float rate_override = 334; // zero = ignore; > zero = override
    float sdiv_override = 337;
    string ddiv_override = 340; // discrete dividend string override ([yearsToExpiry,divYears:divAmount,divYears:divAmount, ...])
    OverrideCode override_code = 343;
    double order_prc_offset = 346; // default=0 [surface, relX and pegX limit offsets]
    StateModel state_model = 349;
    StateModel u_state_model = 352;
    AlphaType take_alpha_type = 355; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 358; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 361; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if AlphaType = Relative]
    float make_alpha_factor = 364; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if AlphaType = Relative]
    float take_probability = 367; // takeProbLimit = takeProbability [if AlphaType = Static]
    float make_probability = 370; // makeProbLimit = makeProbability [if AlphaType = Static]
    double take_surf_prc_offset = 373; // default=0
    float take_surf_vol_offset = 376; // default=0
    float take_surf_width_offset = 379; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    double make_surf_prc_offset = 382; // default=0
    float make_surf_vol_offset = 385; // default=0
    float make_surf_width_offset = 388; // [-1.x to +1.x]       -1.0 = -0.5 * avgMktWidth, +1.0 = +0.5 * avgMktWidth
    float order_ref_event_mult = 391; // expected underlier abs move (0.01 = 1%) @ orderRefEventDttm
    google.protobuf.Timestamp order_ref_event_dttm = 394; // Date/time of the next event.  Note that events are usually earnings but are not required to be.
    AutoHedge auto_hedge = 397;
    HedgeInst hedge_instrument = 400; // Default=actual underlier (EQT or FUT) [IndexOptions use ETF]; FrontMonth=actual underlier (EQT) or front month (FUT) [IndexOptions use FM Fut]; Stock=hedgeSecKey.TickerKey; Future=hedgeSecKey.ExpiryKey
    ExpiryKey hedge_sec_key = 403; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 406; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 409; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 412; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string extern_hedge_ex_dest = 415; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    string extern_hedge_params = 418; // external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    FirmType firm_type = 421; // used to override firmType in account config
    OrderCapacity order_capacity = 424;
    PositionType position_type = 427;
    ShortSaleFlag ssale_flag = 430; // used to determine stock auto-hedge flags
    sfixed32 locate_quan = 433; // available locate quantity (if selling short)
    string locate_firm = 436; // firm granting the locate (also locate firm used on street FIX orders)
    string no_cross_group = 439;
    string exch_trader_id = 442;
    string large_trader_id = 445;
    string trading_location = 448;
    RMetricSource ref_rMetric1_src = 451;
    RMetricSource ref_rMetric2_src = 454;
    RMetricSource ref_rMetric3_src = 457;
    RMetricSource ref_rMetric4_src = 460;
    RMetricSource ref_rMetric5_src = 463;
    RMetricSource ref_rMetric6_src = 466;
    RMetricSource ref_rMetric7_src = 469;
    float order_ref_rMetric1 = 472; // user supplied RMetric1 value (used in RiskGroupID risk controls) [netRMetric1 = sum(fillQty * orderRefRMetric1 * underlierPerCn)]
    float order_ref_rMetric2 = 475; // user supplied RMetric2 value (used in RiskGroupID risk controls) [netRMetric2 = sum(fillQty * orderRefRMetric2 * underlierPerCn)]
    float order_ref_rMetric3 = 478; // user supplied RMetric3 value (used in RiskGroupID risk controls) [netRMetric3 = sum(fillQty * orderRefRMetric3 * underlierPerCn)]
    float order_ref_rMetric4 = 481; // user supplied RMetric4 value (used in RiskGroupID risk controls) [netRMetric4 = sum(fillQty * orderRefRMetric4 * underlierPerCn)]
    float order_ref_rMetric5 = 484; // user supplied RMetric5 value (used in RiskGroupID risk controls) [netRMetric5 = sum(fillQty * orderRefRMetric5 * underlierPerCn)]
    float order_ref_rMetric6 = 487; // user supplied RMetric6 value (used in ExpDay risk controls) [netRMetric6 = sum(fillQty * orderRefRMetric6 * underlierPerCn)]
    float order_ref_rMetric7 = 490; // user supplied RMetric7 value (used in SymDay risk controls) [netRMetric7 = sum(fillQty * orderRefRMetric7 * underlierPerCn)]
    BuySell lead_side = 493; // for legged orders, which side to lead with.  (optional, None ok)
    double max_completion_slippage = 496; // maximum price slippage to complete an open basket or a cross auction (face side slippage)
    float order_ref_premium = 499; // reference premium (mleg orders only)
    sfixed64 cross_notice_id = 502; // SR CrossNoticeId (from SpdrCrossNotice.crossNoticeId) [required when parentOrderHandling = CrossResponse]
    float theo_vol = 505; // client supplied theoretical volatility (used for markup only)
    float cl_arrive_mark = 508; // client specified arrival mark (passed through to ParentExecution; markup only)
    sfixed64 risk_group_id = 511; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    float max_acc_day_wt_vega_ln = 514; // max accnt day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_acc_day_wt_vega_sh = 517; // max accnt day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_wt_vega_offset = 520; // accnt day (time weighted) vega offset (target position)
    float max_acc_day_dDelta_ln = 523; // max accnt day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter	- offset)
    float max_acc_day_dDelta_sh = 526; // max accnt day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float acc_day_dDelta_offset = 529; // accnt day $delta offset (target position)
    float max_exp_day_wt_vega_ln = 532; // max accnt+expiration day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_exp_day_wt_vega_sh = 535; // max accnt+expiration day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float exp_day_wt_vega_offset = 538; // accnt+expiration day (time weighted) vega offset (target position)
    float max_sym_day_vega_ln = 541; // max acct+symbol day vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_vega_sh = 544; // max acct+symbol day vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_vega_offset = 547; // accnt+symbol day vega offset (target position)
    float max_sym_day_wt_vega_ln = 550; // max acct+symbol day (time weighted) vega long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_wt_vega_sh = 553; // max acct+symbol day (time weighted) vega short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_wt_vega_offset = 556; // accnt+symbol day (time weighted) vega offset (target position)
    float max_sym_day_dDelta_ln = 559; // max acct+symbol day $delta long (positive number;-1=no limit);risk limit = max limit - (current net counter - offset)
    float max_sym_day_dDelta_sh = 562; // max acct+symbol day $delta short (positive number;-1=no limit);risk limit = max limit + (current net counter - offset)
    float sym_day_dDelta_offset = 565; // accnt+symbol day $delta offset (target position)
    float max_exp_day_rMetric6_ln = 568; // max acct+expiration day rMetric6 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_exp_day_rMetric6_sh = 571; // max acct+expiration day rMetric6 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float exp_day_rMetric6_offset = 574; // accnt+expiration day rMetric6 offset (target position)
    float max_sym_day_rMetric7_ln = 577; // max acct+symbol day rMetric7 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_sym_day_rMetric7_sh = 580; // max acct+symbol day rMetric7 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float sym_day_rMetric7_offset = 583; // accnt+symbol day rMetric7 offset (target position)
    float max_grp_day_dDelta_ln = 586; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 589; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 592; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float max_grp_day_vega_ln = 595; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 598; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 601; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 604; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 607; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 610; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 613; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_premium_ratio = 616; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot premium = 0.5x sld premium)
    float max_grp_day_rMetric1_ln = 619; // max acct+riskGroup day rMetric1 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric1_sh = 622; // max acct+riskGroup day rMetric1 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric1_abs = 625; // max acct+riskGroup day rMetric1 abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_rMetric1_ratio = 628; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot rMetric1 = 0.5x sld rMetric1)
    float max_grp_day_rMetric2_ln = 631; // max acct+riskGroup day rMetric2 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric2_sh = 634; // max acct+riskGroup day rMetric2 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric3_ln = 637; // max acct+riskGroup day rMetric3 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric3_sh = 640; // max acct+riskGroup day rMetric3 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric4_ln = 643; // max acct+riskGroup day rMetric4 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric4_sh = 646; // max acct+riskGroup day rMetric4 short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_rMetric5_ln = 649; // max acct+riskGroup day rMetric5 long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_rMetric5_sh = 652; // max acct+riskGroup day rMetric5 short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_ln = 655; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    sfixed32 max_grp_day_contracts_sh = 658; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    sfixed32 max_grp_day_contracts_abs = 661; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float sym_ema_cxl_dDelta_ln = 664; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 667; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 670; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 673; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    google.protobuf.Timestamp last_fill_dttm = 676;
    string user_data1 = 679; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 682; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 685; // client supplied data field; passes through to down stream child orders
    sfixed64 src_timestamp = 688;
    sfixed64 sgw_timestamp = 691;
    google.protobuf.Timestamp timestamp = 694;
    DirectedScope directed_scope = 697;
    repeated DirectedCounterParty directed_counter_party = 700;
    repeated FaceSide face_side = 706;
    repeated OrderLegs order_legs = 763;
}


    
message SpdrParentOrderAggregation {
    message PKey {
        
        string omni_accnt = 10;
        OptionKey sec_key = 13;
        BuySell order_side = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 number_of_orders = 100;
    sfixed32 total_order_size = 103;
}


    
message SpdrParentOrderAllocation {
    message PKey {
        
        sfixed64 parent_number = 10; // SPDR order number
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100;
    string clearing_firm = 103;
    string clearing_accnt = 106;
    string client_tags = 109; // (optional) user defined account tag(s) (eg. tag,tag,tag,tag) [max of 10,000 total chars (including seps)]
    OptionKey sec_key = 112;
    sfixed32 order_size = 115;
    BuySell order_side = 118;
}


/*
    SpdrParentReport records contain the current state of a parent order and update as/when the order state changes.
    SpdrParentReport records are published to the SpiderRock elastic cluster when they reach a terminal state (closed, rejected, filled, etc.)
*/    
message SpdrParentReport {
    message PKey {
        
        sfixed64 parent_number = 10; // SPDR order number
    }

    message FaceLegs {
        
        sfixed64 last_leg_ref_id = 907;
        google.protobuf.Timestamp last_fill_dttm = 910;
        sfixed32 cum_square_qty = 913; // cum spread quantity filled (all legs received)
        double avg_square_prc = 916;
        google.protobuf.Timestamp last_square_dttm = 919;
        sfixed32 cum_partial_qty = 922; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
        ShortSaleFlag ssale_flag = 925; // stock short sale flag
        sfixed32 stock_cum_fill_qty = 928;
        double stock_avg_fill_prc = 931;
        PositionType pos_type1 = 934;
        ShortSaleFlag ssale_flag1 = 937;
        sfixed32 leg_cum_fill_qty1 = 940;
        double leg_avg_fill_prc1 = 943;
        PositionType pos_type2 = 946;
        ShortSaleFlag ssale_flag2 = 949;
        sfixed32 leg_cum_fill_qty2 = 952;
        double leg_avg_fill_prc2 = 955;
        PositionType pos_type3 = 958;
        ShortSaleFlag ssale_flag3 = 961;
        sfixed32 leg_cum_fill_qty3 = 964;
        double leg_avg_fill_prc3 = 967;
        PositionType pos_type4 = 970;
        ShortSaleFlag ssale_flag4 = 973;
        sfixed32 leg_cum_fill_qty4 = 976;
        double leg_avg_fill_prc4 = 979;
        PositionType pos_type5 = 982;
        ShortSaleFlag ssale_flag5 = 985;
        sfixed32 leg_cum_fill_qty5 = 988;
        double leg_avg_fill_prc5 = 991;
        PositionType pos_type6 = 994;
        ShortSaleFlag ssale_flag6 = 997;
        sfixed32 leg_cum_fill_qty6 = 1000;
        double leg_avg_fill_prc6 = 1003;
    }

    message FaceSide {
        
        sfixed64 face_id = 490;
        string alt_order_id = 493; // alternate order ID (usually clOrdId from client)
        string accnt = 496;
        string client_firm = 499;
        string alt_accnt = 502; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
        FirmType firm_type = 505;
        OrderCapacity order_capacity = 508;
        ShortSaleFlag ssale_flag = 511; // primary short sale flag (single leg orders)
        PositionType position_type = 514; // primary position type (single leg orders)
        sfixed32 firm_position = 517;
        sfixed32 open_sell_sh = 520;
        sfixed32 locate_quan = 523; // available locate quantity (if selling short) @ arrival time
        string locate_source = 526; // locate ID code (if any)
        string no_cross_group = 529;
        string exch_trader_id = 532;
        string large_trader_id = 535;
        string trading_location = 538;
        string clearing_firm = 541; // clearing firm [from AccountConfig; may not match parent execution]
        string clearing_accnt = 544; // clearing firm [from AccountConfig; may not match parent execution]
        FlipType clearing_flip_type = 547; // Clearing Flip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc) [used to override the SR account config delivery details]
        string clearing_flip_firm = 550; // Clearing Flip Firm (if any)
        string clearing_flip_accnt = 553; // Clearing Flip Account (if any)
        string cat_src_brkr_iMID = 556; // B/D firm FDID (only exists if a B/D is the source) (supplied by FINRA fbo client) (from ClientFirm.catSrcBrkrIMID)
        CatAccntType cat_src_accnt_type = 559; // CAT account holder type (from AccountConfig.catSrcAccntType [Eqt, Opt])
        CatFirmType cat_src_firm_type = 562; // CAT source type (from AccountConfig.catSrcType [Eqt, Opt])
        sfixed32 cum_fill_quantity = 565;
        double avg_fill_price = 568;
        sfixed32 leaves_qty = 571;
        sfixed64 last_fill_number = 574;
        google.protobuf.Timestamp last_fill_dttm = 577;
    }

    message OrderLegs {
        
        sfixed64 last_leg_ref_id = 583;
        google.protobuf.Timestamp last_fill_dttm = 586;
        sfixed32 cum_square_qty = 589; // cum spread quantity filled (all legs received)
        double avg_square_prc = 592;
        google.protobuf.Timestamp last_square_dttm = 595;
        sfixed32 cum_partial_qty = 598; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
        sfixed32 review_cum_square_qty = 601; // review cum spread quantity filled (all legs received)
        double review_avg_square_prc = 604;
        google.protobuf.Timestamp review_last_square_dttm = 607;
        sfixed32 review_cum_partial_qty = 610; // review cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
        TickerKey ticker = 613; // stock ticker
        BuySell stock_side = 616; // [Buy | Sell | None]
        sfixed32 stock_shares = 619; // number of shares included (zero if none)
        sfixed64 stock_leg_id = 622; // SR stock leg Id
        string alt_stk_leg_id = 625; // client stock leg Id (usually from a FIX order)
        string review_stk_leg_id = 628; // client review stock leg Id (usually from a FIX order)
        string review_stk_leg_alt_id = 631; // client review stock leg alt Id (usually from a FIX order)
        ShortSaleFlag ssale_flag = 634; // stock short sale flag
        sfixed32 stock_cum_fill_qty = 637;
        double stock_avg_fill_prc = 640;
        sfixed32 stock_review_cum_fill_qty = 643;
        double stock_review_avg_fill_prc = 646;
        int32 num_legs = 649; // number of valid legs below
        OptionKey sec_key1 = 652; // leg #1
        SpdrKeyType sec_type1 = 655;
        uint32 mult1 = 658;
        BuySell side1 = 661;
        sfixed64 leg_id1 = 664; // SR leg Id
        string alt_leg_id1 = 667; // client leg Id (usually from a FIX order)
        string review_leg_id1 = 670; // client review leg Id (usually from a FIX order)
        string review_leg_alt_id1 = 673; // client review leg alt Id (usually from a FIX order)
        PositionType pos_type1 = 676;
        ShortSaleFlag ssale_flag1 = 679;
        sfixed32 leg_cum_fill_qty1 = 682;
        double leg_avg_fill_prc1 = 685;
        sfixed32 leg_review_cum_fill_qty1 = 688;
        double leg_review_avg_fill_prc1 = 691;
        OptionKey sec_key2 = 694; // leg #2
        SpdrKeyType sec_type2 = 697;
        uint32 mult2 = 700;
        BuySell side2 = 703;
        sfixed64 leg_id2 = 706; // SR leg Id
        string alt_leg_id2 = 709; // client leg Id (usually from a FIX order)
        string review_leg_id2 = 712; // client review leg Id (usually from a FIX order)
        string review_leg_alt_id2 = 715; // client review leg alt Id (usually from a FIX order)
        PositionType pos_type2 = 718;
        ShortSaleFlag ssale_flag2 = 721;
        sfixed32 leg_cum_fill_qty2 = 724;
        double leg_avg_fill_prc2 = 727;
        sfixed32 leg_review_cum_fill_qty2 = 730;
        double leg_review_avg_fill_prc2 = 733;
        OptionKey sec_key3 = 736; // leg #3
        SpdrKeyType sec_type3 = 739;
        uint32 mult3 = 742;
        BuySell side3 = 745;
        sfixed64 leg_id3 = 748; // SR leg Id
        string alt_leg_id3 = 751; // client leg Id (usually from a FIX order)
        string review_leg_id3 = 754; // client review leg Id (usually from a FIX order)
        string review_leg_alt_id3 = 757; // client review leg alt Id (usually from a FIX order)
        PositionType pos_type3 = 760;
        ShortSaleFlag ssale_flag3 = 763;
        sfixed32 leg_cum_fill_qty3 = 766;
        double leg_avg_fill_prc3 = 769;
        sfixed32 leg_review_cum_fill_qty3 = 772;
        double leg_review_avg_fill_prc3 = 775;
        OptionKey sec_key4 = 778; // leg #4
        SpdrKeyType sec_type4 = 781;
        uint32 mult4 = 784;
        BuySell side4 = 787;
        sfixed64 leg_id4 = 790; // SR leg Id
        string alt_leg_id4 = 793; // client leg Id (usually from a FIX order)
        string review_leg_id4 = 796; // client review leg Id (usually from a FIX order)
        string review_leg_alt_id4 = 799; // client review leg alt Id (usually from a FIX order)
        PositionType pos_type4 = 802;
        ShortSaleFlag ssale_flag4 = 805;
        sfixed32 leg_cum_fill_qty4 = 808;
        double leg_avg_fill_prc4 = 811;
        sfixed32 leg_review_cum_fill_qty4 = 814;
        double leg_review_avg_fill_prc4 = 817;
        OptionKey sec_key5 = 820; // leg #5
        SpdrKeyType sec_type5 = 823;
        uint32 mult5 = 826;
        BuySell side5 = 829;
        sfixed64 leg_id5 = 832; // SR leg Id
        string alt_leg_id5 = 835; // client leg Id (usually from a FIX order)
        string review_leg_id5 = 838; // client review leg Id (usually from a FIX order)
        string review_leg_alt_id5 = 841; // client review leg alt Id (usually from a FIX order)
        PositionType pos_type5 = 844;
        ShortSaleFlag ssale_flag5 = 847;
        sfixed32 leg_cum_fill_qty5 = 850;
        double leg_avg_fill_prc5 = 853;
        sfixed32 leg_review_cum_fill_qty5 = 856;
        double leg_review_avg_fill_prc5 = 859;
        OptionKey sec_key6 = 862; // leg #6
        SpdrKeyType sec_type6 = 865;
        uint32 mult6 = 868;
        BuySell side6 = 871;
        sfixed64 leg_id6 = 874; // SR leg Id
        string alt_leg_id6 = 877; // client leg Id (usually from a FIX order)
        string review_leg_id6 = 880; // client review leg Id (usually from a FIX order)
        string review_leg_alt_id6 = 883; // client review leg alt Id (usually from a FIX order)
        PositionType pos_type6 = 886;
        ShortSaleFlag ssale_flag6 = 889;
        sfixed32 leg_cum_fill_qty6 = 892;
        double leg_avg_fill_prc6 = 895;
        sfixed32 leg_review_cum_fill_qty6 = 898;
        double leg_review_avg_fill_prc6 = 901;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 report_number = 100;
    SpdrOrderShape parent_shape = 103;
    int32 record_version = 106;
    RecordSource record_source = 109;
    int32 parent_version = 112; // SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    sfixed64 base_parent_number = 115; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 prev_parent_number = 118; // SPDR order number (order being cancelled/replaced) (zero if none)
    sfixed64 next_parent_number = 121; // SPDR order number (next order in cxl/replace sequence) (zero if none)
    google.protobuf.Timestamp prev_parent_create_dttm = 124; // none/undefined if first order in a sequence
    sfixed32 prev_parent_cum_fill_qty = 127;
    sfixed32 client_seq_num_in = 130; // inbound client seq number (FIX orders only)
    string alt_order_id = 133; // usually client clOrdId (from FIX or SRSE)
    string alt_prev_order_id = 136; // usually previous/orig (cxl/repl) client clOrdId (from FIX or SRSE)
    string alt_cross_id = 139; // client crossId (from FIX or SRSE)
    string alt_cancel_id = 142; // client cancelId (from FIX or SRSE) [identifies the message responsible for user cxl actions]
    string src_routing_code = 145; // inbound FIX routing code, if any
    sfixed64 package_id = 148; // references spread orderNumber, if a legged spread order
    sfixed64 prev_package_id = 151;
    sfixed64 risk_group_id = 154; // all orders with the same riskGroupId share a common set of risk counters; .Grp. risk limits apply to these shared counters
    sfixed64 trigger_group_id = 157; // WaitTrigger group Id
    OptionKey sec_key = 160;
    SpdrKeyType sec_type = 163;
    string accnt = 166; // SR trading account
    string client_firm = 169; // SR client firm
    string client_accnt = 172; // client assigned "long" account string (from AccountConfig) [used to map between client and SR account strings]
    string user_name = 175; // name of the user entering the order
    string alt_accnt = 178; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 181; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string exec_broker_accnt = 184; // account at executing broker (if any) [from accountConfig]
    string exec_broker_cl_firm = 187; // client/firm at executing broker (if any) [from accountConfig]
    string exec_broker_user_name = 190; // userName at execution broker (if any) [from accountConfig]
    SpdrSource spdr_source = 193; // parent order source enum
    sfixed64 grouping_code = 196; // unique broker code; broker.pkey = (key + accnt + spdrSource + groupingCode)
    string engine_name = 199; // execution engine (partition) handling this parent order
    google.protobuf.Timestamp order_dttm = 202;
    BuySell order_side = 205;
    PriceType price_type = 208;
    sfixed32 order_size = 211;
    sfixed32 order_active_size = 214; // total activated size (total size released for execution) (-1 = all available size)
    SpdrStageType spdr_stage_type = 217; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    ParentOrderHandling parent_order_handling = 220;
    ParentBalanceHandling parent_balance_handling = 223;
    double limit_price = 226; // limit price @ order arrival
    SpdrLimitType order_limit_type = 229;
    SpdrLimitClass take_limit_class = 232;
    SpdrLimitClass make_limit_class = 235;
    StartType start_type = 238; // WaitTrigger associates this order with a triggerGroupId.  The initial wave of child orders from the TriggerGroup will be simultaneously delivered when a trigger signal is received.
    TimeInForce time_in_force = 241;
    google.protobuf.Timestamp start_dttm = 244; // [optional] (default: 2000-01-01)
    google.protobuf.Timestamp good_till_dttm = 247; // [optional] (default: 2099-01-01)
    AutoHedge auto_hedge = 250;
    HedgeInst hedge_instrument = 253; // Default=underlier (EQT or FUT) [Index Options use ETF]; FrontMonth=underlier (EQT) or front month (FUT) [Index Options use FM Fut]; Stock=hedgeSecKey; Future=hedgeSecKey
    ExpiryKey hedge_sec_key = 256;
    SpdrKeyType hedge_sec_type = 259;
    float hedge_beta_ratio = 262; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    HedgeScope hedge_scope = 265; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 268;
    google.protobuf.Timestamp order_create_dttm = 271; // order send time
    float order_create_latency = 274; // order send to order ack latency (in milliseconds)
    OrderCancelReason cancel_reason = 277;
    google.protobuf.Timestamp order_cancel_dttm = 280; // order cancel time
    float order_cancel_latency = 283; // cancel send to cancel ack latency (in milliseconds)
    google.protobuf.Timestamp order_working_dttm = 286; // order send ack time (acknowleged working/new) (first exec report indicating the order is active)
    google.protobuf.Timestamp order_closed_dttm = 289; // order terminated ack time (first exec report indicating the order is in a terminal state;eg. cancelled, filled, rejected, etc)
    string order_closed_text = 292;
    SpdrOrderStatus spdr_order_status = 295;
    SpdrCloseReason spdr_close_reason = 298;
    SpdrRejectReason spdr_reject_reason = 301;
    FirmType firm_type = 304;
    OrderCapacity order_capacity = 307;
    ShortSaleFlag ssale_flag = 310; // primary short sale flag (single leg orders)
    PositionType position_type = 313; // primary position type (single leg orders)
    sfixed32 arrive_firm_pos = 316; // firm position [resolved @ parent order arrival]
    ShortSaleFlag arrive_sSale_flag = 319; // primary short sale flag (single leg orders) [resolved @ parent order arrival; short if any of order size would be short]
    string no_cross_group = 322;
    string exch_trader_id = 325;
    string large_trader_id = 328;
    string trading_location = 331;
    sfixed32 firm_position = 334;
    sfixed32 open_sell_sh = 337;
    sfixed32 locate_quan = 340; // available locate quantity (if selling short) @ arrival time
    string locate_source = 343; // locate ID code (if any)
    string clearing_firm = 346; // clearing firm [from AccountConfig; may not match parent execution]
    string clearing_accnt = 349; // clearing firm [from AccountConfig; may not match parent execution]
    FlipType clearing_flip_type = 352; // Clearing Flip Type [from ParentOrder then AccountConfig; may not match parent execution]
    string clearing_flip_firm = 355; // Clearing Flip Firm [from ParentOrder then AccountConfig; may not match parent execution]
    string clearing_flip_accnt = 358; // Clearing Flip Account [from ParentOrder then AccountConfig; may not match parent execution]
    string cat_src_brkr_iMID = 361; // B/D firm FDID (only exists if a B/D is the source) (supplied by FINRA fbo client) (from ClientFirm.catSrcBrkrIMID)
    CatAccntType cat_src_accnt_type = 364; // CAT account holder type (from AccountConfig.catSrcAccntType [Eqt, Opt])
    CatFirmType cat_src_firm_type = 367; // CAT source type (from AccountConfig.catSrcType [Eqt, Opt])
    CatDeptType cat_dest_dept_type = 370; // Infer from ParentOrder Agency or ATS (BlockInitiate/BlockRespond)
    sfixed32 cum_fill_quantity = 373;
    double avg_fill_price = 376;
    double avg_fill_uPrice = 379;
    sfixed32 leaves_qty = 382;
    sfixed64 last_fill_number = 385;
    google.protobuf.Timestamp last_fill_dttm = 388;
    string review_cl_ord_id = 391;
    sfixed32 review_order_size = 394;
    sfixed32 review_cum_fill_quantity = 397;
    double review_avg_fill_price = 400;
    sfixed32 review_leaves_qty = 403;
    sfixed32 progress_timeout = 406; // cancel if [optional] (number of milliseconds)
    MaxProgress max_progress = 409;
    string max_progress_detail = 412;
    google.protobuf.Timestamp max_progress_time = 415;
    sfixed32 num_child_orders = 418; // [is390Eligible] (numChildOrders > 0 if parent order is 390 Eligible and also generated at least 1 child order)
    double nbbo_bid = 421; // best nbbo bid @ arrival time
    double nbbo_ask = 424; // best nbbo ask @ arrival time
    sfixed32 nbbo_bid_sz = 427; // public cumulative bid size @ nbboBid
    sfixed32 nbbo_ask_sz = 430; // public cumulative ask size @ nbboAsk
    MktStance mkt_stance = 433;
    string parent_strategy = 436; // client strategy [usually client supplied]
    TickerKey ticker = 439; // underlier (option only)
    float tick_value = 442; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 445; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 448;
    float notional_mult = 451;
    string security_iD = 454; // from ProductDefinition.securityID
    string security_desc = 457; // from ProductDefinition.securityDesc
    string product_group = 460; // from ProductDefinition.productGroup
    ProductClass product_class = 463; // from ProductDefinition.productClass
    ExpiryKey und_key = 466; // from ProductDefinition.undKey
    SpdrKeyType und_type = 469; // from ProductDefinition.undType
    string u_sec_desc = 472; // [options only] underlier security description
    PriceFormat price_format = 475;
    string user_data1 = 478; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 481; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    google.protobuf.Timestamp timestamp = 484;
    repeated FaceLegs face_legs = 904;
    repeated FaceSide face_side = 487;
    repeated OrderLegs order_legs = 580;
}


/*
    SpdrParentReviewRequest records created when a parent order is submitted with StageType=StageReview.  These records indicate that an external review of the parent order has been requested.
*/    
message SpdrParentReviewRequest {
    message PKey {
        
        sfixed64 parent_number = 10; // SPDR order number
    }

    message OrderLegs {
        
        TickerKey ticker = 202; // stock ticker
        BuySell stock_side = 205; // [Buy | Sell | None]
        sfixed32 stock_shares = 208; // number of shares included (zero if none)
        sfixed64 stock_leg_id = 211; // SR stock leg ID
        string alt_stk_leg_id = 214; // client stock leg ID (usually from a FIX order)
        ShortSaleFlag ssale_flag = 217; // stock short sale flag
        int32 num_legs = 220; // number of valid legs below
        OptionKey sec_key1 = 223; // leg #1
        SpdrKeyType sec_type1 = 226;
        uint32 mult1 = 229;
        BuySell side1 = 232;
        sfixed64 leg_id1 = 235; // SR leg Id
        string alt_leg_id1 = 238; // client leg Id (usually from a FIX order)
        PositionType pos_type1 = 241;
        ShortSaleFlag ssale_flag1 = 244;
        OptionKey sec_key2 = 247; // leg #2
        SpdrKeyType sec_type2 = 250;
        uint32 mult2 = 253;
        BuySell side2 = 256;
        sfixed64 leg_id2 = 259; // SR leg Id
        string alt_leg_id2 = 262; // client leg Id (usually from a FIX order)
        PositionType pos_type2 = 265;
        ShortSaleFlag ssale_flag2 = 268;
        OptionKey sec_key3 = 271; // leg #3
        SpdrKeyType sec_type3 = 274;
        uint32 mult3 = 277;
        BuySell side3 = 280;
        sfixed64 leg_id3 = 283; // SR leg Id
        string alt_leg_id3 = 286; // client leg Id (usually from a FIX order)
        PositionType pos_type3 = 289;
        ShortSaleFlag ssale_flag3 = 292;
        OptionKey sec_key4 = 295; // leg #4
        SpdrKeyType sec_type4 = 298;
        uint32 mult4 = 301;
        BuySell side4 = 304;
        sfixed64 leg_id4 = 307; // SR leg Id
        string alt_leg_id4 = 310; // client leg Id (usually from a FIX order)
        PositionType pos_type4 = 313;
        ShortSaleFlag ssale_flag4 = 316;
        OptionKey sec_key5 = 319; // leg #5
        SpdrKeyType sec_type5 = 322;
        uint32 mult5 = 325;
        BuySell side5 = 328;
        sfixed64 leg_id5 = 331; // SR leg Id
        string alt_leg_id5 = 334; // client leg Id (usually from a FIX order)
        PositionType pos_type5 = 337;
        ShortSaleFlag ssale_flag5 = 340;
        OptionKey sec_key6 = 343; // leg #6
        SpdrKeyType sec_type6 = 346;
        uint32 mult6 = 349;
        BuySell side6 = 352;
        sfixed64 leg_id6 = 355; // SR leg Id
        string alt_leg_id6 = 358; // client leg Id (usually from a FIX order)
        PositionType pos_type6 = 361;
        ShortSaleFlag ssale_flag6 = 364;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrOrderShape parent_shape = 100; // Parent Shape [Single, Cross, MLeg, MLegCross]
    string alt_order_id = 103; // alternate order ID (usually clOrdId from client)
    string alt_prev_order_id = 106; // alternate prev order ID (usually origClOrdId from client during cxl/replace)
    string alt_accnt = 109; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 112; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    OptionKey sec_key = 115; // Composite Security Key
    SpdrKeyType sec_type = 118; // Security Type [Stock, Future, Option]
    string security_desc = 121; // additional security description
    string accnt = 124; // SR trading account
    string client_firm = 127; // SR client firm
    SpdrSource spdr_source = 130; // from original parent order
    sfixed64 grouping_code = 133; // from original parent order
    string strategy = 136; // client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    string user_name = 139; // name of the user entering the order
    BuySell order_side = 142;
    sfixed32 order_size = 145; // maximum fill size (contracts)
    FirmType firm_type = 148; // used to override firmType in account config
    OrderCapacity order_capacity = 151;
    PositionType position_type = 154;
    ShortSaleFlag ssale_flag = 157; // used to determine stock auto-hedge flags
    sfixed32 locate_quan = 160; // available locate quantity (if selling short)
    string locate_firm = 163; // firm granting the locate (also locate firm used on street FIX orders)
    string no_cross_group = 166;
    string exch_trader_id = 169;
    string large_trader_id = 172;
    string trading_location = 175;
    ExpiryKey hedge_sec_key = 178;
    SpdrKeyType hedge_sec_type = 181;
    float hedge_units = 184;
    string user_data1 = 187; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 190; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 193; // client supplied data field; passes through to down stream child orders
    google.protobuf.Timestamp timestamp = 196;
    repeated OrderLegs order_legs = 199;
}


/*
    SpdrParentReviewResponse records are created when a parent order review request is completes
*/    
message SpdrParentReviewResponse {
    message PKey {
        
        sfixed64 parent_number = 10; // SPDR order number
    }

    message OrderLegs {
        
        TickerKey ticker = 202; // stock ticker
        BuySell stock_side = 205; // [Buy | Sell | None]
        sfixed32 stock_shares = 208; // number of shares included (zero if none)
        ShortSaleFlag ssale_flag = 211; // will override value on the original parent order (if != None)
        string review_stk_leg_id = 214; // client review stock leg Id
        string review_stk_leg_alt_id = 217; // client review stock leg alt Id
        int32 num_legs = 220; // number of valid legs below
        OptionKey sec_key1 = 223; // leg #1
        SpdrKeyType sec_type1 = 226;
        uint32 mult1 = 229;
        BuySell side1 = 232;
        PositionType pos_type1 = 235; // will override value on the original parent order (if != None)
        ShortSaleFlag ssale_flag1 = 238; // will override value on the original parent order (if != None)
        string review_leg_id1 = 241; // client review leg #1 Id
        string review_leg_alt_id1 = 244; // client review leg #1 alt Id
        OptionKey sec_key2 = 247; // leg #2
        SpdrKeyType sec_type2 = 250;
        uint32 mult2 = 253;
        BuySell side2 = 256;
        PositionType pos_type2 = 259;
        ShortSaleFlag ssale_flag2 = 262;
        string review_leg_id2 = 265; // client review leg #2 Id
        string review_leg_alt_id2 = 268; // client review leg #2 alt Id
        OptionKey sec_key3 = 271; // leg #3
        SpdrKeyType sec_type3 = 274;
        uint32 mult3 = 277;
        BuySell side3 = 280;
        PositionType pos_type3 = 283;
        ShortSaleFlag ssale_flag3 = 286;
        string review_leg_id3 = 289; // client review leg #3 Id
        string review_leg_alt_id3 = 292; // client review leg #3 alt Id
        OptionKey sec_key4 = 295; // leg #4
        SpdrKeyType sec_type4 = 298;
        uint32 mult4 = 301;
        BuySell side4 = 304;
        PositionType pos_type4 = 307;
        ShortSaleFlag ssale_flag4 = 310;
        string review_leg_id4 = 313; // client review leg #4 Id
        string review_leg_alt_id4 = 316; // client review leg #4 alt Id
        OptionKey sec_key5 = 319; // leg #5
        SpdrKeyType sec_type5 = 322;
        uint32 mult5 = 325;
        BuySell side5 = 328;
        PositionType pos_type5 = 331;
        ShortSaleFlag ssale_flag5 = 334;
        string review_leg_id5 = 337; // client review leg #5 Id
        string review_leg_alt_id5 = 340; // client review leg #5 alt Id
        OptionKey sec_key6 = 343; // leg #6
        SpdrKeyType sec_type6 = 346;
        uint32 mult6 = 349;
        BuySell side6 = 352;
        PositionType pos_type6 = 355;
        ShortSaleFlag ssale_flag6 = 358;
        string review_leg_id6 = 361; // client review leg #6 Id
        string review_leg_alt_id6 = 364; // client review leg #6 alt Id
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrOrderShape parent_shape = 100; // Parent Shape [Single, Cross, MLeg, MLegCross]
    string alt_order_id = 103; // alternate order ID (usually clOrdId from client)
    string alt_prev_order_id = 106; // alternate prev order ID (usually origClOrdId from client during cxl/replace)
    string alt_accnt = 109; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 112; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    OptionKey sec_key = 115; // Composite Security Key
    SpdrKeyType sec_type = 118; // Security Type [Stock, Future, Option]
    string security_desc = 121; // additional security description
    string accnt = 124; // SR trading account
    string client_firm = 127; // SR client firm
    SpdrSource spdr_source = 130; // from original parent order
    sfixed64 grouping_code = 133; // from original parent order
    string client_cl_ord_id = 136; // client ClOrdId (if handled by ClientGateway)
    string src_routing_code = 139; // RoutingCode (if handled by ClientGateway)
    string strategy = 142; // client-supplied strategy string;visible on SpiderRock GUI tools and other order reports.
    string user_name = 145; // name of the user entering the order
    BuySell order_side = 148;
    sfixed32 order_size = 151; // maximum fill size (contracts) [can be less than requested]
    sfixed32 order_active_size = 154;
    ReviewResult review_result = 157;
    string review_text = 160; // review release / reject text (will be showed to the user submitting the parent order)
    SpdrSource response_spdr_source = 163; // source of the response (SRSE, FIX, etc)
    string response_cl_ord_id = 166; // review request / response clOrdID (if any)
    FirmType firm_type = 169; // will override firmType on the original parent order (if != None)
    OrderCapacity order_capacity = 172; // will override orderCapacity on the original parent order (if != None)
    PositionType position_type = 175; // will override positionType on the original parent order (if != None)
    ShortSaleFlag ssale_flag = 178; // will override ssaleFlag on the original parent order (if != None)
    sfixed32 locate_quan = 181; // will override locateQuan on the original parent order (if != None)
    string locate_firm = 184; // will override locateFirm on the original parent order (if != None)
    string user_data1 = 187; // will override value on original parent order (if != null)
    string user_data2 = 190; // will override value on the original parent order (if != null)
    string child_data = 193; // will override value on the original parent order (if != null)
    google.protobuf.Timestamp timestamp = 196;
    repeated OrderLegs order_legs = 199;
}


    
message SpdrPrintHistoryRequest {


    MbusInfo descriptor = 1;
    
    ExpiryKey sec_key = 100;
    SpdrKeyType sec_type = 103; // Stock, Future, or MLeg (spread)
    sfixed32 request_iD = 106;
    GetAction action = 109;
    sfixed64 high_water_mark = 112;
    string user_name = 115;
    google.protobuf.Timestamp timestamp = 118;
}


/*
    SpdrReleaseWaitTrigger records are used to trigger the release of parent orders submitted with startType=WaitTrigger.  Note that all parent orders in a risk group will be triggered together.
*/    
message SpdrReleaseWaitTrigger {
    message PKey {
        
        string accnt = 10;
        sfixed64 trigger_group_id = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string modified_by = 100; // user who last modified this record
    google.protobuf.Timestamp timestamp = 103; // timestamp of last modification
}


    
message SpdrReportRequest {


    MbusInfo descriptor = 1;
    
    string accnt = 100;
    ToolType tool_type = 103;
    sfixed64 rfq_seq_number = 106;
    sfixed64 stock_seq_number = 109;
    sfixed64 future_seq_number = 112;
    sfixed64 option_seq_number = 115;
    sfixed64 multi_leg_seq_number = 118;
    sfixed64 risk_grp_ctrl_seq_number = 121;
    sfixed64 product_seq_number = 124;
    sfixed64 tick_size_seq_number = 127;
    GetAction action = 130;
}


/*
    SpdrRiskControl records are used to establish supervisory control of equity, and equity option trading in SpiderRock execution engines.  These records are only viewable and editable by RiskAdmin users with access to the control record account(s).
*/    
message SpdrRiskControl {
    message PKey {
        
        string accnt = 10;
        string risk_symbol = 13; // underlying symbol (e.g. MSFT, *, SPY, @CL) or symbol/expiration (eg. @ES/EXP, @ES/2016-02-24)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo disabled = 100; // used to disable the futures limit
    sfixed32 max_stk_shares = 103; // number of stock shares per parent order (reject if violated)
    float max_stk_money = 106; // currency amount of stock per parent order (reject if violated)
    sfixed32 max_fut_contracts = 109; // number of futures contracts per parent order (reject if violated)
    float max_fut_money = 112; // notional value of futures per parent order (reject if violated)
    sfixed32 max_opt_contracts = 115; // number of option contracts per parent order (reject if violated)
    float max_opt_money = 118; // total option premium per parent order (reject if violated)
    float max_opt_notional = 121; // notional value in option underlying per parent order (reject if violated)
    float max_day_haircut = 124; // day aggregate addition to haircut (risk hold if violated)
    float max_day_dDelta_ln = 127; // open long $Delta per trading session (risk hold if violated)
    float max_day_dDelta_sh = 130; // open short $Delta per trading session (risk hold if violated)
    float max_day_dDelta_abs = 133; // absolute $Delta, |ddBot| + |ddSld| position per trading session (risk hold if violated)
    float max_day_vega_ln = 136; // open long Vega per trading session (risk hold if violated)
    float max_day_vega_sh = 139; // open short Vega per trading session (risk hold if violated)
    float max_day_vega_abs = 142; // open absolute Vega, |VeBot| + |VeSld| per trading session (risk hold if violated)
    float max_day_wt_vega_ln = 145; // open long WtVega per trading session (risk hold if violated)
    float max_day_wt_vega_sh = 148; // open short WtVega per trading session (risk hold if violated)
    float max_day_wt_vega_abs = 151; // open absolute WtVega, |WtVeBot| + |WtVeSld| per trading session (risk hold if violated)
    float max_day_notional_ln = 154; // notional value of open long futures per trading session (reject on arrival / risk hold)
    float max_day_notional_sh = 157; // notional value in open short futures per trading session (reject on arrival / risk hold)
    float max_day_notional_abs = 160; // notional value total of long and short futures traded (reject on arrival / risk hold)
    sfixed32 max_day_stk_sh_abs = 163; // number of open long and short stock positions per trading session (reject on arrival / risk hold)
    sfixed32 max_day_fut_cn_abs = 166; // number of open long and short futures positions per trading session (reject on arrival / risk hold)
    sfixed32 max_day_opt_cn_abs = 169; // number of open long and short option positions per trading session (reject on arrival / risk hold)
    string modified_by = 172; // user who last modified this record
    google.protobuf.Timestamp timestamp = 175; // timestamp of last modification
    float lim_up_stk_collar_pct = 178; // Stock up price collar limit reject range - limPrc <= stkAskPrc * (1.0 + limUpStkCollarPct)
    float lim_dn_stk_collar_pct = 181; // Stock dn price collar limit reject range - limPrc >= stkBidPrc * (1.0 - limDnStkCollarPct)
    float lim_up_opt_collar_pct = 184; // Option up price collar limit reject range - limPrc <= optAskPrc * (1.0 + limUpOptCollarPct)
    float lim_dn_opt_collar_pct = 187; // Option dn price collar limit reject range - limPrc >= optBidPrc * (1.0 - limDnOptCollarPct)
    float lim_up_fut_collar_pct = 190; // Future up price collar limit reject range - limPrc <= futAskPrc * (1.0 + limUpFutCollarPct)
    float lim_dn_fut_collar_pct = 193; // Future dn price collar limit reject range - limPrc >= futBidPrc * (1.0 - limDnFutCollarPct)
}


/*
    SpdrRiskExecution records are published every time a SpdrParentExecution record is published
*/    
message SpdrRiskExecution {
    message PKey {
        
        sfixed64 fill_number = 10; // SpiderRock execution number (globally unique over trailing 10 days)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    int32 version = 100; // record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    ExecStatus exec_status = 103; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    ExecShape exec_shape = 106;
    sfixed64 package_id = 109; // SR package Id
    sfixed64 parent_number = 112; // SR parent number
    int32 parent_version = 115; // SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    sfixed64 base_parent_number = 118; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 cl_ord_id = 121; // SR child order clOrdID resulting in fill
    sfixed64 risk_group_id = 124; // riskGroupId (parent order group ID) for this execution report
    FaceSide face_side = 127; // facilitation side (if any)
    FaceShape face_shape = 130; // CrossCust = split broker / cust side, CrossFace = split broker / face side, CrossBoth = single broker cross
    SpdrOrderShape parent_shape = 133; // shape of originating parent order
    OptionKey sec_key = 136; // execution security key
    SpdrKeyType sec_type = 139; // execution security type [Stock, Future, Option]
    TickerKey ticker = 142; // base stock key (used for symbol risk aggregation)
    string accnt = 145; // SpiderRock trading accnt [broker pkey]
    string client_firm = 148; // SR client firm
    SpdrSource spdr_source = 151; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 154; // SpiderRock parent broker number [broker pkey]
    string engine_name = 157; // SpiderRock execution engine that handled the parent order
    ExecRole exec_role = 160; // SpiderRock relationship to this execution record
    string child_order_handling = 163; // child order handling string from the algo that generated the child order responsible for this fill
    ChildHandler child_algo_handler = 166; // algo handler for this child order
    ShortSaleFlag child_sSale_flag = 169; // short sale flag
    string user_name = 172; // user name associated with the parent order
    BuySell order_side = 175; // order side
    SpdrOrderStatus spdr_order_status = 178;
    SpdrCloseReason spdr_close_reason = 181;
    sfixed32 cum_fill_quantity = 184; // cumulative fills (this parent number only)
    double avg_fill_price = 187;
    sfixed32 cum_leg_fill_quantity = 190; // cumulative fills (spread only)
    double avg_leg_fill_price = 193;
    sfixed32 leaves_qty = 196;
    PriceType price_type = 199;
    FirmType firm_type = 202; // child order firm type [Customer, ProCust, Firm, MM, etc]
    string pri_agg_group = 205; // primary aggregation group
    string sec_agg_group = 208; // secondary aggregation group
    google.protobuf.Timestamp fill_transact_dttm = 211; // transaction date/time as reported by exchange or down stream broker
    google.protobuf.Timestamp fill_dttm = 214; // Date/time of fill arrival (SRDateTime)
    string fill_exch = 217; // ExDest code from child order execution report
    string fill_exec_id = 220; // street side execution Id
    string fill_exec_ref_id = 223; // street side execution ref Id (only used when busting an execution)
    sfixed64 fill_leg_ref_id = 226; // legRefId for multileg fills
    sfixed32 fill_leg_ratio = 229; // legRatio (if spread order)
    float fill_exch_fee = 232; // SpiderRock estimate of the exchange fee based on liquidity tags (best effort)
    string fill_market = 235; // usually from execReport.lastMkt as reported by child order venue
    double fill_price = 238; // fill price
    sfixed32 fill_quantity = 241; // fill quantity
    double fill_bid = 244; // market bid @ fill arrival
    double fill_ask = 247; // market ask @ fill arrival
    double fill_mark = 250; // mid-market (or SR surface price if option) @ fill arrival
    double fill_uBid = 253; // underlier market bid @ fill arrival
    double fill_uAsk = 256; // underlier market bid @ fill arrival
    float fill_vol = 259; // fill volatility @ fillLimitRefUPrc
    float fill_ve = 262; // fill vega
    float fill_ga = 265; // fill gamma
    float fill_de = 268; // fill delta
    float fill_th = 271; // fill theta
    float fill_pr = 274; // fill premium over parity
    float fill_beta = 277; // SpiderRock estimate of beta to SPX
    float fill_risk_metric1 = 280; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric2 = 283; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric3 = 286; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric4 = 289; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric5 = 292; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric6 = 295; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric7 = 298; // user defined (from parent order) [used to manage order groups]
    float fill_s08_dn = 301; // underlier down 8% shock slide
    float fill_s06_up = 304; // underlier up 6% shock slide
    float fill_s15_dn = 307; // underlier down 15% shock slide
    float fill_s15_up = 310; // underlier up 15% shock slide
    float years = 313; // years to expiration
    sfixed32 underliers_per_cn = 316; // option delivery underliers per contract
    UnderlierType underlier_type = 319; // type of underlier (affects $greek calculations)
    float tick_value = 322; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 325; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 328;
    float u_prc_ratio = 331; // UPrcRatio (SymbolRatio) from product definition
    float min_tick_size = 334; // minimum market price variation (dnTickSize if on a boundary)
    PriceFormat price_format = 337; // SpiderRock price display format code
    PriceFormat u_price_format = 340; // SpiderRock underlier price display format code
    google.protobuf.Timestamp timestamp = 343; // timestamp of this record [not necessarily the timestamp of the fill itself]
}


/*
    Values in this table represent current (live) SpiderRock supervisory risk counters for an account + riskSymbol (ticker or ticker/exp) combination.  These records are typically only visible to RiskAdmin users with access to the counter record account(s).
*/    
message SpdrRiskRecord {
    message PKey {
        
        string accnt = 10;
        string risk_symbol = 13; // underlying symbol (e.g. MSFT, *, SPY, @CL) or symbol/expiration (eg. @ES/EXP, @ES/2016-02-24)
        string risk_engine = 16; // EE engine name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 stk_sh_bot = 100; // total shares bot + open marketable buy order qty
    sfixed32 stk_sh_sld = 103; // total shares sld + open marketable sell order qty
    sfixed32 stk_sh_abs = 106; // total shares filled + all open shares
    sfixed32 fut_cn_bot = 109; // total future cn bot + open marketable buy order qty
    sfixed32 fut_cn_sld = 112; // total future cn sld + open marketable sell order qty
    sfixed32 fut_cn_abs = 115; // total future cn filled + all open shares
    sfixed32 opt_cn_bot = 118; // total option cn bot + open marketable buy order qty
    sfixed32 opt_cn_sld = 121; // total option cn sld + open marketable sell order qty
    sfixed32 opt_cn_abs = 124; // total option cn filled + all open shares
    float haircut_day = 127; // day haircut ($25;-8/+6, -15/+15) (fills only) [aggregate]
    float haircut_acc = 130; // acc haircut ($25;-8/+6, -15/+15) (start-of-day position + fills) [aggregate]
    float ddelta_bot = 133; // $Delta bot (stock + future + option) (fills + open marketable qty) [aggregate]
    float ddelta_sld = 136; // $Delta sld (stock + future + option) (fills + open marketable qty) [aggregate]
    float vega_bot = 139; // vega bot (options only) (fills + open marketable qty)
    float vega_sld = 142; // vega sld (options only) (fills + open marketable qty)
    float wt_vega_bot = 145; // wt vega bot (options only) (fills + open marketable qty)
    float wt_vega_sld = 148; // wt vega sld (options only) (fills + open marketable qty)
    float notional_bot = 151; // [bot] (fills + open marketable qty) [cn x multiplier x ddMult] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_sld = 154; // [sld] (fills + open marketable qty) [cn x multiplier x ddMult] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_abs = 157; // [abs] (fills + all open qty) [cn x multiplier x ddMult] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_parent_lvs_buy = 160; // [buy] (open parent qty) [cn x multiplier x ddMult] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_parent_lvs_sell = 163; // [sell] (open parent qty) [cn x multiplier x ddMult] (options and futures) or [sh x uPrc] (stock) [aggregate]
    sfixed32 parent_lvs_sh_buy = 166; // [buy] (open parent buy shares) [aggregate]
    sfixed32 parent_lvs_sh_sell = 169; // [sell] (open parent sell shares) [aggregate]
    google.protobuf.Timestamp timestamp = 172; // timestamp of latest change
}


    
message SpdrRiskSpanAggregation {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string aggregate1 = 100;
    string aggregate2 = 103;
    AggregationSpanType aggregation_span_type = 106;
    float cur_pos = 109; // Current position in this metric
    float span01 = 112; // span1: uPrc=unch, vol=up
    float span02 = 115; // span2: uPrc=unch, vol=down
    float span03 = 118; // span3: uPrc=+33.33%, vol=up
    float span04 = 121; // span4: uPrc=+33.33%, vol=dn
    float span05 = 124; // span5: uPrc=-33.33%, vol=up
    float span06 = 127; // span6: uPrc=-33.33%, vol=down
    float span07 = 130; // span7: uPrc=+66.67%, vol=up
    float span08 = 133; // span8: uPrc=+66.67%, vol=down
    float span09 = 136; // span9: uPrc=-66.67%, vol=up
    float span10 = 139; // span10: uPrc=-66.67%, vol=down
    float span11 = 142; // span11: uPrc=+100%, vol=up
    float span12 = 145; // span12: uPrc=+100%, vol=down
    float span13 = 148; // span13: uPrc=-100%, vol=up
    float span14 = 151; // span14: uPrc=-100%, vol=down
    float span15 = 154; // span15: uPrc=+300%; price slide * 0.33
    float span16 = 157; // span16: uPrc=-300%, price slide * 0.33
    float max_loss = 160; // max loss: worst of span01 - span16
    string max_loss_column = 163; // max loss column: label of worst loss span column
    float beta = 166; // max beta adjustment
    float prc_span = 169; // max price scan range
    float vol_span = 172; // max vol scan range
    float hedge_up = 175; // $pnl @ +100% from hedge (Existing, DeNeutral, or AdjDeNeutral)
}


    
message SpdrRiskSpanDetail {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 13;
        SecType sec_type = 16;
        AggregationSpanType aggregation_span_type = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp date = 100;
    float span01 = 103; // span1: uPrc=unch, vol=up
    float span02 = 106; // span2: uPrc=unch, vol=down
    float span03 = 109; // span3: uPrc=+33%, vol=up
    float span04 = 112; // span4: uPrc=+33%, vol=dn
    float span05 = 115; // span5: uPrc=-33%, vol=up
    float span06 = 118; // span6: uPrc=-33%, vol=down
    float span07 = 121; // span7: uPrc=+67%, vol=up
    float span08 = 124; // span8: uPrc=+67%, vol=down
    float span09 = 127; // span9: uPrc=-67%, vol=up
    float span10 = 130; // span10: uPrc=-67%, vol=down
    float span11 = 133; // span11: uPrc=+100%, vol=up
    float span12 = 136; // span12: uPrc=+100%, vol=down
    float span13 = 139; // span13: uPrc=-100%, vol=up
    float span14 = 142; // span14: uPrc=-100%, vol=down
    float span15 = 145; // span15: uPrc=+300%; price slide * 0.33
    float span16 = 148; // span16: uPrc=-300%, price slide * 0.33
    float cur_pos = 151; // Current position in this metric
    float unit_pos_size = 154; // Effective position size: stkSh, futCn, optCn * upc
    float point_value = 157; // $value of a single option point
    Currency point_currency = 160;
    float ref_vol = 163; // Initial volatility (options only;usually SR surface vol)
    float ref_uPrc = 166; // Initial underlier price
    float d_vol_up = 169; // Slide VolUp Increment
    float d_vol_dn = 172; // Slide VolDn Increment
    float d_uPrc_up = 175; // Slide PrcUp Increment
    float d_uPrc_dn = 178; // Slide PrcDn Increment
    float surf_vol33_up = 181; // SR surface volatility @ refUPrc + 0.33 * dUPrcUp
    float surf_vol33_dn = 184; // SR surface volatility @ refUPrc - 0.33 * dUPrcDn
    float surf_vol67_up = 187; // SR surface volatility @ refUPrc + 0.67 * dUPrcUp
    float surf_vol67_dn = 190; // SR surface volatility @ refUPrc - 0.67 * dUPrcDn
    float surf_vol100_up = 193; // SR surface volatility @ refUPrc + 1.00 * dUPrcUp
    float surf_vol100_dn = 196; // SR surface volatility @ refUPrc - 1.00 * dUPrcDn
    float surf_vol300_up = 199; // SR surface volatility @ refUPrc + 3.00 * dUPrcUp
    float surf_vol300_dn = 202; // SR surface volatility @ refUPrc - 3.00 * dUPrcDn
    float hedge_up = 205; // $pnl @ +100% from hedge (Existing, DeNeutral, or AdjDeNeutral)
    float beta = 208; // Beta value between this ticker and master ticker [-5.0 / +5.0]
    float vol_ratio = 211; // Vol Ratio: can be raw/SD (symVol), mktRatio (symVol/mktVol), or mktRatioNorm (symVol/avgMktVol)
    float rnd_sym_adj = 214; // random symbol volatility draw (resets on each refresh);symVol x rNormal x [1,2,3]
    float sym_vol = 217; // Symbol volatility (usually 21 trading day censored implied vol)
    float mkt_vol = 220; // Master ticker volatility (usually 21 trading day censored implied vol)
    float eff_prc_pct_up = 223; // Effective up price pct slide; =prcPct * beta * volRatio + rndSymAdj
    float eff_prc_pct_dn = 226; // Effective dn price pct slide; =prcPct * beta * volRatio + rndSymAdj
    float prc_span = 229; // input prcSpan value
    float vol_span = 232; // input volSpan value
    SpanType prc_span_type = 235; // input prcSpan type
    SpanType vol_span_type = 238; // input volSpan type
    float span_prc_inc_up = 241; // (exchange) spanPrcIncUp
    float span_prc_inc_dn = 244; // (exchange) spanPrcIncDn
    float span_vol_inc = 247; // (exchange) spanVolInc
    string calc_error = 250; // Any calc error generated by the span calculation
}


/*
    Records inserted into this table will result in the cancellation of all active/cancelable orders for the indicated SpiderRock routing code
*/    
message SpdrRouteCancel {
    message PKey {
        
        string routing_code = 10; // SR routing code
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string cxl_reason = 100;
    string alt_cancel_id = 103; // usually client FIX clOrdId of the inbound OrderCancel request
    string engine_name = 106; // set by the engine handling event (should be blank on arrival)
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


    
message SpdrScanMacro {
    message PKey {
        
        string user_name = 10;
        string macro_name = 13;
    }

    message ExcludedSymbols {
        
        OptionKey ticker = 481;
        ExclusionType exclusion_type = 484;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    AccessLevel access_level = 100; // controls who can see this scan macro
    string symbol_list = 103; // comma separated list of symbols or symbol macros [saved with the scan macro]
    CPScan cp_scan = 106; // Whether to scan for just puts, calls or both
    RiskSide risk_side = 109;
    PosRiskType pos_risk_type = 112;
    YesNo use_risk_ctrl_limits = 115; // if yes, BookControl, SymbolControl, RiskClassControl, IndustryControl, and ExpirationControl will apply.
    YesNo exclude_zero_size = 118; // if yes and risk control applies then any record with a zero size will be EXCLUDED from result set
    double risk_fill_percentage = 121; // if use Risk Control checked;then the percentage up to max limit used to calculate order size.
    sfixed32 min_order_size = 124; // if use Risk Control checked; minimum order size (in contracts) [orders less than this size are skipped]
    sfixed32 max_order_size = 127; // if use Risk Control checked; maximum order size (in contracts) regardless of room to RiskControl limit
    YesNo show_calc_errors = 130; // if yes only records with calc errors will be returned (used for data debugging)
    float u_prc_lo = 133; // Underlier price filter
    float u_prc_hi = 136;
    YesNo u_prc_all = 139;
    float u_vlm_lo = 142; // Underlier average daily volume [(shares or contracts)] filter
    float u_vlm_hi = 145;
    YesNo u_vlm_all = 148;
    float u_mkt_cap_lo = 151; // Underlier market cap [(sd.sharesOutstanding * uPrc)] filter
    float u_mkt_cap_hi = 154;
    YesNo u_mkt_cap_all = 157;
    float u_prc_chg_perc_lo = 160; // Underlier Price Percentage move on the day
    float u_prc_chg_perc_hi = 163;
    YesNo u_prc_chg_perc_all = 166;
    float i_eMove_lo = 169; // Underlier iEMove filter
    float i_eMove_hi = 172;
    YesNo i_eMove_all = 175;
    float h_eMove_lo = 178; // Underlier hEMove filter
    float h_eMove_hi = 181;
    YesNo h_eMove_all = 184;
    float e_move_ratio_rank_lo = 187; // Underlier iEMove/hEMove ratio rank filter
    float e_move_ratio_rank_hi = 190;
    YesNo e_move_ratio_rank_all = 193;
    sfixed32 e_days_lo = 196; // Time to next earnings date filter
    sfixed32 e_days_hi = 199;
    YesNo e_days_all = 202;
    sfixed32 e_cnt_lo = 205; // [EXP] earnings events prior to expiration filter
    sfixed32 e_cnt_hi = 208;
    YesNo e_cnt_all = 211;
    float o_prc_lo = 214; // [OPT] option price [(oq.bidPrice/oq.askPrice)] filter
    float o_prc_hi = 217;
    YesNo o_prc_all = 220;
    float atm_lo = 223; // [EXP] atm volatility [(lsa.atm)] filter
    float atm_hi = 226;
    YesNo atm_all = 229;
    sfixed32 days_lo = 232; // [EXP] time to expiration [(Trading Days)] filter
    sfixed32 days_hi = 235;
    YesNo days_all = 238;
    float xde_lo = 241; // [OPT] xdelta [(option.key.CallPut == CallPut.Call ? +0.5 - oiq.de : -0.5 - oiq.de)] filter
    float xde_hi = 244;
    YesNo xde_all = 247;
    float abs_delta_lo = 250; // [OPT] absolute delta [abs(oiq.de)] filter
    float abs_delta_hi = 253;
    YesNo abs_delta_all = 256;
    float v_width_lo = 259; // [EXP] atm volatility width [(lsa.vWidth)] filter [note: lsa.vWidth = 2nd tightest vol width (in pts) for an expiration]
    float v_width_hi = 262;
    YesNo v_width_all = 265;
    float atm_vol_chg_lo = 268; // [EXP] atm volatility change (in pts) for an expiration]
    float atm_vol_chg_hi = 271;
    YesNo atm_vol_chg_all = 274;
    float u_prc_chg_rank_lo = 277; // uPrc change ([log(uPrc / uPrc.prev)]) rank filter
    float u_prc_chg_rank_hi = 280;
    YesNo u_prc_chg_rank_all = 283;
    float u_mkt_cap_rank_lo = 286; // Underlier underlier market cap [(sd.sharesOutstanding * uPrc)] rank filter
    float u_mkt_cap_rank_hi = 289;
    YesNo u_mkt_cap_rank_all = 292;
    float stk_vlm_rank_lo = 295; // Underlier average daily volume [sd.stockVolume] ($ over trailing 30 days) rank filter
    float stk_vlm_rank_hi = 298;
    YesNo stk_vlm_rank_all = 301;
    float atm_vol_chg_rank_lo = 304; // [EXP] atm volatility change [log(lsa.atm / psa.atm)] rank filter
    float atm_vol_chg_rank_hi = 307;
    YesNo atm_vol_chg_rank_all = 310;
    float atm_slope_rank_lo = 313; // [EXP] atm slope [lsa.slope] rank filter
    float atm_slope_rank_hi = 316;
    YesNo atm_slope_rank_all = 319;
    float atm_slope_chg_rank_lo = 322; // [EXP] atm slope change [lsa.slope - psa.slope] rank filter
    float atm_slope_chg_rank_hi = 325;
    YesNo atm_slope_chg_rank_all = 328;
    float x_vol_slope_lo = 331; // [OPT] xVolSlope [(oiq.sVol - oiq.atmVol) / oiq.xAxis] filter
    float x_vol_slope_hi = 334;
    YesNo x_vol_slope_all = 337;
    float exp_vega_vlm_rank_lo = 340; // [EXP] Symbol/Expiration today vega trading volume [optionOpenVega.vegaVolume] rank filter
    float exp_vega_vlm_rank_hi = 343;
    YesNo exp_vega_vlm_rank_all = 346;
    float exp_vega_vlm_chg_rank_lo = 349; // [EXP] Symbol/Expiration vega volume change [log(vegaVlm / vegaVlm.prev)] rank filter
    float exp_vega_vlm_chg_rank_hi = 352;
    YesNo exp_vega_vlm_chg_rank_all = 355;
    float exp_open_vega_rank_lo = 358; // [EXP] Symbol/Expiration today open vega  [optionOpenVega.openVega] rank filter
    float exp_open_vega_rank_hi = 361;
    YesNo exp_open_vega_rank_all = 364;
    float open_wt_vega_rank_lo = 367; // [OPT] option open wtVega [spc * openInt * vega * vol / sqrt(T)] rank filter
    float open_wt_vega_rank_hi = 370;
    YesNo open_wt_vega_rank_all = 373;
    float i_vol_chg_rank_lo = 376; // [OPT] volatility change [log(ivol / ivol.prev)] rank filter
    float i_vol_chg_rank_hi = 379;
    YesNo i_vol_chg_rank_all = 382;
    string theo_model = 385;
    TheoEdgeType theo_edge_type = 388;
    EdgeMetric theo_edge_metric = 391;
    EdgeMetric surf_edge_metric = 394;
    float theo_edge_lo = 397;
    float theo_edge_hi = 400;
    YesNo theo_edge_all = 403;
    float theo_edge_rank_lo = 406;
    float theo_edge_rank_hi = 409;
    YesNo theo_edge_rank_all = 412;
    float surface_edge_lo = 415;
    float surface_edge_hi = 418;
    YesNo surface_edge_all = 421;
    float surface_edge_rank_lo = 424;
    float surface_edge_rank_hi = 427;
    YesNo surface_edge_rank_all = 430;
    float o_prob_lo = 433; // [OPT] current take probability [0.0, 1.0]
    float o_prob_hi = 436;
    YesNo o_prob_all = 439;
    float o_prob_rank_lo = 442; // [OPT] relative probability ratio (current prob) [] rank filter
    float o_prob_rank_hi = 445;
    YesNo o_prob_rank_all = 448;
    float o_prob10m_rank_lo = 451; // [OPT] relative probability ratio (current prob - 10m EMA prob) [] rank filter
    float o_prob10m_rank_hi = 454;
    YesNo o_prob10m_rank_all = 457;
    OrderBy order_by = 460;
    OrderDirection order_direction = 463;
    sfixed32 max_results_per_query = 466; // the overall maximum number of records to be returned from this query
    sfixed32 max_results_per_underlier = 469; // the maximum number of records to be returned per Underlier
    sfixed32 max_results_per_expiry = 472; // the overall maximum number of records to be returned per Ticker/Expiration
    google.protobuf.Timestamp timestamp = 475;
    repeated ExcludedSymbols excluded_symbols = 478;
}


/*
    Records inserted into this table causes the corresponding parent broker to cancel the current underlying parent order if active and cancellable.
*/    
message SpdrSecKeyCancel {
    message PKey {
        
        string accnt = 10; // SR trading account
        OptionKey sec_key = 13; // Composite Security Key
        SpdrKeyType sec_type = 16; // Security Type [Stock, Future, Option, MLeg]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string cxl_reason = 100;
    string alt_cancel_id = 103;
    string engine_name = 106; // set by the engine handling event (should be blank on arrival)
    string modified_by = 109; // user who last modified this record
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
}


/*
    SpdrSetActiveSize records control the active working size for parent orders that are locked (have active size controls).  These records can be modified by ClientRiskTrader and ClientStageTrader user types.
*/    
message SpdrSetActiveSize {
    message PKey {
        
        string accnt = 10; // SR trading account
        OptionKey sec_key = 13; // Composite Security Key
        SpdrKeyType sec_type = 16; // Security Type [Stock, Future, Option]
        sfixed64 grouping_code = 19;
        SpdrSource spdr_source = 22;
        BuySell order_side = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 order_active_size = 100;
    TimeInForce time_in_force = 103; // None = do not override parent order;  Any other value cause the values below to supercede the same fields in the parent order
    google.protobuf.Timestamp start_dttm = 106; // [optional] (parent order start time)
    sfixed32 order_duration = 109; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 112; // [optional] (default: 2000-01-01)
    YesNo close_if_filled = 115; // close order if active size is <= cumFillQuantity
    float cl_arrive_mark = 118; // note: will pass through as SpdrParentExecution.clArriveMark
    string modified_by = 121; // user who last modified this record
    google.protobuf.Timestamp timestamp = 124; // timestamp of last modification
}


/*
    SpdrStkBrkrEvent records are published when a new or clx/replace parent order arrives causes a broker to beging working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
*/    
message SpdrStkBrkrEvent {
    message PKey {
        
        sfixed64 parent_number = 10;
        EventRecType rec_type = 13; // type of record [New,Repl,Close]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    string accnt = 103;
    SpdrSource spdr_source = 106;
    sfixed64 grouping_code = 109;
    BuySell order_side = 112;
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    uint32 event_number = 124;
    SpdrStageType stage_type = 127; // parent is a staged order [StageLock, StageModify, StageReview]
    sfixed64 base_parent_number = 130; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    sfixed64 prev_parent_number = 133; // SPDR order number (order being cancelled/replaced) (zero if none)
    string engine_name = 136; // engine name
    SpdrBrokerStatus spdr_broker_status = 139;
    SpdrOrderStatus spdr_order_status = 142;
    SpdrCloseReason spdr_close_reason = 145;
    SpdrRejectReason spdr_reject_reason = 148;
    string spdr_comment = 151; // additional detail if parent closed or rejected
    float mar_haircut_utilized1 = 154; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_haircut_utilized2 = 157; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_haircut_utilized3 = 160; // MAR haircut utilized on parent order arrival (riskFirm/riskGroup #3)
    float mar_total_exposure_utilized1 = 163; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #1)
    float mar_total_exposure_utilized2 = 166; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #2)
    float mar_total_exposure_utilized3 = 169; // MAR totalExposure utilized on parent order arrival (riskFirm/riskGroup #3)
    float nbbo_bid = 172;
    float nbbo_ask = 175;
    sfixed32 arrive_nbbo_size = 178; // size of the single largest exchange on parent order arrival
    StkExch arrive_nbbo_exch = 181; // exchange representing largest size on order arrival
    sfixed32 arrive_cum_size = 184; // cum size of all exchanges at NBBO price on parent order arrival
    int32 arrive_num_exch = 187; // num exchanges making up cum size on parent order arrival
    sfixed32 arrive_limit_size = 190; // immediately marketable size up to limit price on parent order arrival
    double arrive_limit_prc = 193; // expected average fill price if all immediately marketable size executed as advertized
    double avg_fill_prc = 196; // average fill price of all fills attributed parent order
    sfixed32 cum_fill_quan = 199; // cumulative fill quantity attributed to parent order
    uint32 num_child_orders = 202; // total number of child orders generated servicing parent order
    sfixed32 open_order_size = 205;
    sfixed32 action_order_size = 208;
    sfixed32 risk_limit_size = 211; // risk limit size
    SpdrRisk risk_limit_desc = 214; // reason for size reduction
    string risk_limit_detail = 217; // addition risk detail
    double limit_price = 220; // simple limit
    double make_limit_price = 223; // make limit
    LimitError make_limit_err = 226;
    double take_limit_price = 229; // take limit
    LimitError take_limit_err = 232;
    BrokerState broker_state = 235; // broker monitor state
    AlgoState make_state = 238; // [enum] current state of non-marketable order handler (maker)
    AlgoState take_state = 241; // [enum] current state of marketable order handler (taker)
    MktCrossState mkt_cross_state = 244; // [enum] current state of mkt cross handler (if any)
    ChildEvent last_child_event = 247;
    SpdrMarketState spdr_mkt_state = 250;
    sfixed32 locate_quan = 253;
    YesNo is_sSale_restricted = 256;
    string borrow_firm = 259;
    string borrow_pool = 262;
    string borrow_src = 265;
    sfixed32 num_orders = 268;
    sfixed32 leaves_qty = 271;
    fixed32 child_order_mask = 274; // bit-mask of all exchange for which a child order was generated
    string modified_by = 277; // user who last modified this record
    google.protobuf.Timestamp timestamp = 280; // timestamp of last modification
}


/*
    SpdrStkBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders.
*/    
message SpdrStkBrkrState {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13;
        SpdrSource spdr_source = 16;
        sfixed64 grouping_code = 19;
        BuySell order_side = 22;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string engine_name = 100; // server stripe
    sfixed64 parent_number = 103; // SR parent number
    sfixed64 base_parent_number = 106;
    string alt_order_id = 109; // alternate order ID (usually clOrdId from client)
    sfixed64 package_id = 112; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    SpdrStageType stage_type = 124; // parent is a staged order [StageLock, StageModify, StageReview]
    YesNo is_flagged = 127; // broker state records is flagged for action (user alert only)
    float u_prc = 130; // current stock price (as of most recent state record update)
    float u_prc_order = 133; // stock price at the time of most recent parent order entry
    float nbbo_bid = 136; // current market bid (at time of record publish)
    float nbbo_ask = 139; // current market ask (at time of record publish)
    sfixed32 nbbo_bid_sz = 142; // current market cum bid size (at time of record publish)
    sfixed32 nbbo_ask_sz = 145; // current market cum ask size (at time of record publish)
    SpdrOrderStatus spdr_order_status = 148; // status of the most recent parent order handled by this broker
    SpdrCloseReason spdr_close_reason = 151; // close reason of most recent parent order
    SpdrRejectReason spdr_reject_reason = 154; // reject reason (if any) of most recent parent order
    string spdr_comment = 157;
    sfixed32 order_size = 160; // order size of most recent parent order
    sfixed32 order_active_size = 163; // total activated size (total size released for execution) (-1 = all available size)
    sfixed32 leaves_quantity = 166; // current child order leaves quantity (quantity actively working in the market;all child orders)
    double avg_fill_price = 169; // average fill price
    sfixed32 cum_fill_quantity = 172; // cumulative fill quantity
    google.protobuf.Timestamp last_fill_dttm = 175;
    sfixed32 risk_limit_size = 178; // risk limit size (maximum size to nearest risk limit)
    SpdrRisk risk_limit_desc = 181; // reason for size reduction
    double limit_price = 184; // simple limit
    double make_limit_price = 187; // make limit
    LimitError make_limit_err = 190;
    double take_limit_price = 193; // take limit
    LimitError take_limit_err = 196;
    string strategy = 199; // parent order strategy (description only)
    string user_name = 202; // user that entered the most recent parent order
    YesNo visible_in_sV = 205; // allow order to be visible in SV (do not use for high volume of orders)
    ShortSaleFlag ssale_flag = 208;
    sfixed32 locate_quan = 211; // available locate quantity (if selling short) @ child order send time
    string locate_firm = 214; // firm granting the locate (also locate firm used on street FIX orders)
    sfixed32 max_exposure_size = 217; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 220; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 223; // public order size handling
    YesNo can_overlap_cxl_repl = 226; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 229; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 progress_slice_cnt = 232; // number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 235; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 238; // target vwap participation rate (target % of trade activity)
    int32 min_mkt_on_close_pct = 241; // Minimum pct [0 - 100] of order reserved for the on-close auction
    TriggerType trigger_type = 244; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 247; // stop/trigger level for parent order to go active (can be either a price or vol)
    sfixed32 max_child_orders = 250; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    fixed32 exch_mask = 253; // eligible exchanges (0 = all)
    TimeInForce time_in_force = 256;
    google.protobuf.Timestamp start_dttm = 259; // [optional] (parent order start time)
    sfixed32 order_duration = 262; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 265; // [optional] (default: 2099-01-01)
    google.protobuf.Timestamp expire_dttm = 268; // expected order expiration dttm
    ParentOrderHandling parent_order_handling = 271;
    ParentBalanceHandling parent_balance_handling = 274;
    SpdrLimitType order_limit_type = 277;
    SpdrLimitClass take_limit_class = 280; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 283; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 286; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 289; // Applies if LimitType = Prc[]
    double order_prc_offset = 292; // default=0
    AlphaType take_alpha_type = 295; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 298; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 301; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 304; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 307; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 310; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    StateModel state_model = 313;
    string extern_ex_dest = 316;
    ClosingAuctionStatus closing_auction = 319; // closing auction state
    sfixed32 order_ratio = 322; // (various) can be a mleg leg ratio
    google.protobuf.Timestamp order_dttm = 325; // order entry date/time
    MaxProgress max_progress = 328; // maximum point of progress for most recent parent order
    string max_progress_detail = 331; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 334; // time of last max progress advance
    BrokerState broker_state = 337; // broker monitor state
    sfixed32 broker_counter = 340; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 343; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 346; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 349; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 352; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 355; // [enum] current state of response handler (if any)
    sfixed32 mkt_resp_counter = 358; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 361; // [enum] current state of mkt cross handler (if any)
    sfixed32 mkt_cross_counter = 364; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 367; // Twap/Vwap progress detail
    ExchEvent exch_event01 = 370;
    ExchEvent exch_event02 = 373;
    ExchEvent exch_event03 = 376;
    ExchEvent exch_event04 = 379;
    ExchEvent exch_event05 = 382;
    ExchEvent exch_event06 = 385;
    ExchEvent exch_event07 = 388;
    ExchEvent exch_event08 = 391;
    ExchEvent exch_event09 = 394;
    ExchEvent exch_event10 = 397;
    ExchEvent exch_event11 = 400;
    ExchEvent exch_event12 = 403;
    ExchEvent exch_event13 = 406;
    ExchEvent exch_event14 = 409;
    ExchEvent exch_event15 = 412;
    ChildEvent last_child_event = 415; // [enum] last child event code from broker/chld order handler
    SpdrMarketState spdr_mkt_state = 418; // [enum] market state
    float cpx1 = 421; // child price level #1
    sfixed32 csz1 = 424; // cumulative size represented at this price
    fixed32 cex1 = 427; // bit mask of all exchanges where we are at this price
    float cpx2 = 430; // child price level #2
    sfixed32 csz2 = 433; // cumulative size represented at this price
    fixed32 cex2 = 436; // bit mask of all exchanges where we are at this price
    int32 c_more = 439; // number of additional child orders at inferior prices (if any)
    sfixed32 arrive_sweep_count = 442; // number of parent orders arriving with immediately available sweep qty
    sfixed32 arrive_sweep_order_qty = 445; // total size of all child orders generated due to parent order arrival sweep
    sfixed32 arrive_sweep_fill_qty = 448; // total fill size due to parent order arrival sweep
    sfixed32 num_sweep_child_orders = 451; // child orders generated in initial arrival sweep
    sfixed32 prt_sh_active = 454; // total shares printed while parent order was active
    float prt_sh_active_mny = 457; // total of (shares printed x print price) while parent order was active;  vwap price (while parent is active) = prtShActiveMny / prtShActive
    sfixed32 prt_sh_limit_oK = 460; // total shares printed at or better than parent limit while parent was active
    float prt_sh_limit_oKMny = 463; // total of (shares printed x print price) @ or better than parent limit while parent order was active;  vwap (limitOK) price (while parent is active) = prtShLimitOKMny / prtShLimitOK
    sfixed32 prt_sh_compete = 466; // total shares printed on an exchange on which we had a competitive child order
    sfixed32 prt_sh_away_chld = 469; // total shares printed on an away exchange when we had a competitive child order(s) in the market and the away exchange was competitive prior to the print
    sfixed32 prt_sh_no_compete = 472; // total shares printed on an away exchange when we had a competitive child order(s) in the market and the away exchange was not competitive prior to the print
    sfixed32 mk_check_cnt = 475; // total number of times order was checked for making
    float min_mk_prob = 478; // min make probability while broker active
    float avg_mk_prob = 481; // average make probability while broker active
    float cur_mk_prob = 484; // current make probability
    sfixed32 tk_check_cnt = 487; // total number of times order was checked for taking
    float max_tk_prob = 490; // max take probability while broker active
    float avg_tk_prob = 493; // average take probability while broker active
    float cur_tk_prob = 496; // current take probability
    sfixed32 prt_prb_cnt = 499; // total number of print probability records while broker active (all limit types)
    sfixed32 prt_prb_check = 502; // number of print probability records with active probability printTake handler
    sfixed32 prt_prb_lmt_oK = 505; // number of print probability records that pass broker takeLimit
    sfixed32 tk_sh_lmt_oK = 508; // total shares available to take at parent limit or better while broker active
    float avg_qte_sz_ratio = 511; // average ratio of child size / nbbo size during the life of the working order when child order is at nbbo
    sfixed32 cnt_qte_sz_ratio = 514; // sample counter for above [1 second intervals];qteShRatio / qteShRatioSht = avg of child size / nbbo size while broker active
    float min_qte_width = 517; // minimum quote width during active order window
    float avg_qte_width = 520; // average quote width (during active order window)
    sfixed32 cnt_qte_width = 523;
    sfixed32 num_imprv_chld = 526; // number of child orders that improved an existing market
    float total_seconds = 529; // number of seconds that the parent order was active
    float working_seconds = 532; // number of seconds with one or more working child orders that are part of nbbo
    float alone_seconds = 535; // number of seconds with one or more working child orders that make up 100% of nbbo
    sfixed32 num_risk_cancels = 538; // number of child orders cancels for risk reasons
    float risk_hold_seconds = 541; // number of seconds with parent order active but on risk hold (zero child order risk size)
    float risk_thrtl_seconds = 544; // number of seconds with parent order active but in risk throttle condition (temporary hold after fast/mass risk cancel)
    sfixed32 num_make_throttle_skips = 547; // number of childs orders not send to market dues to outbound lines being in a queued/throttled state
    float sum_make_throttle_delay = 550; // cumulative seconds of queue skip delay (seconds that a child order was not in the market dues to outbound lines being in a queued/throttled state)
    sfixed32 num_new_orders = 553; // number of child orders generated by this broker (all parent orders)
    sfixed32 num_exec_reports = 556; // number of child execution reports handled by this broker (all parent orders)
    sfixed32 num_fill_reports = 559; // number of child fill reports handled by this broker (all parent orders)
    uint32 num_parent_limits = 562; // number of parent limit messages received for this broker
    sfixed64 risk_group_id = 565; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    sfixed64 trigger_group_id = 568; // WaitTrigger group Id
    float net_acc_day_dDelta = 571; // net (+/-) account day $delta;cumulative day $delta (stock, future, option) for the account this order is associated with
    float net_sym_day_dDelta = 574; // net (+/-) symbol day $delta;cumulative $delta (stock, futures, options) for the ticker+account this order is associated with
    float net_grp_day_dDelta = 577; // net (+/-) day risk group $delta;cumulative (stock, futures, options) for the riskGroupId+account this order is associated with
    float max_grp_day_dDelta_ln = 580; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 583; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 586; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float ref_cum_fill_qty = 589; // 5 minute trailing reference cumFillQty
    float market_ref_price = 592; // 5 minute trailing market reference price
    float market_ref_volume = 595; // 5 minute trailing market reference volume
    float max_part_ratio = 598; // max participation ratio max[fill qty since ref / mkt vlm since ref]
    float max_impact_ratio = 601; // max impact ratio max[dir * log(limit / mkt ref price)]
    AutoHedge auto_hedge = 604;
    HedgeInst hedge_instrument = 607; // auto-hedge instrument (from parent order)
    ExpiryKey hedge_sec_key = 610; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 613; // auto-hedge sec type (Stock or Future)
    float hedge_beta_ratio = 616; // auto-hedge ratio [from parent order (if supplied) or computed by SR]
    HedgeScope hedge_scope = 619; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 622; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string user_data1 = 625; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    string user_data2 = 628; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    sfixed32 num_updates = 631; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 634; // SR system timestamp
}


    
message SpdrStkExchControl {
    message PKey {
        
        StkExch stk_exch = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrExchState spdr_exch_state = 100;
    SpdrExchType spdr_exch_type = 103;
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message SpdrStkExchStatus {
    message PKey {
        
        StkExch stk_exch = 10;
        string server_code = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrExchState spdr_exch_state = 100;
    AutoExchState auto_exch_state = 103;
    string exch_exception = 106;
    sfixed32 num_open_child_orders = 109;
    sfixed32 num_child_orders_sent = 112;
    float exchange_msg_rate = 115;
    google.protobuf.Timestamp timestamp = 118;
}


    
message SpdrStkPrintCluster {
    message PKey {
        
        TickerKey ticker = 10;
        sfixed32 print_cluster_iD = 13; // unique SR Print Cluster ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double nbbo_bid_prc1 = 100; // best (max) bid price during print event
    double nbbo_ask_prc1 = 103; // best (min) ask price during print event
    sfixed32 nbbo_bid_size1 = 106; // max cumulative size @ best bid price
    sfixed32 nbbo_ask_size1 = 109; // max cumulative size @ best ask price
    fixed32 nbbo_bid_mask1 = 112; // sum of masks @ best bid price
    fixed32 nbbo_ask_mask1 = 115; // sum of masks @ best ask price
    double nbbo_bid_prc2 = 118; // 2nd best bid price during print event
    double nbbo_ask_prc2 = 121; // 2nd best ask price during print event
    sfixed32 nbbo_bid_size2 = 124; // max cumulative size @ 2nd best bid price
    sfixed32 nbbo_ask_size2 = 127; // max cumulative size @ 2nd best ask price
    fixed32 nbbo_bid_mask2 = 130; // sum of masks @ 2nd best bid price
    fixed32 nbbo_ask_mask2 = 133; // sum of masks @ 2nd best ask price
    float avg_bid_size = 136; // 10 minute EMA average of cum bid size @ best price level
    float avg_ask_size = 139; // 10 minute EMA average of cum ask szie @ best price level
    float avg_mkt_width = 142; // 10 minute EMA average of bid/ask width
    float avg_realized_vol = 145; // 10 minute EMA average realized volatility
    double print_min_price = 148;
    double print_max_price = 151;
    double print_avg_price = 154; // volume weighted average print price
    int32 print_cnt = 157; // number of option print reports received up in cluster window
    sfixed32 print_cum_size = 160; // cum size of all prints
    fixed32 print_exch_mask = 163; // exch mask of all exchanges w/prints
    sfixed32 print_cum_size_iSO = 166; // cum size of all ISO prints
    fixed32 print_exch_mask_iSO = 169; // exch mask of all exchanges w/prints
    sfixed64 net_timestamp_st = 172; // (SR) net timestamp of the first print message in the sweep set
    sfixed64 net_timestamp_en = 175; // (SR) net timestamp of the final print message in the sweep set
    sfixed64 src_timestamp_st = 178; // source timestamp of the first print message in the sweep set
    sfixed64 src_timestamp_en = 181; // source timestamp of the final print message in the sweep set
    double fwd_nbbo_price_m1 = 184; // projected NBBO price (T+1) minute conditional on print cluster
    double fwd_nbbo_price_m10 = 187; // projected NBBO price (T+10) minutes conditional on print cluster
    double nbbo_bid_price_m1 = 190; // nbbo market T+1 minute
    double nbbo_ask_price_m1 = 193;
    double nbbo_bid_price_m10 = 196; // nbbo market T+10 minutes
    double nbbo_ask_price_m10 = 199;
    google.protobuf.Timestamp timestamp = 202;
}


    
message SpdrStrategyOrderLeggerX {
    message PKey {
        
        sfixed64 strategy_number = 10; // strategy order number
    }

    message Legs {
        
        sfixed64 leg_id = 199; // leg ID
        LegPriority leg_priority = 202; // Lead leg(s) fill first (note: if there are no lead legs the first leg in the list will be treated as the lead leg)
        OptionKey sec_key = 205; // leg Security
        SpdrKeyType sec_type = 208;
        uint32 mult = 211; // leg ratio
        BuySell side = 214;
        PositionType pos_type = 217;
        ShortSaleFlag ssale_flag = 220;
        fixed32 exch_mask = 223; // eligible exchanges (0 = all)
        sfixed32 locate_quan = 226; // available locate quantity (if selling short)
        string locate_firm = 229; // firm granting the locate (also locate firm used on street FIX orders)
        double min_uBid = 232; // [optional] (<= 0 is any) (leg limit is only valid if all uMkt prices are between [minUBid, maxUAsk])
        double max_uAsk = 235; // [optional] (<= 0 is any)
        MinMaxType min_max_type = 238; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
        double ref_uPrc = 241; // reference underlier price (PrcDe orders)
        float ref_delta = 244; // reference delta (for PrcDe order handling)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SpdrSource spdr_source = 100;
    string accnt = 103; // SR trading account
    string client_firm = 106; // SR client firm
    StrategyStatus strategy_status = 109;
    string accnt_route_code = 112; // accntRoute acronym
    string extern_ex_dest = 115; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 118; // external algo names/parameters (usually just an algo name)
    string strategy = 121; // client-supplied strategy string; visible on SpiderRock GUI tools and other order reports.
    string user_name = 124; // name of the user entering the order
    sfixed32 order_size = 127; // strategy size (number of complete spreads)
    double legger_limit = 130; // strategy limit
    LeggerLimitType legger_limit_type = 133; // strategy limit type
    LeggerAlgo legger_algo = 136;
    ParentBalanceHandling balance_handling = 139; // base parent order balance handling [make style algo]
    float leg_exposure_pct = 142; // percentage of legger order than can be exposed on a single leg without completing related legs
    double leg_completion_slippage = 145; // maximum leg price slippage to complete an open strategy order
    TimeInForce time_in_force = 148;
    google.protobuf.Timestamp start_dttm = 151; // [optional] (parent order start time)
    sfixed32 order_duration = 154; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 157; // [optional] (default: 2099-01-01)
    AutoHedge auto_hedge = 160;
    HedgeInst hedge_instrument = 163;
    ExpiryKey hedge_sec_key = 166; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 169; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 172; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 175; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string extern_hedge_ex_dest = 178; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type
    string extern_hedge_params = 181; // external algo names/parameters (usually just an algo name)
    string user_data1 = 184; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 187; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 190; // client supplied data field; passes through to down stream child orders
    google.protobuf.Timestamp timestamp = 193;
    repeated Legs legs = 196;
}


    
message SpdrStrategyReportLegX {
    message PKey {
        
        sfixed64 strategy_number = 10; // strategy order number
        sfixed64 leg_id = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // SR trading account
    string client_firm = 103; // SR client firm
    SpdrSource spdr_source = 106;
    OptionKey sec_key = 109; // leg Security
    SpdrKeyType sec_type = 112;
    sfixed32 order_size = 115; // order size (strategy.orderSize * mult)
    uint32 mult = 118; // leg ratio
    BuySell side = 121;
    PositionType pos_type = 124;
    ShortSaleFlag ssale_flag = 127;
    fixed32 exch_mask = 130; // eligible exchanges (0 = all)
    LegPriority leg_priority = 133;
    sfixed32 locate_quan = 136; // available locate quantity (if selling short)
    string locate_firm = 139; // firm granting the locate (also locate firm used on street FIX orders)
    double min_uBid = 142; // [optional] (<= 0 is any) (leg limit is only valid if all uMkt prices are between [minUBid, maxUAsk])
    double max_uAsk = 145; // [optional] (<= 0 is any)
    MinMaxType min_max_type = 148; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    double ref_uPrc = 151; // reference underlier price (PrcDe orders)
    float ref_delta = 154; // reference delta (for PrcDe order handling)
    google.protobuf.Timestamp timestamp = 157;
}


    
message SpdrStrategyReportLeggerX {
    message PKey {
        
        sfixed64 strategy_number = 10; // strategy number
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    StrategyStatus strategy_status = 100;
    string accnt = 103; // SR trading account
    string client_firm = 106; // SR client firm
    SpdrSource spdr_source = 109;
    string accnt_route_code = 112; // accntRoute acronym
    string extern_ex_dest = 115; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 118; // external algo names/parameters (usually just an algo name)
    string strategy = 121; // client-supplied strategy string; visible on SpiderRock GUI tools and other order reports.
    string user_name = 124; // name of the user entering the order
    sfixed32 order_size = 127; // strategy size (number of complete spreads)
    double legger_limit = 130; // strategy limit
    LeggerLimitType legger_limit_type = 133; // strategy limit type
    double legger_limit_inc = 136; // strategy limit price tick increment (for +/-)
    LeggerAlgo legger_algo = 139;
    ParentBalanceHandling balance_handling = 142; // base parent order balance handling [make style algo]
    float leg_exposure_pct = 145; // percentage of legger order than can be exposed on a single leg without completing related legs
    double leg_completion_slippage = 148; // maximum leg price slippage to complete an open strategy order
    TimeInForce time_in_force = 151;
    google.protobuf.Timestamp start_dttm = 154; // [optional] (parent order start time)
    sfixed32 order_duration = 157; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 160; // [optional] (default: 2099-01-01)
    AutoHedge auto_hedge = 163;
    HedgeInst hedge_instrument = 166;
    ExpiryKey hedge_sec_key = 169; // autohedge instrument (can be a TickerKey (stock) or ExpiryKey (future)) [required for Stock and Future]
    float hedge_beta_ratio = 172; // portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 175; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 178; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string extern_hedge_ex_dest = 181; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type
    string extern_hedge_params = 184; // external algo names/parameters (usually just an algo name)
    string user_data1 = 187; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 190; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string child_data = 193; // client supplied data field; passes through to down stream child orders
    google.protobuf.Timestamp timestamp = 196;
}


    
message SpdrStrategyStateLegX {
    message PKey {
        
        sfixed64 strategy_number = 10; // strategy order number
        sfixed64 leg_id = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // SR trading account
    string client_firm = 103; // SR client firm
    SpdrSource spdr_source = 106;
    OptionKey sec_key = 109; // leg Security
    SpdrKeyType sec_type = 112;
    uint32 mult = 115; // leg ratio
    BuySell side = 118;
    LegState leg_state = 121;
    double limit_price = 124; // current/live effective limit price
    sfixed32 order_size = 127; // working size (from parentBrkrState.orderSize)
    sfixed32 active_size = 130; // order active size (from parentBrkrState.orderActiveSize)
    sfixed32 cum_fill_qty = 133;
    double avg_fill_prc = 136;
    float cpx1 = 139; // child price level #1
    sfixed32 csz1 = 142; // cumulative size represented at this price
    float cpx2 = 145; // child price level #2
    sfixed32 csz2 = 148; // cumulative size represented at this price
    int32 c_more = 151; // number of additional child orders at inferior prices (if any)
    sfixed32 num_state_updates = 154; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp state_timestamp = 157; // SR system timestamp
    SpdrBrokerStatus spdr_broker_status = 160;
    SpdrOrderStatus spdr_order_status = 163; // status of the most recent parent order handled by this broker
    SpdrCloseReason spdr_close_reason = 166; // close reason of most recent parent order
    SpdrRejectReason spdr_reject_reason = 169; // reject reason (if any) of most recent parent order
    string spdr_comment = 172;
    google.protobuf.Timestamp brkr_update_dttm = 175;
    sfixed32 risk_limit_size = 178; // risk limit size (maximum size to nearest risk limit)
    SpdrRisk risk_limit_desc = 181; // reason for size reduction
    double brkr_limit_price = 184; // simple limit
    LimitError brkr_limit_err = 187;
    double make_limit_price = 190; // make limit
    LimitError make_limit_err = 193;
    double take_limit_price = 196; // take limit
    LimitError take_limit_err = 199;
    MaxProgress max_progress = 202; // maximum point of progress for most recent parent order
    string max_progress_detail = 205; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 208; // time of last max progress advance
    BrokerState broker_state = 211; // broker monitor state
    sfixed32 broker_counter = 214; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 217; // [enum] current state of non-marketable order handler (maker)
    sfixed32 make_counter = 220; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 223; // [enum] current state of marketable order handler (taker)
    sfixed32 take_counter = 226; // number of times order checked by take handler (note: most checks result in no action)
    ChildEvent last_child_event = 229; // [enum] last event code from broker/child order handler(s)
    google.protobuf.Timestamp last_child_reject_dttm = 232; // last child order reject dttm (if any)
    string last_child_reject_text = 235; // last child order reject reason/text (if any)
    SpdrMarketState spdr_mkt_state = 238; // [enum] market state
    sfixed32 num_new_orders = 241; // number of child orders generated by this broker (all parent orders)
    uint32 num_parent_limits = 244; // number of parent limit messages received for this broker
    float active_seconds = 247; // number of seconds that the parent order was active
    float working_seconds = 250; // number of child order seconds (can be greater than activeSeconds if working on more than one exchange)
    google.protobuf.Timestamp timestamp = 253;
}


    
message SpdrStrategyStateLeggerX {
    message PKey {
        
        sfixed64 strategy_number = 10; // strategy number
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100; // SR trading account
    string client_firm = 103; // SR client firm
    SpdrSource spdr_source = 106;
    StrategyStatus strategy_status = 109;
    StrategyState strategy_state = 112;
    string strategy_detail = 115;
    double stgy_limit_price = 118; // strategy limit price (live / adjusted)
    sfixed32 cum_square_fill_qty = 121;
    sfixed32 cum_partial_fill_qty = 124;
    double avg_square_fill_prc = 127;
    double stgy_bid_px = 130; // synthetic strategy bid (from individual leg markets)
    double stgy_ask_px = 133; // synthetic strategy ask (from individual leg markets)
    double stgy_bid_sz = 136;
    double stgy_ask_sz = 139;
    double stgy_surface_price = 142; // strategy surface (fair/mid-market) price
    google.protobuf.Timestamp timestamp = 145;
}


/*
    SpdrStreetAlloc records are published by SRFixStreetGateway servers and are used to maintain/reload state for all handled orders
*/    
message SpdrStreetAlloc {
    message PKey {
        
        string alloc_id = 10; // SR child alloc number (EE)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 100; // StreetGW ServerCode
    string fix_route_dn = 103;
    string up_sender_comp_id = 106; // senderCompID/targetCompID of the StreetGW -> EE session
    string up_target_comp_id = 109;
    string up_sender_sub_id = 112; // senderSubID/targetSubID of the StreetGW -> EE session
    string up_target_sub_id = 115;
    google.protobuf.Timestamp street_session_date = 118;
    int32 street_session_counter = 121;
    sfixed32 street_seq_num_out = 124;
    string street_alloc_id = 127;
    string template_name = 130; // outbound rewrite template name
    string omni_accnt = 133;
    string client_firm = 136;
    OptionKey sec_key = 139;
    SpdrKeyType sec_type = 142;
    sfixed32 order_size = 145;
    string ord_status = 148;
    YesNo is_open = 151;
    YesNo is_acked = 154;
    float ack_latency = 157; // new order to ack latency (in milliseconds)
    string up_error = 160;
    string dn_error = 163;
    google.protobuf.Timestamp timestamp = 166;
}


/*
    SpdrStreetExecution records are published by SpdrStreetGateways when child order fills are received.  These records update if busted or corrected by a downstream venue.
*/    
message SpdrStreetExecution {
    message PKey {
        
        string fill_exec_id = 10; // ExecId<17> from execReport
        string fill_exec_ref_id = 13;
        string fill_leg_ref_id = 16;
        string fill_message_id = 19;
        string fill_last_mkt = 22;
        string routing_code = 25;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100;
    string client_firm = 103;
    sfixed64 parent_number = 106; // parent number (if any available)
    sfixed64 base_parent_number = 109; // base parent number (start of parent cxl/replace chain)
    string cl_ord_id = 112; // SR child order number (EE) [hex] (join w/SpdrStreetOrder.pkey.clOrdId)
    sfixed64 base_cl_ord_id = 115; // EE side base clOrdId (join w/SpdrChildOrder.pkey.clOrdId)
    SpdrOrderShape order_shape = 118;
    string order_ex_dest = 121;
    OptionKey sec_key = 124; // from child order
    SpdrKeyType sec_type = 127; // from child order
    SpdrSource spdr_source = 130; // from child order
    sfixed64 grouping_code = 133; // from child order
    string server_code = 136; // StreetGW ServerCode
    string up_sender_comp_id = 139; // senderCompID/targetCompID of the StreetGW -> EE session
    string up_target_comp_id = 142;
    string up_sender_sub_id = 145; // senderSubID/targetSubID of the StreetGW -> EE session
    string up_target_sub_id = 148;
    google.protobuf.Timestamp street_session_date = 151;
    int32 street_session_counter = 154;
    sfixed32 street_seq_num_out = 157;
    string street_cl_ord_id = 160;
    string order_id = 163;
    string template_name = 166; // outbound order rewrite template name
    string exch_security = 169; // Exchange symbol description necessary for translated securities
    string security_desc = 172;
    BuySell order_side = 175;
    sfixed32 order_size = 178;
    double order_price = 181;
    double exch_order_price = 184;
    double exch_display_factor = 187;
    string price_format = 190;
    TimeInForce time_in_force = 193;
    SpdrOrderType order_type = 196;
    YesNo is_peg_limit = 199; // Yes if order sent to exchange with a Market or 'Peg' style limit (returned in exec report)
    YesNo is_held = 202; // Yes if order sent to exchange marked "Held"
    YesNo is_directed = 205; // Yes if order sent to exchange directed to a specific exchange, as opposed to a smart router
    string fill_cl_ord_id = 208;
    string fill_cross_id = 211;
    string fill_quote_id = 214;
    string fill_symbol = 217;
    string fill_security_iD = 220; // fix tag 48
    string fill_sec_iDSource = 223; // fix tag 22
    string fill_security_desc = 226; // fix tag 107
    string fill_security_type = 229; // fix tag 167
    google.protobuf.Timestamp fill_maturity_date = 232; // composite of 541, 200, 205,
    double fill_strike = 235; // fix tag 202
    string fill_put_or_call = 238; // fix tag 201
    string exec_type = 241;
    string exec_trans_type = 244;
    int32 version = 247; // cancel/correct version number (initial fill is version=1)
    google.protobuf.Timestamp fill_dttm = 250; // fill DateTime (from SRDateTime)
    string fill_account = 253;
    string fill_side = 256; // fill side (from execReport.side)
    sfixed32 fill_size = 259; // fill size (from execReport.lastSize)
    double fill_price = 262; // fill price (from execReport.lastPrice)
    google.protobuf.Timestamp fill_transact_dttm = 265; // fill DateTime (from execReport.fillDttm)
    string fill_sRLiq_tag = 268; // fill SR normalized liquidity tag
    string fill_exch_liq_tag = 271; // fill exchange liquidity code
    string fill_exch_detail = 274; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    string fill_firm_type = 277; // fill firm type (as reported from street side)
    string fill_exec_broker = 280; // fill execution broker (as reported from street side)
    string fill_order_capacity = 283; // fill order capacity (as reported from street side)
    string fill_street_text = 286;
    sfixed64 sgw_timestamp = 289; // street gateway arrival timestamp
    google.protobuf.Timestamp timestamp = 292;
}


/*
    SpdrStreetOrder records are published by SRFixStreetGateway servers and are used to maintain/reload state for all handled orders
*/    
message SpdrStreetOrder {
    message PKey {
        
        string cl_ord_id = 10; // SR child order number (EE)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 100; // StreetGW ServerCode
    string fix_route_dn = 103;
    string up_sender_comp_id = 106; // senderCompID/targetCompID of the StreetGW -> EE session
    string up_target_comp_id = 109;
    string up_sender_sub_id = 112; // senderSubID/targetSubID of the StreetGW -> EE session
    string up_target_sub_id = 115;
    google.protobuf.Timestamp street_session_date = 118;
    int32 street_session_counter = 121;
    sfixed32 street_seq_num_out = 124;
    string street_cl_ord_id = 127;
    string order_id = 130;
    string template_name = 133; // outbound rewrite template name
    RouteType route_type = 136;
    string accnt = 139;
    string client_firm = 142;
    SpdrOrderShape order_shape = 145;
    int32 num_legs = 148;
    sfixed64 base_cl_ord_id = 151; // EE side base clOrdId
    sfixed64 parent_number = 154; // SR parent number
    sfixed64 base_parent_number = 157;
    OptionKey sec_key = 160;
    SpdrKeyType sec_type = 163;
    SpdrSource spdr_source = 166; // from child order
    sfixed64 grouping_code = 169; // from child order
    string exch_security = 172; // Exchange symbol description necessary for translated securities
    string cancel_pairs = 175; // FIX tag/value pairs necessary to construct a cancel message
    BuySell order_side = 178;
    double order_price = 181;
    double exch_order_price = 184;
    double exch_display_factor = 187;
    string price_format = 190;
    TimeInForce time_in_force = 193;
    SpdrOrderType order_type = 196;
    YesNo iso_sweep = 199;
    YesNo is_peg_limit = 202; // Yes if order sent to exchange with a Market or 'Peg' style limit (returned in exec report)
    YesNo is_held = 205; // Yes if order sent to exchange marked "Held"
    YesNo is_directed = 208; // Yes if order sent to exchange directed to a specific exchange, as opposed to a smart router
    YesNo is_persistent = 211; // Yes means that street order should not be rotated until the end of day (even if terminated/not filled)
    sfixed32 order_size = 214;
    sfixed32 leaves_qty = 217;
    string ex_destination = 220; // SR ExDest: eg AMEXOPT, ARCASTK, CMEFUT, CMEOPT
    string ord_status = 223;
    sfixed32 cum_fill_qty = 226;
    double avg_fill_price = 229;
    YesNo is_open = 232;
    YesNo is_ord_sent = 235;
    YesNo is_acked = 238;
    YesNo is_cxl_sent = 241;
    string cancel_reason = 244;
    YesNo cxl_requested = 247;
    YesNo rpl_requested = 250;
    YesNo cxl_reject_rcvd = 253;
    string reject_text = 256;
    sfixed32 base_active_quantity = 259; // base parent number (total active quantity @ child create time)
    sfixed32 base_cum_fill_quantity = 262; // base parent number (cum fill quantity @ child create time)
    int32 base_max_open_child_cnt = 265; // base parent number (max open child order count)
    string wait_trigger_id = 268;
    SGContingency contingency = 271; // StreetGW fast contingency (if any exists)
    double contingent_level = 274; // StreetGW contingency trigger level
    OptionKey contingent_sec_key = 277;
    SGContingentAction action = 280;
    sfixed64 action_src_timestamp = 283; // srcTimestamp of action trigger (if any)
    sfixed64 action_net_timestamp = 286; // netTimestamp of action trigger (if any)
    sfixed64 action_sgw_timestamp = 289; // sgwTimestamp of action trigger (if any)
    float action_prep_latency = 292; // latency from sgwTimestamp to action send
    ChildCreateReason order_create_reason = 295;
    ChildCancelReason order_cancel_reason = 298;
    sfixed64 new_tick_src_timestamp = 301; // srcTimestamp of new order triggering packet (if any)
    sfixed64 new_tick_net_timestamp = 304; // netTimestamp of new order triggering packet (if any)
    sfixed64 new_tick_eng_timestamp = 307; // execution engine host tick timestamp (packet arrival)
    sfixed64 new_tick_sgw_timestamp = 310; // street gateway host tick timestamp (packet arrival)
    sfixed64 cxl_tick_src_timestamp = 313; // srcTimestamp of cxl order triggering packet (if any)
    sfixed64 cxl_tick_net_timestamp = 316; // netTimestamp of cxl order triggering packet (if any)
    sfixed64 cxl_tick_eng_timestamp = 319; // execution engine host tick timestamp (packet arrival)
    sfixed64 cxl_tick_sgw_timestamp = 322; // street gateway host tick timestamp (packet arrival)
    YesNo new_hi_priority = 325; // queue priority of new order
    YesNo cxl_hi_priority = 328; // queue priority of cxl order
    float new_queue_delay = 331; // new order queue delay (waiting in StreetGW send queue)
    float cxl_queue_delay = 334; // cxl order queue delay (waiting in StreetGW send queue)
    float new_prep_delay = 337; // new order create delay (time spend procesing new order)
    float cxl_prep_delay = 340; // cxl order create delay (time spend procesing cxl order)
    float new_send_delay = 343; // new order send delay (time spend sending /blocking/ network packet)
    float cxl_send_delay = 346; // cxl order send delay (time spent sending /blocking/ network packet)
    sfixed64 new_net_timestamp = 349; // netTimestamp @ new packet send
    sfixed64 new_fix_timestamp = 352; // fix.sendingTime claimed in the new order ack exec report
    sfixed64 cxl_net_timestamp = 355; // netTimestamp @ cxl packet send
    sfixed64 cxl_fix_timestamp = 358; // fix.sendingTime claimed in the cancel ack exec report
    float ack_latency = 361; // new order to fill/ack latency (in milliseconds)
    float cxl_latency = 364; // cxl to fill/ack latency (in milliseconds; if canceled)
    sfixed32 send_buffer_counter = 367; // network buffer send counter (increments on every network send)
    string up_error = 370;
    string dn_error = 373;
    google.protobuf.Timestamp timestamp = 376;
}


/*
    SpdrStreetParty records are published by SRFixGateway servers and are used to maintain/reload state for all account details
*/    
message SpdrStreetParty {
    message PKey {
        
        string sr_accnt = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string routing_code = 100;
    sfixed64 uuid = 103; // Session UUID active when this message was sent
    google.protobuf.Timestamp expire_dttm = 106;
    sfixed64 request_id = 109; // Request ID, used to refer to this party description
    TypeOfAction type_of_action = 112; // Add/Delete
    CmtaGiveUpType cmta_give_up = 115; // Giveup, SGX (singapore exchange)
    FutClearingRange fut_clearing_range = 118; // From account config
    FutCustType fut_cust_type = 121; // From account config
    string exec_firm = 124;
    string cust_accnt = 127;
    string operator_firm = 130;
    PartyStatus party_status = 133;
    string status_detail = 136;
    google.protobuf.Timestamp timestamp = 139;
}


/*
    SpdrStreetQuote records are published by SRFixQuoteGateway servers and are used to maintain/reload state for all handled orders
*/    
message SpdrStreetQuote {
    message PKey {
        
        string cl_ord_id = 10; // SR child order number (EE)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 100; // QuoteGW ServerCode
    string fix_route_dn = 103; // QuoteGW -> Exchange session
    string up_sender_comp_id = 106; // senderCompID/targetCompID of the QuoteGW -> EE session
    string up_target_comp_id = 109;
    string up_sender_sub_id = 112; // senderSubID/targetSubID of the QuoteGW -> EE session
    string up_target_sub_id = 115;
    string quote_key = 118; // quote key associated with this order (eg. QuoteEntryId)
    string accnt = 121; // SR account
    string client_firm = 124; // SR clientFirm
    string exch_accnt = 127; // exchange account
    string exch_cl_firm = 130; // exchange clientFirm
    sfixed64 base_cl_ord_id = 133; // EE side base clOrdId
    sfixed64 parent_number = 136; // SR parent number
    sfixed64 base_parent_number = 139;
    OptionKey sec_key = 142;
    SpdrKeyType sec_type = 145;
    SpdrSource spdr_source = 148; // from child order
    sfixed64 grouping_code = 151; // from child order
    string cti_code = 154;
    string ext_trader_id = 157;
    string ext_trading_location = 160;
    YesNo is_manual = 163;
    string symbol = 166;
    sfixed64 security_id = 169;
    string product_group = 172; // Underlying product code.  I.E. All GE (Eurodollar) spreads, options, futures will be in the same productGroup - This is the Asset field from the SecurityDefinition message
    BuySell order_side = 175;
    double order_price = 178;
    double exch_order_price = 181;
    double exch_display_factor = 184;
    string price_format = 187;
    sfixed32 order_size = 190;
    sfixed32 leaves_qty = 193;
    string ord_status = 196;
    sfixed32 cum_fill_qty = 199;
    double avg_fill_price = 202;
    sfixed32 new_counter = 205; // updateCounter at time of quote update
    sfixed32 cxl_counter = 208; // updateCounter at time of quote cancel
    YesNo is_acked = 211; // has initial ack been returned to EE
    YesNo is_cxl_request = 214; // has EE requested a cancel
    YesNo is_cxl_acked = 217; // has the EE cancel request been acked
    string cancel_reason = 220;
    YesNo is_rejected = 223; // has exchange rejected the resulting quote
    string reject_reason = 226;
    YesNo is_pending = 229;
    YesNo is_peg_limit = 232; // Yes if order sent to exchange with a Market or 'Peg' style limit (returned in exec report)
    YesNo is_held = 235; // Yes if order sent to exchange marked "Held"
    YesNo is_directed = 238; // Yes if order sent to exchange directed to a specific exchange, as opposed to a smart router
    double new_timestamp = 241;
    double cxl_timestamp = 244;
    sfixed32 base_active_quantity = 247; // base parent number (total active quantity @ child create time)
    sfixed32 base_cum_fill_quantity = 250; // base parent number (cum fill quantity @ child create time)
    SGContingency contingency = 253; // QuoteGW fast contingency (if any exists)
    double contingent_level = 256; // StreetGW contingency trigger level
    OptionKey contingent_sec_key = 259;
    SGContingentAction action = 262;
    sfixed64 action_net_timestamp = 265; // netTimestamp of action trigger (if any)
    sfixed64 action_src_timestamp = 268; // source timestamp of action trigger (if any)
    float action_latency = 271; // latency from netTimestamp to action completion
    ChildCreateReason order_create_reason = 274;
    ChildCancelReason order_cancel_reason = 277;
    sfixed64 new_tick_src_timestamp = 280; // srcTimestamp of new order triggering packet (if any)
    sfixed64 new_tick_net_timestamp = 283; // netTimestamp of new order triggering packet (if any)
    sfixed64 new_tick_eng_timestamp = 286; // execution engine host tick timestamp (packet arrival)
    sfixed64 new_tick_sgw_timestamp = 289; // street gateway host tick timestamp (packet arrival)
    sfixed64 cxl_tick_src_timestamp = 292; // srcTimestamp of cxl order triggering packet (if any)
    sfixed64 cxl_tick_net_timestamp = 295; // netTimestamp of cxl order triggering packet (if any)
    sfixed64 cxl_tick_eng_timestamp = 298; // execution engine host tick timestamp (packet arrival)
    sfixed64 cxl_tick_sgw_timestamp = 301; // street gateway host tick timestamp (packet arrival)
    float new_queue_delay = 304; // new order queue delay (waiting in StreetGW send queue)
    float cxl_queue_delay = 307; // cxl order queue delay (waiting in StreetGW send queue)
    float new_prep_delay = 310; // new order create delay (time spend procesing new order)
    float cxl_prep_delay = 313; // cxl order create delay (time spend procesing cxl order)
    float new_send_delay = 316; // new order send delay (time spend sending /blocking/ network packet)
    float cxl_send_delay = 319; // cxl order send delay (time spent sending /blocking/ network packet)
    sfixed64 new_net_timestamp = 322; // netTimestamp @ new packet send
    sfixed64 cxl_net_timestamp = 325; // netTimestamp @ cxl packet send
    float ack_latency = 328; // new order to fill/ack latency (in milliseconds)
    float cxl_latency = 331; // cxl to fill/ack latency (in milliseconds; if canceled)
    string up_error = 334;
    string dn_error = 337;
    google.protobuf.Timestamp timestamp = 340;
}


/*
    SpdrStreetQuoteRequest records are published by SRFixQuoteGateway servers and are used to maintain/reload state for all handled request for quote messages
*/    
message SpdrStreetQuoteRequest {
    message PKey {
        
        string quote_req_id = 10; // SR quote request ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100;
    SpdrKeyType sec_type = 103;
    sfixed64 street_quote_req_id = 106; // Street quote request id
    string server_code = 109; // QuoteGW ServerCode
    string fix_route_dn = 112; // QuoteGW -> Exchange session
    string up_sender_comp_id = 115; // senderCompID/targetCompID of the QuoteGW -> EE session
    string up_target_comp_id = 118;
    string up_sender_sub_id = 121; // senderSubID/targetSubID of the QuoteGW -> EE session
    string up_target_sub_id = 124;
    string accnt = 127; // SR account
    string client_firm = 130; // SR clientFirm
    string exch_accnt = 133; // exchange account
    string exch_cl_firm = 136; // exchange clientFirm
    SpdrSource spdr_source = 139; // from child order
    sfixed64 grouping_code = 142; // from child order
    string product_group = 145; // Underlying product code.  I.E. All GE (Eurodollar) spreads, options, futures will be in the same productGroup - This is the Asset field from the SecurityDefinition message
    string symbol = 148;
    sfixed64 security_id = 151;
    BuySell order_side = 154;
    sfixed32 order_size = 157;
    YesNo is_acked = 160;
    YesNo is_rejected = 163;
    string reject_reason = 166;
    sfixed64 new_tick_src_timestamp = 169; // srcTimestamp of new order triggering packet (if any)
    sfixed64 new_tick_net_timestamp = 172; // netTimestamp of new order triggering packet (if any)
    sfixed64 new_tick_eng_timestamp = 175; // execution engine host tick timestamp (packet arrival)
    sfixed64 new_tick_sgw_timestamp = 178; // street gateway host tick timestamp (packet arrival)
    float new_queue_delay = 181; // new order queue delay (waiting in StreetGW send queue)
    google.protobuf.Timestamp timestamp = 184;
}


/*
    SpdrStreetRouteLatency records are published by SRFixStreetGateway servers and are used for internal analysis
*/    
message SpdrStreetRouteLatency {
    message PKey {
        
        string client_firm = 10;
        string routing_code = 13; // StreetGW routing code
        MessageCategory message_category = 16;
        string ex_destination = 19; // exchange or algo
        google.protobuf.Timestamp summary_window = 22; // 10 minute time window
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string sender_comp_iD = 100;
    string target_comp_iD = 103;
    string sender_sub_iD = 106;
    string target_sub_iD = 109;
    string server_code = 112; // StreetGW ServerCode
    sfixed32 num_net_tick_actions = 115; // number messages with SrcTimestamp and NetTimestamp values
    float min_net_tick_latency = 118; // SrcTimestamp (upstream/exchange timestamp) to NetTimestamp (arrival @ SR switch) Latency
    float med_net_tick_latency = 121;
    float max_net_tick_latency = 124;
    sfixed32 num_eng_tick_actions = 127; // number of new order with a NetTimestamp and EngTimestamp values
    float min_eng_tick_latency = 130; // NetTimestamp (arrival @ SR switch) to EngTimestamp (arrival @ SR exec engine) Latency
    float med_eng_tick_latency = 133;
    float max_eng_tick_latency = 136;
    sfixed32 num_sgw_tick_actions = 139; // number of new order with a EngTimestamp and SgwTimestamp values
    float min_sgw_tick_latency = 142; // EngTimestamp (arrival @ SR exec engine) to SgwTimestamp (arrival @ SR street gateway) Latency
    float med_sgw_tick_latency = 145;
    float max_sgw_tick_latency = 148;
    sfixed32 num_contingent_msgs = 151;
    sfixed32 num_contingent_actions = 154;
    float min_cont_net_tick_latency = 157;
    float med_cont_net_tick_latency = 160;
    float max_cont_net_tick_latency = 163;
    float min_cont_sgw_tick_latency = 166;
    float med_cont_sgw_tick_latency = 169;
    float max_cont_sgw_tick_latency = 172;
    float min_cont_prep_latency = 175;
    float med_cont_prep_latency = 178;
    float max_cont_prep_latency = 181;
    sfixed32 num_lo_priority = 184;
    float min_lo_priority_queue_delay = 187;
    float med_lo_priority_queue_delay = 190;
    float max_lo_priority_queue_delay = 193;
    sfixed32 num_hi_priority = 196;
    float min_hi_priority_queue_delay = 199;
    float med_hi_priority_queue_delay = 202;
    float max_hi_priority_queue_delay = 205;
    float min_prep_delay = 208;
    float med_prep_delay = 211;
    float max_prep_delay = 214;
    float min_send_delay = 217;
    float med_send_delay = 220;
    float max_send_delay = 223;
    float min_ack_latency = 226;
    float med_ack_latency = 229;
    float max_ack_latency = 232;
    float max_ten_ms_window_msg_rate = 235;
    float max_hund_ms_window_msg_rate = 238;
    float max_one_sec_window_msg_rate = 241;
    float max_ten_sec_window_msg_rate = 244;
    float max_minute_window_msg_rate = 247;
    google.protobuf.Timestamp timestamp = 250;
}


/*
    SpdrStreetAlloc records are published by SRFixStreetGateway servers and are used to maintain/reload state for all handled orders
*/    
message SpdrStreetSecDef {
    message PKey {
        
        sfixed64 sec_def_iD = 10; // SR child secDefId (EE)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string server_code = 100; // StreetGW ServerCode
    string fix_route_dn = 103;
    string up_sender_comp_id = 106; // senderCompID/targetCompID of the StreetGW -> EE session
    string up_target_comp_id = 109;
    string up_sender_sub_id = 112; // senderSubID/targetSubID of the StreetGW -> EE session
    string up_target_sub_id = 115;
    google.protobuf.Timestamp street_session_date = 118;
    int32 street_session_counter = 121;
    sfixed32 street_seq_num_out = 124;
    string street_sec_def_id = 127;
    string template_name = 130; // outbound rewrite template name
    string sr_accnt = 133;
    OptionKey sec_key = 136;
    SpdrKeyType sec_type = 139;
    string security_iD = 142;
    RequestStatus usd_status = 145;
    YesNo is_acked = 148;
    float ack_latency = 151; // new order to ack latency (in milliseconds)
    string alt_order_iD = 154;
    string text = 157;
    string up_error = 160;
    string dn_error = 163;
    google.protobuf.Timestamp timestamp = 166;
}


/*
    SpdrStripeTrigger records are used to allocate sweep risk and trigger cross stripe release of parent orders submitted with startType=WaitTrigger.  These records are published by a SR Strategy Server if/when a SpdrReleaseWaitTrigger message is received.
*/    
message SpdrStripeTrigger {
    message PKey {
        
        string accnt = 10;
        sfixed64 trigger_group_id = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 net_timestamp = 100;
    google.protobuf.Timestamp timestamp = 103;
}


    
message SpdrSweepDetail {
    message PKey {
        
        sfixed64 parent_number = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string engine_name = 100; // SpiderRock execution engine that handled the parent order
    string accnt = 103;
    string client_firm = 106;
    sfixed64 risk_group_id = 109;
    sfixed64 trigger_group_id = 112; // WaitTrigger group Id
    OptionKey sec_key = 115;
    SpdrKeyType sec_type = 118;
    sfixed32 parent_order_size = 121;
    double parent_limit_price = 124;
    BuySell order_side = 127;
    YesNo is_iSOSweep = 130;
    sfixed32 risk_limit_size = 133;
    SpdrRisk risk_limit_reason = 136;
    string risk_limit_detail = 139;
    double nbbo_bid1 = 142;
    double nbbo_ask1 = 145;
    sfixed32 nbbo_bid_size1 = 148;
    sfixed32 nbbo_ask_size1 = 151;
    int32 nbbo_bid_cnt1 = 154;
    int32 nbbo_ask_cnt1 = 157;
    fixed32 nbbo_bid_mask1 = 160;
    fixed32 nbbo_ask_mask1 = 163;
    double nbbo_bid2 = 166;
    double nbbo_ask2 = 169;
    sfixed32 nbbo_bid_size2 = 172;
    sfixed32 nbbo_ask_size2 = 175;
    int32 nbbo_bid_cnt2 = 178;
    int32 nbbo_ask_cnt2 = 181;
    fixed32 nbbo_bid_mask2 = 184;
    fixed32 nbbo_ask_mask2 = 187;
    sfixed64 net_timestamp = 190;
    google.protobuf.Timestamp timestamp = 193;
}


    
message SpdrSweepExchDetail {
    message PKey {
        
        sfixed64 parent_number = 10;
        sfixed64 trigger_group_id = 13;
        string exchange = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string accnt = 100;
    string client_firm = 103;
    OptionKey sec_key = 106;
    SpdrKeyType sec_type = 109;
    BuySell order_side = 112;
    sfixed32 parent_order_size = 115;
    double parent_limit_price = 118;
    double exch_bid = 121;
    double exch_ask = 124;
    sfixed32 exch_bid_sz = 127;
    sfixed32 exch_ask_sz = 130;
    sfixed64 cl_ord_id = 133;
    double child_prc = 136;
    sfixed32 child_size = 139;
    sfixed32 max_child_size = 142;
    YesNo is_iSOChild = 145;
    SweepResult child_result = 148;
    sfixed64 net_timestamp = 151;
    google.protobuf.Timestamp timestamp = 154;
}


    
message SpdrSymbolViewDetail {
    message PKey {
        
        OptionKey okey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 request_iD = 100;
    ExpiryKey fkey = 103;
    TickerKey ticker = 106;
    int32 strike_precision = 109;
    double cab_tick_size = 112;
    double min_tick_size = 115;
    PriceFormat price_format = 118;
    PriceFormat u_price_format = 121;
    TimeMetric time_metric = 124;
    ExerciseTime exercise_time = 127;
    google.protobuf.Timestamp expiration = 130;
    int32 days = 133;
    float years = 136;
    float rate = 139;
    float sdiv = 142;
    float ddiv = 145;
    float sdiv_ln = 148; // user overrides / if any
    float sdiv_sh = 151;
    float theo_rate = 154;
    float theo_sDiv = 157;
    float theo_dDiv = 160;
    YesNo has_theo_rate = 163;
    YesNo has_theo_dDiv = 166;
    float x_axis = 169;
    float axis_fUPrc = 172;
    float axis_vol_rT = 175;
    MoneynessType moneyness_type = 178; // moneyness (xAxis) convention
    float ecnt = 181; // number of earnings events to expiration
    int32 edays = 184; // days to next earning event (can be less than zero)
    int32 ddays = 187; // days to next dividend (-99 = none)
    string root_def = 190; // root settlement string
    int32 ex_type = 193;
    int32 model_type = 196;
    PricingModel pricing_model = 199;
    float strike_ratio = 202;
    float symbol_ratio = 205;
    float cash_on_exercise = 208;
    sfixed32 underliers_per_cn = 211;
    UnderlierType underlier_type = 214; // type of underlier (affects $greek calculations)
    float tick_value = 217; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 220; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 223;
    string delivery_month_code = 226;
    sfixed32 delivery_year = 229;
    float s_vol = 232; // current surface vol (spline)
    float atm_vol = 235; // atm vol
    float binary_days = 238;
    float c_width = 241; // exp [w=1/32] average market width (askPrice - bidPrice) [max width $1.00]
    float c_tv = 244; // theo vol (fair vol)
    int32 c_tv_err = 247; // theo vol error code
    float c_bv = 250; // theo bvol
    float c_sv = 253; // theo svol
    float c_tVol_adj = 256; // theo vol adjustment (grid adj)
    float c_ctrl_adj = 259; // risk ctrl theo vol adjustment
    float c_bOpn_edge = 262; // additional buy open premium
    float c_sOpn_edge = 265; // addtional sell open premium
    float c_bCls_edge = 268; // additional close premium
    float c_sCls_edge = 271; // additional close premium
    float c_yUPrc = 274;
    float c_yVol = 277; // yesterday's closing SRSurface volatility (from OptionOpenMark record)
    float c_yOpx = 280; // yesterday's closing SRSurface price
    float c_ySDv = 283; // yesterday's closing sdiv
    float c_yDDv = 286; // yesterday's closing ddiv
    float c_yBid_v = 289; // implied vol of SR closing bid price
    float c_yAsk_v = 292; // implied vol of SR closing ask price
    float c_yDe = 295; // greeks from SR surface volatility
    sfixed32 c_oI = 298; // open interest (market)
    string c_cls_only_mask = 301; // list of close only exchanges
    float p_width = 304; // exp [w=1/32] average market width (askPrice - bidPrice) [max width $1.00]
    float p_tv = 307; // theo vol (fair vol)
    int32 p_tv_err = 310; // theo vol error code
    float p_bv = 313; // theo bvol
    float p_sv = 316; // theo svol
    float p_tVol_adj = 319; // theo vol adjustment (grid adj)
    float p_ctrl_adj = 322; // risk ctrl theo vol adjustment
    float p_bOpn_edge = 325; // additional buy open premium
    float p_sOpn_edge = 328; // addtional sell open premium
    float p_bCls_edge = 331; // additional close premium
    float p_sCls_edge = 334; // additional close premium
    float p_yUPrc = 337;
    float p_yVol = 340; // yesterday's closing SRSurface volatility (from OptionOpenMark record)
    float p_yOpx = 343; // yesterday's closing SRSurface price
    float p_ySDv = 346; // yesterday's closing sdiv
    float p_yDDv = 349; // yesterday's closing ddiv
    float p_yBid_v = 352; // implied vol of SR closing bid price
    float p_yAsk_v = 355; // implied vol of SR closing ask price
    float p_yDe = 358; // greeks from SR surface volatility
    sfixed32 p_oI = 361; // open interest (market)
    string p_cls_only_mask = 364; // put list of close only exchanges
}


    
message SpdrSymbolViewerRequest {
    message VisibleExpiry {
        
        ExpiryKey expiry = 235;
    }


    MbusInfo descriptor = 1;
    
    StrikeView strike_view = 100;
    ExpireView expire_view = 103;
    MHedgeView mhedge_view = 106;
    ActiveView active_view = 109;
    ExerciseView exercise_view = 112;
    string symbol = 115;
    string accounts1 = 118;
    string accounts2 = 121;
    string accounts3 = 124;
    string accounts4 = 127;
    string user_name = 130;
    string symbol1 = 133;
    string symbol2 = 136;
    string symbol3 = 139;
    string symbol4 = 142;
    string symbol5 = 145; // symbols 5-7: if empty, TS supplies related symbols (same industry/group)
    string symbol6 = 148;
    string symbol7 = 151;
    sfixed32 request_iD = 154;
    GetAction action = 157;
    GetResult result = 160;
    TickerKey skey = 163;
    ExpiryKey fkey = 166;
    TickerKey skey1 = 169;
    ExpiryKey fkey1 = 172;
    TickerKey skey2 = 175;
    ExpiryKey fkey2 = 178;
    TickerKey skey3 = 181;
    ExpiryKey fkey3 = 184;
    TickerKey skey4 = 187;
    ExpiryKey fkey4 = 190;
    TickerKey skey5 = 193;
    ExpiryKey fkey5 = 196;
    TickerKey skey6 = 199;
    ExpiryKey fkey6 = 202;
    TickerKey skey7 = 205;
    ExpiryKey fkey7 = 208;
    ExpiryKey fkey_other_surf = 211; // SV other symbol compare feature
    fixed32 opt_exch_mask = 214;
    float strike_view_custom_delta_min = 217;
    float strike_view_custom_delta_max = 220;
    string theo_model = 223; // --- returned from TS to tool ---
    string theo_client_firm = 226;
    google.protobuf.Timestamp timestamp = 229;
    repeated VisibleExpiry visible_expiry = 232;
}


/*
    SpdrTheoExp2PtCurve records are used along side SpdrTheoExpSurface records to provide a complete x/y specification of a theoretical skew curve. Spline interpolation is used for values between x/y points
*/    
message SpdrTheoExp2PtCurve {
    message PKey {
        
        ExpiryKey ekey = 10;
        string theo_model = 13; // theo model
        string client_firm = 16; // client firm this theo model is associated with (controls visibility)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    XAxisType x_axis_type = 103;
    float axis_vol = 106;
    float x00 = 109;
    float x01 = 112;
    float x02 = 115;
    float x03 = 118;
    float x04 = 121;
    float x05 = 124;
    float x06 = 127;
    float x07 = 130;
    float x08 = 133;
    float x09 = 136;
    float x10 = 139;
    float x11 = 142;
    float x12 = 145;
    float x13 = 148;
    float x14 = 151;
    float y00 = 154;
    float y01 = 157;
    float y02 = 160;
    float y03 = 163;
    float y04 = 166;
    float y05 = 169;
    float y06 = 172;
    float y07 = 175;
    float y08 = 178;
    float y09 = 181;
    float y10 = 184;
    float y11 = 187;
    float y12 = 190;
    float y13 = 193;
    float y14 = 196;
    google.protobuf.Timestamp timestamp = 199; // last update dttm (from loader)
}


/*
    SpdrTheoExpSurface records reprent a client theoretical volatility surface for a ExpiryKey (ticker + expiration).  These records can either directly specify parameters to be used in a parameterized surface function or can link to a record (eg. SpdrTheoExp2PtCurve) containing x/y points sampling a client constructed curve.  Alternatively, they can specify that a SpiderRock implied skew curve should be used along with client supplied atm volatilities.
    Surface dynamics can be specified in multiple ways with these records and a number of pricing parameter overrides are also available.
    See the technical note on client supplied theoretical surfaces for more details.
*/    
message SpdrTheoExpSurface {
    message PKey {
        
        ExpiryKey ekey = 10;
        string theo_model = 13;
        string client_firm = 16; // client firm this theo model is associated with (controls visibility)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    SkewFunc skew_func = 103;
    VolTimeUnits vol_time_units = 106; // default uses the SR native time metric (trading minutes); V6 is a prior SR metric (trading days)
    uPrcRefRule u_prc_ref_rule = 109;
    float ref_uPrc = 112; // -1 = use SR uPrc @ record insert
    float ref_uPrc_weight = 115; // w: [0,1];adjRefUPrc = w * refUPrc + (1 - w) * uPrc;note: w=1 implies sticky strike behavior;w=0 implies sticky delta behavior
    float ref_sRAtm = 118; // -1 = use SR surface atm @ record insert
    float ref_sRAtm_weight = 121; // w: [0,1];theoVolAdj = theoVol + tvSlope * (uPrc - refUPrc) + w * (liveSRAtm - refSRAtm)
    float param_a = 124; // param A - J are inputs to the skewFunc model selected above
    float param_b = 127;
    float param_c = 130;
    float param_d = 133;
    float param_e = 136;
    float param_f = 139;
    float param_g = 142;
    float param_h = 145;
    float param_i = 148;
    float param_j = 151;
    float theo_vol = 154; // theo volatility @ hypothetical atm strike (note: hypothetical atm strike depends on the definition of xAxis implied by the skewFunc model;usually the strike where xAxis = 0)
    float b_opn_vol = 157; // buy open vol
    float b_cls_vol = 160; // buy close vol
    float s_opn_vol = 163; // sell open vol
    float s_cls_vol = 166; // sell close vol
    float b_opn_edge = 169; // edge spread to open when buying
    float b_cls_edge = 172; // edge spread to close when buying
    float s_opn_edge = 175; // edge spread to open when selling
    float s_cls_edge = 178; // edge spread to close when selling
    BuySellConvention buy_sell_convention = 181;
    float ln_dDiv = 184; // (depricated)
    float sh_dDiv = 187; // (depricated)
    float ln_sDiv = 190; // long sdiv
    float sh_sDiv = 193; // short sdiv
    float tv_slope = 196; // tvSlope = dTheoVol / dUPrc;theoVolAdj = theoVol + tvSlope * (uPrc - refUPrc).  Note: tvSlope affects the calculation of theoSurface veSlope values which in turn affect hedgeDelta calculations when account.hedgeType = 'TvS'
    DivRule div_rule = 199; // specifies how DDiv and SDiv values will be incorporated
    YesNo user_rate_override = 202; // use rate from the UserRateOverride table instead of SR Rate curve
    YesNo user_sDiv_override = 205; // use sdiv from the UserSDivOverride table instead of SR SDiv
    YesNo user_dDiv_override = 208; // use dividends from the UserDividendOverride table instead of SR Dividends
    float min_uBid = 211; // any non-hold status will revert to markup if live uMid is outside of [minUBid, maxUAsk]
    float max_uAsk = 214;
    TheoStatus theo_status = 217;
    string comment = 220;
    google.protobuf.Timestamp updated = 223; // datetime of last record update.  will default to current datetime on record load of not supplied
    string modified_by = 226; // user who last modified this record
    google.protobuf.Timestamp timestamp = 229; // timestamp of last modification
}


/*
    Records inserted into this table cancels all parent orders associated with userName/clientFirm
*/    
message SpdrUserCancel {
    message PKey {
        
        string cxl_user_name = 10; // Cancel all parent orders associated with cxlUserName and clientFirm
        string client_firm = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string cxl_reason = 100;
    string engine_name = 103; // set by the engine handling event (should be blank on arrival)
    string modified_by = 106; // user who last modified this record
    google.protobuf.Timestamp timestamp = 109; // timestamp of last modification
}


    
message SpdrViewerRequest {


    MbusInfo descriptor = 1;
    
    string accnt = 100; // account(s) to get records from (accnt;accnt;accnt)
    google.protobuf.Timestamp timestamp = 103; // checkpoint timestamp used on restart
    YesNo active_only = 106;
    GetAction action = 109;
}


    
message SpdrVolChartRequest {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100;
    string accnt = 103;
    TickerKey relative_ticker = 106;
    string user_name = 109;
    GetAction action = 112;
    google.protobuf.Timestamp timestamp = 115; // server timestamp
}


/*
    Live spread quotes with SpiderRock markup details for equity and future option spreads.
*/    
message SpreadBookMarkup {
    message PKey {
        
        TickerKey skey = 10; // SR Spread Key (should have corresponding ProductDefinition record)
        YesNo is_test = 13; // Yes indicates that response is made of entirely of isTest=Yes SpreadExchOrders
    }

    message MarkupLegs {
        
        OptionKey leg_sec_key = 238;
        SpdrKeyType leg_sec_type = 241;
        PriceFormat leg_price_format = 244;
        string leg_security_desc = 247; // Security description
        BuySell leg_side = 250;
        uint32 leg_ratio = 253; // leg ratio (1, 2, etc)
        double leg_bid_price = 256; // leg market bid
        sfixed32 leg_bid_size = 259;
        double leg_ask_price = 262; // leg market ask
        sfixed32 leg_ask_size = 265;
        float leg_years = 268;
        double leg_uPrc = 271;
        float leg_opt_mult = 274; // SPC if equity, 1 if option/future
        float leg_fut_mult = 277; // 1 if equity, uMult if option/future
        float leg_surf_vol = 280; // leg surface volatility
        float leg_surf_price = 283; // surface price as of message arrival
        float leg_surf_de = 286;
        float leg_surf_ga = 289;
        float leg_surf_ve = 292;
        int32 leg_surf_err = 295;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // common spread underlier
    PriceFormat price_format = 103;
    double bid_price1 = 106; // bid price
    YesNo is_bid_price1_valid = 109;
    double ask_price1 = 112; // ask price
    YesNo is_ask_price1_valid = 115;
    sfixed32 bid_size1 = 118; // cumulative size at bidPrice
    sfixed32 ask_size1 = 121; // cumulative size at askPrice
    fixed32 bid_mask1 = 124; // exchange bid bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)
    fixed32 ask_mask1 = 127; // exchange ask bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)
    OptExch bid_exch1 = 130; // exchange at bid price with the largest size (if any)
    OptExch ask_exch1 = 133; // exchange at ask price with the largest size (if any)
    google.protobuf.Timestamp bid_time = 136; // last bid price or size change
    google.protobuf.Timestamp ask_time = 139; // last ask price or size change
    UpdateType update_type = 142;
    int32 num_stk_legs = 145;
    int32 num_fut_legs = 148;
    int32 num_opt_legs = 151;
    YesNo all_legs_valid = 154;
    YesNo user_defined = 157;
    SRSpreadType spread_type = 160; // option spread type
    SRRatioType ratio_type = 163;
    double leg_bid_prc = 166;
    double leg_ask_prc = 169;
    sfixed32 leg_bid_sz = 172;
    sfixed32 leg_ask_sz = 175;
    double surf_prc = 178;
    float surf_delta = 181;
    float surf_gamma = 184;
    float surf_vega = 187;
    float surf_wt_vega = 190;
    int32 surf_error = 193; // error code from surface price calc (if any)
    google.protobuf.Timestamp min_expiry = 196; // expiry of earliest option leg(s)
    google.protobuf.Timestamp max_expiry = 199; // expiry of latest option leg(s)
    float min_years = 202;
    float max_years = 205;
    float ref_uPrc = 208; // reference underlier price
    float print_price = 211; // last spread print price (if any)
    google.protobuf.Timestamp print_time = 214;
    sfixed32 print_size = 217; // last spread print size (if any)
    sfixed32 print_volume = 220;
    sfixed32 grp_num = 223;
    string security_desc = 226;
    sfixed64 filter_id = 229; // tool server filter request ID
    google.protobuf.Timestamp timestamp = 232;
    repeated MarkupLegs markup_legs = 235;
}


/*
    This table contains live spread quote records from the individual equity option exchanges.  Each record contains up to two price levels and represents a live snapshot of the book for a specific spread.
*/    
message SpreadBookQuote {
    message PKey {
        
        TickerKey skey = 10; // SR Spread Key (should have corresponding ProductDefinition record)
        YesNo is_test = 13; // Yes indicates that response is made of entirely of isTest=Yes SpreadExchOrders
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // common spread underlier
    double bid_price1 = 103; // bid price
    YesNo is_bid_price1_valid = 106;
    double ask_price1 = 109; // ask price
    YesNo is_ask_price1_valid = 112;
    sfixed32 bid_size1 = 115; // cumulative size at bidPrice
    sfixed32 ask_size1 = 118; // cumulative size at askPrice
    double bid_price2 = 121; // 2nd best bid price
    YesNo is_bid_price2_valid = 124;
    double ask_price2 = 127; // 2nd best ask price
    YesNo is_ask_price2_valid = 130;
    sfixed32 bid_size2 = 133; // cumulative size at 2nd price
    sfixed32 ask_size2 = 136; // cumulative size at 2nd price
    OptExch bid_exch1 = 139; // exchange at bid price with the largest size (if any)
    OptExch ask_exch1 = 142; // exchange at ask price with the largest size (if any)
    fixed32 bid_mask1 = 145; // exchange bid bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)
    fixed32 ask_mask1 = 148; // exchange ask bit mask (OptExch mask for NMS spreads; zero for single exchange spreads)
    google.protobuf.Timestamp bid_time = 151; // last bid price or size change
    google.protobuf.Timestamp ask_time = 154; // last ask price or size change
    UpdateType update_type = 157;
    sfixed64 src_timestamp = 160; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 163; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 166;
}


    
message SpreadBookTickerExpirySummary {
    message PKey {
        
        TickerKey ticker = 10; // Spread Ticker Key
        google.protobuf.Timestamp expiry = 13; // minExpiryDate of spread
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_spreads = 100;
    float total_wt_vega = 103;
    google.protobuf.Timestamp timestamp = 106;
}


    
message SpreadBookTickerSummary {
    message PKey {
        
        TickerKey ticker = 10; // Spread Ticker Key
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 num_spreads = 100;
    float total_wt_vega = 103;
    google.protobuf.Timestamp timestamp = 106;
}


/*
    SpreadCloseMark records are created immediately after the market close (clsMarkState=SRClose), when exchanges publish official marks (clsMarkState=ExchClose), and again during top of day rotation (clsMarkState=Final).  These records contain closing quotes and prices as well as markup details for all exchange spreads
    SpreadCloseMark records are published to the SpiderRock elastic cluster when clsMarkState=Final
    BaseObj:Spread
*/    
message SpreadCloseMark {
    message PKey {
        
        TickerKey skey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ClsMarkState cls_mark_state = 100; // Close mark state. None; LastPrt; SRClose; ExchClose; Final
    double opn_prc = 103; // Open price
    double min_prc = 106; // Low price
    double max_prc = 109; // High price
    sfixed32 prt_count = 112; // Print count
    sfixed32 prt_volume = 115; // Print volume
    double avg_mkt_size = 118; // Average market size
    double avg_mkt_width = 121; // Average market width
    double bid_prc = 124; // bid price (close - 1min)
    double ask_prc = 127; // ask price (close - 1min)
    double sr_cls_prc = 130; // SR close mark (close - 1min)
    double close_prc = 133; // official exchange closing mark (last print;then official close)
    google.protobuf.Timestamp timestamp = 136;
}


    
message SpreadDisplayRequest {


    MbusInfo descriptor = 1;
    
    GetAction action = 100;
    sfixed64 filter_id = 103;
    string ticker = 106; // sym,sym,sym ...
    string expiry = 109; // YYYYMMDD,YYYYMMDD,YYYYMMDD (must match 1st expiry in spread)
    string industry = 112; // ind, ind, ind (numeric values)
    string tokens = 115; // additional search tokens
    float min_years = 118; // (-1 = no limit)
    float max_years = 121;
    float min_underlying_price = 124; // (-1 = no limit)
    float max_underlying_price = 127;
    float min_surf_edge = 130;
    float min_surf_vega = 133;
    float max_surf_vega = 136;
    float min_surf_wt_vega = 139;
    float max_surf_wt_vega = 142;
    float min_surf_delta = 145;
    float max_surf_delta = 148;
    sfixed32 min_spread_quantity = 151;
    YesNo is_covered = 154; // Yes = covered options only, No = options w/o undelier
    YesNo is_future_spread = 157;
    SRSpreadTypeFilter spread_type = 160;
    SRRatioTypeFilter ratio_type = 163;
    sfixed32 max_num_results = 166;
    string user_name = 169;
}


    
message SpreadExchOrder {
    message PKey {
        
        string order_iD = 10;
        OptExch exch = 13; // can be SDRK
        BuySell side = 16;
        YesNo is_test = 19; // usually indicate that this is a SDRK spread from a test account
    }

    message Legs {
        
        OptionKey leg_sec_key = 154;
        SpdrKeyType leg_sec_type = 157;
        BuySell leg_side = 160;
        fixed32 leg_ratio = 163; // leg ratio (1, 2, etc)
        PositionType position_type = 166;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey skey = 100; // SR assigned Spread TickerKey (can be found in ProductDefinition) (might be null)
    sfixed32 size = 103; // total spreads available
    double price = 106;
    YesNo is_price_valid = 109;
    sfixed32 orig_order_size = 112; // original order size (if available)
    ExchOrderType order_type = 115;
    ExchOrderStatus order_status = 118;
    MarketQualifier market_qualifier = 121;
    ExecQualifier exec_qualifier = 124;
    TimeInForce time_in_force = 127;
    FirmType firm_type = 130;
    string clearing_firm = 133;
    string clearing_accnt = 136;
    sfixed64 src_timestamp = 139; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 142; // SpiderRock network PTP timestamp
    sfixed64 dgw_timestamp = 145; // SpiderRock data gateway timestamp
    google.protobuf.Timestamp timestamp = 148;
    repeated Legs legs = 151;
}


    
message SpreadExchPrint {
    message PKey {
        
        string strategy_iD = 10; // exchange assigned strategy ID
        OptExch exch = 13; // print exchange
    }

    message Legs {
        
        OptionKey leg_sec_key = 127;
        SpdrKeyType leg_sec_type = 130;
        BuySell leg_side = 133;
        fixed32 leg_ratio = 136; // leg ratio (1, 2, etc)
        PositionType position_type = 139;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey skey = 100; // SR assigned Spread TickerKey (can be found in ProductDefinition)
    BuySell side = 103;
    sfixed32 print_size = 106;
    double print_price = 109;
    YesNo is_print_price_valid = 112;
    sfixed64 src_timestamp = 115; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 118; // PTP timestamp
    google.protobuf.Timestamp timestamp = 121;
    repeated Legs legs = 124;
}


/*
    These records represent live market summary snapshots for each active spread market.
    BaseObj:Spread
*/    
message SpreadMarketSummary {
    message PKey {
        
        TickerKey skey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double ini_price = 100; // first print price of the day during regular market hours
    double mrk_price = 103; // last print handling during regular market hours
    double cls_price = 106; // official exchange closing price
    double min_price = 109; // minimum print price within market hours
    double max_price = 112; // maximum print price within market hours
    sfixed32 open_int = 115; // open interest
    sfixed32 bid_count = 118; // num prints <= quote.bid
    sfixed32 bid_volume = 121; // volume when prtPrice <= quote.bid
    sfixed32 ask_count = 124; // num prints >= quote.ask
    sfixed32 ask_volume = 127; // volume when prtPrice >= quote.ask
    sfixed32 mid_count = 130; // num prints inside quote.bid / quote.ask
    sfixed32 mid_volume = 133; // volume inside quote.bid / quote.ask
    sfixed32 prt_count = 136; // number of distinct print reports
    double prt_price = 139; // last print price
    sfixed32 exp_count = 142; // number of updates included in exponential average
    double exp_width = 145; // exponential average market width (10 minute 1/2 life)
    float exp_bid_size = 148; // exponential average bid size (10 minute 1/2 life)
    float exp_ask_size = 151; // exponential average ask size (10 minute 1/2 life)
    google.protobuf.Timestamp last_print = 154;
    google.protobuf.Timestamp timestamp = 157;
}


/*
    SpreadOpenMark records are created during the end-of-day rotation for each ticker and intended for use the following trading day.
    BaseObj:Spread
*/    
message SpreadOpenMark {
    message PKey {
        
        TickerKey skey = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double sr_cls_prc = 100; // SR close mark (close - 1min) (from previous day)
    double close_prc = 103; // official exchange closing mark  (from previous day)
    double bid_prc = 106; // bid price (SR mark from previous day)
    double ask_prc = 109; // ask price (SR mark from previous day)
    google.protobuf.Timestamp timestamp = 112;
}


    
message SpreadPrint {
    message PKey {
        
        TickerKey skey = 10; // SR assigned Spread TickerKey (can be found in ProductDefinition)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // common spread underlier
    BuySell side = 103;
    sfixed32 prt_size = 106;
    double prt_price = 109;
    OptExch prt_exch = 112;
    sfixed64 src_timestamp = 115; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 118; // PTP timestamp
    google.protobuf.Timestamp timestamp = 121;
}


    
message SpreadPrintHistory {
    message PKey {
        
        TickerKey skey = 10;
        sfixed32 tick_number = 13; // tickNumber = price / minTickSize
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double price = 100;
    double min_tick_size = 103;
    sfixed32 up_quan_d = 106; // all day
    sfixed32 dn_quan_d = 109;
    double up_quan_r = 112; // recent period (about 10 minutes)
    double dn_quan_r = 115;
    google.protobuf.Timestamp timestamp = 118;
}


    
message SrseQuery {
    message PKey {
        
        sfixed64 query_id = 10;
        sfixed32 process_id = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_name = 100;
    string impersonated_user_name = 103;
    string client_firm = 106;
    uint32 app_id = 109;
    sfixed32 thread_id = 112;
    sfixed32 rows_table_scanned = 115; // number of rows selected during table scans
    sfixed32 rows_index_scanned = 118; // number of rows selected during index scans
    sfixed32 rows_inserted = 121; // number of rows inserted
    sfixed32 rows_replaced = 124; // number of rows replaced
    sfixed32 rows_updated = 127; // number of rows updated
    sfixed32 rows_deleted = 130; // number of rows deleted
    sfixed32 num_errors = 133; // number of errors
    YesNo bulk = 136;
    YesNo predicates = 139;
    YesNo dry_run = 142;
    YesNo can_publish = 145;
    string sql = 148;
    string sql_command = 151;
    string error = 154;
    google.protobuf.Timestamp started = 157;
    float execution_time = 160; // execution time (in seconds)
    float queue_wait_time = 163; // time (in seconds) spent awaiting turn
}


    
message SrseRuntimeParameters {
    message PKey {
        
        string parameter_name = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string parameter_value = 100;
    YesNo can_modify = 103;
}


    
message SrseRuntimeSecurityPredicates {
    message PKey {
        
        string message_type_name = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_assigned = 100;
    string accessibility = 103;
    string writability = 106;
}


    
message SrseRuntimeStatistics {
    message PKey {
        
        string user_name = 10;
        string table_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 rows_table_scanned = 100; // number of rows selected during table scans
    sfixed32 rows_index_scanned = 103; // number of rows selected during index scans
    sfixed32 rows_inserted = 106; // number of rows inserted
    sfixed32 rows_replaced = 109; // number of rows replaced
    sfixed32 rows_updated = 112; // number of rows updated
    sfixed32 rows_deleted = 115; // number of rows deleted
    sfixed32 num_errors = 118; // number of errors
    sfixed32 num_predicates_generated = 121; // number of times a predicate was generated for a query
    sfixed32 num_predicates_unhandled = 124; // number of times a predicate could not be generated for the query
    sfixed32 num_queries = 127; // number of queries run
    sfixed32 num_connections = 130; // number of connections observed
    sfixed32 max_thread_id = 133; // max thread/connection ID observed
    double exec_time = 136; // time (seconds) running queries
    double wait_time = 139; // time (seconds) waiting in queue for other queries to finish (see UserConfig.numCores)
    google.protobuf.Timestamp timestamp = 142; // last time record was modified
}


/*
    Records inserted into this table will control the default StateModel (M1, M2, M3) selected for a parent order if no state model is explicitly selected
*/    
message StateModelDefault {
    message PKey {
        
        TickerKey ticker = 10; // base (stock) TickerKey
        SpdrKeyType sec_type = 13; // [Stock, Future, Option]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    StateModel state_model = 100; // default state model (if None or missing default is M1)
    string modified_by = 103; // user who last modified this record
    google.protobuf.Timestamp timestamp = 106; // timestamp of last modification
}


    
message StaticDataRequest {


    MbusInfo descriptor = 1;
    
    uint32 msgtype = 100;
    string accnt = 103;
    string user_name = 106;
    sfixed64 time_rcvd = 109;
    GetAction action = 112;
}


/*
    StkAwayTktGateway inserts are validated and convered to away SpdrParentExecution records and published. If successfully published they will be visible in the SpdrParentExecution table and on SpiderRock GUI tools.
    Replaces are allowed but they are functionally identical to updates in that only the fillPrice and fillQuantity fields are actually changed.
*/    
message StkAwayTktGateway {
    message PKey {
        
        string accnt = 10;
        sfixed64 client_fill_iD = 13; // client execution ID, these must be unique on a per-account basis [copied into SpdrParentExecution.altFillId]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    string client_order_iD = 103; // client orderID [copied into SpdrParentExecution.altOrderId]
    sfixed64 risk_group_id = 106; // riskGroupId for this execution report
    TickerKey ticker = 109;
    BuySell fill_side = 112;
    double fill_price = 115;
    sfixed32 fill_quantity = 118;
    double fill_ref_uPrc = 121; // reference underlier price @ fill arrival time
    ShortSaleFlag ssale_flag = 124;
    YesNo deliver_exec_report = 127; // Drop a copy of the execution report
    sfixed64 sRfill_iD = 130; // SR internal fill number, any values submitted will be overwritten by the SR generated fill number
    string comment = 133; // text comment (if any)
    string exec_broker = 136; // used to reflect field from a downstream destination back up to and upstream fill report
    string user_data1 = 139; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 142; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string strategy = 145; // client-supplied strategy string
    google.protobuf.Timestamp fill_dttm = 148;
    google.protobuf.Timestamp timestamp = 151;
    int32 checksum = 154; // Must be set to 13.  This helps detect some column,value misalignments.
}


/*
    Records inserted, updated, or replaced into the StockOrderGateway table are validated and then converted to SpdrParentOrder records and forwarded to the appropriate execution engine for futher processing.  Parent orders can be inserted as either active/ready or in a wait start mode that requires subsequent release.
    See the SpiderRock Execution Engine concept guide for more details.
*/    
message StkOrderGateway {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13; // SR Account (default = primary account associated with SRSE login)
        BuySell order_side = 16; // Order side.  Values: Buy/Sell.
        sfixed64 grouping_code = 19; // Client supplied order
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    SpdrActionType spdr_action_type = 103; // [Add (new order), AddReplace (add or replace order), Cancel (cxl existing), Replace (update existing only), Release (modify order active size)]
    string alt_order_id = 106; // Alternate client order ID.  This order ID will be copied to all execution reports.
    string alt_accnt = 109; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 112; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string accnt_route_code = 115; // accntRoute acronym
    string extern_ex_dest = 118; // routing code for orders directed to an external order router (default = null); should match FixRoutingTable.destination (in SR accnt config)
    string extern_params = 121; // external algo names/parameters (usually just an algo name)
    string strategy = 124; // Client strategy string.  This value will appear on the SR Trade Monitor and in execution reports.
    YesNo visible_in_sV = 127; // allow order to be visible in SV (do not use for high volume of orders)
    google.protobuf.Timestamp order_dttm = 130; // order entry time (from client;if any)
    sfixed32 order_size = 133; // parent order size (contracts) [-1 = no change;used when spdrActionType=Release]
    sfixed32 order_active_size = 136; // total activated size (total size released for execution) (-1 = all available size)
    YesNo add_cum_fill_quantity = 139; // If Yes then OrderSize is calculated @ order arrival as requested OrderSize + existing 'CumFillQuantity'.
    fixed32 exch_mask = 142; // eligible exchanges (0 = all)
    sfixed32 max_exposure_size = 145; // maximum simultaneous cumulative child order public size exposure (-1 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 1]
    int32 num_make_exchanges = 148; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 151; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; MktSize=expose only 'typical' market size; FullSize=expose entire order size where possible
    YesNo randomize_size = 154; // randomize public order size
    YesNo can_overlap_cxl_repl = 157; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 160; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 twap_slice_cnt = 163; // [ProgressSliceCnt] number of progress slices to use (default = 4 or 8) [max 20]
    sfixed32 progress_expose_time = 166; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    float vwap_participation = 169; // target vwap participation rate (target % of trade activity)
    int32 min_mkt_on_close_pct = 172; // Minimum pct [0 - 100] of order reserved for the on-close auction
    AuctionResponder auction_responder = 175; // if set, parent order can be an auction responder
    float max_make_exch_fee = 178; // maximum making exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    float max_take_exch_fee = 181; // maximum taking exchange fee (in point value) [zero = no limit; use non-zero number for limit to apply]
    TriggerType trigger_type = 184; // type of trigger (PrintVol/SurfVol only for options) [print = print or actionable quote]
    float trigger_level = 187; // stop/trigger price for parent order to go active
    UPrcCxl cxl_uPrc_range = 190; // cancel parent order if/when outside min/max uPrc range [_Halt = also cancel if the security/underlier has been halted]
    float min_uBid = 193; // [optional]
    float max_uAsk = 196; // [optional] (< $0.01 = none)
    MinMaxType min_max_type = 199; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    sfixed32 max_child_orders = 202; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    SpdrStageType spdr_stage_type = 205; // StageLock = stage pending modification (can reduce size); StageModify = stage pending modification (can increase/reduce size); StateReview = stage pending review/release;
    TimeInForce time_in_force = 208;
    google.protobuf.Timestamp start_dttm = 211; // [optional] (parent order start time)
    sfixed32 order_duration = 214; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 217; // [optional] (default: 2000-01-01)
    StartType start_type = 220; // [Immediate, WaitTrigger]
    sfixed32 progress_timeout = 223; // cancel if [optional] (number of milliseconds)
    ParentOrderHandling parent_order_handling = 226;
    ParentBalanceHandling parent_balance_handling = 229;
    SpdrLimitType order_limit_type = 232; // Various (Market, Prc, etc.); establishes the primary LimitPrice for a parent order
    SpdrLimitClass take_limit_class = 235; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    SpdrLimitClass make_limit_class = 238; // Simple = LimitPrice, Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 241; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    double order_prc_limit = 244; // Applies if LimitType = Prc[]
    double order_prc_offset = 247; // default=0
    AlphaType take_alpha_type = 250; // Applies if takeLimitClass = Probability
    AlphaType make_alpha_type = 253; // Applies if makeLimitClass = Probability
    float take_alpha_factor = 256; // [-2,+2] takeProbLimit = MAX(takeProbability, takeProbAvg + takeAlphaFactor * takeProbStd) [if takeAlphaType = Relative]
    float make_alpha_factor = 259; // [-2,+2] makeProbLimit = MAX(makeProbability, makeProbAvg + makeAlphaFactor * makeProbStd) [if makeAlphaType = Relative]
    float take_probability = 262; // takeProbLimit = takeProbability [if takeAlphaType = Static]
    float make_probability = 265; // makeProbLimit = makeProbability [if makeAlphaType = Static]
    AutoHedge auto_hedge = 268;
    ExpiryKey hedge_sec_key = 271; // auto-hedge instrument (either TickerKey or ExpiryKey) [hedgeSecKey.TickerKey cannot equal order.ticker]
    SpdrKeyType hedge_sec_type = 274; // None, Stock, or Future
    float hedge_beta_ratio = 277; // Portion of executed $money to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0]
    HedgeScope hedge_scope = 280; // Auto-hedge at the RiskGroup or Accnt level
    TimeInForce hedge_tIF = 283; // time in force for the autohedge order (can be Day or ExtDay)
    ShortSaleFlag ssale_flag = 286; // Used to determine stock auto-hedge flags.
    sfixed32 locate_quan = 289; // available locate quantity (if selling short) [will be considered the primary locate for any resulting child orders]
    string locate_firm = 292; // firm granting the locate (also locate firm used on street FIX orders)
    float max_exch_fee = 295; // maximum exchange fee allowed when generating orders
    sfixed64 risk_group_id = 298; // All risk limits below are relative to this riskGroupId.  Default: 0 (none).  Required to be non-zero if `autoHedge` is something other than None.
    float max_acc_day_dDelta_ln = 301; // Default: -1 (not set).
    float max_acc_day_dDelta_sh = 304; // Default: -1 (not set).
    float max_sym_day_dDelta_ln = 307; // Default: -1 (not set).
    float max_sym_day_dDelta_sh = 310; // Default: -1 (not set).
    float max_grp_day_dDelta_ln = 313; // Default: -1 (not set).
    float max_grp_day_dDelta_sh = 316; // Default: -1 (not set).
    string trader_name = 319; // Name of the trader associated with the order
    string user_data1 = 322; // client supplied data field; passes through to parent and child executions and reports as well as FIX child orders and drops
    string user_data2 = 325; // client supplied data field; passes through to parent and child executions and reports as well as FIX child orders and drops
    string child_data = 328; // client supplied data field; passes through to down stream child orders
    int32 checksum = 331; // Must be set to 13.  This helps detect some column/value misalignments.
}


    
message StockAlgoFees {
    message PKey {
        
        TickerKey ticker = 10;
        string stk_exch = 13;
        StkNameClass name_class = 16;
        string client_firm = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float make_fee = 100; // make fee used in exchange routing decisions
    float take_fee = 103; // take fee used in exchange routing decisions
    google.protobuf.Timestamp timestamp = 106;
}


/*
    These records represent current and recent trailing market open/close auction results
*/    
message StockAuctionSummary {
    message PKey {
        
        TickerKey ticker = 10;
        StockAuctionType auction_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float auction_price = 100;
    sfixed32 auction_volume = 103;
    DateKey auction_date = 106;
    float auction_price1 = 109;
    sfixed32 auction_volume1 = 112;
    DateKey auction_date1 = 115;
    float auction_price2 = 118;
    sfixed32 auction_volume2 = 121;
    DateKey auction_date2 = 124;
    float auction_price3 = 127;
    sfixed32 auction_volume3 = 130;
    DateKey auction_date3 = 133;
    float auction_price4 = 136;
    sfixed32 auction_volume4 = 139;
    DateKey auction_date4 = 142;
    float auction_price5 = 145;
    sfixed32 auction_volume5 = 148;
    DateKey auction_date5 = 151;
    google.protobuf.Timestamp timestamp = 154;
}


/*
    Beta values are computed weekly for a few different ETFs.
*/    
message StockBeta {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    BetaStatus status = 100;
    float beta = 103; // (depricate)
    float beta_ind = 106; // SR beta to IND
    float beta_sub = 109; // SR beta to SUB
    float beta_grp = 112; // SR beta to GRP
    float beta_qQQ = 115; // SR beta to QQQ [2 year; weekly (fri - fri)]
    float beta_sPY = 118; // SR beta to SPY [2 year; weekly (fri - fri)]
    float beta_iWM = 121; // SR beta to IWM [2 year; weekly (fri - fri)]
    google.protobuf.Timestamp timestamp = 124; // record update timestamp
}


/*
    Beta values are computed nightly for a few different indexes and industries.
*/    
message StockBetaExt {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    BetaStatus status = 100;
    float beta_sPY = 103; // SR beta [2 year; weekly (fri - fri)]
    float beta_sPY__r2 = 106; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_qQQ = 109; // SR beta [2 year; weekly (fri - fri)]
    float beta_qQQ__r2 = 112; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_iWM = 115; // SR beta [2 year; weekly (fri - fri)]
    float beta_iWM__r2 = 118; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_eEM = 121; // SR beta [2 year; weekly (fri - fri)]
    float beta_eEM__r2 = 124; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_eFA = 127; // SR beta [2 year; weekly (fri - fri)]
    float beta_eFA__r2 = 130; // SR beta R2 [2 year; weekly (fri - fri)]
    TickerKey beta_ticker = 133; // ETF ticker with the largest beta R2 [from the set of ETF's with significant option volume]
    float beta_value = 136; // beta value for the above ticker
    float beta_r2 = 139; // R2 value for the above ticker
    TickerKey beta_ticker_a = 142; // ETF ticker A with the largest joint (A+B) beta R2 [Y ~ a + betaA * A + betaB * B]
    TickerKey beta_ticker_b = 145; // ETF ticker B with the largest joint (A+B) beta R2
    float beta_value_a = 148; // joint beta value for TickerA
    float beta_value_b = 151; // joint beta value for TickerB
    float beta_r2_b = 154; // joint R2 value for the TickerA + TickerB
    float beta_sPY1y = 157; // SR beta [1 year; weekly (fri - fri)]
    float beta_sPY1y__r2 = 160; // SR beta R2 [1 year; weekly (fri - fri)]
    google.protobuf.Timestamp timestamp = 163;
}


/*
    Beta values are computed nightly for a few different indexes and industries.
*/    
message StockBeta_Extern {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    BetaStatus status = 100;
    float beta_ind = 103; // SR beta to IND
    float beta_sub = 106; // SR beta to SUB
    float beta_grp = 109; // SR beta to GRP
    float beta_nbr = 112; // SR beta to NBR
    float beta_sPY = 115; // SR beta [2 year; weekly (fri - fri)]
    float beta_sPY__r2 = 118; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_qQQ = 121; // SR beta [2 year; weekly (fri - fri)]
    float beta_qQQ__r2 = 124; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_iWM = 127; // SR beta [2 year; weekly (fri - fri)]
    float beta_iWM__r2 = 130; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_eEM = 133; // SR beta [2 year; weekly (fri - fri)]
    float beta_eEM__r2 = 136; // SR beta R2 [2 year; weekly (fri - fri)]
    float beta_eFA = 139; // SR beta [2 year; weekly (fri - fri)]
    float beta_eFA__r2 = 142; // SR beta R2 [2 year; weekly (fri - fri)]
    TickerKey beta_ticker = 145; // ETF ticker with the largest beta R2 [from the set of ETF's with significant option volume]
    float beta_value = 148; // beta value for the above ticker
    float beta_r2 = 151; // R2 value for the above ticker
    TickerKey beta_ticker_a = 154; // ETF ticker A with the largest joint (A+B) beta R2 [Y ~ a + betaA * A + betaB * B]
    TickerKey beta_ticker_b = 157; // ETF ticker B with the largest joint (A+B) beta R2
    float beta_value_a = 160; // joint beta value for TickerA
    float beta_value_b = 163; // joint beta value for TickerB
    float beta_r2_b = 166; // joint R2 value for the TickerA + TickerB
    float beta_sPY1y = 169; // SR beta [1 year; weekly (fri - fri)]
    float beta_sPY1y__r2 = 172; // SR beta R2 [1 year; weekly (fri - fri)]
    google.protobuf.Timestamp timestamp = 175; // record update timestamp
}


/*
    This table contains live equity quote records for all CQS/UQDF securities as well as US OTC equity securities, SpiderRock synthetic markets, and a number of major indexes.  Each record contains up to two price levels and represents a live snapshot of the book for a specific market.
*/    
message StockBookQuote {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UpdateType update_type = 100;
    MarketStatus market_status = 103; // market status (open, halted, etc)
    float bid_price1 = 106; // bid price for best price level
    sfixed32 bid_size1 = 109; // bid size for best price level
    StkExch bid_exch1 = 112;
    fixed32 bid_mask1 = 115; // bid exchange bit mask for best bid price level
    float ask_price1 = 118; // ask price for best price level
    sfixed32 ask_size1 = 121; // ask size for best price level
    StkExch ask_exch1 = 124; // exchange
    fixed32 ask_mask1 = 127; // ask exchange bit mask for best ask price level
    float bid_price2 = 130; // bid price for next best price level
    sfixed32 bid_size2 = 133; // bid size for next best price level
    StkExch bid_exch2 = 136; // exchange
    fixed32 bid_mask2 = 139; // bid exchange bit mask for next best bid price level
    float ask_price2 = 142; // ask price for next best price level
    sfixed32 ask_size2 = 145; // ask size for next best price level
    StkExch ask_exch2 = 148; // exchange
    fixed32 ask_mask2 = 151; // ask exchange bit mask for next best ask price level
    fixed32 halt_mask = 154; // bit mask of halted exchanges
    sfixed64 src_timestamp = 157; // source high precision timestamp (if available)
    sfixed64 net_timestamp = 160; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
}


/*
    This data is sourced from various clearing firms and typically represents their public borrow rates.  Data is typically loaded once at the start of each trading day.
    StockBorrowRate records are published to the SpiderRock elastic cluster at the end of each trading period.
*/    
message StockBorrowRate {
    message PKey {
        
        TickerKey ticker = 10;
        string client_firm = 13; // clientFirm (if clientFirm specific rates); <default> = SR system default rates
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo gc_flag = 100; // General collateral flag: Yes; No
    float gc_rate = 103; // General collateral rate
    float borrow_rate = 106; // StockBorrow rate
    google.protobuf.Timestamp timestamp = 109;
}


/*
    This table contains live child order stock quote records from SR Execution Engines.
*/    
message StockChildQuote {
    message PKey {
        
        TickerKey ticker = 10;
        string engine_name = 13;
        YesNo is_test_accnt = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double bid_price = 100; // bid price
    double ask_price = 103; // ask price
    sfixed32 bid_size = 106; // bid size in contracts
    sfixed32 ask_size = 109; // ask size in contracts
    google.protobuf.Timestamp timestamp = 112; // quote update
}


/*
    StockCloseMark records are created immediately after the market close (clsMarkState=SRClose), when exchanges publish official marks (clsMarkState=ExchClose), and again during top of day rotation (clsMarkState=Final).  These records contain closing quotes and prices as well as markup details for all outright options.
    StockCloseMark records are published to the SpiderRock elastic cluster when clsMarkState=Final
*/    
message StockCloseMark {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    ClsMarkState cls_mark_state = 103; // Close mark state. None; LastPrt; SRClose; ExchClose; Final
    float opn_prc = 106; // Open price
    float min_prc = 109; // Low price
    float max_prc = 112; // High price
    sfixed32 shares_outstanding = 115; // Shares outstanding
    sfixed32 prt_count = 118; // Print count
    sfixed32 prt_volume = 121; // Print volume
    float realized_vol = 124; // Realized vol
    float avg_mkt_size = 127; // Average market size
    float avg_mkt_width = 130; // Average market width
    float bid_prc = 133; // bid price (close - 1min)
    float ask_prc = 136; // ask price (close - 1min)
    float sr_cls_prc = 139; // SR close mark (close - 1min)
    float close_prc = 142; // official exchange closing mark (last print; then official close)
    YesNo has_sRCls_prc = 145;
    YesNo has_close_prc = 148;
    google.protobuf.Timestamp sr_close_mark_dttm = 151; // from MarketCloseQuote.srCloseMarkDttm
    google.protobuf.Timestamp timestamp = 154; // record publish/update timestamp
}


    
message StockCloseMarkHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    google.protobuf.Duration sr_close_time = 103; // SR closing mark time (C)
    ClsMarkState cls_mark_state = 106; // close mark state. None; LastPrt; SRClose; ExchClose; Final
    float opn_prc = 109; // open price
    float min_prc = 112; // Low price
    float max_prc = 115; // High price
    sfixed32 shares_outstanding = 118; // shares outstanding
    sfixed32 prt_count = 121; // print count
    sfixed32 prt_volume = 124; // print volume
    float realized_vol = 127; // realized vol
    float avg_mkt_size = 130; // average market size
    float avg_mkt_width = 133; // average market width
    float bid_prc = 136; // bid price (close - 1min)
    float ask_prc = 139; // ask price (close - 1min)
    float sr_cls_prc = 142; // SR close mark (close - 1min)
    float close_prc = 145; // official exchange closing mark (last print;then official close)
    EarnRelative inc_earnings = 148; // this trading period includes an earnings announcement
    DivStatus div_status = 151;
    google.protobuf.Timestamp prior_date = 154;
    TickerKey prior_ticker = 157; // prior period stock key (same as ticker on most days)
    float prc_adj_value = 160; // corp action adjustment value (0.0 on most days)  currentPrice = priorPrice * factor + value
    float prc_adj_ratio = 163; // corp action adjustment factor (1.0 on most days)
    float prior_sRCls_prc = 166; // values archive in the previous trading period
    float prior_close_prc = 169;
    google.protobuf.Timestamp timestamp = 172;
}


/*
    This table contains a ticker level summary of some earnings related information.  This information is also available in other records but is collected here for convenience.
*/    
message StockDetail {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float e_move = 100; // implied earnings move (from LiveSurfaceTerm.eMove)
    float e_move_hist = 103; // average historical (trail 8 quarter) earnings move (from LiveSurfaceTerm.eMoveHist)
    sfixed32 next_earn_days = 106; // estimated days to next earnings event (resets to next event immediately after earnings passes)
    sfixed32 near_earn_days = 109; // estimated days to next earnings event (resets to next event 2 days after the most recent event has passed)
    string next_earn_time = 112; // estimated time of day of next earnings event
    DateKey next_earn_date = 115; // estimated next earnings date (note that implied adjustements to this day are available in LiveSurfaceTerm)
    YesNo is_next_earn_date_confirmed = 118; // next date has been confirmed (usually by the company)
    float next_dDiv_amt = 121; // next dividend payment amount
    sfixed32 next_dDiv_days = 124; // next dividend payment date
    sfixed32 num_options = 127; // number of listed options on this underlier (if any)
    google.protobuf.Timestamp timestamp = 130;
}


    
message StockEarnCalendarHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey interval_end_date = 13; // e.g. Quarterly earnings announced on 20200710 is likely for quarter ending June 2020 -> 20200601 (month and year)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    IntervalType interval_type = 103;
    DateKey earn_date = 106; // date/time of earnings announcement
    EarnTime earn_time = 109;
    EarnType earn_type = 112;
    GuidanceIssued guidance_issued = 115;
    google.protobuf.Timestamp guidance_dttm = 118; // most recent guidance (if any) issued prior to earnings release (if known)
    float earn_pct_move = 121; // underlying move in the trading period including the event (only available when earnType = 'Released')
    DateKey trade_date = 124; // e.g. IBM 20200720 earnings AMC would store OHLC data for 20200721
    float prv_close = 127; // closing price prior to earnings announcement
    float open = 130; // opening price (day of announcement)
    float high = 133; // high price (day of announcement)
    float low = 136; // low price (day of announcement)
    float close = 139; // close price (day of announcement)
    float i_eMove = 142; // implied earnings move prior to announcement (historical dates only))
    float h_eMove = 145; // historical average (trailing 8) earnings moves prior to announcement (historical only)
    google.protobuf.Timestamp timestamp = 148;
}


    
message StockEarnForecastHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    google.protobuf.Timestamp near_earn_date = 103; // empty unless earnings is within +/- 5 trading days of date
    EarnType near_earn_type = 106;
    EarnTime near_earn_time = 109;
    google.protobuf.Timestamp next_earn_date1_adj = 112; // implied adjusted earnings date1
    google.protobuf.Timestamp next_earn_date2_adj = 115; // implied adjusted earnings date2
    google.protobuf.Timestamp next_earn_date1 = 118;
    EarnType next_earn_type1 = 121;
    EarnTime next_earn_time1 = 124;
    google.protobuf.Timestamp next_earn_date2 = 127;
    EarnType next_earn_type2 = 130;
    EarnTime next_earn_time2 = 133;
    google.protobuf.Timestamp next_earn_date3 = 136;
    EarnType next_earn_type3 = 139;
    EarnTime next_earn_time3 = 142;
    google.protobuf.Timestamp next_earn_date4 = 145;
    EarnType next_earn_type4 = 148;
    EarnTime next_earn_time4 = 151;
    google.protobuf.Timestamp next_earn_date5 = 154;
    EarnType next_earn_type5 = 157;
    EarnTime next_earn_time5 = 160;
    google.protobuf.Timestamp next_earn_date6 = 163;
    EarnType next_earn_type6 = 166;
    EarnTime next_earn_time6 = 169;
    google.protobuf.Timestamp next_earn_date7 = 172;
    EarnType next_earn_type7 = 175;
    EarnTime next_earn_time7 = 178;
    google.protobuf.Timestamp next_earn_date8 = 181;
    EarnType next_earn_type8 = 184;
    EarnTime next_earn_time8 = 187;
    google.protobuf.Timestamp timestamp = 190;
}


/*
    StockEarningsCalendar records contain a historical (prior 12) earnings dates and future (next 12) projected dates.
*/    
message StockEarningsCalendar {
    message PKey {
        
        TickerKey ticker = 10;
        EventSource source = 13; // Live=currentEarningsDate; priorDay=previousEarningsDate
    }

    message Event {
        
        DateKey event_date = 109;
        string event_time = 112;
        EarnStatus earn_status = 115;
        GuidanceIssued guidance_issued = 118;
        DateKey earn_fiscal_qtr = 121;
        earnChange earn_change = 124;
        float earn_pct_move = 127; // underlying move in the trading period including the event (only available when eventStatus = 'Actual')
        float prv_close = 130; // closing price prior to earnings announcement
        float open = 133; // opening price (on moveDate)
        float high = 136; // high price (on moveDate)
        float low = 139; // low price (on moveDate)
        float close = 142; // close price (on moveDate)
        DateKey move_date = 145; // date corresponding to larger daily change (OHLC data taken from the same date or the date following each earnings announcement)
        float h_eMove = 148; // historical average (trailing 8) earnings moves prior to announcement (historical only)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float e_move_hist = 100; // historical average (trailing 8) earnings moves prior to today
    google.protobuf.Timestamp timestamp = 103; // timestamp of record
    repeated Event event = 106;
}


/*
    StockEarningsCalendar records contain a historical (prior 12) earnings dates and future (next 12) projected dates.
*/    
message StockEarningsCalendar_Extern {
    message PKey {
        
        TickerKey ticker = 10;
        EventSource source = 13; // Live=currentEarningsDate; priorDay=previousEarningsDate
    }

    message Event {
        
        DateKey event_date = 109;
        string event_time = 112;
        EarnStatus earn_status = 115;
        GuidanceIssued guidance_issued = 118;
        DateKey earn_fiscal_qtr = 121;
        earnChange earn_change = 124;
        float earn_pct_move = 127; // underlying move in the trading period including the event (only available when eventStatus = 'Actual')
        float prv_close = 130; // closing price prior to earnings announcement
        float open = 133; // opening price (on moveDate)
        float high = 136; // high price (on moveDate)
        float low = 139; // low price (on moveDate)
        float close = 142; // close price (on moveDate)
        DateKey move_date = 145; // date corresponding to larger daily change (OHLC data taken from the same date or the date following each earnings announcement)
        float h_eMove = 148; // historical average (trailing 8) earnings moves prior to announcement (historical only)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float e_move_hist = 100; // historical average (trailing 8) earnings moves prior to today
    google.protobuf.Timestamp timestamp = 103; // timestamp of record
    repeated Event event = 106;
}


/*
    StockEarningsCalendar records contain a historical (prior 12) earnings dates and future (next 12) projected dates.
    VLanBridging: Down
*/    
message StockEarningsCalendar_V7 {
    message PKey {
        
        TickerKey ticker = 13;
        EventSource source = 16; // Live=currentEarningsDate; priorDay=previousEarningsDate
    }

    message Event {
        
        DateKey event_date = 112;
        string event_time = 115;
        EarnStatus earn_status = 118;
        GuidanceIssued guidance_issued = 121;
        DateKey earn_fiscal_qtr = 124;
        earnChange earn_change = 127;
        float earn_pct_move = 130; // underlying move in the trading period including the event (only available when eventStatus = 'Actual')
        float prv_close = 133; // closing price prior to earnings announcement
        float open = 136; // opening price (on moveDate)
        float high = 139; // high price (on moveDate)
        float low = 142; // low price (on moveDate)
        float close = 145; // close price (on moveDate)
        DateKey move_date = 148; // date corresponding to larger daily change (OHLC data taken from the same date or the date following each earnings announcement)
        float h_eMove = 151; // historical average (trailing 8) earnings moves prior to announcement (historical only)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float e_move_hist = 103; // historical average (trailing 8) earnings moves prior to today
    google.protobuf.Timestamp timestamp = 106; // timestamp of record
    repeated Event event = 109;
}


    
message StockExchBookQuote {
    message PKey {
        
        TickerKey ticker = 10;
        StkExch exch = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float ask_price1 = 100; // best ask price
    float ask_price2 = 103; // 2nd best ask price
    float ask_price3 = 106; // 3rd best ask price
    float ask_price4 = 109; // 4th best ask price
    sfixed32 ask_size1 = 112; // ask size in shares (aggregate at best price)
    sfixed32 ask_size2 = 115; // ask size in shares (aggregate at 2nd best price)
    sfixed32 ask_size3 = 118; // ask size in shares (aggregate at 3rd best price)
    sfixed32 ask_size4 = 121; // ask size in shares (aggregate at 4th best price)
    float bid_price1 = 124; // best bid price
    float bid_price2 = 127; // 2nd best bid price
    float bid_price3 = 130; // 3rd best bid price
    float bid_price4 = 133; // 4th best bid price
    sfixed32 bid_size1 = 136; // bid size in shares (aggregate at best price)
    sfixed32 bid_size2 = 139; // bid size in shares (aggregate at 2nd best price)
    sfixed32 bid_size3 = 142; // bid size in shares (aggregate at 3rd best price)
    sfixed32 bid_size4 = 145; // bid size in shares (aggregate at 4th best price)
    sfixed64 net_timestamp = 148; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
}


    
message StockExchFees {
    message PKey {
        
        TickerKey ticker = 10;
        string stk_exch = 13;
        StkNameClass name_class = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float make_fee = 100; // base (lowest tier) make fee for the exchange
    float take_fee = 103;
    string modified_by = 106;
    google.protobuf.Timestamp timestamp = 109;
}


/*
    StockExchImbalance records contain live exchange closing auction imbalance details.  Imbalance information can be available from more than one exchange for each ticker.
    Final StockExchImbalance records are published to the SpiderRock elastic cluster nightly after the auction close.
*/    
message StockExchImbalance {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp auction_time = 13; // Projected Auction Time (hhmm).
        AuctionReason auction_type = 16; // Auction type: None; Open; Market; Halt; Closing; RegulatoryImbalance
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float reference_px = 100; // For Pillar-powered markets, the Reference Price is used to calculate the Indicative Match Price.
    sfixed32 paired_qty = 103; // For Pillar-powered markets, the number of shares paired off at the Indicative Match Price.
    sfixed32 total_imbalance_qty = 106; // For Pillar-powered markets, the total imbalance quantity at the Indicative Match Price. If the value is negative, the imbalance is on the sell side; if the value is positive, the imbalance is on the buy side.
    sfixed32 market_imbalance_qty = 109; // For Pillar-powered markets, the total market order imbalance quantity at the Indicative Match Price. If the value is negative, the imbalance is on the sell side; if the value is positive the imbalance is on the buy side.
    ImbalanceSide imbalance_side = 112; // The side of the TotalImbalanceQty.
    float continuous_book_clr_px = 115; // For Pillar-powered markets, the price at which all interest on the book can trade, including auction and imbalance offset interest, and disregarding auction collars.
    float closing_only_clr_px = 118; // For Pillar-powered markets, the price at which all eligible auction-only interest would trade, subject to auction collars.
    float ssr_filling_px = 121; // For Pillar-powered markets, not supported and defaulted to 0.
    float indicative_match_px = 124; // For Pillar-powered markets, the price that has the highest executable volume of auction-eligible shares, subject to auction collars. It includes the non-displayed quantity of Reserve Orders.
    float upper_collar = 127; // If the IndicativeMatchPrice is not strictly between the UpperCollar and the LowerCollar, special auction rules apply. See Rule 7.35P for details.
    float lower_collar = 130; // If the IndicativeMatchPrice is not strictly between the UpperCollar and the LowerCollar, special auction rules apply. See Rule 7.35P for details.
    AuctionStatus auction_status = 133; // Indicates whether the auction will run.
    YesNo freeze_status = 136; // Indicates freeze
    int32 num_extensions = 139; // Number of times the halt period has been extended.
    google.protobuf.Timestamp source_time = 142; // Time record was generated in the order book (in seconds)
    sfixed64 net_timestamp = 145; // PTP timestamp
}


/*
    StockExchImbalanceV2 records contain live exchange closing auction imbalance details.  Imbalance information can be available from more than one exchange for each ticker.
    Final StockExchImbalanceV2 records are published to the SpiderRock elastic cluster nightly after the auction close.
*/    
message StockExchImbalanceV2 {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp auction_time = 13; // Projected Auction Time (hhmm).
        AuctionReason auction_type = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float reference_px = 100; // For Pillar-powered markets, the Reference Price is used to calculate the Indicative Match Price.
    sfixed32 paired_qty = 103; // For Pillar-powered markets, the number of shares paired off at the Indicative Match Price.
    sfixed32 total_imbalance_qty = 106; // For Pillar-powered markets, the total imbalance quantity at the Indicative Match Price.
    sfixed32 market_imbalance_qty = 109; // For Pillar-powered markets, the total market order imbalance quantity at the Indicative Match Price.
    ImbalanceSide imbalance_side = 112; // The side of the TotalImbalanceQty.
    float continuous_book_clr_px = 115; // For Pillar-powered markets, the price at which all interest on the book can trade, including auction and imbalance offset interest, and disregarding auction collars.
    float closing_only_clr_px = 118; // For Pillar-powered markets, the price at which all eligible auction-only interest would trade, subject to auction collars.
    float ssr_filling_px = 121; // For Pillar-powered markets, not supported and defaulted to 0.
    float indicative_match_px = 124; // For Pillar-powered markets, the price that has the highest executable volume of auction-eligible shares, subject to auction collars. It includes the non-displayed quantity of Reserve Orders.
    float upper_collar = 127; // If the IndicativeMatchPrice is not strictly between the UpperCollar and the LowerCollar, special auction rules apply. See Rule 7.35P for details.
    float lower_collar = 130; // If the IndicativeMatchPrice is not strictly between the UpperCollar and the LowerCollar, special auction rules apply. See Rule 7.35P for details.
    AuctionStatus auction_status = 133; // Indicates whether the auction will run.
    YesNo freeze_status = 136;
    int32 num_extensions = 139; // Number of times the halt period has been extended.
    sfixed64 net_timestamp = 142; // PTP timestamp
}


    
message StockExchMarkHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float open_prc = 100; // official exchange closing mark (if any)
    float high_prc = 103; // official exchange high mark (if any)
    float low_prc = 106; // official exchange low mark (if any)
    float close_prc = 109; // official exchange closing mark (if any)
    google.protobuf.Timestamp timestamp = 112;
}


    
message StockExchQuote {
    message PKey {
        
        TickerKey ticker = 10;
        StkExch exch = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    fixed32 exch_mask = 100; // exchange mask
    float bid_price = 103; // bid price
    float ask_price = 106; // ask price
    sfixed32 bid_size = 109; // bid size in shares
    sfixed32 ask_size = 112; // ask size in shares
    sfixed32 bid_time = 115; // last bid price change (milliseconds since midnight)
    sfixed32 ask_time = 118; // last ask price change (milliseconds since midnight)
    int32 quote_cond = 121; // feed quote condition
    sfixed64 sequence_number = 124; // packet sequence number (inbound feed)
    sfixed64 net_timestamp = 127; // inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
}


/*
    StockHistoryGrid records are published once every n minutes for each active stock and index market.  These records are used to draw the previous/current price graphic in the tools.
*/    
message StockHistoryGrid {
    message PKey {
        
        TickerKey ticker = 10;
    }

    message CurDayHistPrice {
        
        int32 time = 139; // time block index since start of period (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
        float price = 142; // price @ time
    }

    message PrvDayHistPrice {
        
        int32 time = 130; // time block index since start of period (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
        float price = 133; // price @ time
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float prv_open_price = 100; // start of day previous period price (previous period closing price adjusted for corp actions)
    int32 prv_day_sT = 103; // previous day start-of-regular trading time block index
    int32 prv_day_eT = 106; // previous day end-of-regular trading time block index
    float cur_open_price = 109; // start of day current period price (previous period closing price adjusted for corp actions)
    int32 cur_day_sT = 112; // current day start-of-regular trading time block index
    int32 cur_day_eT = 115; // current day end-of-regular trading time block index
    int32 prv_max_time_index = 118; // largest possible time index value for PrvDayHistPrice in this record
    int32 cur_max_time_index = 121; // largest possible time index value for CurDayHistPrice in this record
    google.protobuf.Timestamp timestamp = 124; // last record publish time
    repeated CurDayHistPrice cur_day_hist_price = 136;
    repeated PrvDayHistPrice prv_day_hist_price = 127;
}


/*
    StockImbalance records contain live exchange closing auction imbalance details.  Imbalance information in aggregated across exchanges with imbalance feeds.
    Final StockImbalance records are published to the SpiderRock elastic cluster nightly after the auction close.
*/    
message StockImbalance {
    message PKey {
        
        TickerKey ticker = 10;
        AuctionReason auction_type = 13; // Opening/Closing
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp auction_time = 100;
    sfixed32 max_imbalance = 103;
    StkExch max_imbalance_exch = 106;
    double max_imbalance_match_px = 109;
    AuctionStatus max_imbalance_status = 112;
    sfixed32 cum_bid_imbalance_mkt = 115;
    sfixed32 cum_ask_imbalance_mkt = 118;
    sfixed32 cum_bid_imbalance_tot = 121;
    sfixed32 cum_ask_imbalance_tot = 124;
    sfixed32 cum_paired_qty = 127;
    google.protobuf.Timestamp timestamp = 130;
}


/*
    StockLocateRequest records represent a client locate request.  These originate either from the SRSE StockLocateRequestGateway or from the SR Control Viewer GUI tool.
*/    
message StockLocateRequest {
    message PKey {
        
        TickerKey ticker = 10;
        string client_firm = 13;
        string locate_firm = 16;
        YesNo is_live_pool = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 request_quan = 100;
    string source = 103;
    google.protobuf.Timestamp timestamp = 106;
}


/*
    Records inserted into this gateway become locate requests and are visible in the StockLocateRequest table.
*/    
message StockLocateRequestGateway {
    message PKey {
        
        TickerKey ticker = 10;
        YesNo is_live_pool = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    sfixed32 request_quan = 103;
}


/*
    StockLocateResponse records are either locates or rejections of locate requests.  These records are clientFirm specific and are not shared.  SpiderRock execution engines are aware of the locate quantities in StockLocateResponse records.  Also, these records are shared and depricated accross all SpiderRock production environments.
*/    
message StockLocateResponse {
    message PKey {
        
        TickerKey ticker = 10;
        string client_firm = 13;
        string locate_firm = 16; // typically a clearing firm (or 3rd party locate desk)
        YesNo is_live_pool = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 locate_quan = 100;
    LocateStatus last_locate_status = 103;
    YesNo is_short_sale_exempt = 106; // Yes = ticker is short sale exempt (only allowed for market makers)
    string alt_locate_id = 109; // A user-supplied ID that is only used for tracking (not passed through)
    string alt_security_id = 112; // An alternative securityID (can be cusip or other)
    string source = 115; // Locate Source/ID Code (if any) (passed through to child orders)
    google.protobuf.Timestamp timestamp = 118;
}


    
message StockMark {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100;
    float s_mark = 103;
}


/*
    These records represent live market summary snapshots for equity, index, and synthetic markets.
*/    
message StockMarketSummary {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double opn_price = 100; // first print price of the day during regular market hours
    double mrk_price = 103; // last print handled during regular market hours
    double cls_price = 106; // official exchange closing price
    double min_price = 109; // minimum print price within market hours
    double max_price = 112; // maximum print price within market hours
    sfixed32 shares_outstanding = 115; // shares outstanding
    sfixed32 bid_count = 118; // num prints <= quote.bid
    sfixed32 bid_volume = 121; // volume when prtPrice <= quote.bid
    sfixed32 ask_count = 124; // num prints >= quote.ask
    sfixed32 ask_volume = 127; // volume when prtPrice >= quote.ask
    sfixed32 mid_count = 130; // num prints inside quote.bid / quote.ask
    sfixed32 mid_volume = 133; // volume inside quote.bid / quote.ask
    sfixed32 prt_count = 136; // number of distinct print reports
    double prt_price = 139; // last print price
    sfixed32 exp_count = 142; // number of updates included in exponential average
    double exp_width = 145; // exponential average market width (10 minute 1/2 life)
    float exp_bid_size = 148; // exponential average bid size (10 minute 1/2 life)
    float exp_ask_size = 151; // exponential average ask size (10 minute 1/2 life)
    google.protobuf.Timestamp last_print = 154;
    google.protobuf.Timestamp timestamp = 157;
}


/*
    StockMinuteBar records are created once per minute for each open stock and index market.  These records are visible in SRSE and are published to the SpiderRock elastic cluster at the same time.
*/    
message StockMinuteBar {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100;
    string time = 103;
    double prt_open = 106; // Open print
    double prt_high = 109; // High print
    double prt_low = 112; // Low print
    double prt_last = 115; // Last print
    double prt_vWap = 118; // VWap (print)
    sfixed32 prt_volume = 121; // Print volume
    sfixed32 prt_count = 124; // Print count
    double qte_hi_bid = 127; // Quote high bid
    double qte_lo_ask = 130; // Quote low ask
    double qte_twap = 133; // Quote TWap
    sfixed32 qte_count = 136; // Quote count
    double bid = 139; // Bid
    double ask = 142; // Ask
    sfixed32 bid_sz = 145; // Bid size
    sfixed32 ask_sz = 148; // Ask size
    float width = 151; // Bid/ask spread
    YesNo is_eOB = 154; // is end-of-bar (every 10 minutes)
    YesNo is_eOH = 157; // is end-of-hour
    google.protobuf.Timestamp timestamp = 160; // same as date + time
}


    
message StockMinuteBarHist {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp date = 13; // end of minute bar
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    DateKey trading_date = 103;
    TradingSession trading_session = 106;
    double prt_open = 109; // Open print
    double prt_high = 112; // High print
    double prt_low = 115; // Low print
    double prt_last = 118; // Last print
    double prt_vWap = 121; // VWap (print)
    sfixed32 prt_volume = 124; // Print volume
    sfixed32 prt_count = 127; // Print count
    double qte_hi_bid = 130; // Quote high bid
    double qte_lo_ask = 133; // Quote low ask
    double qte_twap = 136; // Quote TWap
    sfixed32 qte_count = 139; // Quote count
    double bid = 142; // Bid
    double ask = 145; // Ask
    sfixed32 bid_sz = 148; // Bid size
    sfixed32 ask_sz = 151; // Ask size
    float width = 154; // Bid/ask spread
    YesNo is_eOB = 157; // is end-of-bar (every 10 minutes)
    YesNo is_eOH = 160; // is end-of-hour
    google.protobuf.Timestamp timestamp = 163; // same as date + time
}


    
message StockMoveCode {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    MoveCode move_code = 100; // manual event designation (used to classify history)
    float stk_mark = 103; // if non-zero then use as stock mark override
}


/*
    StockOpenMark records are created during the end-of-day rotation for each ticker and intended for use the following trading day.
*/    
message StockOpenMark {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    DateKey trade_date = 100;
    float sr_cls_prc = 103; // SR open mark; [SR close market (close - 1 min) from previous day; overnight adjusted]
    float close_prc = 106; // exchange open mark; [exchange close mark from previous day; overnight adjusted]
    float bid_prc = 109; // bid price [SR closing bid (close - 1 min) from previous day; overnight adjusted]
    float ask_prc = 112; // ask price [SR closing ask (close - 1 min) from previous day; overnight adjusted]
    string corp_action = 115;
    google.protobuf.Timestamp timestamp = 118;
}


/*
    Records are as loaded by clients and usually represents their negotiated borrow rates.
*/    
message StockPoolBorrowRate {
    message PKey {
        
        TickerKey ticker = 10;
        string client_firm = 13; // SR client firm
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float borrow_rate = 100; // overnight borrow rate for this ticker
    string source = 103;
    google.protobuf.Timestamp timestamp = 106;
}


/*
    StockPositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.
    These records are published by a CoreRiskServer and represent the position and risk markup detail for a single equity or ETF security.
    New records are published immediately when a position changes and about once per minute if no position has changed.
    Note that all stock, future and option records for a single ticker are published simultaneously and records for the same chain should have consistent marks.
*/    
message StockPositionRecordV5 {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103;
    string pri_agg_group = 106; // primary aggregation group
    string sec_agg_group = 109; // secondary aggregation group
    SymbolType symbol_type = 112;
    float tick_value = 115; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 118; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 121;
    PriceFormat price_format = 124; // price display format code
    float stk_prc = 127; // current stock price (any market session) (persists if market closed/halted)
    float stk_bid = 130; // current stock bid (any market session) (zero if market closed/halted)
    float stk_ask = 133; // current stock ask (any market session) (zero if market closed/halted)
    double stk_mark = 136; // current stock mark (freezes at SR CloseMarkTime)
    MarkErrorCode stk_mark_err_codes = 139;
    UMarkSource stk_mark_source = 142;
    double stk_opn_mid_mark = 145; // start-of-day SR stock mark (rotated from prior day record) [corp action adjusted]
    double stk_opn_clr_mark = 148; // start-of-day CLR stock mark (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    sfixed32 stk_opn_pos_prv = 151; // start-of-day SR share position (rotated from prior day record) [corp action adjusted]
    sfixed32 stk_opn_pos_clr = 154; // start-of-day CLR share position (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    sfixed32 stk_opn_pos = 157; // start of period share position (effective; can be from either CLR or SR)
    PositionSource stk_opn_pos_src = 160; // start of period position source
    sfixed32 sh_bot = 163; // number of shares bot today
    sfixed32 sh_sld = 166; // number of shares sld today
    sfixed32 sh_sld_shrt = 169; // number of shares sld short today
    sfixed32 sh_bot_hdg = 172; // number of shares bot today from hedging (spdrSource=HedgeTool)
    sfixed32 sh_sld_hdg = 175; // number of shares sld today from hedging (spdrSource=HedgeTool)
    sfixed32 sh_bot_trh = 178; // number of shares bot today from hedging (spdrSource=TradeHedge)
    sfixed32 sh_sld_trh = 181; // number of shares sld today from hedging (spdrSource=TradeHedge)
    sfixed32 sh_bot_opn = 184; // number of shares bot today from hedging (spdrSource=OpenHedge)
    sfixed32 sh_sld_opn = 187; // number of shares sld today from hedging (spdrSource=OpenHedge)
    sfixed32 sh_bot_trd = 190; // number of shares bot today from any trade hedging source (AutoHedge or Trades loop)
    sfixed32 sh_sld_trd = 193; // number of shares sld today from any trade hedging source (AutoHedge or Trades loop)
    double stk_mny_bot = 196; // sum of settle cash for all buy executions
    double stk_mny_sld = 199; // sum of settle cash for all sell executions
    float day_pnl = 202;
    float opn_pnl_mid_mark = 205;
    float opn_pnl_clr_mark = 208;
    float ex_div_amt = 211; // amount of any dividend going ex today
    float borrow_rate = 214; // overnight rate required to borrow stock (if known)
    float beta = 217; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 220;
    sfixed32 num_executions = 223; // number of included SpdrParentExecution records
    google.protobuf.Timestamp max_exec_dttm = 226; // max (timestamp) of included SpdrParentExecution records
    google.protobuf.Timestamp timestamp = 229;
}


/*
    The most recent (last) print record for CTS/UTDF markets as well as SpiderRock synthetic markets.  Records also incorporate some summary detail and closing mark information as well.
*/    
message StockPrint {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    StkExch prt_exch = 100; // print exch
    sfixed32 prt_size = 103; // print size
    float prt_price = 106; // print price level
    sfixed32 prt_cluster_num = 109; // incremental print cluster counter (one counter per ticker; used to group prints into clusters)
    sfixed32 prt_cluster_size = 112; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 115; // cumulative print size today
    float mrk_price = 118; // last regular market print price
    float cls_price = 121; // official closing price (if available)
    StkPrintType prt_type = 124;
    int32 prt_cond1 = 127; // print condition (from SIP feed)
    int32 prt_cond2 = 130;
    int32 prt_cond3 = 133;
    int32 prt_cond4 = 136;
    float ebid = 139; // exchange bid (@ print time) [SIP feed]
    float eask = 142; // exchange ask (@ print time) [SIP feed]
    sfixed32 ebsz = 145; // exchange bid size
    sfixed32 easz = 148; // exchange ask size
    float eage = 151; // age of prevailing quote at time of print
    PrtSide prt_side = 154;
    sfixed64 prt_timestamp = 157; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 160; // inbound packet PTP timestamp from SR gateway switch; usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 163;
}


    
message StockPrintHistory {
    message PKey {
        
        TickerKey ticker = 10;
        sfixed32 tick_number = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float price = 100;
    sfixed32 up_quan_d = 103;
    sfixed32 dn_quan_d = 106;
    double up_quan_r = 109;
    double dn_quan_r = 112;
    google.protobuf.Timestamp timestamp = 115;
}


/*
    StockPrintMarkup records are created/published for all stock prints
*/    
message StockPrintMarkup {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 prt_number = 100;
    StkExch prt_exch = 103; // print exch
    sfixed32 prt_size = 106; // print size
    float prt_price = 109; // print price level
    sfixed32 prt_cluster_num = 112; // incremental print cluster counter (one counter per ticker; used to group prints into clusters)
    sfixed32 prt_cluster_size = 115; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 118; // cumulative print size today
    float mrk_price = 121; // last regular market print price
    int32 prt_type = 124; // OPRA message type (from OPRA spec)
    int32 prt_cond1 = 127; // print condition (from SIP feed)
    int32 prt_cond2 = 130;
    int32 prt_cond3 = 133;
    int32 prt_cond4 = 136;
    PrtSide prt_side = 139; // Print side: None; Mid; Bid; Ask
    float bid_price = 142; // nbbo bid @ print arrival time
    float ask_price = 145; // nbbo ask @ print arrival time
    sfixed32 bid_size = 148;
    sfixed32 ask_size = 151;
    float bid_price2 = 154; // nbbo 2nd best bid @ print arrival time
    float ask_price2 = 157; // nbbo 2nd best ask @ print arrival time
    sfixed32 bid_size2 = 160; // nbbo 2nd best bid size
    sfixed32 ask_size2 = 163; // nbbo 2nd best ask size
    sfixed64 src_timestamp = 166; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 169; // inbound print packet PTP timestamp from SR gateway switch
    google.protobuf.Timestamp timestamp = 172;
}


    
message StockPrintOpen {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100;
    float last_print = 103;
    float open = 106;
}


    
message StockPrintProbability {
    message PKey {
        
        TickerKey ticker = 10;
        StateModel state_model = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float prt_price = 100;
    sfixed32 prt_size = 103;
    float prt_prob = 106; // probability that this print will result in positive PnL
    BuySell prt_side = 109;
    float bid_price = 112; // nbbo bid price
    float ask_price = 115; // nbbo ask price
    sfixed32 bid_size = 118; // cumulative size @ bid price
    sfixed32 ask_size = 121; // cumulative size @ ask price
    float avg_bLink1m = 124; // average buy link value (trailing 10)
    float mae_bLink1m = 127; // buy link value mean abs err (trailing 1000)
    float avg_sLink1m = 130; // average sell link value (trailing 10)
    float mae_sLink1m = 133; // sell link value mean abs err (trailing 1000)
    float avg_bLink10m = 136; // average buy link value (trailing 100)
    float mae_bLink10m = 139; // bid link value mean abs err (trailing 1000)
    float avg_sLink10m = 142; // average ask link value (trailing 100)
    float mae_sLink10m = 145; // ask link value mean abs err (trailing 1000)
    sfixed32 b_counter = 148; // buy counter
    sfixed32 s_counter = 151; // sell counter
    sfixed64 prt_timestamp = 154; // feed timestamp from the packet
    sfixed64 net_timestamp = 157; // inbound packet PTP timestamp from SR gateway switch (from StockPrint);
    sfixed64 sms_timestamp = 160; // state model server timestamp (just before publish)
}


/*
    StockPrintSet records are created for each print and published to the SpiderRock elastic cluster 10 minutes later, when T+10M markup detail is available.
*/    
message StockPrintSet {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 prt_number = 100;
    StkExch prt_exch = 103; // print exch
    sfixed32 prt_size = 106; // print size
    float prt_price = 109; // print price level
    sfixed32 prt_cluster_num = 112; // incremental print cluster counter (one counter per ticker; used to group prints into clusters)
    sfixed32 prt_cluster_size = 115; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 118; // cumulative print size today
    float mrk_price = 121; // last regular market print price
    int32 prt_type = 124; // OPRA message type (from OPRA spec)
    int32 prt_cond1 = 127; // print condition (from SIP feed)
    int32 prt_cond2 = 130;
    int32 prt_cond3 = 133;
    int32 prt_cond4 = 136;
    PrtSide prt_side = 139; // Print side: None; Mid; Bid; Ask
    sfixed64 prt_timestamp = 142; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 145; // inbound print packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    google.protobuf.Timestamp timestamp = 148;
    float bid_price = 151; // nbbo bid @ print arrival time
    float ask_price = 154; // nbbo ask @ print arrival time
    sfixed32 bid_size = 157;
    sfixed32 ask_size = 160;
    float bid_price2 = 163; // nbbo 2nd best bid @ print arrival time
    float ask_price2 = 166; // nbbo 2nd best ask @ print arrival time
    sfixed32 bid_size2 = 169; // nbbo 2nd best bid size
    sfixed32 ask_size2 = 172; // nbbo 2nd best ask size
    float prt_probability = 175; // probability that buying prtSize shares @ prtPrice will have positive m1 pnl (prtPriceM1 >= prtPrice) [recorded at time of print]
    float prt_probability_m2 = 178; // alternate probability model
    float prt_probability_m3 = 181; // alternate probability model
    float bid_price_m1 = 184; // Bid price +1 minute
    float ask_price_m1 = 187; // Ask price +1 minute
    float prt_price_m1 = 190; // market price +1 minute [mid-quote if not intervening prints;most recent print otherwise]
    float pnl_m1 = 193; // pnl after 1 minute
    YesNo pnl_m1_err = 196;
    float bid_price_m10 = 199; // Bid price +10 minutes
    float ask_price_m10 = 202; // Ask price +10 minutes
    float prt_price_m10 = 205; // market price +10 minutes [most recent print (if any) otherwise mid-quote]
    float pnl_m10 = 208; // pnl after 10 minutes
    YesNo pnl_m10_err = 211;
}


/*
    StockPrintSet records are created for each print and archived when T+10M markup detail is available.
*/    
message StockPrintSetHist {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp timestamp = 13;
        sfixed64 prt_number = 16; // Unique print set identifier, will increment but not guaranteed to be sequential
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    DateKey trading_date = 103;
    TradingSession trading_session = 106;
    StkExch prt_exch = 109; // print exch
    sfixed32 prt_size = 112; // print size
    float prt_price = 115; // print price level
    sfixed32 prt_cluster_num = 118; // incremental print cluster counter (one counter per ticker; used to group prints into clusters)
    sfixed32 prt_cluster_size = 121; // cumulative size of prints in this sequence (prints @ same or more aggressive price with less than 25 ms elapsing since first print; can span exchanges)
    sfixed32 prt_volume = 124; // cumulative print size today
    float mrk_price = 127; // last regular market print price
    int32 prt_type = 130; // OPRA message type (from OPRA spec)
    int32 prt_cond1 = 133; // print condition (from SIP feed)
    int32 prt_cond2 = 136;
    int32 prt_cond3 = 139;
    int32 prt_cond4 = 142;
    PrtSide prt_side = 145; // Print side: None; Mid; Bid; Ask
    sfixed64 prt_timestamp = 148; // exchange high precision timestamp (if available)
    sfixed64 net_timestamp = 151; // inbound print packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    float bid_price = 154; // nbbo bid @ print arrival time
    float ask_price = 157; // nbbo ask @ print arrival time
    sfixed32 bid_size = 160;
    sfixed32 ask_size = 163;
    float bid_price2 = 166; // nbbo 2nd best bid @ print arrival time
    float ask_price2 = 169; // nbbo 2nd best ask @ print arrival time
    sfixed32 bid_size2 = 172; // nbbo 2nd best bid size
    sfixed32 ask_size2 = 175; // nbbo 2nd best ask size
    float prt_probability = 178; // probability that buying prtSize shares @ prtPrice will have positive m1 pnl (prtPriceM1 >= prtPrice) [recorded at time of print]
    float prt_probability_m2 = 181; // alternate probability model
    float prt_probability_m3 = 184; // alternate probability model
    float bid_price_m1 = 187; // Bid price +1 minute
    float ask_price_m1 = 190; // Ask price +1 minute
    float prt_price_m1 = 193; // market price +1 minute [mid-quote if not intervening prints;most recent print otherwise]
    float pnl_m1 = 196; // pnl after 1 minute
    YesNo pnl_m1_err = 199;
    float bid_price_m10 = 202; // Bid price +10 minutes
    float ask_price_m10 = 205; // Ask price +10 minutes
    float prt_price_m10 = 208; // market price +10 minutes [most recent print (if any) otherwise mid-quote]
    float pnl_m10 = 211; // pnl after 10 minutes
    YesNo pnl_m10_err = 214;
}


    
message StockQuoteProbability {
    message PKey {
        
        TickerKey ticker = 10;
        StateModel state_model = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float bid_price = 100; // nbbo bid price
    float ask_price = 103; // nbbo ask price
    sfixed32 bid_size = 106; // cumulative size @ bid price
    sfixed32 ask_size = 109; // cumulative size @ ask price
    float bid_take_prob = 112; // bid take probability of current nbbo market (zero exchange fee) [average size print]
    float ask_take_prob = 115; // ask take probability of current nbbo market (zero exchange fee) [average size print]
    PredictResult bid_take_rv = 118;
    PredictResult ask_take_rv = 121; // model result code
    float bid_impr_price = 124; // trial improvement price (usually 1 tick or 1/2 spread inside bidPrice)
    float ask_impr_price = 127; // trial improvement price (usually 1 tick or 1/2 spread inside askPrice)
    float bid_tk_im_prob = 130; // bid take imprv probability of current nbbo market (zero exchange fee) [prob to sell (take) @ bid + imprIncrement]
    float ask_tk_im_prob = 133; // ask take imprv probability of current nbbo market (zero exchange fee) [prob to buy (take) @ ask - imprIncrement]
    PredictResult bid_tk_im_rv = 136; // model result code
    PredictResult ask_tk_im_rv = 139; // model result code
    float mid_price = 142; // price corresponding to 0.50 probability
    float avg_bid_link1m = 145; // average bid link value (~1 min)
    float mae_bid_link1m = 148; // bid link value mean abs err (~10 min)
    float avg_ask_link1m = 151; // average ask link value (~1 min)
    float mae_ask_link1m = 154; // ask link value mean abs err (~1 min)
    float avg_bid_link10m = 157; // average bid link value (~10 min)
    float mae_bid_link10m = 160; // bid link value mean abs err (~10 min)
    float avg_ask_link10m = 163; // average ask link value (~10 min)
    float mae_ask_link10m = 166; // ask link value mean abs err (~10 min)
    float avg_mkt_width1m = 169; // askPrice - bidPrice (~1 min)
    float avg_mkt_width10m = 172; // askPrice - bidPrice (~10 min)
    sfixed32 counter = 175; // record update counter (zero @ start of period;per ticker)
    QPSource qp_source = 178;
    sfixed64 src_timestamp = 181; // feed timestamp from the packet
    sfixed64 net_timestamp = 184; // inbound packet PTP timestamp from SR gateway switch (from StockBookQuote);zero = size only change
    sfixed64 sms_timestamp = 187; // state model server timestamp (just before publish)
}


    
message StockRealizedVarianceHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    double prt_open = 103; // Open print
    double prt_high = 106; // High print
    double prt_low = 109; // Low print
    double prt_last = 112; // Last print
    double prt_vWap = 115; // VWap (print)
    sfixed32 prt_volume = 118; // Print volume
    sfixed32 prt_count = 121; // Print count
    double qte_hi_bid = 124; // Quote high bid
    double qte_lo_ask = 127; // Quote low ask
    double qte_twap = 130; // Quote TWap
    sfixed32 qte_count = 133; // Quote count
    google.protobuf.Timestamp timestamp = 136; // same as date + time
}


    
message StockRegSHOStatus {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    RegSHOStatus reg_sHOStatus = 100; // Reg SHO status: None - no short sell restrictions, Restricted - Reg SHO short restrictions in place
    google.protobuf.Timestamp timestamp = 103; // timestamp of last update
}


    
message StockSymbolDetail {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float u_prc = 100;
    float u_prc_prv = 103;
    float sh_atm_iv = 106;
    float ln_atm_iv = 109;
    float sh_atm_iv_prv = 112;
    float ln_atm_iv_prv = 115;
    float sh_opn_vega = 118; // open interest
    float ln_opn_vega = 121;
    float sh_prt_vega = 124; // total vega printed today
    float ln_prt_vega = 127;
    sfixed32 next_earn_days = 130;
    string next_earn_time = 133;
    google.protobuf.Timestamp timestamp = 136;
}


/*
    StockThreshold records contain information about whether and how long a stock has been on the REG SRO threshold list.
*/    
message StockThreshold {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo threshold_flag = 100;
    int32 threshold_days = 103;
    google.protobuf.Timestamp threshold_date = 106;
}


    
message SurfaceCurveData {
    message PKey {
        
        ExpiryKey exp_key = 10;
        CurveType curve_type = 13;
    }

    message Points {
        
        string x_axis = 106;
        string value = 109;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string atm_vol = 100; // sVol @ xAxis = 0
    google.protobuf.Timestamp ts = 112; // last update time (Date)
    repeated Points points = 103;
}


    
message SurfaceCurveDataVset {
    message CurveTypes {
        
        CurveType curve_type = 106; // Surface curve type
    }


    MbusInfo descriptor = 1;
    
    ExpiryKey exp_key = 100; // Requested expiry key
    repeated CurveTypes curve_types = 103;
}


    
message SurfaceCurveHist {
    message PKey {
        
        ExpiryKey ekey = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlying stock key that this option expiration attaches to
    sfixed64 security_iD = 103;
    ExpiryKey und_sec_key = 106; // underlier sec key
    SpdrKeyType und_sec_type = 109; // underlier sec type
    double u_prc = 112; // underlier price used for surface fit
    float u_bid = 115; // underlier bid price
    float u_ask = 118; // underlier ask price
    float years = 121; // time to expiration (in years)
    float rate = 124; // current discount rate
    float ddiv = 127; // present value of discrete dividend stream
    float symbol_ratio = 130; // underlier price ratio (usually 1.0 or a multi-hedge option price ratio; if one exists)
    ExerciseType ex_type = 133; // exercise type (American or European)
    CalcModelType model_type = 136; // option pricing model used for price calcs (Normal, LogNormal, etc.)
    CalcPriceType price_type = 139; // Equity has independent sdiv and rate, Future has sdiv = rate
    float earn_cnt = 142; // number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)
    float earn_cnt_adj = 145; // number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)
    float axis_vol_rT = 148; // axis volatility x sqrt(years) (used to compute xAxis) [usually 4m atm vol]
    float axis_fUPrc = 151; // axis FwdUPrc (fwd underlying price used to compute xAxis)
    float atm_strike = 154; // synthetic strike with cPrice = pPrice
    MoneynessType moneyness_type = 157; // moneyness (xAxis) convention
    UnderlierMode underlier_mode = 160; // underlier pricing mode (None=use spot/stock market; FrontMonth=use front month future market + uPrcOffset; Actual = use actual underlier future market)
    CPAdjType cp_adj_type = 163; // adjustment used to align calls/puts (if any)
    PriceQuoteType price_quote_type = 166; // Price or Vol
    float atm_vol = 169; // atm vol (xAxis = 0)
    float atm_cen = 172; // atm vol (xAxis = 0) (eMove/earnCntAdj censored)
    float atm_vol_hist = 175; // historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.
    float atm_cen_hist = 178; // censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn
    float min_atm_vol = 181; // minimum estimated atm vol
    float max_atm_vol = 184; // maximum estimated atm vol
    float min_cPAdj_val = 187; // minimum CP adjust value (sdiv or uPrcOffset)
    float max_cPAdj_val = 190; // maximum CP adjust value (sdiv or uPrcOffset)
    float e_move = 193; // implied earnings move (from LiveSurfaceTerm)
    float e_move_hist = 196; // historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    float u_prc_offset_fit = 199; // implied offset for use when fkey is not the natural underlier for this option expiry [most recent fit value]
    float u_prc_offset_eMA = 202; // time smoothed implied uPrcOffset (half-live ~ 20 seconds)
    float sdiv_fit = 205; // stock dividend (borrow rate) [most recent fit value]
    float sdiv_eMA = 208; // sdiv exp moving average (10 minutes)
    float atm_fixed_move = 211; // fixed strike atm move from prior period
    float atm_phi = 214; // surface phi @ xAxis = 0
    float atm_vega = 217; // surface vega @ xAxis = 0
    float slope = 220; // volatility surface slope (dVol / dXAxis) @ ATM (xAxis=0)
    float var_swap_fV = 223; // variance swap fair value (estimated by numerical integration over OTM price surface)
    GridType grid_type = 226; // gridType defines skew curve coeff points + spline type
    float knot_shift = 229; // constant that should be added to each base knot location [-3.0 - +3.0]
    float min_xAxis = 232; // minimum xAxis value; xAxis values to the left extrapolate horizontally
    float max_xAxis = 235; // maximum xAxis value; xAxis values to the right extrapolate horizontally
    float min_curv_value = 238; // minimum curvature (2nd derivative) of skew curve (can be negative if curve is not strictly convex)
    float min_curv_xAxis = 241; // xAxis of minimum curvature point
    float max_curv_value = 244; // maximum curvature (2nd derivative) of skew curve
    float max_curv_xAxis = 247; // xAxis of maximum curvature point
    float skew_min_x = 250; // xAxis = (effStrike / effAxisFUPrc - 1.0) / axisVolRT; effStrike = strike * strikeRatio; effAxisFUPrc = axisFUPrc * symbolRatio
    float skew_min_y = 253; // skewMinX / skewMinY are the skew curve minimum point (usually a positive x value and a negative y value)
    float skew_c00 = 256; // curve coeff[0]
    float skew_c01 = 259; // curve coeff[1]
    float skew_c02 = 262;
    float skew_c03 = 265;
    float skew_c04 = 268;
    float skew_c05 = 271;
    float skew_c06 = 274;
    float skew_c07 = 277;
    float skew_c08 = 280;
    float skew_c09 = 283;
    float skew_c10 = 286;
    float skew_c11 = 289;
    float skew_c12 = 292;
    float skew_c13 = 295;
    float skew_c14 = 298;
    float skew_c15 = 301;
    float skew_c16 = 304;
    float skew_c17 = 307;
    float skew_c18 = 310;
    float skew_c19 = 313;
    float skew_c20 = 316;
    float skew_c21 = 319;
    float skew_c22 = 322;
    float skew_c23 = 325;
    float skew_c24 = 328;
    float skew_c25 = 331;
    float skew_c26 = 334;
    float skew_c27 = 337;
    float skew_c28 = 340;
    float iv_adj_d7 = 343; // xAxis = -5.0
    float iv_adj_d6 = 346; // xAxis = -4.0
    float iv_adj_d5 = 349; // xAxis = -3.0
    float iv_adj_d4 = 352; // xAxis = -2.0
    float iv_adj_d3 = 355; // xAxis = -1.5
    float iv_adj_d2 = 358; // xAxis = -1.0
    float iv_adj_d1 = 361; // xAxis = -0.5
    float iv_adj_u1 = 364; // xAxis = +0.5
    float iv_adj_u2 = 367; // xAxis = +1.0
    float iv_adj_u3 = 370; // xAxis = +1.5
    float iv_adj_u4 = 373; // xAxis = +2.0
    float iv_adj_u5 = 376; // xAxis = +3.0
    float iv_adj_u6 = 379; // xAxis = +4.0
    float iv_adj_u7 = 382; // xAxis = +5.0
    float cp_adj_d4 = 385; // xAxis = -4.0
    float cp_adj_d3 = 388; // xAxis = -3.0
    float cp_adj_d2 = 391; // xAxis = -2.0
    float cp_adj_d1 = 394; // xAxis = -1.0
    float cp_adj_u1 = 397; // xAxis = +1.0
    float cp_adj_u2 = 400; // xAxis = +2.0
    float cp_adj_u3 = 403; // xAxis = +3.0
    float cp_adj_u4 = 406; // xAxis = +4.0
    float pwidth = 409; // minimum mkt premium width
    float vwidth = 412; // minimum mkt volatility width
    int32 c_cnt = 415; // num call strikes
    int32 p_cnt = 418; // num put strikes
    int32 c_bid_miss = 421; // number of call bid violations (surface outside the market)
    int32 c_ask_miss = 424; // number of call ask violations (surface outside the market)
    int32 p_bid_miss = 427; // number of put bid violations
    int32 p_ask_miss = 430; // number of put ask violations
    float fit_avg_err = 433; // average error (sPrc - midPrc)
    float fit_avg_abs_err = 436; // average absolute error (sPrc - midPrc)
    float fit_max_prc_err = 439; // worst case surface premium violation
    float fit_err_xX = 442; // okey_xx of the option with the largest fit error in this expiration
    CallPut fit_err_cP = 445; // okey_cp of the option with the largest fit error in this expiration
    float fit_err_de = 448; // delta of fixErrXX
    float fit_err_bid = 451; // bid of the option with the largest fit error
    float fit_err_ask = 454; // ask of the option with the largest fit error
    float fit_err_prc = 457; // surface prc of the option with the largest fit error
    float fit_err_vol = 460; // surface vol of the option with the largest fit error
    MarketSession market_session = 463; // market session this surface is from
    TradeableStatus tradeable_status = 466; // indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    SurfaceAdjResult surface_adj_result = 469;
    google.protobuf.Timestamp adj_timestamp = 472;
    SurfaceResult surface_result = 475;
    google.protobuf.Timestamp timestamp = 478;
}


    
message SurfaceCurveIntradayHist {
    message PKey {
        
        ExpiryKey ekey = 10;
        google.protobuf.Timestamp date = 13; // end of minute bar
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100; // underlying stock key that this option expiration attaches to
    sfixed64 security_iD = 103;
    ExpiryKey und_sec_key = 106; // underlier sec key
    SpdrKeyType und_sec_type = 109; // underlier sec type
    DateKey trading_date = 112;
    TradingSession trading_session = 115;
    double u_prc = 118; // underlier price used for surface fit
    float u_bid = 121; // underlier bid price
    float u_ask = 124; // underlier ask price
    float years = 127; // time to expiration (in years)
    float rate = 130; // current discount rate
    float ddiv = 133; // present value of discrete dividend stream
    float symbol_ratio = 136; // underlier price ratio (usually 1.0 or a multi-hedge option price ratio; if one exists)
    ExerciseType ex_type = 139; // exercise type (American or European)
    CalcModelType model_type = 142; // option pricing model used for price calcs (Normal, LogNormal, etc.)
    CalcPriceType price_type = 145; // Equity has independent sdiv and rate, Future has sdiv = rate
    float earn_cnt = 148; // number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)
    float earn_cnt_adj = 151; // number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)
    float axis_vol_rT = 154; // axis volatility x sqrt(years) (used to compute xAxis) [usually 4m atm vol]
    float axis_fUPrc = 157; // axis FwdUPrc (fwd underlying price used to compute xAxis)
    float atm_strike = 160; // synthetic strike with cPrice = pPrice
    MoneynessType moneyness_type = 163; // moneyness (xAxis) convention
    UnderlierMode underlier_mode = 166; // underlier pricing mode (None=use spot/stock market; FrontMonth=use front month future market + uPrcOffset; Actual = use actual underlier future market)
    CPAdjType cp_adj_type = 169; // adjustment used to align calls/puts (if any)
    PriceQuoteType price_quote_type = 172; // Price or Vol
    float atm_vol = 175; // atm vol (xAxis = 0)
    float atm_cen = 178; // atm vol (xAxis = 0) (eMove/earnCntAdj censored)
    float atm_vol_hist = 181; // historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.
    float atm_cen_hist = 184; // censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn
    float min_atm_vol = 187; // minimum estimated atm vol
    float max_atm_vol = 190; // maximum estimated atm vol
    float min_cPAdj_val = 193; // minimum CP adjust value (sdiv or uPrcOffset)
    float max_cPAdj_val = 196; // maximum CP adjust value (sdiv or uPrcOffset)
    float e_move = 199; // implied earnings move (from LiveSurfaceTerm)
    float e_move_hist = 202; // historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    float u_prc_offset_fit = 205; // implied offset for use when fkey is not the natural underlier for this option expiry [most recent fit value]
    float u_prc_offset_eMA = 208; // time smoothed implied uPrcOffset (half-live ~ 20 seconds)
    float sdiv_fit = 211; // stock dividend (borrow rate) [most recent fit value]
    float sdiv_eMA = 214; // sdiv exp moving average (10 minutes)
    float atm_fixed_move = 217; // fixed strike atm move from prior period
    float atm_phi = 220; // surface phi @ xAxis = 0
    float atm_vega = 223; // surface vega @ xAxis = 0
    float slope = 226; // volatility surface slope (dVol / dXAxis) @ ATM (xAxis=0)
    float var_swap_fV = 229; // variance swap fair value (estimated by numerical integration over OTM price surface)
    GridType grid_type = 232; // gridType defines skew curve coeff points + spline type
    float knot_shift = 235; // constant that should be added to each base knot location [-3.0 - +3.0]
    float min_xAxis = 238; // minimum xAxis value; xAxis values to the left extrapolate horizontally
    float max_xAxis = 241; // maximum xAxis value; xAxis values to the right extrapolate horizontally
    float min_curv_value = 244; // minimum curvature (2nd derivative) of skew curve (can be negative if curve is not strictly convex)
    float min_curv_xAxis = 247; // xAxis of minimum curvature point
    float max_curv_value = 250; // maximum curvature (2nd derivative) of skew curve
    float max_curv_xAxis = 253; // xAxis of maximum curvature point
    float skew_min_x = 256; // xAxis = (effStrike / effAxisFUPrc - 1.0) / axisVolRT; effStrike = strike * strikeRatio; effAxisFUPrc = axisFUPrc * symbolRatio
    float skew_min_y = 259; // skewMinX / skewMinY are the skew curve minimum point (usually a positive x value and a negative y value)
    float skew_c00 = 262; // curve coeff[0]
    float skew_c01 = 265; // curve coeff[1]
    float skew_c02 = 268;
    float skew_c03 = 271;
    float skew_c04 = 274;
    float skew_c05 = 277;
    float skew_c06 = 280;
    float skew_c07 = 283;
    float skew_c08 = 286;
    float skew_c09 = 289;
    float skew_c10 = 292;
    float skew_c11 = 295;
    float skew_c12 = 298;
    float skew_c13 = 301;
    float skew_c14 = 304;
    float skew_c15 = 307;
    float skew_c16 = 310;
    float skew_c17 = 313;
    float skew_c18 = 316;
    float skew_c19 = 319;
    float skew_c20 = 322;
    float skew_c21 = 325;
    float skew_c22 = 328;
    float skew_c23 = 331;
    float skew_c24 = 334;
    float skew_c25 = 337;
    float skew_c26 = 340;
    float skew_c27 = 343;
    float skew_c28 = 346;
    float iv_adj_d7 = 349; // xAxis = -5.0
    float iv_adj_d6 = 352; // xAxis = -4.0
    float iv_adj_d5 = 355; // xAxis = -3.0
    float iv_adj_d4 = 358; // xAxis = -2.0
    float iv_adj_d3 = 361; // xAxis = -1.5
    float iv_adj_d2 = 364; // xAxis = -1.0
    float iv_adj_d1 = 367; // xAxis = -0.5
    float iv_adj_u1 = 370; // xAxis = +0.5
    float iv_adj_u2 = 373; // xAxis = +1.0
    float iv_adj_u3 = 376; // xAxis = +1.5
    float iv_adj_u4 = 379; // xAxis = +2.0
    float iv_adj_u5 = 382; // xAxis = +3.0
    float iv_adj_u6 = 385; // xAxis = +4.0
    float iv_adj_u7 = 388; // xAxis = +5.0
    float cp_adj_d4 = 391; // xAxis = -4.0
    float cp_adj_d3 = 394; // xAxis = -3.0
    float cp_adj_d2 = 397; // xAxis = -2.0
    float cp_adj_d1 = 400; // xAxis = -1.0
    float cp_adj_u1 = 403; // xAxis = +1.0
    float cp_adj_u2 = 406; // xAxis = +2.0
    float cp_adj_u3 = 409; // xAxis = +3.0
    float cp_adj_u4 = 412; // xAxis = +4.0
    float pwidth = 415; // minimum mkt premium width
    float vwidth = 418; // minimum mkt volatility width
    int32 c_cnt = 421; // num call strikes
    int32 p_cnt = 424; // num put strikes
    int32 c_bid_miss = 427; // number of call bid violations (surface outside the market)
    int32 c_ask_miss = 430; // number of call ask violations (surface outside the market)
    int32 p_bid_miss = 433; // number of put bid violations
    int32 p_ask_miss = 436; // number of put ask violations
    float fit_avg_err = 439; // average error (sPrc - midPrc)
    float fit_avg_abs_err = 442; // average absolute error (sPrc - midPrc)
    float fit_max_prc_err = 445; // worst case surface premium violation
    float fit_err_xX = 448; // okey_xx of the option with the largest fit error in this expiration
    CallPut fit_err_cP = 451; // okey_cp of the option with the largest fit error in this expiration
    float fit_err_de = 454; // delta of fixErrXX
    float fit_err_bid = 457; // bid of the option with the largest fit error
    float fit_err_ask = 460; // ask of the option with the largest fit error
    float fit_err_prc = 463; // surface prc of the option with the largest fit error
    float fit_err_vol = 466; // surface vol of the option with the largest fit error
    MarketSession market_session = 469; // market session this surface is from
    TradeableStatus tradeable_status = 472; // indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    SurfaceAdjResult surface_adj_result = 475;
    google.protobuf.Timestamp adj_timestamp = 478;
    SurfaceResult surface_result = 481;
    google.protobuf.Timestamp timestamp = 484;
}


    
message SurfaceCurvePtsHist {
    message PKey {
        
        DateKey trading_date = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float skew_x00 = 100; // skew curve xAxis
    float skew_x01 = 103;
    float skew_x02 = 106;
    float skew_x03 = 109;
    float skew_x04 = 112;
    float skew_x05 = 115;
    float skew_x06 = 118;
    float skew_x07 = 121;
    float skew_x08 = 124;
    float skew_x09 = 127;
    float skew_x10 = 130;
    float skew_x11 = 133;
    float skew_x12 = 136;
    float skew_x13 = 139;
    float skew_x14 = 142;
    float skew_x15 = 145;
    float skew_x16 = 148;
    float skew_x17 = 151;
    float skew_x18 = 154;
    float skew_x19 = 157;
    float skew_x20 = 160;
    float skew_x21 = 163;
    float skew_x22 = 166;
    float skew_x23 = 169;
    float skew_x24 = 172;
    float skew_x25 = 175;
    float skew_x26 = 178;
    float skew_x27 = 181;
    float skew_x28 = 184;
    float cp_adj_xD4 = 187; // cpAdj curve xAxis
    float cp_adj_xD3 = 190;
    float cp_adj_xD2 = 193;
    float cp_adj_xD1 = 196;
    float cp_adj_xU1 = 199;
    float cp_adj_xU2 = 202;
    float cp_adj_xU3 = 205;
    float cp_adj_xU4 = 208;
    google.protobuf.Timestamp timestamp = 211;
}


    
message SurfaceFixedGridHist {
    message PKey {
        
        TickerKey ticker = 10;
        int32 days = 13; // days to expiration [5, 21, 42, 63, 84, 105, 126, 189, 252, 378, 504]
        DateKey trading_date = 16;
        TradingSession trading_session = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    float e_move = 103; // Implied earnings move (from LiveSurfaceTerm.eMove)
    float e_move_hist = 106; // Historical earnings move (from LiveSurfaceTerm.eMoveHist)
    float vol_d40 = 109; // xde = -40		(from LiveSurfaceCurve.surfaceType = 'Live')
    float vol_d30 = 112; // xde = -30
    float vol_d20 = 115; // xde = -20
    float vol_d10 = 118; // xde = -10
    float vol_aTM = 121; // xde = 0
    float vol_u10 = 124; // xde = +10
    float vol_u20 = 127; // xde = +20
    float vol_u30 = 130; // xde = +30
    float vol_u40 = 133; // xde = +40
    float v_width = 136; // atm volatility width (Live)
    float lo_years = 139; // LiveSurfaceCurve.years before days	[-1 = none]
    float hi_years = 142; // LiveSurfaceCurve.years after days	[-1 = none]
    google.protobuf.Timestamp timestamp = 145; // surface fit timestamp
}


    
message SurfaceFixedGridIntradayHist {
    message PKey {
        
        TickerKey ticker = 10;
        int32 days = 13; // days to expiration [5, 21, 42, 63, 84, 105, 126, 189, 252, 378, 504]
        google.protobuf.Timestamp date = 16; // end of minute bar
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    DateKey trading_date = 103;
    TradingSession trading_session = 106;
    float e_move = 109; // Implied earnings move (from LiveSurfaceTerm.eMove)
    float e_move_hist = 112; // Historical earnings move (from LiveSurfaceTerm.eMoveHist)
    float vol_d40 = 115; // xde = -40		(from LiveSurfaceCurve.surfaceType = 'Live')
    float vol_d30 = 118; // xde = -30
    float vol_d20 = 121; // xde = -20
    float vol_d10 = 124; // xde = -10
    float vol_aTM = 127; // xde = 0
    float vol_u10 = 130; // xde = +10
    float vol_u20 = 133; // xde = +20
    float vol_u30 = 136; // xde = +30
    float vol_u40 = 139; // xde = +40
    float v_width = 142; // atm volatility width (Live)
    float lo_years = 145; // LiveSurfaceCurve.years before days	[-1 = none]
    float hi_years = 148; // LiveSurfaceCurve.years after days	[-1 = none]
    google.protobuf.Timestamp timestamp = 151; // surface fit timestamp
}


    
message SurfaceFixedTermHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13;
        TradingSession trading_session = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    float h_eMove = 103; // expected forward earnings move (average of the last 8-12 underlier earnings moves; w/max clipping)
    int32 h_eMove_num = 106; // num historical earnings moves in historical window
    float h_eMove_avg = 109; // avg historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_std = 112; // std historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_min = 115; // max historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_max = 118; // min historical earnings move (last 8-12 underlier earnings moves)
    float i_eMove = 121; // implied earnings move (implied move; all earnings events)
    EFitCode i_eFit_code = 124; // implied EFit Code
    float i_eFit_error = 127; // eMove fit error (term surface fit error)
    int32 expiry_count = 130; // number of actual expirations involved
    float i_eMove_avg = 133; // average eMove today
    float i_eMove_std = 136; // eMove std dev today
    float i_eMove_min = 139; // eMove min today
    float i_eMove_max = 142; // emove max today
    sfixed32 i_eMove_cnt = 145; // number of surface term fits today
    sfixed32 e_move_exp_adj1 = 148; // number of expirations (+/-) that the next earn date was moved to best fit market term structure (if any)
    float e_move_yrs_adj1 = 151; // number of trading years (+/-) that the next earn date was moved to best fit market term structure (if any)
    float e_move_years1 = 154; // years to expiration from LiveSurfaceCurve.pkey.ekey = eMoveFKey1
    ExpiryKey e_move_eKey1 = 157; // LiveSurfaceCurve.pkey.ekey immediately after 1st implied earnings move (note: this will not match the base earnings calendar if eMoveDtAdj1 != 0)
    sfixed32 e_move_exp_adj2 = 160; // number of expirations (+/-) that the 2nd earn date was moved to best fit market term structure (if any)
    float e_move_yrs_adj2 = 163; // number of trading years (+/-) that the 2nd earn date was moved to best fit market term structure (if any)
    float e_move_years2 = 166; // years to expiration from LiveSurfaceCurve.pkey.fkey = eMoveFKey2
    ExpiryKey e_move_eKey2 = 169; // LiveSurfaceCurve.pkey.ekey immediately after 2nd implied earnings move (note: this will not match the base earnings calendar if eMoveDtAdj2 != 0)
    float atm_cen_i_st = 172; // short term (5 day) model atm volatility (censored using iEMult)
    float atm_cen_i_lt = 175; // long term (504 day) model atm volatility
    float atm_cen_i_decay = 178; // model decay parameter
    float atm_cen_i_5d = 181; // Interpolated 5 day atm vol (censored using iEMult)
    float atm_cen_i_10d = 184; // Interpolated 10 day atm vol
    float atm_cen_i_21d = 187; // Interpolated 21 day atm vol
    float atm_cen_i_42d = 190; // Interpolated 42 day atm vol
    float atm_cen_i_63d = 193; // Interpolated 63 day atm vol
    float atm_cen_i_84d = 196; // Interpolated 84 day atm vol
    float atm_cen_i_105d = 199; // Interpolated 105 day atm vol
    float atm_cen_i_126d = 202; // Interpolated 126 day atm vol
    float atm_cen_i_189d = 205; // Interpolated 189 day atm vol
    float atm_cen_i_252d = 208; // Interpolated 252 day atm vol
    float atm_cen_i_378d = 211; // Interpolated 378 day atm vol
    float atm_cen_i_504d = 214; // Interpolated 504 day atm vol
    float atm_cen_h_st = 217; // short term (5 day) model atm volatility (censored using hEMult)
    float atm_cen_h_lt = 220; // long term (504 day) model atm volatility
    float atm_cen_h_decay = 223; // model decay parameter
    float atm_cen_h_5d = 226; // Interpolated 5 day atm vol (censored using hEMult)
    float atm_cen_h_10d = 229; // Interpolated 10 day atm vol
    float atm_cen_h_21d = 232; // Interpolated 21 day atm vol
    float atm_cen_h_42d = 235; // Interpolated 42 day atm vol
    float atm_cen_h_63d = 238; // Interpolated 63 day atm vol
    float atm_cen_h_84d = 241; // Interpolated 84 day atm vol
    float atm_cen_h_105d = 244; // Interpolated 105 day atm vol
    float atm_cen_h_126d = 247; // Interpolated 126 day atm vol
    float atm_cen_h_189d = 250; // Interpolated 189 day atm vol
    float atm_cen_h_252d = 253; // Interpolated 252 day atm vol
    float atm_cen_h_378d = 256; // Interpolated 378 day atm vol
    float atm_cen_h_504d = 259; // Interpolated 504 day atm vol
    float s_div_5d = 262; // Interpolated 5 day implied sdiv rate
    float s_div_10d = 265; // Interpolated 10 day implied sdiv rate
    float s_div_21d = 268; // Interpolated 21 day implied sdiv rate
    float s_div_42d = 271; // Interpolated 42 day implied sdiv rate
    float s_div_63d = 274; // Interpolated 63 day implied sdiv rate
    float s_div_84d = 277; // Interpolated 84 day implied sdiv rate
    float s_div_105d = 280; // Interpolated 105 day implied sdiv rate
    float s_div_126d = 283; // Interpolated 126 day implied sdiv rate
    float s_div_189d = 286; // Interpolated 189 day implied sdiv rate
    float s_div_252d = 289; // Interpolated 252 day implied sdiv rate
    float s_div_378d = 292; // Interpolated 378 day implied sdiv rate
    float s_div_504d = 295; // Interpolated 504 day implied sdiv rate
    float fwd_uPrc_5d = 298; // Interpolated 5 day implied forward price
    float fwd_uPrc_10d = 301; // Interpolated 10 day implied forward price
    float fwd_uPrc_21d = 304; // Interpolated 21 day implied forward price
    float fwd_uPrc_42d = 307; // Interpolated 42 day implied forward price
    float fwd_uPrc_63d = 310; // Interpolated 63 day implied forward price
    float fwd_uPrc_84d = 313; // Interpolated 84 day implied forward price
    float fwd_uPrc_105d = 316; // Interpolated 105 day implied forward price
    float fwd_uPrc_126d = 319; // Interpolated 126 day implied forward price
    float fwd_uPrc_189d = 322; // Interpolated 189 day implied forward price
    float fwd_uPrc_252d = 325; // Interpolated 252 day implied forward price
    float fwd_uPrc_378d = 328; // Interpolated 378 day implied forward price
    float fwd_uPrc_504d = 331; // Interpolated 504 day implied forward price
    float v_width_5d = 334; // Interpolated 5 day market vwidth
    float v_width_10d = 337; // Interpolated 10 day market vwidth
    float v_width_21d = 340; // Interpolated 21 day market vwidth
    float v_width_42d = 343; // Interpolated 42 day market vwidth
    float v_width_63d = 346; // Interpolated 63 day market vwidth
    float v_width_84d = 349; // Interpolated 84 day market vwidth
    float v_width_105d = 352; // Interpolated 105 day market vwidth
    float v_width_126d = 355; // Interpolated 126 day market vwidth
    float v_width_189d = 358; // Interpolated 189 day market vwidth
    float v_width_252d = 361; // Interpolated 252 day market vwidth
    float v_width_378d = 364; // Interpolated 378 day market vwidth
    float v_width_504d = 367; // Interpolated 504 day market vwidth
    float v_slope_5d = 370; // Interpolated 5 day atm vol slope
    float v_slope_10d = 373; // Interpolated 10 day atm vol slope
    float v_slope_21d = 376; // Interpolated 21 day atm vol slope
    float v_slope_42d = 379; // Interpolated 42 day atm vol slope
    float v_slope_63d = 382; // Interpolated 63 day atm vol slope
    float v_slope_84d = 385; // Interpolated 84 day atm vol slope
    float v_slope_105d = 388; // Interpolated 105 day atm vol slope
    float v_slope_126d = 391; // Interpolated 126 day atm vol slope
    float v_slope_189d = 394; // Interpolated 189 day atm vol slope
    float v_slope_252d = 397; // Interpolated 252 day atm vol slope
    float v_slope_378d = 400; // Interpolated 378 day atm vol slope
    float v_slope_504d = 403; // Interpolated 504 day atm vol slope
    int32 e_cnt_5d = 406; // number of expected earnings events
    int32 e_cnt_10d = 409; // number of expected earnings events
    int32 e_cnt_21d = 412; // number of expected earnings events
    int32 e_cnt_42d = 415; // number of expected earnings events
    int32 e_cnt_63d = 418; // number of expected earnings events
    int32 e_cnt_84d = 421; // number of expected earnings events
    int32 e_cnt_105d = 424; // number of expected earnings events
    int32 e_cnt_126d = 427; // number of expected earnings events
    int32 e_cnt_189d = 430; // number of expected earnings events
    int32 e_cnt_252d = 433; // number of expected earnings events
    int32 e_cnt_378d = 436; // number of expected earnings events
    int32 e_cnt_504d = 439; // number of expected earnings events
    google.protobuf.Timestamp timestamp = 442; // update timestamp
}


    
message SurfaceFixedTermIntradayHist {
    message PKey {
        
        TickerKey ticker = 10;
        google.protobuf.Timestamp date = 13; // end of minute bar
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100;
    DateKey trading_date = 103;
    TradingSession trading_session = 106;
    float h_eMove = 109; // expected forward earnings move (average of the last 8-12 underlier earnings moves; w/max clipping)
    int32 h_eMove_num = 112; // num historical earnings moves in historical window
    float h_eMove_avg = 115; // avg historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_std = 118; // std historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_min = 121; // max historical earnings move (last 8-12 underlier earnings moves)
    float h_eMove_max = 124; // min historical earnings move (last 8-12 underlier earnings moves)
    float i_eMove = 127; // implied earnings move (implied move; all earnings events)
    EFitCode i_eFit_code = 130; // implied EFit Code
    float i_eFit_error = 133; // eMove fit error (term surface fit error)
    int32 expiry_count = 136; // number of actual expirations involved
    float i_eMove_avg = 139; // average eMove today
    float i_eMove_std = 142; // eMove std dev today
    float i_eMove_min = 145; // eMove min today
    float i_eMove_max = 148; // emove max today
    sfixed32 i_eMove_cnt = 151; // number of surface term fits today
    sfixed32 e_move_exp_adj1 = 154; // number of expirations (+/-) that the next earn date was moved to best fit market term structure (if any)
    float e_move_yrs_adj1 = 157; // number of trading years (+/-) that the next earn date was moved to best fit market term structure (if any)
    float e_move_years1 = 160; // years to expiration from LiveSurfaceCurve.pkey.ekey = eMoveFKey1
    ExpiryKey e_move_eKey1 = 163; // LiveSurfaceCurve.pkey.ekey immediately after 1st implied earnings move (note: this will not match the base earnings calendar if eMoveDtAdj1 != 0)
    sfixed32 e_move_exp_adj2 = 166; // number of expirations (+/-) that the 2nd earn date was moved to best fit market term structure (if any)
    float e_move_yrs_adj2 = 169; // number of trading years (+/-) that the 2nd earn date was moved to best fit market term structure (if any)
    float e_move_years2 = 172; // years to expiration from LiveSurfaceCurve.pkey.fkey = eMoveFKey2
    ExpiryKey e_move_eKey2 = 175; // LiveSurfaceCurve.pkey.ekey immediately after 2nd implied earnings move (note: this will not match the base earnings calendar if eMoveDtAdj2 != 0)
    float atm_cen_i_st = 178; // short term (5 day) model atm volatility (censored using iEMult)
    float atm_cen_i_lt = 181; // long term (504 day) model atm volatility
    float atm_cen_i_decay = 184; // model decay parameter
    float atm_cen_i_5d = 187; // Interpolated 5 day atm vol (censored using iEMult)
    float atm_cen_i_10d = 190; // Interpolated 10 day atm vol
    float atm_cen_i_21d = 193; // Interpolated 21 day atm vol
    float atm_cen_i_42d = 196; // Interpolated 42 day atm vol
    float atm_cen_i_63d = 199; // Interpolated 63 day atm vol
    float atm_cen_i_84d = 202; // Interpolated 84 day atm vol
    float atm_cen_i_105d = 205; // Interpolated 105 day atm vol
    float atm_cen_i_126d = 208; // Interpolated 126 day atm vol
    float atm_cen_i_189d = 211; // Interpolated 189 day atm vol
    float atm_cen_i_252d = 214; // Interpolated 252 day atm vol
    float atm_cen_i_378d = 217; // Interpolated 378 day atm vol
    float atm_cen_i_504d = 220; // Interpolated 504 day atm vol
    float atm_cen_h_st = 223; // short term (5 day) model atm volatility (censored using hEMult)
    float atm_cen_h_lt = 226; // long term (504 day) model atm volatility
    float atm_cen_h_decay = 229; // model decay parameter
    float atm_cen_h_5d = 232; // Interpolated 5 day atm vol (censored using hEMult)
    float atm_cen_h_10d = 235; // Interpolated 10 day atm vol
    float atm_cen_h_21d = 238; // Interpolated 21 day atm vol
    float atm_cen_h_42d = 241; // Interpolated 42 day atm vol
    float atm_cen_h_63d = 244; // Interpolated 63 day atm vol
    float atm_cen_h_84d = 247; // Interpolated 84 day atm vol
    float atm_cen_h_105d = 250; // Interpolated 105 day atm vol
    float atm_cen_h_126d = 253; // Interpolated 126 day atm vol
    float atm_cen_h_189d = 256; // Interpolated 189 day atm vol
    float atm_cen_h_252d = 259; // Interpolated 252 day atm vol
    float atm_cen_h_378d = 262; // Interpolated 378 day atm vol
    float atm_cen_h_504d = 265; // Interpolated 504 day atm vol
    float s_div_5d = 268; // Interpolated 5 day implied sdiv rate
    float s_div_10d = 271; // Interpolated 10 day implied sdiv rate
    float s_div_21d = 274; // Interpolated 21 day implied sdiv rate
    float s_div_42d = 277; // Interpolated 42 day implied sdiv rate
    float s_div_63d = 280; // Interpolated 63 day implied sdiv rate
    float s_div_84d = 283; // Interpolated 84 day implied sdiv rate
    float s_div_105d = 286; // Interpolated 105 day implied sdiv rate
    float s_div_126d = 289; // Interpolated 126 day implied sdiv rate
    float s_div_189d = 292; // Interpolated 189 day implied sdiv rate
    float s_div_252d = 295; // Interpolated 252 day implied sdiv rate
    float s_div_378d = 298; // Interpolated 378 day implied sdiv rate
    float s_div_504d = 301; // Interpolated 504 day implied sdiv rate
    float fwd_uPrc_5d = 304; // Interpolated 5 day implied forward price
    float fwd_uPrc_10d = 307; // Interpolated 10 day implied forward price
    float fwd_uPrc_21d = 310; // Interpolated 21 day implied forward price
    float fwd_uPrc_42d = 313; // Interpolated 42 day implied forward price
    float fwd_uPrc_63d = 316; // Interpolated 63 day implied forward price
    float fwd_uPrc_84d = 319; // Interpolated 84 day implied forward price
    float fwd_uPrc_105d = 322; // Interpolated 105 day implied forward price
    float fwd_uPrc_126d = 325; // Interpolated 126 day implied forward price
    float fwd_uPrc_189d = 328; // Interpolated 189 day implied forward price
    float fwd_uPrc_252d = 331; // Interpolated 252 day implied forward price
    float fwd_uPrc_378d = 334; // Interpolated 378 day implied forward price
    float fwd_uPrc_504d = 337; // Interpolated 504 day implied forward price
    float v_width_5d = 340; // Interpolated 5 day market vwidth
    float v_width_10d = 343; // Interpolated 10 day market vwidth
    float v_width_21d = 346; // Interpolated 21 day market vwidth
    float v_width_42d = 349; // Interpolated 42 day market vwidth
    float v_width_63d = 352; // Interpolated 63 day market vwidth
    float v_width_84d = 355; // Interpolated 84 day market vwidth
    float v_width_105d = 358; // Interpolated 105 day market vwidth
    float v_width_126d = 361; // Interpolated 126 day market vwidth
    float v_width_189d = 364; // Interpolated 189 day market vwidth
    float v_width_252d = 367; // Interpolated 252 day market vwidth
    float v_width_378d = 370; // Interpolated 378 day market vwidth
    float v_width_504d = 373; // Interpolated 504 day market vwidth
    float v_slope_5d = 376; // Interpolated 5 day atm vol slope
    float v_slope_10d = 379; // Interpolated 10 day atm vol slope
    float v_slope_21d = 382; // Interpolated 21 day atm vol slope
    float v_slope_42d = 385; // Interpolated 42 day atm vol slope
    float v_slope_63d = 388; // Interpolated 63 day atm vol slope
    float v_slope_84d = 391; // Interpolated 84 day atm vol slope
    float v_slope_105d = 394; // Interpolated 105 day atm vol slope
    float v_slope_126d = 397; // Interpolated 126 day atm vol slope
    float v_slope_189d = 400; // Interpolated 189 day atm vol slope
    float v_slope_252d = 403; // Interpolated 252 day atm vol slope
    float v_slope_378d = 406; // Interpolated 378 day atm vol slope
    float v_slope_504d = 409; // Interpolated 504 day atm vol slope
    int32 e_cnt_5d = 412; // number of expected earnings events
    int32 e_cnt_10d = 415; // number of expected earnings events
    int32 e_cnt_21d = 418; // number of expected earnings events
    int32 e_cnt_42d = 421; // number of expected earnings events
    int32 e_cnt_63d = 424; // number of expected earnings events
    int32 e_cnt_84d = 427; // number of expected earnings events
    int32 e_cnt_105d = 430; // number of expected earnings events
    int32 e_cnt_126d = 433; // number of expected earnings events
    int32 e_cnt_189d = 436; // number of expected earnings events
    int32 e_cnt_252d = 439; // number of expected earnings events
    int32 e_cnt_378d = 442; // number of expected earnings events
    int32 e_cnt_504d = 445; // number of expected earnings events
    google.protobuf.Timestamp timestamp = 448; // update timestamp
}


    
message SymExpRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string change_reason = 100;
    string accnt = 103;
    ExpiryKey ekey = 106;
    double u_prc = 109;
    double f_prc = 112;
    string risk_group = 115;
    sfixed32 cn_bot = 118; // fills + IOC leaves
    sfixed32 cn_sld = 121; // fills + IOC leaves
    sfixed32 fc_bot = 124; // fills + IOC leaves
    sfixed32 fc_sld = 127; // fills + IOC leaves
    sfixed32 cn_bot_filled = 130; // fills only
    sfixed32 cn_sld_filled = 133; // fills only
    sfixed32 fc_bot_filled = 136; // fills only
    sfixed32 fc_sld_filled = 139; // fills only
    double o_de_bot_filled = 142; // fills only
    double o_de_sld_filled = 145; // fills only
    double dd_bot = 148; // fills + IOC leaves
    double dd_sld = 151; // fills + IOC leaves
    double ve_bot = 154; // fills + IOC leaves
    double ve_sld = 157; // fills + IOC leaves
    double wt_ve_bot = 160; // fills + IOC leaves
    double wt_ve_sld = 163; // fills + IOC leaves
    double pr_bot = 166; // fills + IOC leaves
    double pr_sld = 169; // fills + IOC leaves
    double o_de_bot = 172; // fills + IOC leaves
    double o_de_sld = 175; // fills + IOC leaves
    double f_de_bot = 178; // (depricate) fills + IOC leaves
    double f_de_sld = 181; // (depricate) fills + IOC leaves
    double dd_bot_opt = 184; // fills + IOC leaves
    double dd_sld_opt = 187; // fills + IOC leaves
    double dd_bot_fut = 190; // fills + IOC leaves
    double dd_sld_fut = 193; // fills + IOC leaves
    double opn_de_bot = 196; // fills + all leaves
    double opn_de_sld = 199; // fills + all leaves
    double delta_pos = 202;
    double rm1_bot = 205; // fills + IOC leaves
    double rm1_sld = 208; // fills + IOC leaves
    double rm2_bot = 211; // fills + IOC leaves
    double rm2_sld = 214; // fills + IOC leaves
    double rm3_bot = 217; // fills + IOC leaves
    double rm3_sld = 220; // fills + IOC leaves
    double rm4_bot = 223; // fills + IOC leaves
    double rm4_sld = 226; // fills + IOC leaves
    double rm5_bot = 229; // fills + IOC leaves
    double rm5_sld = 232; // fills + IOC leaves
    double rm6_bot = 235; // fills + IOC leaves
    double rm6_sld = 238; // fills + IOC leaves
    double rm7_bot = 241; // fills + IOC leaves
    double rm7_sld = 244; // fills + IOC leaves
    double notional_bot = 247; // fills + IOC leaves
    double notional_sld = 250; // fills + IOC leaves
    sfixed32 cn_abs = 253; // fills + all leaves
    sfixed32 fc_abs = 256; // fills + all leaves
    double notional_abs = 259; // fills + all leaves
    sfixed32 abs_cn_trd = 262;
    double s08dn_day = 265; // fills + IOC leaves
    double s06up_day = 268; // fills + IOC leaves
    double s15dn_day = 271; // fills + IOC leaves
    double s15up_day = 274; // fills + IOC leaves
    sfixed32 counter = 277; // fills + IOC leaves
    google.protobuf.Timestamp timestamp = 280; // fills + IOC leaves
}


    
message SymbolComment {
    message PKey {
        
        TickerKey ticker = 10;
        sfixed64 comment_iD = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_name = 100;
    string user_group = 103;
    int32 is_deleted = 106;
    google.protobuf.Timestamp timestamp = 109;
    string comment = 112;
}


    
message SymbolControl {
    message PKey {
        
        string sym_ctrl_accnt = 10;
        string client_firm = 13;
        TickerKey ticker = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string sector = 100;
    string risk_class = 103;
    StkStatus stk_status = 106;
    FutStatus fut_status = 109;
    OptStatus opt_status = 112;
    HoldReason hold_reason = 115;
    float binary_days = 118;
    HedgeDeltaRule hedge_delta_rule = 121; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (dynamic), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface (dynamic)) [AccountConfig.hedgeDelta]
    string modified_by = 124; // user who last modified this record
    google.protobuf.Timestamp timestamp = 127; // timestamp of last modification
}


    
message SymbolControlDetail {
    message PKey {
        
        string accnt = 10;
        TickerKey ticker = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string sector = 100;
    string risk_class = 103;
    OptStatus opt_status = 106;
    StkStatus stk_status = 109;
    HoldReason hold_reason = 112;
    float binary_days = 115;
    string route_accnt = 118;
    sfixed32 ind_num = 121;
    sfixed32 sub_num = 124;
    sfixed32 grp_num = 127;
    sfixed32 nbr_num = 130;
    string name = 133;
    SymbolType symbol_type = 136;
    TapeCode tape_code = 139;
    float market_cap = 142;
    float stock_volume = 145;
    float base_vol = 148; // from stock risk rec : from earn mult fit (<0.75 yrs)
    float option_volume = 151;
    float open_interest = 154;
    string exch_string = 157;
    sfixed32 num_options = 160;
    YesNo has_theo = 163;
    float stock_px = 166; // note: this info is typically added "on the fly" by the app server and is derived
    sfixed32 abs_cn_pos = 169; // from other records
    sfixed32 net_sh_pos = 172;
    string locate_firm = 175;
    sfixed32 locate_quan = 178;
    google.protobuf.Timestamp locate_time = 181;
    YesNo gc_flag = 184;
    float gc_rate = 187;
    float borrow_rate = 190;
    float dividend_amt = 193;
    sfixed32 next_earnings = 196;
    DivKind div_kind = 199;
    DateKey div_date = 202; // ex-dividend date
    string modified_by = 205; // user who last modified this record
    google.protobuf.Timestamp timestamp = 208; // timestamp of last modification
}


/*
    SymbolMarginSummary records are published by the AggRiskServers and consumed by execution engines
*/    
message SymbolMarginSummaryV5 {
    message PKey {
        
        TickerKey ticker = 10; // stock ticker (eg MSFT, SPY)
        string accnt = 13; // SRAccnt (SR assigned;up to 16 chars)
        DateKey trade_date = 16; // current [live] period trading date
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR client firm
    string risk_server_code = 103; // SR risk server code that published this record
    float va_rsu15 = 106; // Aggregate RiskSlide: uPrc up 15%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.15))
    float va_rsd15 = 109; // Aggregate RiskSlide: uPrc dn 15%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.15))
    float va_rsu10 = 112; // Aggregate RiskSlide: uPrc up 10%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.10))
    float va_rsd10 = 115; // Aggregate RiskSlide: uPrc dn 10%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.10))
    float va_rsu06 = 118; // Aggregate RiskSlide: uPrc up 6%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.06))
    float va_rsd08 = 121; // Aggregate RiskSlide: uPrc dn 8%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.08))
    float haircut25 = 124; // Aggregate Risk Margin (JBO): [$25 minimum;-15/+15 uPrc slides]
    float haircut37 = 127; // Aggregate Risk Margin (PM): [$37.50 minimum;-8/+6 uPrc slides (broad based);-15/+15 uPrc slides (non-broad based)]
    google.protobuf.Timestamp timestamp = 130;
}


    
message SymbolRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string change_reason = 100;
    string accnt = 103;
    TickerKey ticker = 106;
    double u_prc = 109;
    string risk_group = 112;
    sfixed32 sh_bot_filled = 115; // fills only
    sfixed32 sh_sld_filled = 118; // fills only
    sfixed32 fc_bot_filled = 121; // fills only
    sfixed32 fc_sld_filled = 124; // fills only
    sfixed32 cn_bot_filled = 127; // fills only
    sfixed32 cn_sld_filled = 130; // fills only
    double o_de_bot_filled = 133; // fills only
    double o_de_sld_filled = 136; // fills only
    sfixed32 sh_bot = 139;
    sfixed32 sh_sld = 142;
    sfixed32 fc_bot = 145;
    sfixed32 fc_sld = 148;
    sfixed32 cn_bot = 151;
    sfixed32 cn_sld = 154;
    sfixed32 fd_bot = 157;
    sfixed32 fd_sld = 160;
    sfixed32 sh_sld_short = 163;
    sfixed32 sh_opn_sell = 166;
    sfixed32 sh_open_short = 169;
    YesNo is_broad_based = 172;
    double sh_dd_bot_filled = 175; // fills only
    double sh_dd_sld_filled = 178; // fills only
    double dd_bot = 181;
    double dd_sld = 184;
    double ve_bot = 187;
    double ve_sld = 190;
    double wt_ve_bot = 193;
    double wt_ve_sld = 196;
    double pr_bot = 199;
    double pr_sld = 202;
    double o_de_bot = 205;
    double o_de_sld = 208;
    double f_de_bot = 211;
    double f_de_sld = 214;
    double dd_bot_stk = 217;
    double dd_sld_stk = 220;
    double dd_bot_fut = 223;
    double dd_sld_fut = 226;
    double dd_bot_opt = 229;
    double dd_sld_opt = 232;
    double opn_de_bot = 235;
    double opn_de_sld = 238;
    double delta_pos = 241;
    double rm1_bot = 244;
    double rm1_sld = 247;
    double rm2_bot = 250;
    double rm2_sld = 253;
    double rm3_bot = 256;
    double rm3_sld = 259;
    double rm4_bot = 262;
    double rm4_sld = 265;
    double rm5_bot = 268;
    double rm5_sld = 271;
    double rm6_bot = 274;
    double rm6_sld = 277;
    double rm7_bot = 280;
    double rm7_sld = 283;
    double notional_bot = 286;
    double notional_sld = 289;
    double notional_abs = 292;
    double notional_pLvs_buy = 295;
    double notional_pLvs_sell = 298;
    sfixed32 parent_lvs_sh_buy = 301;
    sfixed32 parent_lvs_sh_sell = 304;
    sfixed32 sh_abs = 307;
    sfixed32 fc_abs = 310;
    sfixed32 cn_abs = 313;
    sfixed32 abs_cn_trd = 316;
    double s08dn_day = 319;
    double s06up_day = 322;
    double s15dn_day = 325;
    double s15up_day = 328;
    double s08dn_acc = 331;
    double s06up_acc = 334;
    double s15dn_acc = 337;
    double s15up_acc = 340;
    double day_haircut = 343;
    double acc_haircut = 346;
    double last_ema_ts = 349;
    double dd_bot_ema = 352; // 60 second $de ema bot counter (option $de only)
    double dd_sld_ema = 355; // 60 second $de ema sld counter (option $de only)
    double wt_ve_bot_ema = 358; // 60 second wtVe ema bot counter
    double wt_ve_sld_ema = 361; // 60 second wtVe ema sld counter
    sfixed32 counter = 364;
    google.protobuf.Timestamp timestamp = 367;
}


/*
    SymbolRiskDetail records contain semi-static markup detail for SymbolRiskSummary records.
*/    
message SymbolRiskDetailV5 {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // ClientFirm acronym (SR assigned) [AccountConfig.clientFirm]
    string client_tags = 103; // (optional) user defined account tag(s) (eg. tag,tag,tag,tag) [max of 10,000 total chars (including seps)]
    StkStatus stk_status = 106;
    OptStatus opt_status = 109;
    string risk_class = 112; // Symbol Risk Class Code (user supplied) [SymbolControl.riskClass]
    string theo_model = 115; // SR assigned theo model tag (associated with user supplied theo surfaces) [AccountConfig.theoModel]
    string theo_model2 = 118; // SR assigned theo model#2 tag (associated with user supplied theo surfaces) [AccountConfig.theoModel2]
    HedgeDeltaRule hedge_delta_rule = 121; // HedgeDelta Source (IVol = use SR implied surface (sticky strike), IvS = use SR surface (sticky delta), TVol = use user supplied theo surface (sticky strike), TvS = use user supplied theo surface and atm veSlope (sticky delta)) [AccountConfig.hedgeDelta]
    HoldReason hold_reason = 124; // User supplied description (only informational) [SymbolControl.holdReason]
    float binary_days = 127; // Fractional days [0 - 5.0] prior to expiration after which hedgeDeltas become binary [-1.0, -0.5, 0, +0.5, +1.0] [SymbolControl.binaryDays]
    google.protobuf.Timestamp ctrl_update = 130; // last update dttm of SymbolControl record [SymbolControl.timestamp]
    MoveCode move_code = 133; // User supplied indicator;usually used to indicate that Pnl and marks are in error
    float stk_mark = 136; // User supplied stock mark override
    google.protobuf.Timestamp period_end_time = 139; // DTTM of the end of the current trading period
    SymbolType symbol_type = 142; // SymbolType (Equity, ETF, ShortETF, ADR, CashIndex, FutureComplex)
    string name = 145; // Symbol name/description
    sfixed32 industry = 148;
    string sector = 151;
    float beta = 154; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 157;
    float stk_volume = 160; // trailing 30 day average daily stock volume
    float opt_volume = 163; // trailing 30 day average daily option volume
    TapeCode tape_code = 166; // market data tape code
    MarginType margin_type = 169; // margin slide type: NMS_Equity = +/- 15%, NMS_Index = -8%/+6%, NMS_Medium = +/-10%
    Currency point_currency = 172;
    float d_amt = 175; // $amount of the next expected dividend
    int32 d_days = 178; // days to next expected dividend (negative indicates days from a recent ex-date)
    int32 e_days = 181; // days to next expected earnings (negative indicates days from a recent announcement)
    sfixed32 locate_quan = 184; // starting locate quantity in this symbol befores trades
    sfixed32 available_locate_quan = 187; // available equity locate quantity in this symbol after trades
    YesNo gc_flag = 190; // is this symbol a general collateral name (no special borrow rate)
    float gc_rate = 193; // expected overnight rate if general collateral (usually FF overnight rate)
    float borrow_rate = 196; // expected overnight borrow rate (special borrrow)
    float st_min_iVol = 199; // minimum atm implied volatility (all expirations with a position)
    float st_max_iVol = 202; // maximum atm implied volatility (all expirations with a position)
    float earn_mult = 205; // expected earnings multiplier (affects some risk slides) [1.0 - 8.0]
    float earn_mult_err = 208;
    float base_vol = 211; // from earn mult fit (<0.75 yrs)
    float tail_vol = 214; // weighted toward max expiration
    google.protobuf.Timestamp timestamp = 217;
}


/*
    SymbolRiskSummary records contain live symbol level risk aggregation of StockPositionRecord and OptionPositionRecord values.
    Records are published by AggRiskServers if/when positions change and about once per minute otherwise.
*/    
message SymbolRiskSummaryV5 {
    message PKey {
        
        TickerKey ticker = 10; // stock ticker (eg MSFT, SPY)
        string accnt = 13; // SRAccnt (SR assigned;up to 16 chars)
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR client firm
    string risk_server_code = 103; // SR risk server code that published this record
    string sector = 106; // SymbolControl.sector: user defined sector code
    sfixed32 industry = 109; // industry code [00000000]
    float beta = 112; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 115;
    double u_prc = 118; // current live underlier price (can be from risk server, tool server, or srse server)
    double u_mark = 121; // current underlier price [as of risk server record publish] [freezes at 4pm EST]
    double u_opn_mark = 124; // start-of-day SR underlier mark (rotated from prior day record) [corp action adjusted]
    double ln_dDelta = 127; // long net position delta value (today; SR marks )
    double sh_dDelta = 130; // short net position delta value (today; SR marks )
    double ln_stk_mkt_value_mid = 133; // long stock market value (today; SR marks)
    double sh_stk_mkt_value_mid = 136; // short stock market value (today; SR marks)
    double opt_mkt_value_mid = 139; // option position market value (SR mid marks);=sum[opCurPosM * opr.optVolMark]
    double opt_mkt_value_vol = 142; // option position market value (SR vol marks);=sum[opCurPosM * opr.optMidMark]
    sfixed32 sh_opn_pos_clr = 145; // start of period position (from custodian or clearing firm)
    sfixed32 sh_opn_pos_prv = 148; // start of period position (expected;from SpiderRock archive)
    sfixed32 sh_opn_pos = 151; // start of period position (effective;from either SR or CLR record)
    sfixed32 sh_bot = 154; // number of shares bot today
    sfixed32 sh_sld = 157; // number of shares sld today
    sfixed32 sh_sld_shrt = 160; // number of shares sld short today
    double sh_mny_bot = 163; // shares money bot today
    double sh_mny_sld = 166; // shares money sld today
    sfixed32 sh_bot_hdg = 169; // number of shares bot today from open pos hedging (spdrSource=HedgeTool)
    sfixed32 sh_sld_hdg = 172; // number of shares sld today from open pos hedging (spdrSource=HedgeTool)
    sfixed32 sh_bot_trh = 175; // number of shares bot today from open pos hedging (spdrSource=TradeHedge)
    sfixed32 sh_sld_trh = 178; // number of shares sld today from open pos hedging (spdrSource=TradeHedge)
    sfixed32 sh_bot_opn = 181; // number of shares bot today from open pos hedging (spdrSource=OpenHedge)
    sfixed32 sh_sld_opn = 184; // number of shares sld today from open pos hedging (spdrSource=OpenHedge)
    sfixed32 sh_bot_trd = 187; // number of shares bot today from a trade hedging source (AutoHedge or Trades loop)
    sfixed32 sh_sld_trd = 190; // number of shares sld today from a trade hedging source (AutoHedge or Trades loop)
    google.protobuf.Timestamp max_stk_dttm = 193; // most recent timestamp of a qualifying stock execution (used to ensure risk record integrity)
    double st_pnl_mid = 196; // Stock Pnl (SR Marks);=(nbbo.mid - stPrvPrc) * shOpnClr
    double st_pnl_clr = 199; // Stock Pnl (CLR Marks);=(nbbo.mid - stClrPrc) * shOpnClr
    double st_pnl_day = 202; // Net Stock Day Pnl;=sum[ (nbbo.min - fillPrice) * fillQuantity * side ]
    double st_div_pnl = 205; // total cash paid/collected since prior period for this position (stock dividend value)
    double st_borrow_pnl = 208; // total cash paid/collected since prior period for this position (borrow pnl; usually interest on HTB names)
    sfixed32 op_cn_abs_cur_pos = 211; // abs number of option contracts (position + fills);=sum[abs(opr.cnCurPos)]
    sfixed32 op_cn_abs_opn_clr = 214; // abs number of start of period option contracts (CLR view); =sum[abs(opr.cnOpnClr)]
    sfixed32 op_cn_abs_opn_prv = 217; // abs number of start of period option contracts (SR view); =sum[abs(opr.cnOpnPrv)]
    sfixed32 op_cn_abs_opn_pos = 220; // abs number of start of period option contracts; =sum[abs(opr.cnOpnPos)]
    sfixed32 op_cn_abs_opn_brk = 223; // abs number of option contract start of period breaks (CLR - PRV);=sum[abs(opr.cnOpnClr - opr.cnOpnPrv)]
    sfixed32 op_sh_short = 226; // equivalent shares from short option positions
    sfixed32 op_cn_pos_call = 229; // net number of call contracts; =sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if call)
    sfixed32 op_cn_pos_put = 232; // net number of call contracts; =sum[opr.cnOpnClr + opr.cnBot - opr.cnSld] (if put)
    sfixed32 op_cn_abs_pair = 235; // abs number of option contracts with CP reversals removed;=sum[abs(opr.cnOpnClr + opr.cnBot - opr.cnSld) - abs(opr.cnNetPos)]
    float abs_atm_equiv_cn = 238; // abs atm equivalent contracts; = sum[abs(opr.cnOpnPos + opr.cnBot - opr.cnSld) * opr.ve / opr.atmVega]
    sfixed32 op_cn_bot = 241; // number of option contracts bot today;=sum[opr.cnBot]
    sfixed32 op_cn_sld = 244; // number of option contracts sld today;=sum[opr.cnSld]
    double op_mny_bot = 247; // option money bot
    double op_mny_sld = 250; // option money sld
    float op_prem_bot = 253; // option premium bot today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnBot]
    float op_prem_sld = 256; // option premium sld today;=sum[(max(0, opr.optVolMark - opr.loBound) * opr.pointValue) * opr.cnSld]
    google.protobuf.Timestamp max_opt_dttm = 259; // DateTime of most recent SpdrOptionExecution (if any)
    double op_pnl_vol = 262; // Option Open Pnl (SR vol marks); =sum[opr.opnPnlVolMark]
    double op_pnl_mid = 265; // Option Open Pnl (SR mid marks); =sum[opr.opnPnlMidMark]
    double op_pnl_clr = 268; // Option Open Pnl (CLR marks); =sum[opr.opnPnlClrMark]
    double op_pnl_brk = 271; // Option Mark Break Pnl (SR vol marks to CLR marks);=sum[(opr.cnOpnClr * opr.pointValue) * (opr.optVolMark - opr.optMidMark)]
    double op_pnl_day = 274; // Option Day Pnl;=sum[opr.dayPnl]
    double op_dn_pnl_day = 277; // Option DN Day Pnl (delta neutral);=sum[opr.dnDayPnl]
    float op_day_vega = 280; // Option Day Vega;=sum[opr.ve * (opr.cnBot - opr.cnSld) * opr.pointValue]
    float op_day_wVega = 283; // Option Day Vol Weighted Vega;=sum[opr.ve * opr.iVol * (opr.cnBot - opr.cnSld) * opr.pointvalue]
    float op_day_tVega = 286; // Option Day Time-Weighted Vega;=sum[opr.ve * / sqrt(max(0.1, opr.years * 4)) * (opr.cnBot - opr.cnSld) * opr.pointValue]
    float op_day_wt_vega = 289; // Option Day Vol Time-Weighted Vega;=sum[opr.ve * (opr.iVol / sqrt(max(0.1, opr.years * 4))) * (opr.cnBot - opr.cnSld) * opr.pointValue]
    float op_day_theta = 292; // Option Day Theta;=sum[opr.th * ((opr.cnBot - opr.cnSld) * opr.pointValue)]
    float op_day_delta = 295; // Option Day Delta;=sum[opr.de * ((opr.cnBot - opr.cnSld) * opr.underliersPerCn)]
    float op_trd_delta = 298; // Option Trade Delta (delta fixed at time of trade);=sum[opr.trdDelta]
    float pair_pnl = 301; // Aggregate Dn Pair Pnl;=sum[shNetClrM * (opr.optVolMark - opr.optOpnVolMark - opr.hedgeDePr * (opr.uMark - opr.uOpnMark))]
    float cont_hedge_pnl = 304; // Estimated continuous hedging pnl (open positions only) [~1 minute intervals]
    float cont_hedge_pnl1 = 307; // Estimated continuous hedging pnl (open positions only) [~10 minute intervals]
    float op_edge_opened = 310; // Option Edge Opened (new risk);=sum[opr.edgeOpened]
    float op_edge_closed = 313; // Option Edge Closed (new risk);=sum[opr.edgeClosed]
    float pnl_dn = 316; // Option Pnl Attr: delta neutral pnl: =sum[volPnl - shClrM * dUPrc * opr.dePr]
    float pnl_de = 319; // Option Pnl Attr: delta pnl;=sum[shClrM * dUPrc * opr.dePr]
    float pnl_sl = 322; // Option Pnl Attr: slope pnl;=sum[shClrM * dUPrc * opr.vePr * opr.veSlopePr]
    float pnl_ga = 325; // Option Pnl Attr: gamma pnl;=sum[shClrM * 0.5 * dUPrc * dUPrc * (opr.ga + opr.gaPr)/2]
    float pnl_th = 328; // Option Pnl Attr: theta pnl;=sum[shClrM * dTime * -opr.thPr]
    float pnl_ve = 331; // Option Pnl Attr: vega pnl;=sum[shClrM * 100 * dVol * opr.vePr]
    float pnl_vo = 334; // Option Pnl Attr: volga pnl;=sum[shClrM * 0.5 * 100 * 100 * dVol * dVol * opr.voPr]
    float pnl_va = 337; // Option Pnl Attr: vanna pnl;=sum[shClrM * 100 * dVol * dUPrc * opr.vaPr]
    float pnl_err = 340; // Option Pnl Attr: error (unexplained) pnl;=sum[shClrM * (volPnl - pnlDe - pnlGa - pnlTh - pnlVe)]
    float pnl_rate = 343; // Option Pnl Attr: rate pnl;=sum[shClrM * 100 * dRate * opr.rhPr]
    float pnl_sDiv = 346; // Option Pnl Attr: sdiv pnl;=sum[shClrM * 100 * dSDiv * opr.phPr]
    float pnl_dDiv = 349; // Option Pnl Attr: ddiv pnl;=sum[shClrM * 100 * (opr.ddiv - opr.ddivPr) / opr.uPrc * opr.phPr]
    float pnl_te = 352; // Option Pnl Attr: theo edge pnl;=sum[shClrM * ((opr.tOpx - opr.optVolMark) - (opr.tOpxPr - opr.optOpnVolMark))]
    float pct_iv_change = 355; // Option Avg IVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.iVol/opr.iVolPr)]
    float pct_iv_vega = 358; // Option Avg IVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    float pct_tv_change = 361; // Option Avg TVol Change (Numerator);=sum[abs(shClrM) * opr.ve * log(opr.tVol/opr.tVolPr)]
    float pct_tv_vega = 364; // Option Avg TVol Change (Denominator);=sum[abs(shClrM) * opr.ve]
    float stk_width_mny = 367; // Stock Market Width Value;=sum[0.5 * abs(shCurPos) * (spr.stkAsk - spr.stkBid)]
    float opt_width_mny = 370; // Option Market Width Value;=sum[0.5 * abs(shCurPosM) * (opr.optAsk - opr.optBid)]
    float day_dDelta = 373; // Day $Delta (bot or sld;all sources) today;
    float delta = 376; // Aggregate Position Delta;=sum[shCurPos] + sum[fcCurPosM] + sum[shCurPosM * opr.de] + sum[other.delta]
    float ddelta = 379; // Aggregate Position $Delta (Delta * DDMult)
    float de_decay = 382; // Aggregate Position DeltaDecay;=sum[shCurPosM * opr.deDecay] + sum[other.deDecay]
    float dd_decay = 385; // Aggregate Position $DeltaDecay (DeltaDecay * DDMult) [change in $delta when one trading day (1.0/252.0) is taken out of option pricing]
    float gamma = 388; // Aggregate Position Gamma;=sum[shCurPosM * opr.ga] + sum[other.gamma]
    float d_gamma = 391; // Aggregate Position $Gamma
    float theta = 394; // Aggregate Position Theta;=sum[shCurPosM * opr.th] + sum[other.theta]
    float rho = 397; // Aggregate Position Rho;=sum[shCurPosM * opr.rh] + sum[other.rho]
    float vega = 400; // Aggregate Position Vega;=sum[shCurPosM * opr.ve] + sum[other.vega]
    float t_vega = 403; // Aggregate Position Time Weight Vega;=sum[shCurPosM * opr.ve / sqrt(max(0.1, opr.years * 4))]
    float w_vega = 406; // Aggregate Position Vol Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve]
    float wt_vega = 409; // Aggregate Position Vol Time Weighted Vega;=sum[shCurPosM * opr.iVol * opr.ve / sqrt(max(0.1, opr.years * 4))]
    float ivol_ve = 412; // Aggregate Position Avg Vol Numerator (vega weighted) (avg = ivolVe / avega); =sum[abs(shCurPosM) * opr.iVol * opr.ve]
    float volga = 415; // Aggregate Position Volga;=sum[shCurPosM * opr.vo] + sum[other.volga]
    float vanna = 418; // Aggregate Position Vanna;=sum[shCurPosM * opr.va] + sum[other.vanna]
    float slope = 421; // Aggregate Position VegaDelta (uPrc/Vol correlation factor);=sum[shCurPosM * opr.sl * opr.ve] + sum[other.slope]
    float avega = 424; // Aggregate Postion Abs Vega;=sum[abs(shCurPosM ) * opr.ve]
    float atheta = 427; // Aggregate Postion Abs Theta;= sum[abs(shCurPosM) * opr.th]
    float hedge_gamma = 430; // Aggregate Postion Hedge Gamma (either iVol or tVol based;can go binary);=sum[shCurPos * opr.hedgeGa]
    float hedge_dGamma = 433; // Aggregate Postion ($) Hedge Gamma
    float prem_ov_par = 436; // Aggregate Position Premium Over Parity;=sum[shCurPosM *  max(0, opr.optVolMark - opr.loBound)]
    float wt_ve_dd = 439; // Aggregate Dd Time Weighted Vega; =sum[wtVega] if opr.xde < -0.30
    float wt_ve_dn = 442; // Aggregate Dn Time Weighted Vega; =sum[wtVega] if -0.30 <= opr.xde < -0.10
    float wt_ve_at = 445; // Aggregate At Time Weighted Vega; =sum[wtVega] if abs(opr.xde) <= 0.10
    float wt_ve_up = 448; // Aggregate Up Time Weighted Vega; =sum[wtVega] if +0.10 < opr.xde <= +0.30
    float wt_ve_du = 451; // Aggregate Du Time Weighted Vega; =sum[wtVega] if +0.30 < opr.xde
    float wt_ve_m1 = 454; // Aggregate M1 Time Weighted Vega; =sum[wtVega] if days < 10
    float wt_ve_m2 = 457; // Aggregate M2 Time Weighted Vega; =sum[wtVega] if 10 < days < 25
    float wt_ve_m3 = 460; // Aggregate M3 Time Weighted Vega; =sum[wtVega] if 25 < days < 65
    float wt_ve_m4 = 463; // Aggregate M4 Time Weighted Vega; =sum[wtVega] if 65 < days < 130
    float wt_ve_m5 = 466; // Aggregate M5 Time Weighted Vega; =sum[wtVega] if 130 < days
    float pin_xX = 469; // pin strike nearest to current uPrc (zero = none) (only exists if there are near ATM option positions expiring today)
    float opn_de_below = 472; // Aggregate Position Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc < pinXX
    float opn_de_above = 475; // Aggregate Position Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc > pinXX
    float opn_dDe_below = 478; // Aggregate Position ($) Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc < pinXX
    float opn_dDe_above = 481; // Aggregate Position ($) Open Delta (Open Positions + Open Hedge Trades Only) if liveUPrc > pinXX
    float pos_de_below = 484; // Aggregate Position Hedge Delta (Current Position) if liveUPrc < pinXX
    float pos_de_above = 487; // Aggregate Position Hedge Delta (Current Position) if liveUPrc > pinXX
    float pos_dDe_below = 490; // Aggregate Position ($) Hedge Delta (Current Position) if liveUPrc < pinXX
    float pos_dDe_above = 493; // Aggregate Position ($) Hedge Delta (Current Position) if liveUPrc > pinXX
    float pos_hedge_delta_ex = 496; // Aggregate Position Hedge Delta (Current Position) if exDate != today
    float pos_hedge_dDelta_ex = 499; // Aggregate Position ($) Hedge Delta (Current Position) if exDate != today
    float mmh_delta = 502; // Aggregate Delta allocated from other symbols (multi-multihedge symbols)
    sfixed32 mmh_contracts = 505; // Aggregate Contracts allocated from other symbols (multi-multihedge symbols)
    string mmh_sources = 508; // Allocation source string (usually mmh contracts)
    float t_edge = 511; // Aggregate $ Theo Edge;=sum[shNetPosM * (opr.tOpx - opr.optVolMark)] if opr.tVol > 0.01 and opr.tOpx > 0.0 and opr.optVolMark > 0.0
    float t_edge_mult = 514; // Aggregate Abs Net Contracts (Rev/Conv contracts removed);= sum[abs(shNetPosM)]
    float t_edge_pr = 517; // Prior Day $ Theo Edge
    float t_edge_mult_pr = 520; // Prior Day Aggregate Abs Net Contracts
    int32 num_tVol_errors = 523; // number of opr.tErr != 0 or opr.tVol < 0.01
    float pos_tEdge_wV = 526; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) >= 0)
    float neg_tEdge_wV = 529; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) < 0)
    float bad_tEdge_wV = 532; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx = 0)
    float pos_tEdge_pnl = 535; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) >= 0)
    float neg_tEdge_pnl = 538; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) < 0)
    float bad_tEdge_pnl = 541; // Aggregate Dn Pair Pnl where (opr.tOpxPr = 0)
    float t_edge2 = 544; // Aggregate $ Theo Edge;=sum[shNetPosM * (opr.tOpx - opr.optVolMark)] if opr.tVol > 0.01 and opr.tOpx > 0.0 and opr.optVolMark > 0.0
    float t_edge_mult2 = 547; // Aggregate Abs Net Contracts (Rev/Conv contracts removed);= sum[abs(shNetPosM)]
    float t_edge_pr2 = 550; // Prior Day $ Theo Edge
    float t_edge_mult_pr2 = 553; // Prior Day Aggregate Abs Net Contracts
    int32 num_tVol_errors2 = 556; // number of opr.tErr != 0 or opr.tVol < 0.01
    float pos_tEdge_wV2 = 559; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) >= 0)
    float neg_tEdge_wV2 = 562; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx > 0 and (opr.tOpx - opr.optVolMark) < 0)
    float bad_tEdge_wV2 = 565; // Aggregate Vol Weighted Vega (wvega) where (opr.tOpx = 0)
    float pos_tEdge_pnl2 = 568; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) >= 0)
    float neg_tEdge_pnl2 = 571; // Aggregate Dn Pair Pnl where (opr.tOpxPr > 0 and (opr.tOpxPr - opr.priorOpxVolMark) < 0)
    float bad_tEdge_pnl2 = 574; // Aggregate Dn Pair Pnl where (opr.tOpxPr = 0)
    float va_rsu90 = 577; // Aggregate RiskSlide: uPrc up 90%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.90))
    float va_rsd90 = 580; // Aggregate RiskSlide: uPrc dn 90%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.90))
    float va_rsu50 = 583; // Aggregate RiskSlide: uPrc up 50%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.50))
    float va_rsd50 = 586; // Aggregate RiskSlide: uPrc dn 50%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.50))
    float va_rsu15 = 589; // Aggregate RiskSlide: uPrc up 15%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.15))
    float va_rsd15 = 592; // Aggregate RiskSlide: uPrc dn 15%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.15))
    float va_rsu10 = 595; // Aggregate RiskSlide: uPrc up 10%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.10))
    float va_rsd10 = 598; // Aggregate RiskSlide: uPrc dn 10%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.10))
    float va_rsu06 = 601; // Aggregate RiskSlide: uPrc up 6%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.06))
    float va_rsd08 = 604; // Aggregate RiskSlide: uPrc dn 8%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.08))
    float va_rsu05 = 607; // Aggregate RiskSlide: uPrc up 5%, vol unchanged (newUPrc = uPrc * Math.Exp(+0.05))
    float va_rsd05 = 610; // Aggregate RiskSlide: uPrc dn 5%, vol unchanged (newUPrc = uPrc * Math.Exp(-0.05))
    float va_rsu1e = 613; // Aggregate RiskSlide: uPrc up 1x implied earn move, vol ramp out
    float va_rsd1e = 616; // Aggregate RiskSlide: uPrc dn 1x implied earn move, vol ramp out
    float va_rsu2e = 619; // Aggregate RiskSlide: uPrc up 2x implied earn move, vol ramp out
    float va_rsd2e = 622; // Aggregate RiskSlide: uPrc dn 2x implied earn move, vol ramp out
    float va_rearn = 625; // Aggregate RiskSlide: vol earn ramp out (no uPrc move)
    float va_rcash = 628; // Aggregate RiskSlide: uPrc up 30%, vol = 0.01, 6mn deal close (delta neutral)
    float stk_liq_risk = 631; // Aggregate Equity Liquidation Risk
    float opt_liq_risk = 634; // Aggregate Option Liquidation Risk
    sfixed32 sh_bot_c0 = 637; // hypothetical shares bot (~1 minute intervals)
    sfixed32 sh_sld_c0 = 640; // hypothetical shares sld
    float sh_mny_c0 = 643; // hypothetical money
    sfixed32 sh_bot_c1 = 646; // hypothetical shares bot (~10 minute intervals)
    sfixed32 sh_sld_c1 = 649; // hypothetical shares sld
    float sh_mny_c1 = 652; // hypothetical money
    float op_hc_min25 = 655; // sum(option haircut minimum) [$25.00/cn]
    float op_hc_min37 = 658; // sum(option haircut minimum) [$37.50/cn]
    float haircut25 = 661; // Aggregate Risk Margin (JBO): [$25 minimum;-15/+15 uPrc slides]
    float haircut37 = 664; // Aggregate Risk Margin (PM): [$37.50 minimum;-8/+6 uPrc slides (broad based);-15/+15 uPrc slides (non-broad based)]
    int32 num_stk_errors = 667; // number of stock positions with a computation error (should be zero)
    int32 num_opt_errors = 670; // number of options positions with a computation error (should be zero)
    R5Source update_source = 673;
    MktErrFlag stk_mark_flag = 676; // Stock position error flag
    MktErrFlag opt_mark_flag = 679; // Option position error flag
    AlertCode risk_alert1 = 682; // Risk Alert Code: Early Exercise, etc.
    AlertCode risk_alert2 = 685; // Risk Alert Code: Early Exercise, etc.
    AlertCode risk_alert3 = 688; // Risk Alert Code: Early Exercise, etc.
    AlertCode risk_alert4 = 691; // Risk Alert Code: Early Exercise, etc.
    google.protobuf.Timestamp timestamp = 694;
}


    
message SymbolScreenDetail {
    message PKey {
        
        sfixed32 id = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    float u_prc = 103;
    float u_prc_prv = 106;
    float u_prc_move = 109;
    float sh_atm_iv = 112;
    float ln_atm_iv = 115;
    float sh_atm_iv_prv = 118;
    float ln_atm_iv_prv = 121;
    float sh_atm_iv_move = 124;
    float ln_atm_iv_move = 127;
    float sh_atm_tv = 130; // theo volatilities
    float ln_atm_tv = 133;
    float sh_bOpn_vol = 136;
    float sh_sOpn_vol = 139;
    float sh_bCls_vol = 142;
    float sh_sCls_vol = 145;
    TheoError sh_theo_err = 148;
    float ln_bOpn_vol = 151;
    float ln_sOpn_vol = 154;
    float ln_bCls_vol = 157;
    float ln_sCls_vol = 160;
    TheoError ln_theo_err = 163;
    float sh_opn_vega = 166; // open interest
    float ln_opn_vega = 169;
    float sh_prt_vega = 172; // total vega printed today
    float ln_prt_vega = 175;
    float pos_vega = 178; // our position
    float pos_theta = 181;
    sfixed32 cn_bot = 184; // our contracts traded
    sfixed32 cn_sld = 187;
    string sym_name = 190;
    SymbolType symbol_type = 193;
    string ind_name = 196;
    string sub_name = 199;
    string grp_name = 202;
    string nbr_name = 205;
    string sector = 208;
    float stock_volume = 211; // trailing average daily volume
    sfixed32 shares_outstanding = 214; // symbol shares outstanding
    sfixed32 num_options = 217; // total number of listed options
    float option_volume = 220; // trailing average daily volume (all options)
    string exch_string = 223; // exchanges listing any options in this name
    sfixed32 next_earn_days = 226;
    string next_earn_time = 229;
    google.protobuf.Timestamp timestamp = 232;
}


    
message SyntheticIndexMapping {
    message PKey {
        
        TickerKey ticker = 10; // Ticker/TickerKey for the published StockBookQuote, StockPrint messages
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey index_ticker = 100; // Index ticker used for the calculations if synthTickerSrc = Index
    TickerKey implied_index_ticker = 103; // Front month future ccode used for the calculations if synthTickerSrc = Implied
    SynthTickSrc synth_ticker_src = 106; // Ticker source/calcuation method for the calculated StockBookQuote, StockPrint messages
    float implied_index_ticker_weight = 109; // Multiplier for the impliedIndexTicker price in Spread calculations
    TickerKey offset_ticker = 112; // Offset ticker used in Spread calculations
    float offset_ticker_weight = 115; // Multiplier for the offsetTicker price in Spread calculations
    google.protobuf.Timestamp timestamp = 118;
}


    
message SyntheticIndexRatio {
    message PKey {
        
        TickerKey ticker = 10; // Ticker/TickerKey for the published StockBookQuote, StockPrint messages
        ExpiryKey source_sec_key = 13; // source instrument driving the sythetic ticker
        SpdrKeyType source_sec_type = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey index_ticker = 100; // Index ticker used for the calculations if synthTickerSrc = Index
    float index_source_ratio_eMA = 103; // Multiplier for the impliedIndexTicker price in Spread calculations
    sfixed32 index_source_ratio_counter = 106;
    google.protobuf.Timestamp timestamp = 109;
}


    
message SysMonRequest {


    MbusInfo descriptor = 1;
    
    SysMonRequestType request_type = 100;
    SysMonApplication source_application = 103;
    SysMonApplication target_application = 106;
    string source_user_name = 109;
    string target_user_name = 112;
    string error_text = 115;
    google.protobuf.Timestamp error_dttm = 118;
    YesNo request_handled = 121;
    google.protobuf.Timestamp handled_dttm = 124;
    string handled_user_name = 127;
}


    
message SysMonResponse {


    MbusInfo descriptor = 1;
    
    SysMonRequestType response_type = 100;
    SysMonApplication source_application = 103;
    SysMonApplication target_application = 106;
    string source_user_name = 109;
    string target_user_name = 112;
    string error_text = 115;
    google.protobuf.Timestamp error_dttm = 118;
    YesNo response_handled = 121;
    google.protobuf.Timestamp handled_dttm = 124;
    string handled_user_name = 127;
}


    
message SystemAccessHistory {
    message PKey {
        
        string user_name = 10;
        string product_code = 13;
        MarketDataToken market_data_token = 16;
        string access_date = 19;
        string server_name = 22;
        SysEnvironment sys_environment = 25; // original (source) sys environment [Stable, Current, etc]
        SysRealm sys_realm = 28; // original (source) sysRealm [NMS, CME, etc.]
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UserType user_type = 100;
    string client_firm = 103;
    sfixed32 num_access_attempts = 106;
    google.protobuf.Timestamp timestamp = 109; // access timestamp
}


    
message TDAlert {
    message PKey {
        
        string msg_src_key_iD = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string alert_type = 100;
    string alert_string = 103;
    string client_accnt = 106;
    google.protobuf.Timestamp timestamp = 109;
}


    
message TheoModelConfig {
    message PKey {
        
        string theo_model = 10;
        string client_firm = 13; // client firm this theo model is associated with
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string description = 100; // model description
    string modified_by = 103; // user who last modified this record
    google.protobuf.Timestamp timestamp = 106; // timestamp of last modification
}


/*
    TheoSurfacePerf records are published throughout he day for each active client theoretical model in the SpiderRock system.  They are suitable for tracking performance of a theoretical model surface whether or not it is being traded.
    TheoSurfacePerf records are published to the SpiderRock elastic cluster at the end of each day.
*/    
message TheoSurfacePerf {
    message PKey {
        
        ExpiryKey ekey = 10;
        string theo_model = 13; // theo model
        string client_firm = 16; // client firm this theo model is associated with (controls visibility)
        PerfSurfaceType perf_surf_type = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string date = 100;
    string time = 103;
    TickerKey ticker = 106; // SpiderRock underlier stock key
    float strike = 109; // atm strike (fwd uPrc);from LiveSurfacePerf record
    float t_eMove = 112; // theoretical event move (if any)
    float c_tVol = 115; // theo call volatility (from theoModel @ strike = strike)
    float p_tVol = 118; // theo put volatility (from theoModel @ strike = strike)
    float c_tOpx = 121; // theo call price @ (cTVol, uMark, years, sdiv, rate, ddiv)
    float p_tOpx = 124; // theo put price @ (pTVol, uMark, years, sdiv, rate, ddiv)
    float fix_cTVol = 127; // fixed strike theo call volatility (from theoModel @ strike = prvStrike)
    float fix_pTVol = 130; // fixed strike theo put volatility (from theoModel @ strike = prvStrike)
    float fix_cTOpx = 133; // fixed strike theo call price @ (fixTVol, uMark, years, sdiv, rate, ddiv);strike = prvStrike
    float fix_pTOpx = 136; // fixed strike theo put price @ (fixTVol, uMark, years, sdiv, rate, ddiv);strike = prvStrike
    float prv_strike = 139; // prior period atm strike
    float prv_tEMove = 142; // prior period theoretical event move (if any)
    float prv_cTVol = 145; // prior period theo call volatility @ strike = prvStrike
    float prv_pTVol = 148; // prior period theo put volatility @ strike = prvStrike
    float prv_cTOpx = 151; // prior period theo call price @ strike = prvStrike
    float prv_pTOpx = 154; // prior period theo call price @ strike = prvStrike
    google.protobuf.Timestamp timestamp = 157;
}


    
message TickerAnalytics {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double week52_high = 100; // 52 week high
    google.protobuf.Timestamp week52_high_date = 103; // 52 week high date
    double week52_low = 106; // 52 week low
    google.protobuf.Timestamp week52_low_date = 109; // 52 week low date
    float stk_volume = 112; // trailing average 20D daily stock volume
    float fut_volume = 115; // trailing average 20D daily future volume
    float opt_volume = 118; // trailing average 20D daily option volume
    google.protobuf.Timestamp timestamp = 121; // record update timestamp
}


    
message TickerAnalytics_Extern {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    double week52_high = 100; // 52 week high
    google.protobuf.Timestamp week52_high_date = 103; // 52 week high date
    double week52_low = 106; // 52 week low
    google.protobuf.Timestamp week52_low_date = 109; // 52 week low date
    float stk_volume = 112; // trailing average 20D daily stock volume
    float fut_volume = 115; // trailing average 20D daily future volume
    float opt_volume = 118; // trailing average 20D daily option volume
    google.protobuf.Timestamp timestamp = 121; // record update timestamp
}


/*
    TickerData records contain both static details and current prices for one specific ticker, the static fields (such as sector, subsector, etc) are not expected to change throughout the day, but others (bid, ask, last, etc) will be changing throughout the trading day
*/    
message TickerData {
    message PKey {
        
        TickerKey ticker = 10; // Ticker key
    }

    message CurDayPrices {
        
        string time = 196; // time block index since start of period (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
        string prc = 199; // price @ time index
    }

    message PrvDayPrices {
        
        string time = 205; // time block index since start of period (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
        string prc = 208; // price @ time index
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string bid = 100; // Current bid price in the market
    string ask = 103; // Current ask price in the market
    string open = 106; // Price at market open
    string close = 109; // Price at market close (if before market close, this is previous day close price)
    string high = 112; // Highest price of the day
    string low = 115; // Lowest price of the day
    string last = 118; // Last trade price
    string day_move = 121; // % move on the day
    string volume = 124; // Current volume traded today
    string next_earn_dt = 127; // Date of next earnings date (or previous earnings date if within 3 days)
    ToolEarnStatus next_earn_status = 130; // Status of earnings date (Estimated, Announced, or Released)
    string earn_hist_move = 133; // Average % move of the past 8 earnings dates for this ticker (Not shown once earnings date has passed)
    string earn_impl_move = 136; // Predicted % move of given earnings date
    string earn_move = 139; // Actual % move of given earnings date (this field will only exist if the earnings date has passed within 3 days)
    string next_div_dt = 142; // Next Dividend date (or most recent div date if within 3 days
    ToolDivStatus next_div_status = 145; // Status of earnings date (Estimated, Announced, or already distributed)
    string last_div_amt = 148; // Last Dividend amount
    string next_div_amt = 151; // Next Dividend amount (shown unless an exDivAmt exists)
    string ex_div_amt = 154; // Current Dividend amount (only shown if within 3 days of div date)
    string stk_volume_avg = 157; // trailing average daily stock volume
    string fut_volume_avg = 160; // trailing average daily future volume
    string opt_volume_avg = 163; // trailing average daily option volume
    string sector = 166; // ticker sector
    string subsector = 169; // ticker subsector description
    ToolTickerTradingStatus trading_status = 172; // Current trading status of this ticker
    string prv_open_prc = 175; // start of day previous period price (previous period closing price adjusted for corp actions)
    string cur_open_prc = 178; // start of day current period price (previous period closing price adjusted for corp actions)
    string prv_trd_day_sT = 181; // previous day start-of-regular trading time block index (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
    string prv_trd_day_eT = 184; // previous day end-of-regular trading time block index (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
    string cur_trd_day_sT = 187; // current day start-of-regular trading time block index (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
    string cur_trd_day_eT = 190; // current day end-of-regular trading time block index (0=start of period; 1=end of 1st window; 2=end of 2nd window; etc)
    google.protobuf.Timestamp ts = 211; // last update time (Date)
    repeated CurDayPrices cur_day_prices = 193;
    repeated PrvDayPrices prv_day_prices = 202;
}


    
message TickerDataVset {


    MbusInfo descriptor = 1;
    
    TickerKey ticker = 100; // Requested ticker key
}


/*
    TickerDefinition (internal only) records exist for all SpiderRock tickers including equity tickers (stocks and ETFs) as well as index tickers and synthetic tickers for future chains and option multihedge baskets.
*/    
message TickerDefinition {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 security_iD = 100; // Security ID number from the source - Vendor, SR, Feed
    SymbolType symbol_type = 103;
    string name = 106; // Symbol name
    string country = 109; // ISO Issuer Country Code
    float par_value = 112; // Security Parvalue
    string par_value_currency = 115; // Security Parvalue currency
    PrimaryExchange primary_exch = 118;
    string mic = 121; // ISO Market Identification Code
    string mic_seg = 124; // ISO Market Indentification Segment Code
    string symbol = 127; // trading symbol (w/o dot notation)
    string issue_class = 130; // issue class of stock symbol.  if no issue class field will be blank.
    sfixed32 shares_outstanding = 133; // symbol shares outstanding, represented in thousands (actualsharesoutstanding = sharesoutstanding * 1000)
    string cusip = 136; // cusip code
    sfixed32 ind_num = 139; // IND (2 digits)
    sfixed32 sub_num = 142; // SUB (4 digits)
    sfixed32 grp_num = 145; // GRP (6 digits)
    sfixed32 nbr_num = 148; // NBR (8 digits)
    string sic = 151; // SIC (Standard Industrial Classification) code
    string cik = 154; // Central Index Key (US specific)
    string gics = 157; // Global Industry Classification Standard
    string lei = 160; // Legal Entity Identifier
    string naics = 163; // North American Industry Classification System
    string cfi = 166; // ISO Classification of Financial Instruments
    string cic = 169; // Complementay Identification Code
    string fisn = 172; // Financial Instrument Short Name
    string isin = 175; // ISIN code
    string figi = 178; // FIGI code
    string bbg_composite_ticker = 181; // Bloomberg Composite Ticker
    string bbg_exchange_ticker = 184; // Bloomberg Exchange Ticker
    string bbg_composite_global_iD = 187; // Bloomberg Composite Global ID
    string bbg_global_iD = 190; // Bloomberg Global ID
    string bbg_currency = 193; // Bloomberg Trading Currency
    OTCPrimaryMarket otc_primary_market = 196;
    OTCTier otc_tier = 199;
    string otc_reporting_status = 202;
    sfixed32 otc_disclosure_status = 205;
    sfixed32 otc_flags = 208;
    StkPriceInc stk_price_inc = 211; // Price increment: None; FullPenny; Nickle
    TkDefSource tk_def_source = 214; // Ticker definition source: None; Vendor; OTC; SR; Exchange
    TkStatusFlag status_flag = 217;
    TapeCode tape_code = 220; // SIP Tape Code
    float stk_volume = 223; // trailing average 20D daily stock volume
    float fut_volume = 226; // trailing average 20D daily future volume
    float opt_volume = 229; // trailing average 20D daily option volume
    string exch_string = 232; // exchanges listing any options on this underlying
    sfixed32 num_options = 235; // total number of listed options
    TimeMetric time_metric = 238; // trading time metric - 252 or 365 trading days or a weekly cycle type
    google.protobuf.Timestamp timestamp = 241;
    YesNo has_options = 244; // Has Options flag
    sfixed32 alt_iD = 247; // Alt Security ID number
}


/*
    TickerDefinitionExt (external) records exist for all SpiderRock tickers including equity tickers (stocks and ETFs) as well as index tickers and synthetic tickers for future chains and option multihedge baskets.
*/    
message TickerDefinitionExt {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    SymbolType symbol_type = 100;
    string name = 103; // Symbol name
    string issuer_name = 106; // Name of issuer
    string cntry_of_incorp = 109; // ISO Issuer Country Code
    float par_value = 112; // Security Parvalue
    string par_value_currency = 115; // Security Parvalue currency
    PrimaryExchange primary_exch = 118;
    string mic = 121; // ISO Market Identification Code
    string mic_seg = 124; // ISO Market Indentification Segment Code
    string symbol = 127; // stock symbol
    string issue_class = 130; // issue class of stock symbol.  if no issue class field will be blank.
    sfixed32 security_iD = 133; // Security ID number from the source - Vendor, SR, Feed
    string sic = 136; // SIC (Standard Industrial Classification) code
    string cik = 139; // Central Index Key (US specific)
    string gics = 142; // Global Industry Classification Standard
    string lei = 145; // Legal Entity Identifier
    string naics = 148; // North American Industry Classification System
    string cfi = 151; // ISO Classification of Financial Instruments
    string cic = 154; // Complementay Identification Code
    string fisn = 157; // Financial Instrument Short Name
    string isin = 160; // ISIN code
    string bbg_composite_ticker = 163; // Bloomberg Composite Ticker
    string bbg_exchange_ticker = 166; // Bloomberg Exchange Ticker
    string bbg_composite_global_iD = 169; // Bloomberg Composite Global ID
    string bbg_global_iD = 172; // Bloomberg Global ID
    string bbg_currency = 175; // Bloomberg Trading Currency
    StkPriceInc stk_price_inc = 178; // Price increment: None; FullPenny; Nickle
    float stk_volume = 181; // trailing average daily stock volume
    float fut_volume = 184; // trailing average daily future volume
    float opt_volume = 187; // trailing average daily option volume
    string exch_string = 190; // exchanges listing any options on this underlying
    sfixed32 num_options = 193; // total number of listed options
    sfixed32 shares_outstanding = 196; // symbol shares outstanding, represented in thousands (actualsharesoutstanding = sharesoutstanding * 1000)
    TimeMetric time_metric = 199; // trading time metric - 252 or 365 trading days or a weekly cycle type
    OTCPrimaryMarket otc_primary_market = 202;
    OTCTier otc_tier = 205;
    string otc_reporting_status = 208;
    sfixed32 otc_disclosure_status = 211;
    sfixed32 otc_flags = 214;
    TkDefSource tk_def_source = 217; // Ticker definition source: None; Vendor; OTC; SR; Exchange
    TkStatusFlag status_flag = 220;
    google.protobuf.Timestamp timestamp = 223;
    YesNo has_options = 226; // Has Options flag
    sfixed32 alt_iD = 229; // Alt Security ID number
}


    
message TickerDefinitionHist {
    message PKey {
        
        TickerKey ticker = 10;
        DateKey trading_date = 13; // all trading dates
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed64 security_iD = 100; // securityID
    sfixed64 alt_security_iD = 103; // securityID from alternative vendor
    string security_desc = 106;
    float closing_price = 109; // for reconciliation only
    google.protobuf.Timestamp timestamp = 112;
}


    
message TickerHistory {
    message PKey {
        
        google.protobuf.Timestamp date = 10;
        sfixed32 security_iD = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 dn = 100;
    string ticker = 103;
    float open = 106;
    float high = 109;
    float low = 112;
    float close = 115;
    float close_pr = 118;
    float volume = 121;
    float shares = 124;
    float cc_var = 127;
    float hl_var = 130;
    float rv_var = 133;
    string earn_flag = 136;
    float sdiv_rate = 139;
    float ddiv_rate = 142;
    float a = 145;
    float b = 148;
    float e_mult = 151;
    float decay = 154;
    float sh_atm = 157;
    float ln_atm = 160;
    float sh_wid = 163;
    float ln_wid = 166;
    float sh_d1 = 169;
    float ln_d1 = 172;
    float atm5 = 175;
    float atm21 = 178;
    float atm42 = 181;
    float atm63 = 184;
    float atm84 = 187;
    float atm105 = 190;
    float atm126 = 193;
    float atm189 = 196;
    float atm252 = 199;
    float atm378 = 202;
    float atm504 = 205;
}


    
message TickerHistoryV2 {
    message PKey {
        
        google.protobuf.Timestamp date = 10;
        sfixed64 security_iD = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 dn = 100;
    string ticker = 103;
    float open = 106;
    float high = 109;
    float low = 112;
    float close = 115;
    float close_pr = 118;
    float volume = 121;
    float shares = 124;
    float cc_var = 127;
    float hl_var = 130;
    float rv_var = 133;
    string earn_flag = 136;
    int32 expiry_count = 139;
    float h_eMove = 142;
    float i_eMove = 145;
    float wk_d1 = 148;
    float sh_d1 = 151;
    float qtr_d1 = 154;
    float ln_d1 = 157;
    float atm_cen_i_5d = 160;
    float atm_cen_i_21d = 163;
    float atm_cen_i_42d = 166;
    float atm_cen_i_63d = 169;
    float atm_cen_i_84d = 172;
    float atm_cen_i_105d = 175;
    float atm_cen_i_126d = 178;
    float atm_cen_i_189d = 181;
    float atm_cen_i_252d = 184;
    float atm_cen_i_378d = 187;
    float atm_cen_i_504d = 190;
    float atm_cen_h_5d = 193;
    float atm_cen_h_21d = 196;
    float atm_cen_h_42d = 199;
    float atm_cen_h_63d = 202;
    float atm_cen_h_84d = 205;
    float atm_cen_h_105d = 208;
    float atm_cen_h_126d = 211;
    float atm_cen_h_189d = 214;
    float atm_cen_h_252d = 217;
    float atm_cen_h_378d = 220;
    float atm_cen_h_504d = 223;
    int32 n_earn_cnt_5d = 226;
    int32 n_earn_cnt_21d = 229;
    int32 n_earn_cnt_42d = 232;
    int32 n_earn_cnt_63d = 235;
    int32 n_earn_cnt_84d = 238;
    int32 n_earn_cnt_105d = 241;
    int32 n_earn_cnt_126d = 244;
    int32 n_earn_cnt_189d = 247;
    int32 n_earn_cnt_252d = 250;
    int32 n_earn_cnt_378d = 253;
    int32 n_earn_cnt_504d = 256;
}


/*
    TickerHistory records are published to the SpiderRock elastic cluster nightly.
    SRSE contains trailing 5 years of ticker history.  The elastic cluster contains all available history
*/    
message TickerPriceHistory {
    message PKey {
        
        TickerKey ticker = 10; // ticker that security is/was trading under
        DateKey date = 13; // trading period
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 security_iD = 100; // security ID is used to track a ticker over time.  It is a best effort attempt to track a ticker through name changes and other corporate actions
    sfixed32 day_number = 103; // cardinal day number (increments by 1 each trading period)
    float day_fraction = 106; // fraction of trading day that security traded (1.0 = regular full trading day)
    float open = 109; // opening auction or first regular hours print
    float high = 112; // highest regular hours print price
    float low = 115; // lowest regular hours print price
    float close = 118; // official exchange close (as reported by primary exchange)
    float pr_close = 121; // prior period close
    float pr_adj_factor_x = 124; // prior period adjFactorX
    float pr_adj_factor_i = 127; // prior period adjFactorI
    float day_return = 130; // dayReturn = (close * adjFactorX + divAmount) - (prClose * prAdjFactorX)
    float div_amount = 133; // ex-div amount paid between close and prClose
    float corp_value = 136; // estimated value (other than dividends) from corporate action(s) between close and prClose
    float adj_factor_x = 139; // cumulative split / adjustment factor from corporation actions (excludes dividends)
    float adj_factor_i = 142; // cumulative split / adjustment factor from corporation actions (includes dividends)
    float volume = 145; // day trading volume
    float shares = 148; // total shares outstanding
    float rv_var = 151; // realized variance (5 minute intervals; regular trading hours only)
    YesNo earn_flag = 154; // earnings reported between closePr and close
    YesNo guidance_flag = 157; // earnings guidance given between closePr and close
    string corp_action_codes = 160; // corporate action codes for any actions that occurred between closePr and close
    google.protobuf.Timestamp timestamp = 163; // record update timestamp
    sfixed32 alt_iD = 166; // Alt Security ID number
}


/*
    SRSE contains trailing 2 years of ticker history for all tickers w/options (about 5,000)
*/    
message TickerPriceHistory_Extern {
    message PKey {
        
        TickerKey ticker = 10; // current (today) ticker
        DateKey tradingdate = 13; // trading period
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 security_iD = 100; // security ID is used to track a ticker over time.  It is a best effort attempt to track a ticker through name changes and other corporate actions
    sfixed32 day_number = 103; // cardinal day number (increments by 1 each trading period)
    float day_fraction = 106; // fraction of trading day that security traded (1.0 = regular full trading day)
    float openprice = 109; // opening auction or first regular hours print
    float highprice = 112; // highest regular hours print price
    float lowprice = 115; // lowest regular hours print price
    float closeprice = 118; // official exchange close (as reported by primary exchange)
    float pr_close = 121; // prior period close
    float pr_adj_factor_x = 124; // prior period adjFactorX
    float pr_adj_factor_i = 127; // prior period adjFactorI
    float day_return = 130; // dayReturn = (close * adjFactorX + divAmount) - (prClose * prAdjFactorX)
    float div_amount = 133; // ex-div amount paid between close and prClose
    float corp_value = 136; // estimated value (other than dividends) from corporate action(s) between close and prClose
    float adj_factor_x = 139; // cumulative split / adjustment factor from corporation actions (excludes dividends)
    float adj_factor_i = 142; // cumulative split / adjustment factor from corporation actions (includes dividends)
    float volume = 145; // day trading volume
    float shares = 148; // total shares outstanding
    float rv_var = 151; // realized variance (5 minute intervals; regular trading hours only)
    YesNo earn_flag = 154; // earnings reported between closePr and close
    YesNo guidance_flag = 157; // earnings guidance given between closePr and close
    string corp_action_codes = 160; // corporate action codes for any actions that occurred between closePr and close
    google.protobuf.Timestamp timestamp = 163; // record update timestamp
    sfixed32 alt_iD = 166; // Alt Security ID number
}


    
message TickerSearch {
    message PKey {
        
        TickerKey ticker = 10; // Ticker key
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string description = 100;
    google.protobuf.Timestamp ts = 103; // last update time (Date)
}


    
message TickerSearchVset {


    MbusInfo descriptor = 1;
    
    string search_text = 10; // (optional) Current search text
}


    
message TickerVolatilityData {
    message PKey {
        
        TickerKey ticker = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 c_vlm = 100; // call volume
    sfixed32 p_vlm = 103; // put volume
    sfixed32 c_vlm20d = 106; // call volume (last 20 days)
    sfixed32 p_vlm20d = 109; // put volume (last 20 days)
    sfixed32 c_oI = 112; // call open interest
    sfixed32 p_oI = 115; // put open interest
    sfixed32 c_oI20d = 118; // call open interest (last 20 days)
    sfixed32 p_oI20d = 121; // put open interest (last 20 days)
    google.protobuf.Timestamp ts = 124; // last update time (Date)
}


    
message ToolUserError {
    message PKey {
        
        sfixed32 error_counter = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_name = 100;
    string hndl = 106;
    WtsErrorLevel error_level = 112;
    WtsErrorType error_type = 115;
    string error_text = 118;
    google.protobuf.Timestamp ts = 121; // last update time (Date)
}


/*
    TradeCubeDetail records are published by CoreRiskServers and are visible in SRSE throughout the day.  They are designed to be aggregated and analyzed over time.
    TradeCubeDetail records are published to the SpiderRock Archive Host data pipeline after all markup detail is complete.
*/    
message TradeCubeDetailV5 {
    message PKey {
        
        sfixed64 fill_number = 10; // SpiderRock execution number (globally unique over trailing 10 days)
        DateKey trade_date = 13; // trade date
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    int32 version = 100; // record version number; starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    string cl_ord_id = 103; // clOrdId resulting in fill (child order)
    sfixed64 parent_number = 106; // SpiderRock parent number
    sfixed64 package_id = 109; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string alt_order_id = 112; // alternate order ID (usually clOrdId from client)
    string src_routing_code = 115; // inbound FIX routing code, if any
    SpdrSource spdr_source = 118; // SpiderRock parent order source code [broker pkey]
    sfixed64 grouping_code = 121; // SpiderRock parent broker number [broker pkey]
    string accnt = 124; // SpiderRock Accnt Code
    string client_firm = 127; // SpiderRock ClientFirm Code
    string pri_agg_group = 130; // primary aggregation group
    string sec_agg_group = 133; // secondary aggregation group
    string risk_server_code = 136;
    OptionKey sec_key = 139; // security key
    SpdrKeyType sec_type = 142; // security type [Stock, Future, Option]
    TickerKey ticker = 145; // base ticker
    string view_group1 = 148; // viewGroup1 (user supplied; if any)
    string view_group2 = 151; // viewGroup2 (user supplied; if any)
    string view_group3 = 154; // viewGroup3 (user supplied; if any)
    string risk_class = 157; // user supplied risk class code (from SymbolControl record)
    SymbolType symbol_type = 160; // symbol type
    string sector = 163; // user supplied sector code (from SymbolControl record)
    sfixed32 ind_num = 166; // ind num (00)
    sfixed32 sub_num = 169; // sub num (0000)
    sfixed32 grp_num = 172; // grp num (000000)
    sfixed32 nbr_num = 175; // nbr num (00000000)
    int32 edays = 178; // days to next earnings [-5, +60]
    ExpCode exp_code = 181; // expiration tenor code
    SkewCode skew_code = 184; // strike skew code
    WidthCode width_code = 187; // market width code
    PriceFormat price_format = 190; // SpiderRock price display format code
    PriceFormat u_price_format = 193; // SpiderRock underlier price display code
    float years = 196; // years to expiration
    sfixed32 underliers_per_cn = 199; // underliers per contract (futures and options)
    UnderlierType underlier_type = 202; // underlier type (affects $greek calcs)
    float tick_value = 205; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 208; // $NLV value of a point
    Currency point_currency = 211;
    float u_prc_ratio = 214; // UPrcRatio (SymbolRatio) from product definition
    float min_tick_size = 217;
    string routing_code = 220; // SpiderRock market routing code
    string orig_exec_iD = 223; // original execution ID string (child order)
    string last_exec_iD = 226; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    google.protobuf.Timestamp transact_dttm = 229; // transaction date/time as reported by exchange or down stream broker
    ExecStatus exec_status = 232; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    string remote_text = 235; // text comment from endpoint (if any)
    SpdrLimitType order_limit_type = 238; // parent order limit type [Vol, VolX, PrcDe, PrcDeX, etc]
    SpdrLimitClass order_limit_class = 241; // parent order limit class (makeLimitClass if fill was from making; takeLimitClass if fill was from taking)
    SpdrOrderShape parent_shape = 244;
    ParentOrderHandling parent_order_handling = 247; // base parent order algo [take style algo]
    ParentBalanceHandling parent_balance_handling = 250; // base parent order balance handling [make style algo]
    sfixed32 parent_order_size = 253; // parent order size
    string method = 256; // execution method string
    string strategy = 259; // client strategy [usually client supplied]
    string user_name = 262; // SpiderRock user name associated with the parent order
    string origin = 265; // parent order origin string
    string source = 268; // execution source string
    string server = 271; // SpiderRock execution engine that handled the parent order
    string clearing_firm = 274; // clearing firm (delivery)
    string clearing_accnt = 277; // clearing firm account (if any)
    OrderCapacity last_capacity = 280; // child order capacity
    ExecRole exec_role = 283; // SpiderRock relationship to this execution record (Direct, Drop, etc)
    string exec_broker_mPID = 286; // exec broker acronym (usually an MPID)
    string exec_broker_accnt = 289; // account at executing broker/prime (if any)
    string exec_broker_cl_firm = 292; // client/firm at executing broker/prime (if any)
    string exec_broker_user_name = 295;
    FlipType clearing_flip_type = 298; // clearingFlip Type (CMTA or Giveup)
    string clearing_flip_firm = 301; // clearingFlip Broker/MPID/CMTA
    string clearing_flip_accnt = 304; // clearingFlip additional detail (sub-accnt)
    sfixed64 risk_group_id = 307; // riskGroupId (parent order group ID) for this execution report
    float fill_brkr_rate = 310; // billing brokerage rate (tier 1)
    float fill_routing_rate = 313; // billing routing rate (tier 1)
    BillingSecType billing_sec_type = 316; // SpiderRock billing security type
    BillingCategory billing_category = 319; // SpiderRock billing category
    FirmType firm_type = 322; // chld order firm type [Customer, ProCust, Firm, MM, etc]
    BuySell side = 325; // parent/child order side
    PriceType price_type = 328; // order limit price type
    ShortSaleFlag ssale_flag = 331; // child order short sale flag
    ShortSaleFlag spdr_sSale_flag = 334; // parent order short sale flag
    PositionType position_type = 337; // child order position type
    AutoHedge auto_hedge = 340; // SpiderRock auto-hedge algorithm (if any)
    google.protobuf.Timestamp order_dttm = 343; // Date/time of parent order arrival
    double order_uBid = 346; // underlier market bid @ parent order arrival
    double order_uAsk = 349; // underlier market ask @ parent order arrival
    double order_bid = 352; // option market bid @ parent order arrival (options only)
    double order_ask = 355; // option market ask @ parent order arrival (options only)
    float order_surf_prc = 358; // SpiderRock surface price @ parent order arrival (options only)
    float order_limit_vol = 361; // parent order limit volatilty (options only)
    double order_limit_prc = 364; // parent order limit price @ parent order arrival
    double order_limit_ref_uPrc = 367; // limit reference underlier price @ parent order arrival (options only)
    SpdrOrderShape child_shape = 370;
    sfixed32 child_size = 373; // child order size
    double child_price = 376; // child order price
    string child_exch = 379; // child order exchange code (SpiderRock)
    string child_ex_dest = 382; // child order exchange code (downstream)
    google.protobuf.Timestamp child_dttm = 385; // child order send date/time
    double child_uBid = 388; // underlier market bid @ child order send time
    double child_uAsk = 391; // underlier market bid @ child order send time
    double child_bid = 394; // option market bid @ child order send time (options only)
    double child_ask = 397; // option market ask @ child order send time (options only)
    float child_surf_prc = 400; // SpiderRock surface price @ child order send time (options only)
    float child_vol = 403; // child order volatilty (options only)
    float child_prob = 406; // child order probability (T+x)
    double child_limit_prc = 409; // parent order limit price @ child order send time
    double child_limit_ref_uPrc = 412; // limit reference underlier price @ child order send time (options only)
    float child_limit_pnl = 415; // child limit improvement pnl (childLimitPrc to fillPrice)
    ChildHandler child_algo_handler = 418; // algo that generated the child order responsible for this fill
    string child_order_handling = 421; // algo that generated the child order responsible for this fill
    ChildCreateReason child_create_reason = 424; // child order create reason code
    ChildCancelReason child_cancel_reason = 427; // child order cancel reason code
    MktStance child_mkt_stance = 430; // child order was expected to be marketable @ child send time
    YesNo child_cxl_attempted = 433; // cancel attempt was made on the child order prior to receiving this fill
    float child_cxl_fill_latency = 436; // cancel latency (for fills with a cancel attempt)
    string fill_exch = 439; // ExDest code from child order execution report (lastMkt)
    double fill_price = 442; // fill price
    double fill_ts = 445; // fill report ts (seconds since startup; 100 nanosec resolution)
    google.protobuf.Timestamp fill_dttm = 448; // Date/time of fill arrival
    sfixed32 fill_size = 451; // fill quantity
    sfixed32 eff_fill_size = 454; // fill size x underliers per contract
    float fill_vol = 457; // fill volatilty (options only)
    float fill_prob = 460; // fill order probability (T+x)
    double fill_limit_prc = 463; // parent order limit price @ fill arrival time
    double fill_limit_ref_uPrc = 466; // limit reference underlier price @ fill arrival time (options only)
    float fill_limit_pnl = 469; // fill limit improvement pnl (fillLimitPrc to fillPrice)
    float fill_de = 472; // fill delta
    float fill_ve = 475; // fill vega
    float fill_th = 478; // fill theta
    float fill_pr = 481; // fill premium over parity
    double fill_uPrc = 484; // fill underlier mid-market
    float fill_beta = 487; // SpiderRock estimate of beta to SPX
    float fill_risk_metric1 = 490; // user defined (from parent order)
    float fill_risk_metric2 = 493; // user defined (from parent order)
    float fill_risk_metric3 = 496; // user defined (from parent order)
    float fill_risk_metric4 = 499; // user defined (from parent order)
    float fill_risk_metric5 = 502; // user defined (from parent order)
    float fill_risk_metric6 = 505; // user defined (from parent order)
    float fill_risk_metric7 = 508; // user defined (from parent order)
    float fill_s08_dn = 511; // underlier down 8% shock slide (equities only)
    float fill_s06_up = 514; // underlier up 6% shock slide (equities only)
    float fill_s15_dn = 517; // underlier down 15% shock slide (equities only)
    float fill_s15_up = 520; // underlier up 15% shock slide (equities only)
    float fill_tv = 523; // theo vol (user supplied)
    float fill_tp = 526; // theo price
    double fill_uBid = 529; // underlier market bid @ fill arrival
    double fill_uAsk = 532; // underlier market ask @ fill arrival
    double fill_bid = 535; // option market bid @ fill arrival
    double fill_ask = 538; // option market ask @ fill arrival
    float fill_surf_prc = 541; // SpiderRock surface price @ fill arrival
    double fill_post_uMark1_m = 544; // underlier mark @ fill arrival + 1M
    double fill_post_uMark10_m = 547; // underlier mark @ fill arrival + 10M
    double fill_post_mark1_m = 550; // SpiderRock mid or surface mark @ fill arrival + 1M
    double fill_post_mark10_m = 553; // SpiderRock mid or surface mark @ fill arrival + 10M
    RiskCode risk_code = 556; // SpiderRock Risk Code (if any)
    string exch_liquidity_tag = 559; // liquidity tag (exchange)
    string spdr_liquidity_tag = 562; // SpiderRock normalized liquidity tag
    string fill_exch_detail = 565; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    float notional_value = 568; // cn * mult * uPrc
    float market_value = 571; // cn * mult * fillPrice
    float order_mkt_width = 574; // market width @ parent order arrival
    float child_mkt_width = 577; // market width @ child order send time
    float fill_mkt_width = 580; // market width @ fill arrival
    float parent_order_age = 583; // elaspsed time from parent order entry/update to this fill event
    ParentAge parent_age_code = 586; // elaspsed time from parent order entry/update to this fill event [coded]
    float trd_delta = 589; // trade delta
    float trd_dDelta = 592; // trade $delta
    float trd_gamma = 595; // trade gamma
    float trd_vega = 598; // trade vega
    float trd_wt_vega = 601; // trade wtVega (vega * vol / sqrt(max(0.1, years * 4)))
    float trd_theta = 604; // trade theta
    float trd_prem = 607; // trade premium over parity
    float trd_beta = 610; // trade beta
    float trd_dBeta = 613; // trade $beta
    float surf_edge = 616; // SR surface edge (user supplied theo vol/prc to SpiderRock surface price)
    float surf_edge_unit = 619; // SR surface edge normalized to $100 underlier
    float theo_edge = 622; // theo edge (user supplied theo vol/prc to SpiderRock surface price)
    float theo_edge_unit = 625; // theo edge normalized to $100 underlier
    float exch_fee = 628; // SpiderRock exchange fee estimate
    float half_width_pnl = 631; // estimated half-width Pnl
    float cl_arrive_pnl = 634; // -dir * qty * (fillPrice - clArriveMark)  # maybe use orderSurfPrc instead
    float arrive_pnl = 637; // -dir * qty * (fillPrice - 0.5 * (orderBid + orderAsk))  # maybe use orderSurfPrc instead
    float arrive_dn_pnl = 640; // arrivePnl - uDriftArrivePnl
    float u_drift_arrive_pnl = 643; // -dir * qty * fillDe * (0.5 * (fillUBid + fillUAsk) - 0.5 * (orderUBid + orderUAsk))
    float day_dn_pnl = 646; // delta neutral Pnl (to EOD)
    float day_m1_pnl = 649; // delta neutral Pnl (Fill + 1M)
    float day_m10_pnl = 652; // delta neutral Pnl (Fill + 10M)
    float u_drift_day_pnl = 655; // underlier delta drift Pnl (to EOD)
    float u_drift_m1_pnl = 658; // underlier delta drift Pnl (Fill + 1M)
    float u_drift_m10_pnl = 661; // underlier delta drift Pnl (Fill + 10M)
    float day_pnl = 664; // actual Pnl to EOD
    double live_mark = 667; // SpiderRock internal use
    double live_uPrc = 670; // SpiderRock internal use
    double pend_mark = 673; // SpiderRock internal use
    double pend_uPrc = 676; // SpiderRock internal use
    string trd_mark_error = 679; // trade mark error code
    string day_mark_error = 682; // day mark error code
    string user_data1 = 685; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 688; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    google.protobuf.Timestamp timestamp = 691; // SR system timestamp
}


    
message TradeDetailResponse {


    MbusInfo descriptor = 1;
    
    sfixed32 request_iD = 100;
    string accnt = 103;
    string ticker = 106;
    TickerSrc ticker_src = 109;
    string expiration = 112;
    SecType sec_type = 115;
    double strike = 118;
    int32 grp = 121;
    string method = 124;
    string strategy = 127;
    string user_name = 130;
    string origin = 133;
    string source = 136;
    string server = 139;
    string route = 142;
    string liqudity_tag = 145;
    string clear_firm = 148;
    string exec_broker = 151;
    sfixed64 order_number = 154;
    sfixed64 risk_group_id = 157;
    string risk_hash = 160;
    BuySell side = 163;
    float order_vol = 166;
    double order_price = 169;
    sfixed32 order_size = 172;
    ShortSaleFlag ssale_flag = 175;
    PositionType position_type = 178;
    float fill_vol = 181;
    double fill_price = 184;
    sfixed32 fill_size = 187;
    string fill_exch = 190;
    google.protobuf.Timestamp fill_dttm = 193;
    float fill_probability = 196;
    float dn_pn_l = 199;
    float m1_pn_l = 202;
    float m10_pn_l = 205;
    float day_pn_l = 208;
    float de = 211;
    float ga = 214;
    float th = 217;
    float ve = 220;
    float vo = 223;
    float va = 226;
    float de_decay = 229;
    float rh = 232;
    float ph = 235;
    float theo_edge = 238;
    google.protobuf.Timestamp timestamp = 241;
}


    
message TradingAlert {
    message PKey {
        
        sfixed64 alert_iD = 10; // Similar to grouping code: any updates will reuse this ID
        sfixed64 message_iD = 13; // Every time a message is updated, a new ID is issued
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string user_name = 100; // Sender's user name (not visible to client)
    AlertSeverity alert_severety = 103; // Affects UI response (together with status) - message box, taskbar blinking, colors etc.
    AlertStatus status = 106; // Clients see active and resolved but not revoked
    google.protobuf.Timestamp expiration = 109; // Expires at this time if valid, otherwise at EOD
    string alert_message = 112; // Alert message
    string url = 115; // [Optional] Hyperlink
    google.protobuf.Timestamp timestamp = 118;
    YesNo systemwide = 121; // If yes, every client receives the alert, if no, only those client firms in the list
    string client_firm = 124; // Client firm list (if systemwide = No)
}


/*
    Product trading schedule for the current week.  Includes an expected trading day market schedule for each SpiderRock ticker and day-of-week.  Including schedules for equity and futures markets.  The NMS schedule is the NYSE announced trading calendar.  Other markets are from the listing exchange.
*/    
message TradingSchedule {
    message PKey {
        
        TickerKey ticker = 10; // Future or option root ticker - ES/EW, ZC/OZC, etc.
        WeekDay week_day = 13;
        SpdrKeyType sec_type = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    TickerKey und_ticker = 100; // SR Underlying ticker - @ES, @ZC, @GC, @ED, etc.
    MarketDayType market_day_type = 103;
    google.protobuf.Duration sr_close_mark_time = 106; // SR Close Mark Time;usually regular market close - 1 minute (C - 1M)
    google.protobuf.Duration early_pre_open_time = 109; // early session pre-open (orders accepted)
    google.protobuf.Duration early_session_open_time = 112; // early session market open
    google.protobuf.Duration early_session_close_time = 115; // early session market close
    google.protobuf.Duration reg_pre_open_time = 118; // regular session pre-open (order accepted)
    google.protobuf.Duration reg_session_open_time = 121; // regular session open
    google.protobuf.Duration reg_session_close_time = 124; // regular session close
    google.protobuf.Duration late_pre_open_time = 127; // extended session pre-open (orders accepted)
    google.protobuf.Duration late_session_open_time = 130; // extended session open
    google.protobuf.Duration late_session_close_time = 133; // extended session close
    google.protobuf.Duration next_day_pre_open_time = 136; // next day session pre-open (order accepted for first T+1 session)
    google.protobuf.Duration next_day_session_open_time = 139; // next day session open (first T+1 session)
    YesNo is_default = 142;
    google.protobuf.Timestamp timestamp = 145;
}


    
message TwoPhaseCodeChallenge {


    MbusInfo descriptor = 1;
    
    Direction direction = 100;
    string user_name = 103; // userName (much match userConfig)
    string error_response = 106; // null/empty discovery request succeeded
    google.protobuf.Timestamp timestamp = 109; // request / response datetime
}


    
message TwoPhaseCodeResponse {


    MbusInfo descriptor = 1;
    
    Direction direction = 100;
    string user_name = 103; // userName (much match userConfig)
    string two_phase_code = 106;
    YesNo two_phase_code_oK = 109;
    string local_iPAddr = 112; // used to validate user (if required in userConfig)
    string error_response = 115; // null/empty discovery request succeeded
    google.protobuf.Timestamp timestamp = 118; // request / response datetime
}


    
message ULinkContextEvent {
    message PKey {
        
        string user_name = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    string accnt = 103; // most recent SR accnt (optional)
    TickerKey ticker = 106; // most recent symbol (optional)
    string source = 109; // source tool name (eg. SV, CT, BBLink, SRSE, etc)
    string ulink_event = 112; // ulink event (eg: F1, F2, Enter, etc) (if any)
    string ulink_detail = 115; // additional ulink context detail (if any)
    google.protobuf.Timestamp timestamp = 118; // timestamp of ulink initiation
}


    
message ULinkContextGateway {
    message PKey {
        
        string user_name = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    string accnt = 103; // most recent SR accnt (optional)
    TickerKey ticker = 106; // most recent symbol (optional)
    string source = 109; // source tool name (eg. SV, CT, BBLink, SRSE, etc)
    string ulink_event = 112; // ulink event (eg: F1, F2, Enter, etc) (if any)
    string ulink_detail = 115; // additional ulink context detail (if any)
    google.protobuf.Timestamp timestamp = 118; // timestamp of ulink initiation
}


    
message UpdateStkStatus {


    MbusInfo descriptor = 1;
    
    string accnt = 100;
    TickerKey ticker = 103;
    StkStatus stk_status = 106;
    string user_name = 109;
    google.protobuf.Timestamp timestamp = 112;
}


/*
    UserActivityComposite contain user level tool and trading summary details.
*/    
message UserActivityComposite {
    message PKey {
        
        string user_name = 10; // Users Name
        SysEnvironment sys_environment = 13; // System environment this user is currently im
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UserType user_type = 100; // Type (SRUserType) of user
    string client_firm = 103; // SR assigned client firm
    sfixed32 sh_exec = 106; // number of Shares executed
    sfixed32 fc_exec = 109; // number of Futures Contracts executed
    sfixed32 cn_exec = 112; // number of Option Contracts executed
    sfixed32 sh_drop = 115; // number of Shares dropped
    sfixed32 fc_drop = 118; // number of Futures Contracts dropped
    sfixed32 cn_drop = 121; // number of Option Contracts dropped
    sfixed32 sh_test = 124; // number of Shares executed in TEST
    sfixed32 fc_test = 127; // number of Futures Contracts executed in TEST
    sfixed32 cn_test = 130; // number of Option Contracts executed in TEST
    sfixed32 num_rejects = 133; // number of Execution rejects
    string last_reject_text = 136;
    google.protobuf.Timestamp last_reject_dttm = 139; // Date/Time of last execution reject
    google.protobuf.Timestamp last_trade_activity = 142; // Date/Time of last trade activity
    int32 active_sV = 145; // number of active Symbol Viewer
    int32 active_rV = 148; // number of active Risk Viewer
    int32 active_hT = 151; // number of active Hedge Tool
    int32 active_rM = 154; // number of active Risk Manager
    int32 active_oM = 157; // number of active Order Manager
    int32 active_cT = 160; // number of active Chart Tool
    int32 active_mM = 163; // number of active Market Monitor
    int32 active_rA = 166; // number of active Risk Analyzer
    int32 active_tA = 169; // number of active Trade Analyzer
    int32 active_cV = 172; // number of active Control Viewer
    int32 active_aV = 175; // number of active Admin Viewer
    int32 active_sM = 178; // number of active System Monitor
    int32 active_eS = 181; // number of active ES Data Tools
    int32 active_bT = 184; // number of active Billing Tools
    int32 active_dS = 187; // number of active Data Team Tools
    int32 active_uT = 190; // number of active Utility Type Tools
    int32 active_sA = 193; // number of active Standalone Tools
    int32 active_uK = 196; // number of active Unknown Tools
    float cpu_usage = 199; // cpu usage (number of cores utilized)
    float memory_usage = 202; // CLR memory (GB)
    float msg_recv_rate = 205; // total (inbound) messages per second
    float msg_send_rate = 208; // total (outbound) messages per second
    sfixed32 num_tool_errors = 211; // number of tool errors
    string last_tool_error = 214;
    google.protobuf.Timestamp last_tool_error_dttm = 217; // Date/Time of last tool error
    google.protobuf.Timestamp last_tool_launch = 220; // Date/Time of last tool launch
    sfixed32 num_sRSEQueries = 223; // number of SRSE Queries
    string last_sRSEQuery = 226; // Last SRSE Query text
    sfixed32 num_sRSEErrors = 229; // number of SRSE Errors
    string last_sRSEError = 232; // last SRSE Error
    google.protobuf.Timestamp last_sRSEError_dttm = 235; // Date/Time of last SRSE error
    google.protobuf.Timestamp last_sRSEActivity = 238; // Date/Time of last SRSE Activity
    google.protobuf.Timestamp timestamp = 241; // Date/Time of last record addition or
}


    
message UserActivityCompositeAck {
    message PKey {
        
        string user_name = 10;
        SysEnvironment sys_environment = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp last_reject_dttm = 100;
    google.protobuf.Timestamp last_tool_error_dttm = 103;
    google.protobuf.Timestamp last_sRSEError_dttm = 106;
    string ack_user_name = 109;
    google.protobuf.Timestamp timestamp = 112;
}


    
message UserActivityCompositeAggregate {
    message PKey {
        
        string aggregate = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 sh_exec = 100;
    sfixed32 fc_exec = 103;
    sfixed32 cn_exec = 106;
    sfixed32 sh_drop = 109;
    sfixed32 fc_drop = 112;
    sfixed32 cn_drop = 115;
    sfixed32 sh_test = 118;
    sfixed32 fc_test = 121;
    sfixed32 cn_test = 124;
    sfixed32 num_rejects = 127;
    string last_reject_text = 130;
    google.protobuf.Timestamp last_reject_dttm = 133;
    google.protobuf.Timestamp last_trade_activity = 136;
    sfixed32 active_sV = 139;
    sfixed32 active_rV = 142;
    sfixed32 active_hT = 145;
    sfixed32 active_rM = 148;
    sfixed32 active_oM = 151;
    sfixed32 active_cT = 154;
    sfixed32 active_mM = 157;
    sfixed32 active_rA = 160;
    sfixed32 active_tA = 163;
    sfixed32 active_cV = 166;
    sfixed32 active_aV = 169;
    sfixed32 active_sM = 172;
    sfixed32 active_eS = 175;
    sfixed32 active_bT = 178;
    sfixed32 active_dS = 181;
    sfixed32 active_uT = 184;
    sfixed32 active_sA = 187;
    sfixed32 active_uK = 190;
    float cpu_usage = 193;
    float memory_usage = 196;
    float msg_recv_rate = 199;
    float msg_send_rate = 202;
    sfixed32 num_tool_errors = 205;
    string last_tool_error = 208;
    google.protobuf.Timestamp last_tool_error_dttm = 211;
    google.protobuf.Timestamp last_tool_launch = 214;
    sfixed32 num_sRSEQueries = 217;
    string last_sRSEQuery = 220;
    sfixed32 num_sRSEErrors = 223;
    string last_sRSEError = 226;
    google.protobuf.Timestamp last_sRSEError_dttm = 229;
    google.protobuf.Timestamp last_sRSEActivity = 232;
    google.protobuf.Timestamp timestamp = 235; // Date/Time of last record addition or
}


    
message UserConfig {
    message PKey {
        
        string user_name = 10; // [cognito.UserID] User.Name$ClientFirm (B2B users) or SRHash$ClientFirm (M2M users)
    }

    message AccountAccessControl {
        
        string accnt = 145;
        AccountAccessType access_type = 148;
    }

    message ClientFirmViewAccess {
        
        string client_firm = 136;
        google.protobuf.Timestamp expires = 139; // must exist (can be 2100-01-01)
    }

    message MLinkControl {
        
        MLinkToken token = 304;
        MLinkScope scope = 307;
        google.protobuf.Timestamp expires = 310; // must exist (can be 2100-01-01)
        string value = 313; // billing code/coupon (eg. FREE)
    }

    message MarketDataControl {
        
        MarketDataToken token = 319; // market data billing authorities (either external or internally controlled for billing purposes)
        google.protobuf.Timestamp expires = 322; // must exists (can be 2100-01-01)
        string value = 325; // for future use
    }

    message ProductControl {
        
        ProductToken token = 292;
        google.protobuf.Timestamp expires = 295; // must exist (can be 2100-01-01)
        string value = 298; // billing code/coupon (eg. FREE)
    }

    message SysEnvironmentAccess {
        
        SysEnvironment sys_environment = 127;
        google.protobuf.Timestamp expires = 130; // must exist (can be 2100-01-01)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // [custom:ClientFirm] client firm this user is associated with (can be Sponsor, Core, or Sub)
    UserType user_type = 103; // [custom:UserType] (active users only)
    UserStatus user_status = 106; // [custom:UserStatus]
    google.protobuf.Timestamp user_status_dttm = 109; // The Date/Time this users status was last changed/updated
    YesNo user_to_be_frozen = 112; // If the user is to be frozen when date to be frozen is reached
    google.protobuf.Timestamp user_to_be_frozen_dttm = 115; // The dateTime the user is to be frozen	if to be froz flag is set to Yes
    string user_description = 118; // User record comment/description (if any)
    SRTimeZone display_time_zone = 121; // [custom:UserTimeZone] User timezone (affects date/time display in Tools)
    ConfigAccess client_config_access = 151; // user can create new (pending approval) or edit existing client configuration records (SRAdmin, SponsorAdmin, ClientAdmin, or SRUser (any sysenv))
    AccountTypeControl account_type_control = 154;
    OrderAccess order_access = 157;
    YesNo can_cancel_live_orders = 160; // user can cancel live orders (implied false for SRUsers, implied true for SRAdmin, SponsorAdmin, ClientAdmin, and users that can enter live orders)
    UserStageType user_stage_type = 163;
    YesNo can_edit_mar_risk = 166;
    YesNo can_edit_mar_restricted_list = 169;
    YesNo can_edit_supervisory_risk = 172;
    YesNo can_edit_stock_locate_list = 175;
    string display_name = 178; // [custom:UserDisplayName] User display name
    string contact_email = 181; // Contact Email Address (reset password email)
    string contact_phone = 184; // Contact Phone Number
    string contact_slack = 187; // Contact Slack Handle
    string contact_bBerg_handle = 190; // Contact Bloomberg Handle (BBGID)
    SSOType sso_type = 193; // [custom:SSOType] type of single sign on
    string sso_parameters = 196; // [custom:SSOParams] eg. 'https://corp.domain.com:xxxx'
    string default_accnt = 199; // default account for this user (used as a tool default/setting); ignored if not viewable; if missing then default is the 1st accnt in the viewable list (alpha order)
    string alt_user_name = 202; // alternate (client supplied) user name (usually for client system integration)
    string cme_trader_id = 205; // CME assigned trader ID (if any)
    string cme_location = 208; // For CME. The traders location is required.  Format example:  US,IL
    string cfe_trader_id = 211; // CFE assigned trader ID (if any)
    string cfe_frequent_trader_id = 214; // CFE frequent trader ID (if any)
    string cfe_location = 217; // CFE trader location (required)
    string ice_trader_id = 220; // ICE assigned trader ID (if any)
    string ice_password = 223; // ICE assigned password (if any)
    string ice_company_id = 226; // ICE Company Id of trader (if any)
    string cboe_trader_id = 229; // Cboe assigned trader ID (if any)
    YesNo firm_pos_visibility = 232; // Controls whether user sees the firm position in the SV's widget
    YesNo allow_random_strategy = 235; // SV Widget Control
    string tool_product_acl = 238; // A list of SR Citrix/GUI tool product codes: SV, RV, HT, RM, RA, TA, OM, MM, CV, CT, SM, DC
    ToolServerCode tool_server_code = 241; // needs to match -toolServerCode on the tool server this user is assigned to.
    string tool_server_host = 244; // note: this will override auto detection of a server via toolServerCode
    sfixed32 tool_server_port = 247; // eg, 5240 V7SP, 5440 V7SD, 5640 SV7SB, 6240 V7LP, 6440 V7LPB
    YesNo tools_auto_shutdown = 250; // Controls whether tools should auto-shutdown (this should be controled by SR)
    google.protobuf.Duration tools_auto_shutdown_time = 253; // Tools will shut down at this time if toolsAutoShutdown = Yes (can be overriden by user)
    string srse_pwd_hash = 256; // MySQL password hash (used in launch_srse.py)
    string srse_product_acl = 259; // A list of SR SRSE product codes: SRTrade, SRControl, SRLive, SRRisk, SRAdmin, SRTheo, SRAnalytics, SRAdvisor
    string srse_historical_acl = 262; // A list of SR SRSE product codes (for historical views): SRTrade, SRControl, SRLive, SRRisk, SRAdmin, SRTheo, SRAnalytics, SRAdvisor, etc (e.g. could be a subset of the live acl)
    int32 srse_num_cores = 265; // maximum number of simultaneous (active) SRSE queries [0,1,2 ..., 10] [default=1] (note: 0=reject all SRSE queries)
    sfixed32 srse_max_connects_per_day = 268;
    sfixed32 srse_max_concurrent_connects = 271; // maximum number of concurrent SRSE connections [default=5] (note: SRSE has a global max of 100 simultaneous connections per user)
    sfixed32 srse_max_row_cache = 274; // maximum number of rows allowed to be used from the row cache
    sfixed32 srse_max_new_orders = 277; // maximum number of new parent orders (per day) that can be inserted via SRSE (0=NONE) [default = 500,000]
    sfixed32 srse_max_new_orders_per_sec = 280; // maximum number of new parent orders (per second; 4 second burst) that can be inserted via SRSE (0=NONE) [default = 250]
    sfixed32 srse_max_new_orders_per_statement = 283; // maximum number of new parent orders (per SQL statement) that can be inserted via SRSE (0=NONE) [default = 1,000]
    string badges = 286; // exchange memembership and badge ids.  CFEFUT:BADGE1,NYSESTK:BADGE2,...
    CognitoSync cognito_sync = 328;
    google.protobuf.Timestamp cognito_reset_dttm = 331; // [custom:CognitoResetDttm] last reset dttm (if this value is greater than the value in custom:cognitoResetDttm then delete/recreate cognito user record)
    string api_key = 334; // API access key (SR supplied; guid; plain text) (can be reset/regenerated as needed)
    string api_pw_hash = 337; // API access password (client supplied; strong; hashed value)
    google.protobuf.Timestamp api_expires = 340; // API access expiration dttm
    string modified_by = 343; // [custom:ModifiedBy] user who last modified this record
    google.protobuf.Timestamp timestamp = 346; // [custom:LastModified] timestamp of last modification
    repeated AccountAccessControl account_access_control = 142;
    repeated ClientFirmViewAccess client_firm_view_access = 133;
    repeated MLinkControl mlink_control = 301;
    repeated MarketDataControl market_data_control = 316;
    repeated ProductControl product_control = 289;
    repeated SysEnvironmentAccess sys_environment_access = 124;
}


    
message UserConfigRequest {


    MbusInfo descriptor = 1;
    
    Direction direction = 100;
    string user_name = 103; // userName (much match userConfig)
    YesNo do_locate_tool_server = 106;
    string error_response = 109; // null/empty discovery request succeeded
    uint32 server_app_id = 112; // AppId of the server responding to this request (part of SpdrNumber GUID)
    sfixed32 tool_counter = 115; // tool counter (increments on each request; part of SpdrNumber GUID)
    google.protobuf.Timestamp timestamp = 118; // request / response datetime
}


    
message UserConfig_V7 {
    message PKey {
        
        string user_name = 10;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    UserTypeV7 user_type = 100;
    string client_firm = 103; // SR assigned client firm (default client firm)
    string client_firm_list = 106; // List of additional client firms for this user (ClientFirm,ClientFirm,ClientFirm ...)
    string billing_firm = 109; // SR billing Client Firm - if different than clientFirm (overrides clientFirmConfig in billing tool)
    string alt_user_name = 112; // alternate (client supplied) user name
    string first_name = 115; // first name of client
    string last_name = 118; // last name of client
    string trader_id = 121; // usually the SEC large trader ID (if any)
    string cme_trader_id = 124; // CME assigned trader ID (if any)
    string cfe_trader_id = 127; // CFE assigned trader ID (if any)
    string cfe_frequent_trader_id = 130; // CFE frequent trader ID (if any)
    string cfe_location = 133; // CFE trader location (required)
    string ice_trader_id = 136; // ICE assigned trader ID (if any)
    string ice_password = 139; // ICE assigned password (if any)
    string ice_company_id = 142; // ICE Company Id of trader (if any)
    string cboe_trader_id = 145; // Cboe assigned trader ID (if any)
    string sr_access_hash = 148; // SR user access hash for ELASTICSearch
    string exec_username = 151; // eg, REDI accounts when routing to REDI
    string user_group = 154; // controls comments visibility scope
    string description = 157; // user description / comment
    string default_accnt = 160; // default account for this user
    string accnt_list = 163; // all authorized accounts [comma separated list; must have clientFirm in their accnt config] (can be *ClientFirm, $viewGroup1, $viewGroup2 or $viewgroup3)
    YesNo view_inactive = 166; // yes means user can view inactive accnts; none/no means user can view only active accnts
    string tool_product_acl = 169; // A list of SR GUI tool product codes: SV, RV, HT, RM, RA, TA, OM, MM, CV, CT, SM, DC
    string elastic_product_acl = 172; // A list of SR ES product codes: SRTrade, SRRisk, SRTheo, SRAnalytics, SRQuoteEvent, SRExecEngine, SRSystem
    string market_data_acl = 175; // A list of SR TickerSrc codes: NMS, CFE, ICE, CME, CBOE, OTC, etc. [restricts SRSE and GUI tools]
    ToolServerCode tool_server_code = 178; // needs to match -toolServerCode on the tool server this user is assigned to.
    string tool_server_host = 181; // note: this will override auto detection of a server via toolServerCode
    sfixed32 tool_server_port = 184; // eg, 5240 V7SP, 5440 V7SD, 5640 SV7SB, 6240 V7LP, 6440 V7LPB
    YesNo tools_auto_shutdown = 187; // Controls whether tools should auto-shutdown (this should be controled by SR)
    google.protobuf.Duration tools_auto_shutdown_time = 190; // Tools will shut down at this time if toolsAutoShutdown = Yes (can be overriden by user)
    YesNo firm_pos_visibility = 193; // Controls whether user sees the firm position in the SV's widget
    YesNo allow_random_strategy = 196; // Controls whether user can enter random strategy strings when sending orders via tools
    string srse_pwd_hash = 199; // MySQL password hash (used in launch_srse.py)
    string srse_product_acl = 202; // A list of SR SRSE product codes: SRTrade, SRControl, SRLive, SRRisk, SRAdmin, SRTheo, SRAnalytics, SRAdvisor
    string srse_historical_acl = 205; // A list of SR SRSE product codes (for historical views): SRTrade, SRControl, SRLive, SRRisk, SRAdmin, SRTheo, SRAnalytics, SRAdvisor, etc (e.g. could be a subset of the live acl)
    int32 srse_num_cores = 208; // maximum number of simultaneous (active) SRSE queries [0,1,2 ..., 10] [default=1] (note: 0=reject all SRSE queries)
    sfixed32 srse_max_connects_per_day = 211; // maximum number of user SRSE connections per day [default=500]
    sfixed32 srse_max_concurrent_connects = 214; // maximum number of concurrent SRSE connections [default=5] (note: SRSE has a global max of 100 simultaneous connections per user)
    sfixed32 srse_max_row_cache = 217; // maximum number of rows allowed to be used from the row cache
    sfixed32 srse_max_new_orders = 220; // maximum number of new parent orders (per day) that can be inserted via SRSE (0=NONE) [default = 500,000]
    sfixed32 srse_max_new_orders_per_sec = 223; // maximum number of new parent orders (per second; 4 second burst) that can be inserted via SRSE (0=NONE) [default = 250]
    sfixed32 srse_max_new_orders_per_statement = 226; // maximum number of new parent orders (per SQL statement) that can be inserted via SRSE (0=NONE) [default = 1,000]
    string badges = 229; // exchange memembership and badge ids.  CFEFUT:BADGE1,NYSESTK:BADGE2,...
    string contact_email = 232; // Contacts EMAIL Address
    string contact_iM = 235; // Contacts IM Address (e.g. AIM etc)
    string contact_phone = 238; // Contacts Full contact Phone Number
    string location = 241; // For CME. The traders location is required.  Format example:  US,IL
    UserStatus user_status = 244;
    google.protobuf.Timestamp user_status_dttm = 247; // The Date/Time this users status was last changed/updated
    YesNo user_to_be_frozen = 250; // If the user is to be frozen when date to be frozen is reached
    google.protobuf.Timestamp user_to_be_frozen_dttm = 253; // The dateTime the user is to be frozen	if to be froz flag is set to Yes
    string modified_by = 256;
    google.protobuf.Timestamp timestamp = 259; // timestamp of last modification
}


/*
    Records in this table overrides GlobalDividends values in theo option pricing calculations.
    Note: Missing/empty DateAmt strings are interpreted as non-dividend paying
*/    
message UserDividendOverride {
    message PKey {
        
        TickerKey ticker = 10;
        string client_firm = 13;
        DividendSlot dividend_slot = 16;
    }

    message DateAmt {
        
        DateKey div_date = 112; // ex-dividend date
        float div_value = 115; // dividend amount
        string div_currency = 118;
        DivKind div_kind = 121; // dividend type
        DivSource div_source = 124; // dividend source
        DivFreq div_freq = 127;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    string text = 103; // user detail (if any)
    MergeType merge_type = 106;
    repeated DateAmt date_amt = 109;
}


    
message UserNotes {
    message PKey {
        
        sfixed64 user_note_id = 10; // system wide unique ID
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm ID (subject of the note)
    string source_client_firm = 103; // client firm ID (source of note)
    ClientFirmType source_client_firm_type = 106; // client firm type (source of note)
    string notes_text = 109; // up to 10k bytes
    string modified_by = 112; // user who last modified this record
    google.protobuf.Timestamp timestamp = 115; // timestamp of last modification
}


    
message UserPoolAccess {
    message PKey {
        
        string user_name = 10;
        UserPool user_pool = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string last_pwd_change_location = 100;
    google.protobuf.Timestamp last_pwd_change_timestamp = 103; // timestamp of last password modification
    string last_jwt_access_location = 106;
    google.protobuf.Timestamp last_jwt_access_timestamp = 109; // timestamp of last JWT access
}


    
message UserProxyAccessConfig {
    message PKey {
        
        string user_name = 10; // can be user.name (citrix/on-prem created) or user.name@domain.com (cognito created)
        string client_firm = 13;
    }

    message AccountAccess {
        
        string accnt = 103;
        AccountAccessType access_type = 106;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string modified_by = 109;
    google.protobuf.Timestamp timestamp = 112; // timestamp of last modification
    repeated AccountAccess account_access = 100;
}


/*
    Records in this table override SpiderRock global discount rate values in option pricing calculations.
    Note: Expiry dates that fall between years values below will be interpolated using a cubic spline on (days * rate)
*/    
message UserRateOverride {
    message PKey {
        
        string client_firm = 10;
    }

    message Curve {
        
        sfixed32 days = 109; // calendar days to expiration (actual/365 days per year)
        float rate = 112;
        float ln_rate = 115;
        float sh_rate = 118;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Timestamp timestamp = 100;
    string text = 103; // user detail (if any)
    repeated Curve curve = 106;
}


/*
    UserRiskControl records are used to establish supervisory control of user level equity, and equity option trading in SpiderRock execution engines.  These records are only viewable and editable by RiskAdmin users with access to the control record account(s).
*/    
message UserRiskControl {
    message PKey {
        
        string accnt = 10;
        string risk_user = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo disabled = 100;
    sfixed32 max_stk_shares = 103;
    float max_stk_money = 106;
    sfixed32 max_fut_contracts = 109;
    float max_fut_money = 112;
    sfixed32 max_opt_contracts = 115;
    float max_opt_money = 118;
    float max_opt_notional = 121;
    float max_day_haircut = 124;
    float max_day_dDelta_ln = 127;
    float max_day_dDelta_sh = 130;
    float max_day_dDelta_abs = 133;
    float max_day_vega_ln = 136;
    float max_day_vega_sh = 139;
    float max_day_vega_abs = 142;
    float max_day_wt_vega_ln = 145;
    float max_day_wt_vega_sh = 148;
    float max_day_wt_vega_abs = 151;
    float max_day_notional_ln = 154;
    float max_day_notional_sh = 157;
    float max_day_notional_abs = 160;
    sfixed32 max_day_stk_sh_abs = 163;
    sfixed32 max_day_fut_cn_abs = 166;
    sfixed32 max_day_opt_cn_abs = 169;
    string modified_by = 172; // user who last modified this record
    google.protobuf.Timestamp timestamp = 175; // timestamp of last modification
}


    
message UserRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string change_reason = 100;
    string accnt = 103;
    string risk_user = 106;
    double dd_bot = 109;
    double dd_sld = 112;
    double ve_bot = 115;
    double ve_sld = 118;
    double wt_ve_bot = 121;
    double wt_ve_sld = 124;
    double pr_bot = 127;
    double pr_sld = 130;
    double rm1_bot = 133;
    double rm1_sld = 136;
    double rm2_bot = 139;
    double rm2_sld = 142;
    double rm3_bot = 145;
    double rm3_sld = 148;
    double rm4_bot = 151;
    double rm4_sld = 154;
    double rm5_bot = 157;
    double rm5_sld = 160;
    double rm6_bot = 163;
    double rm6_sld = 166;
    double rm7_bot = 169;
    double rm7_sld = 172;
    sfixed32 sh_bot = 175;
    sfixed32 sh_sld = 178;
    sfixed32 fc_bot = 181;
    sfixed32 fc_sld = 184;
    sfixed32 cn_bot = 187;
    sfixed32 cn_sld = 190;
    double notional_bot = 193;
    double notional_sld = 196;
    double notional_abs = 199;
    sfixed32 sh_abs = 202;
    sfixed32 fc_abs = 205;
    sfixed32 cn_abs = 208;
    double haircut_day = 211;
    sfixed32 counter = 214;
    google.protobuf.Timestamp timestamp = 217;
}


/*
    Values in this table represent current (live) SpiderRock supervisory risk counters for an account + user combination.  These records are typically only visible to RiskAdmin users with access to the counter record account(s).
*/    
message UserRiskRecord {
    message PKey {
        
        string accnt = 10;
        string risk_user = 13;
        string risk_engine = 16; // EE engine name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 stk_sh_bot = 100; // total shares bot + open marketable buy order qty
    sfixed32 stk_sh_sld = 103; // total shares sld + open marketable sell order qty
    sfixed32 stk_sh_abs = 106; // total shares filled + all open shares
    sfixed32 fut_cn_bot = 109; // total future cn bot + open marketable buy order qty
    sfixed32 fut_cn_sld = 112; // total future cn sld + open marketable sell order qty
    sfixed32 fut_cn_abs = 115; // total future cn filled + all open shares
    sfixed32 opt_cn_bot = 118; // total option cn bot + open marketable buy order qty
    sfixed32 opt_cn_sld = 121; // total option cn sld + open marketable sell order qty
    sfixed32 opt_cn_abs = 124; // total option cn filled + all open shares
    float haircut_day = 127; // day haircut ($25;-8/+6, -15/+15) (fills only) [aggregate]
    float ddelta_bot = 130; // $delta bot (stock + future + option) (fills + open marketable qty) [aggregate]
    float ddelta_sld = 133; // $delta sld (stock + future + option) (fills + open marketable qty) [aggregate]
    float vega_bot = 136; // vega bot (options only) (fills + open marketable qty)
    float vega_sld = 139; // vega sld (options only) (fills + open marketable qty)
    float wt_vega_bot = 142; // wt vega bot (options only) (fills + open marketable qty)
    float wt_vega_sld = 145; // wt vega sld (options only) (fills + open marketable qty)
    float notional_bot = 148; // [bot] (fills + open marketable qty) [cn x multiplier x uPrc] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_sld = 151; // [sld] (fills + open marketable qty) [cn x multiplier x uPrc] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_abs = 154; // [abs] (fills + all open qty) [cn x multiplier x uPrc] (options and futures) or [sh x uPrc] (stock) [aggregate]
    google.protobuf.Timestamp timestamp = 157;
}


/*
    Records in this table override SpiderRock global implied sdiv values in option pricing calculations.
*/    
message UserSDivOverride {
    message PKey {
        
        ExpiryKey ekey = 10; // StocKey + option expiry date
        string client_firm = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    float sdiv_rate = 100;
    float ln_sDiv_rate = 103;
    float sh_sDiv_rate = 106;
    string text = 109; // user detail (if any)
    google.protobuf.Timestamp timestamp = 112;
}


    
message UserSettingsBlob {
    message PKey {
        
        string user_name = 10;
        UserLocation user_location = 13;
        string group_name = 16; // This will either be user set or AUTOSAVE(something)
        string tool_name = 19;
        string element_name = 22; // eg;	APP:LOCATION, GRID:users, GRID:orders, ...
        sfixed32 chunk_id = 25; // If blob was broken into multiple chunks, which chunk this is
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100;
    SettingVisible setting_visible = 103;
    string settings = 106; // up to 32kb
    string description = 109;
    sfixed32 chunk_total = 112; // Number of chunks blob has been broken into, 1 for not broken up
    google.protobuf.Timestamp last_modified = 115; // Time last modified, also used to track groups of blob chunks
}


/*
    SpdrRiskControl records are used to establish supervisory control of user + symbol level equity, and equity option trading in SpiderRock execution engines.  These records are only viewable and editable by RiskAdmin users with access to the control record account(s).
*/    
message UserSymRiskControl {
    message PKey {
        
        string accnt = 10;
        string risk_user = 13;
        string risk_symbol = 16; // underlying symbol (e.g. MSFT, *, SPY, @CL) or symbol/expiration (eg. @ES/EXP, @ES/2016-02-24)
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    YesNo disabled = 100;
    sfixed32 max_stk_shares = 103; // single order share limit
    float max_stk_money = 106; // single order money limit (shares x orderPrice)
    sfixed32 max_fut_contracts = 109; // single order contract limit
    float max_fut_money = 112; // single order money limit (contracts x orderPrice x multiplier)
    sfixed32 max_opt_contracts = 115; // single order contract limit
    float max_opt_money = 118; // single order money limit (contracts x orderPrice x multiplier)
    float max_opt_notional = 121; // single order notional value limit (contracts x uPrice x multiplier)
    float max_day_haircut = 124;
    float max_day_dDelta_ln = 127;
    float max_day_dDelta_sh = 130;
    float max_day_dDelta_abs = 133;
    float max_day_vega_ln = 136;
    float max_day_vega_sh = 139;
    float max_day_vega_abs = 142;
    float max_day_wt_vega_ln = 145;
    float max_day_wt_vega_sh = 148;
    float max_day_wt_vega_abs = 151;
    float max_day_notional_ln = 154;
    float max_day_notional_sh = 157;
    float max_day_notional_abs = 160;
    sfixed32 max_day_stk_sh_abs = 163;
    sfixed32 max_day_fut_cn_abs = 166;
    sfixed32 max_day_opt_cn_abs = 169;
    string modified_by = 172; // user who last modified this record
    google.protobuf.Timestamp timestamp = 175; // timestamp of last modification
}


    
message UserSymRiskCounter {
    message PKey {
        
        string key = 10;
        string server_name = 13;
        DateKey trade_date = 16;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string change_reason = 100;
    string accnt = 103;
    string risk_user = 106;
    TickerKey risk_symbol = 109;
    double dd_bot = 112;
    double dd_sld = 115;
    double ve_bot = 118;
    double ve_sld = 121;
    double wt_ve_bot = 124;
    double wt_ve_sld = 127;
    double pr_bot = 130;
    double pr_sld = 133;
    double rm1_bot = 136;
    double rm1_sld = 139;
    double rm2_bot = 142;
    double rm2_sld = 145;
    double rm3_bot = 148;
    double rm3_sld = 151;
    double rm4_bot = 154;
    double rm4_sld = 157;
    double rm5_bot = 160;
    double rm5_sld = 163;
    double rm6_bot = 166;
    double rm6_sld = 169;
    double rm7_bot = 172;
    double rm7_sld = 175;
    sfixed32 sh_bot = 178;
    sfixed32 sh_sld = 181;
    sfixed32 fc_bot = 184;
    sfixed32 fc_sld = 187;
    sfixed32 cn_bot = 190;
    sfixed32 cn_sld = 193;
    double notional_bot = 196;
    double notional_sld = 199;
    double notional_abs = 202;
    sfixed32 sh_abs = 205;
    sfixed32 fc_abs = 208;
    sfixed32 cn_abs = 211;
    double haircut_day = 214;
    sfixed32 counter = 217;
    google.protobuf.Timestamp timestamp = 220;
}


/*
    Values in this table represent current (live) SpiderRock supervisory risk counters for an account + riskSymbol (ticker) + user combination.  These records are typically only visible to RiskAdmin users with access to the counter record account(s).
*/    
message UserSymRiskRecord {
    message PKey {
        
        string accnt = 10;
        string risk_user = 13;
        TickerKey risk_symbol = 16;
        string risk_engine = 19; // EE engine name
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    sfixed32 stk_sh_bot = 100; // total shares bot + open marketable buy order qty
    sfixed32 stk_sh_sld = 103; // total shares sld + open marketable sell order qty
    sfixed32 stk_sh_abs = 106; // total shares filled + all open shares
    sfixed32 fut_cn_bot = 109; // total future cn bot + open marketable buy order qty
    sfixed32 fut_cn_sld = 112; // total future cn sld + open marketable sell order qty
    sfixed32 fut_cn_abs = 115; // total future cn filled + all open shares
    sfixed32 opt_cn_bot = 118; // total option cn bot + open marketable buy order qty
    sfixed32 opt_cn_sld = 121; // total option cn sld + open marketable sell order qty
    sfixed32 opt_cn_abs = 124; // total option cn filled + all open shares
    float haircut_day = 127; // day haircut ($25;-8/+6, -15/+15) (fills only) [aggregate]
    float ddelta_bot = 130; // $delta bot (stock + future + option) (fills + open marketable qty) [aggregate]
    float ddelta_sld = 133; // $delta sld (stock + future + option) (fills + open marketable qty) [aggregate]
    float vega_bot = 136; // vega bot (options only) (fills + open marketable qty)
    float vega_sld = 139; // vega sld (options only) (fills + open marketable qty)
    float wt_vega_bot = 142; // wt vega bot (options only) (fills + open marketable qty)
    float wt_vega_sld = 145; // wt vega sld (options only) (fills + open marketable qty)
    float notional_bot = 148; // [bot] (fills + open marketable qty) [cn x multiplier x uPrc] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_sld = 151; // [sld] (fills + open marketable qty) [cn x multiplier x uPrc] (options and futures) or [sh x uPrc] (stock) [aggregate]
    float notional_abs = 154; // [abs] (fills + all open qty) [cn x multiplier x uPrc] (options and futures) or [sh x uPrc] (stock) [aggregate]
    google.protobuf.Timestamp timestamp = 157;
}


/*
    ValidSecurities (internal only) Contains list of valid securities for today (eqt and eqtopt)
    VLanBridging: Down
*/    
message ValidSecurities {
    message PKey {
        
        OptionKey sec_key = 10;
        SpdrKeyType sec_type = 13;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    ValidSecSrc source = 100; // source of where we decided this was a valid security for today
    DateKey trade_date = 103; // tradeDate
    string user_name = 106; // modified by this user
    google.protobuf.Timestamp timestamp = 109;
}


    
message VisibleAccount {
    message PKey {
        
        string accnt = 10; // Account string
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // Client firm associated with this account
    string client_accnt = 103; // Client assigned "long" account string (optional)
    string accnt_name = 106; // Account name (description)
    AccountType account_type = 109; // SR account type (Normal,Strategy,Clearing,Rollup,Omnibus) [Normal, Strategy, and Omnibus are trading accounts]
    YesNo short_marking = 112; // If No, then Auto for stock legs
    YesNo short_options = 115;
    string client_tags = 118; // (optional) user defined account tag(s) (eg. tag,tag,tag,tag) [max of 10,000 total chars (including seps)]
    google.protobuf.Timestamp ts = 121; // last update time (Date)
}


/*
    This table allows custom span risk calculations based on either user or SR supplied input values.
*/    
message VolTimeCalculator {
    message PKey {
        
        TickerKey ticker = 10;
        SpdrKeyType sec_type = 13;
        DateKey end_date = 16; // period end date (CST)
        string user_name = 19;
    }


    MbusInfo descriptor = 1;
    
    PKey pkey = 2;
    google.protobuf.Duration end_time = 100; // period end time (CST)
    google.protobuf.Timestamp now_dttm = 103; // period start time (CST)
    FieldSrc now_src = 106; // default is clock time when selecting
    TimeMetric time_metric = 109;
    FieldSrc time_metric_src = 112;
    CalendarCode holiday_calendar = 115;
    FieldSrc holiday_calendar_src = 118;
    double years = 121; // volatility years from nowDttm to endDttm using TradingCalendar (SR NMS Trading/Volatility Calendar)
    double years365 = 124;
    sfixed32 partial_days = 127; // number of partial trading days (half-days) between endpoints.
    sfixed32 holiday_days = 130; // number of holidays (days that would otherwise be trading days) between endpoints.
    sfixed32 complete_days = 133; // number of complete trading days between endpoints.
    sfixed32 trd_minutes = 136; // number of market trading minutes between endpoints.
    sfixed32 clk_minutes = 139; // number of non-market trading minutes between endpoints.
    double trd_measure = 142; // volatility years per trdMinute
    double clk_measure = 145; // volatility years per clkMinute
    string error = 148; // calculation error
    google.protobuf.Timestamp timestamp = 151;
}


    
message WtsMessageHeader {


    MbusInfo descriptor = 1;
    
    string skey = 100; // set key for this request/response
    string hndl = 103; // name of the backend handler this message routes to/from
    string vset = 106; // query parameters (the "where" clause of this request)
    string mark = 109; // action mark for this request/response
    string type = 112; // data type of the data payload (if DATA exists)
    string time = 115; // message send time (app or backend)
    string err = 118; // description of error encountered by server
    WtsErrorLevel elvl = 121; // error level
    WtsErrorType etyp = 124; // error type
    string etxt = 127; // error text
}


