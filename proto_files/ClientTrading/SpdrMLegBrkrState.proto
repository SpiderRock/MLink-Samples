syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrMLegBrkrState records are published by execution engines and describe the current state of a broker that is managing a SpiderRock parent order.  These records include a description of the active child orders managed by the broker.  Records are updated whenever a child order changes and also at other times but are not completely live and may not always reflect current market data or limit levels for working orders.
*/    
message SpdrMLegBrkrState {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 11;
        SpdrSource spdr_source = 12;
        int64 grouping_code = 13;
        BuySell order_side = 14;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string engine_name = 100; // execution engine
    int64 parent_number = 103; // SPDR parent number (most recent/currently active)
    int64 base_parent_number = 106;
    string alt_order_id = 109; // alternate order ID (usually clOrdId from client)
    int64 package_id = 112; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    SpdrStageType stage_type = 124; // parent is a staged order [StageLock, StageModify, StageReview]
    YesNo is_flagged = 127; // broker state records is flagged for action (user alert only)
    BuySell stock_side = 130;
    ShortSaleFlag ssale_flag = 133;
    int32 locate_quan = 136; // available locate quantity (if selling short) @ child order send time
    string locate_firm = 139; // firm granting the locate (also locate firm used on street FIX orders)
    int32 stock_shares = 142; // number of shares included (zero if none)
    int64 stock_leg_id = 145;
    int32 stock_fill_quan = 148;
    double stock_avg_fill_price = 151;
    float ref_uPrc = 154; // reference underlier price (PrcDe orders)
    float live_uPrc = 157;
    PriceFormat u_price_format = 160; // underlier price format code
    float stock_cpx = 163; // [child] best price
    int32 stock_csz = 166; // [child] cumulative share represented at best price
    uint32 stock_cex = 169; // [child] bit mask of all exchanges where we are representing this order
    int32 num_legs = 172; // number of valid legs below
    OptionKey sec_key1 = 175; // leg #1
    SpdrKeyType sec_type1 = 178;
    uint32 ratio1 = 181;
    BuySell side1 = 184;
    PositionType position_type1 = 187;
    int64 leg_id1 = 190;
    int32 fill_quan1 = 193;
    double avg_fill_price1 = 196;
    float vega1 = 199;
    double ref_uPrc1 = 202; // reference underlier price (PrcDe orders)
    float ref_delta1 = 205; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt1 = 208; // reference # of earnings moves before expiration
    double live_uPrc1 = 211;
    PriceFormat price_format1 = 214; // option price format code
    float leg_cpx1 = 217; // [child] best price
    int32 leg_csz1 = 220; // [child] cumulative share represented at best price
    uint32 leg_cex1 = 223; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key2 = 226; // leg #2
    SpdrKeyType sec_type2 = 229;
    uint32 ratio2 = 232;
    BuySell side2 = 235;
    PositionType position_type2 = 238;
    int64 leg_id2 = 241;
    int32 fill_quan2 = 244;
    double avg_fill_price2 = 247;
    float vega2 = 250;
    double ref_uPrc2 = 253; // reference underlier price (PrcDe orders)
    float ref_delta2 = 256; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt2 = 259; // reference # of earnings moves before expiration
    double live_uPrc2 = 262;
    PriceFormat price_format2 = 265; // option price format code
    float leg_cpx2 = 268; // [child] best price
    int32 leg_csz2 = 271; // [child] cumulative share represented at best price
    uint32 leg_cex2 = 274; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key3 = 277; // leg #3
    SpdrKeyType sec_type3 = 280;
    uint32 ratio3 = 283;
    BuySell side3 = 286;
    PositionType position_type3 = 289;
    int64 leg_id3 = 292;
    int32 fill_quan3 = 295;
    double avg_fill_price3 = 298;
    float vega3 = 301;
    double ref_uPrc3 = 304; // reference underlier price (PrcDe orders)
    float ref_delta3 = 307; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt3 = 310; // reference # of earnings moves before expiration
    double live_uPrc3 = 313;
    PriceFormat price_format3 = 316; // option price format code
    float leg_cpx3 = 319; // [child] best price
    int32 leg_csz3 = 322; // [child] cumulative share represented at best price
    uint32 leg_cex3 = 325; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key4 = 328; // leg #4
    SpdrKeyType sec_type4 = 331;
    uint32 ratio4 = 334;
    BuySell side4 = 337;
    PositionType position_type4 = 340;
    int64 leg_id4 = 343;
    int32 fill_quan4 = 346;
    double avg_fill_price4 = 349;
    float vega4 = 352;
    double ref_uPrc4 = 355; // reference underlier price (PrcDe orders)
    float ref_delta4 = 358; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt4 = 361; // reference # of earnings moves before expiration
    double live_uPrc4 = 364;
    PriceFormat price_format4 = 367; // option price format code
    float leg_cpx4 = 370; // [child] best price
    int32 leg_csz4 = 373; // [child] cumulative share represented at best price
    uint32 leg_cex4 = 376; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key5 = 379; // leg #5
    SpdrKeyType sec_type5 = 382;
    uint32 ratio5 = 385;
    BuySell side5 = 388;
    PositionType position_type5 = 391;
    int64 leg_id5 = 394;
    int32 fill_quan5 = 397;
    double avg_fill_price5 = 400;
    float vega5 = 403;
    double ref_uPrc5 = 406; // reference underlier price (PrcDe orders)
    float ref_delta5 = 409; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt5 = 412; // reference # of earnings moves before expiration
    double live_uPrc5 = 415;
    PriceFormat price_format5 = 418; // option price format code
    float leg_cpx5 = 421; // [child] best price
    int32 leg_csz5 = 424; // [child] cumulative share represented at best price
    uint32 leg_cex5 = 427; // [child] bit mask of all exchanges where we are representing this order
    OptionKey sec_key6 = 430; // leg #6
    SpdrKeyType sec_type6 = 433;
    uint32 ratio6 = 436;
    BuySell side6 = 439;
    PositionType position_type6 = 442;
    int64 leg_id6 = 445;
    int32 fill_quan6 = 448;
    double avg_fill_price6 = 451;
    float vega6 = 454;
    double ref_uPrc6 = 457; // reference underlier price (PrcDe orders)
    float ref_delta6 = 460; // reference delta (for PrcDe order handling)
    int32 ref_earn_cnt6 = 463; // reference # of earnings moves before expiration
    double live_uPrc6 = 466;
    PriceFormat price_format6 = 469; // option price format code
    float leg_cpx6 = 472; // [child] best price
    int32 leg_csz6 = 475; // [child] cumulative share represented at best price
    uint32 leg_cex6 = 478; // [child] bit mask of all exchanges where we are representing this order
    float mleg_vega = 481; // net vega per spread
    float mleg_wt_vega = 484; // net wt vega per spread
    float mleg_delta = 487; // net delta per spread
    float mleg_gamma = 490; // net gamma per spread
    float mleg_theta = 493; // net theta per spread
    string description = 496; // user defined
    int32 order_size = 499; // order size of most recent parent order
    int32 order_active_size = 502; // total activated size (total size released for execution) (-2 = all available size)
    int32 leaves_quantity = 505; // current child order leaves quantity (quantity actively working in the market;all child orders)
    SpdrOrderStatus spdr_order_status = 508;
    SpdrCloseReason spdr_close_reason = 511;
    SpdrRejectReason spdr_reject_reason = 514;
    string spdr_close_detail_txt = 517;
    int32 open_legs = 520;
    int32 cum_square_qty = 523; // cumulative spread quantity filled (all legs received)
    double avg_square_prc = 526;
    int32 cum_partial_qty = 529; // cumulative spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    float fill_vega = 532; // net vega filled
    float fill_wt_vega = 535; // net wt vega filled
    float fill_delta = 538; // net delta filled
    float fill_dDelta = 541; // net $delta filled
    float fill_gamma = 544; // net gamma filled
    float fill_theta = 547; // net theta filled
    google.protobuf.Timestamp last_fill_dttm = 550;
    int32 risk_limit_size = 553; // risk limit size
    SpdrRisk risk_limit_desc = 556; // reason for size reduction
    MaxProgress max_progress = 559; // maximum point of progress for most recent parent order
    string max_progress_detail = 562; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 565; // time of last max progress advance
    AlgoState algo_state = 568; // [enum] current state of order handler (maker)
    int32 algo_counter = 571; // number of times order checked by algo handler (note: most checks result in no action)
    AlgoState make_state = 574; // [enum] current state of make handler (maker)
    int32 make_counter = 577; // number of times order checked by make algo handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 580; // [enum] current state of response handler (if any)
    int32 mkt_resp_counter = 583; // number of times order checked by market response handler (note: most checks result in no action)
    BrokerState broker_state = 586; // broker monitor state
    int32 broker_counter = 589; // number of times order checked by broker monitor (note: most checks result in no action)]
    SpdrMarketState spdr_mkt_state = 592; // [enum] market state
    SpdrBrokerStatus spdr_broker_status = 595;
    string progress_rule_detail = 598; // Twap/Vwap progress detail
    google.protobuf.Timestamp last_child_reject_dttm = 601; // last child order reject dttm (if any)
    string last_child_reject_text = 604; // last child order reject reason/text (if any)
    int64 risk_group_id = 607; // autohedge risk group
    int64 trigger_group_id = 610; // WaitTrigger group Id
    int64 hedge_grouping_code = 613; // autohedge risk group
    AutoHedge auto_hedge = 616;
    HedgeInst hedge_instrument = 619; // auto-hedge instrument (from parent order)
    ExpiryKey hedge_sec_key = 622; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 625; // auto-hedge sec type (Stock or Future)
    float hedge_beta_ratio = 628; // auto-hedge ratio [from parent order (if supplied) or computed by SR]
    HedgeScope hedge_scope = 631; // hedge group scope [RiskGroup or Accnt]
    string extern_hedge_ex_dest = 634; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    string extern_hedge_params = 637; // external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    float best_way_prc = 640; // current leg market nbbo bid (at time of record publish)
    float wrst_way_prc = 643; // current leg market nbbo ask (at time of record publish)
    int32 best_way_sz = 646; // current leg market nbbo cum bid size (at time of record publish)
    int32 wrst_way_sz = 649; // current leg market nbbo cum ask size (at time of record publish)
    float surface_prc = 652; // SR spread surface price @ record publish
    float surface_vol = 655;
    float surface_uPrc = 658;
    double limit_price = 661; // spread limit price
    LimitError limit_err = 664; // limit price error code
    float min_uBid = 667; // Used in conjunction with minMaxType & maxUAsk. When set, implements a lower bound on the underlying price and will either suspend or cancel an order when violated.
    float max_uAsk = 670; // Used in conjunction with minMaxType & minUBid. When set, implements an upper bound on the underlying price and will either suspend or cancel an order when violated.
    MinMaxType min_max_type = 673; // if Prc minUBid/maxUAsk are expressed as prices; if Pct then they are expresses as pct change since parent order arrival
    BuySell lead_side = 676; // for legged orders, which side to lead with.  (optional, None ok)
    double max_completion_slippage = 679; // maximum price slippage to complete an open basket or a cross auction (face side slippage)
    float order_ref_premium = 682; // reference premium (mleg orders only)
    string strategy = 685; // parent order strategy (description only)
    string user_name = 688; // user that entered the most recent parent order
    YesNo visible_in_sV = 691; // allow order to be visible in SV (do not use for high volume of orders)
    string spdr_comment = 694;
    int32 max_exposure_size = 697; // maximum simultaneous cumulative child order public size exposure (-2 = orderActiveSize) [order can overfill if > orderActiveSize and numMakeExchanges > 2]
    int32 num_make_exchanges = 700; // number of exchanges (2 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 703; // public order size handling
    ProgressRule progress_rule = 706; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    int32 progress_slice_cnt = 709; // number of progress slices to use (default = 4 or 8) [max 20]
    int32 progress_expose_time = 712; // minimum time (secs) to expose order (0 = no minimum; used to guarantee that the order is exposed at mid-market for some time before actively taking)
    int32 max_child_orders = 715; // maximum number of child orders that can be generated by this parent order [order will terminate if/when this cap is reached;zero or neg = unlimited]
    uint32 exch_mask = 718; // eligible exchanges (0 = all)
    TimeInForce time_in_force = 721;
    google.protobuf.Timestamp start_dttm = 724; // [optional] (parent order start time)
    int32 order_duration = 727; // [optional] (number of seconds)
    google.protobuf.Timestamp good_till_dttm = 730; // [optional] (default: 2099-02-02)
    ParentOrderHandling parent_order_handling = 733;
    ParentBalanceHandling parent_balance_handling = 736;
    SpdrLimitType order_limit_type = 739;
    SpdrLimitClass limit_class = 742; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    double order_prc_limit = 745; // Applies if LimitType = Prc[]
    double order_ref_uPrc = 748; // default=underlier.mid
    double order_prc_offset = 751; // default=0
    AlphaType alpha_type = 754; // Applies if limitClass = Probability
    float alpha_factor = 757; // [-2,+2] ProbLimit = MAX(alphaProbability, ProbAvg + AlphaFactor * ProbStd) [if AlphaType = Relative]
    float alpha_probability = 760; // ProbLimit = alphaProbability [if AlphaType = Static]
    double surf_prc_offset = 763; // default=0
    float surf_vol_offset = 766; // default=0
    float order_ref_event_mult = 769;
    google.protobuf.Timestamp order_ref_event_dttm = 772;
    float mleg_prob_limit = 775; // live prob limit
    float mleg_surf_offset = 778; // live surface offset (in premium)
    string extern_ex_dest = 781;
    google.protobuf.Timestamp order_dttm = 784; // order entry date/time
    float min_surf_vol = 787; // (minimum) SR spread surface vol [vega weighted] while parent order was working
    float max_surf_vol = 790; // (maximum) SR spread surface vol [vega weighted] while parent order was working
    float min_surf_prc = 793; // (minimum) SR spread surface price while parent order was working
    float max_surf_prc = 796; // (maximum) SR spread surface price while parent order was working
    float min_surf_uPrc = 799; // (minimum) SR spread surface uPrc while parent order was working
    float max_surf_uPrc = 802; // (maximum) SR spread surface uPrc while parent order was working
    float min_qte_width = 805; // minimum quote width during active order window
    float avg_qte_width = 808; // average quote width (during active order window)
    int32 cnt_qte_width = 811;
    float total_seconds = 814; // number of seconds that the parent order was active
    float working_seconds = 817; // number of seconds with one or more working child orders in an exchange order book
    float net_acc_day_wt_vega = 820; // net (+/-) account day wtVega; cumulative day wtVega (vol * vega / sqrt(T)) for the account this order is associated with
    float net_acc_day_dDelta = 823; // net (+/-) account day $delta; cumulative day $delta (stock, future, option) for the account this order is associated with
    float net_sym_day_wt_vega = 826; // net (+/-) symbol day (time weighted) vega; cumulative wt vega (options only) for the ticker+account this order is associated with
    float net_sym_day_dDelta = 829; // net (+/-) symbol day $delta; cumulative $delta (stock, futures, options) for the ticker+account this order is associated with
    float net_grp_day_vega = 832; // net (+/-) day risk group vega; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_day_dDelta = 835; // net (+/-) day risk group $delta; cumulative (stock, futures, options) for the riskGroupId+account this order is associated with
    float net_grp_day_premium = 838; // net (+/-) day risk group premium over parity; cumulative (options) for the riskGroupId+account this order is associated with
    int32 net_grp_day_contracts = 841; // net (+/-) day risk group contracts; cumulative (futures, options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric1 = 844; // net (+/-) day risk group rmetric1; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric2 = 847; // net (+/-) day risk group rmetric2; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric3 = 850; // net (+/-) day risk group rmetric3; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric4 = 853; // net (+/-) day risk group rmetric4; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric5 = 856; // net (+/-) day risk group rmetric5; cumulative (options) for the riskGroupId+account this order is associated with
    float net_grp_rMetric7 = 859; // net (+/-) sym day risk rmetric7; cumulative (options) for the riskGroupId+account this order is associated with
    float net_sym_ema_cxl_dDelta = 862; // acct+symbol 60s EMA $delta risk counter (options only)
    float net_sym_ema_cxl_wt_vega = 865; // acct+symbol 60s EMA wtVega risk counter
    float max_grp_day_dDelta_ln = 868; // max acct+riskGroup day $delta long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_dDelta_sh = 871; // max acct+riskGroup day $delta short (positive number;-1=no limit);risk limit = max limit + current net counter
    float grp_day_dDelta_ratio = 874; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot ddelta = 2x sld ddelta)
    float max_grp_day_vega_ln = 877; // max acct+riskGroup day vega long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_vega_sh = 880; // max acct+riskGroup day vega short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_vega_abs = 883; // max acct+riskGroup day vega abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_vega_ratio = 886; // target bot / sld ratio (eg ratio=2.0 means that neutral is bot vega = 2x sld vega)
    float max_grp_day_premium_ln = 889; // max acct+riskGroup day premium over parity long (positive number;-1=no limit);risk limit = max limit - current net counter
    float max_grp_day_premium_sh = 892; // max acct+riskGroup day premium over parity short (positive number;-1=no limit);risk limit = max limit + current net counter
    float max_grp_day_premium_abs = 895; // max acct+riskGroup day premium over parity abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float grp_day_premium_ratio = 898; // target bot / sld ratio (eg ratio=0.5 means that neutral is bot premium = 0.5x sld premium)
    int32 max_grp_day_contracts_ln = 901; // max acct+riskGroup day contracts long (positive number;-1=no limit);risk limit = max limit - current net counter
    int32 max_grp_day_contracts_sh = 904; // max acct+riskGroup day contracts short (positive number;-1=no limit);risk limit = max limit + current net counter
    int32 max_grp_day_contracts_abs = 907; // max acct+riskGroup day contracts abs (positive number;-1=no limit);risk limit = max limit - abs(current net counter)
    float sym_ema_cxl_dDelta_ln = 910; // max acct+symbol 60s EMA $delta long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_dDelta_sh = 913; // max acct+symbol 60s EMA $delta short (positive number; <= 0 is no limit)
    float sym_ema_cxl_wt_vega_ln = 916; // max acct+symbol 60s EMA wtVega long (positive number; <= 0 is no limit) [will immediately cxl all option orders in a symbol if any order in the symbol breaches]
    float sym_ema_cxl_wt_vega_sh = 919; // max acct+symbol 60s EMA wtVega short (positive number; <= 0 is no limit)
    float cpx1 = 922;
    int32 csz1 = 925; // cumulative size represented at this price
    uint32 cex1 = 928; // bit mask of all exchanges where we are representing this order
    float cpx2 = 931;
    int32 csz2 = 934; // cumulative size represented at this price
    uint32 cex2 = 937; // bit mask of all exchanges where we are representing this order
    int32 c_more = 940;
    int32 num_new_orders = 943; // number of new child orders
    uint32 num_parent_limits = 946; // number of parent limit messages received for this broker
    string user_data1 = 949; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    string user_data2 = 952; // user supplied additional detail (255 char);supplied via FIX or SRSE when entering order
    int32 num_updates = 955; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 958;
}


