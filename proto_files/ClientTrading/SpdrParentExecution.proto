syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrParentExecution records are published every time a parent order execution is received.  They also update as additional post execution mark information is available at F+1m and F+10m.
*/    
message SpdrParentExecution {
    message PKey {
        
        int64 fill_number = 10; // SpiderRock execution number (globally unique over trailing 10 days)
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    int32 version = 100; // record version number;starts at zero and goes up every time an execution record is re-published (eg, bust, +1m marks, +10m marks, etc)
    ExecStatus exec_status = 103; // SpiderRock execution status (Fill,Bust,Correct,Reject,SysRej)
    ExecShape exec_shape = 106;
    int64 package_id = 109; // SR package Id
    int64 parent_number = 112; // SR parent number
    int32 parent_version = 115; // SPDR order instance number (1 = original order; 2 = 1st cancel/replace, etc)
    int64 base_parent_number = 118; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    int64 cl_ord_id = 121; // SR child order clOrdID resulting in fill
    string review_cl_ord_id = 124; // review session clOrdId (usually from inbound review FIX session)
    int64 alt_fill_id = 127; // alternate fill ID (usually from AwayTktGateway.pkey.clientFillID)
    string alt_order_id = 130; // alternate order ID (usually clOrdId from client)
    string alt_cross_id = 133;
    string alt_leg_ref_id = 136;
    string alt_accnt = 139; // alternate (client assigned) "long" account string (optional) [used to map between client and SR account strings]
    string alt_user_name = 142; // alternate (client assigned) user name (optional) [used to map between client and SR account strings]
    string src_routing_code = 145; // inbound FIX routing code, if any
    int64 risk_group_id = 148; // riskGroupId (parent order group ID) for this execution report
    int64 trigger_group_id = 151; // WaitTrigger group Id
    int64 trigger_timestamp = 154; // WaitTrigger trigger timestamp (nanoseconds since epoch)
    string street_cl_ord_id = 157; // street side clOrdId (clOrdId or equivalent of the street side order) [SR/street gateway generated]
    string street_order_id = 160; // street side orderId (orderId or equivalent of the street side order) [from street side execReport]
    FaceSide face_side = 163; // facilitation side (if any)
    FaceShape face_shape = 166; // CrossCust = split broker / cust side, CrossFace = split broker / face side, CrossBoth = single broker cross
    SpdrOrderShape parent_shape = 169; // shape of originating parent order
    OptionKey sec_key = 172; // execution security key
    SpdrKeyType sec_type = 175; // execution security type [Stock, Future, Option]
    TickerKey ticker = 178; // base stock key (used for symbol risk aggregation)
    string accnt = 181; // SpiderRock trading accnt [broker pkey]
    string client_firm = 184; // SR client firm
    SpdrSource spdr_source = 187; // SpiderRock parent order source code [broker pkey]
    int64 grouping_code = 190; // SpiderRock parent broker number [broker pkey]
    string routing_code = 193; // SpiderRock market routing code
    string engine_name = 196; // SpiderRock execution engine that handled the parent order
    string gateway_name = 199; // StreetGateway server than handled the child order (if any)
    ExecRole exec_role = 202; // SpiderRock relationship to this execution record
    string exec_broker_mPID = 205; // exec broker acronym (a FINRA assigned MPID or SR '$' broker tag)
    string exec_broker_accnt = 208; // account at executing broker (if any)
    string exec_broker_cl_firm = 211; // client/firm at executing broker (if any)
    string exec_broker_user_name = 214; // userName at execution broker (if any)
    FlipType clearing_flip_type = 217; // Clearing Flip Type (None, ExecBroker, CMTA, Giveup, DTCC, QSR, etc)
    string clearing_flip_firm = 220; // Clearing Flip Firm (if any)
    string clearing_flip_accnt = 223; // Clearing Flip Account (if any)
    string clearing_firm = 226; // clearing firm
    string clearing_accnt = 229; // clearing firm account (if any)
    string orig_exec_iD = 232; // original execution ID string (child order)
    string last_exec_iD = 235; // most recent execution ID (same as origExecID unless CANCEL/CORRECTION has been processed)
    string remote_text = 238; // text comment from remote endpoint (if any)
    BuySell order_side = 241; // order side
    SpdrOrderStatus spdr_order_status = 244;
    SpdrCloseReason spdr_close_reason = 247;
    int32 cum_fill_quantity = 250; // cumulative fills (this parent number only)
    double avg_fill_price = 253;
    int32 cum_leg_fill_quantity = 256; // cumulative fills (spread only)
    double avg_leg_fill_price = 259;
    int32 leaves_qty = 262;
    PriceType price_type = 265;
    SpdrOrderShape child_shape = 268;
    int32 child_size = 271; // child order size
    double child_price = 274; // child order price
    google.protobuf.Timestamp child_dttm = 277; // child order generation date/time
    string child_exch = 280; // child order exchange
    string child_ex_dest = 283; // child order exchange destination code
    string child_exec_broker = 286; // executing broker that child order was routed to
    YesNo child_is_directed = 289; // child order isDirected flag
    YesNo child_iso_sweep = 292; // child order ISO sweep flag
    string child_order_handling = 295; // child order handling string from the algo that generated the child order responsible for this fill
    ChildHandler child_algo_handler = 298; // algo handler for this child order
    ChildCreateReason child_create_reason = 301;
    ChildCancelReason child_cancel_reason = 304;
    MakerTaker child_maker_taker = 307;
    double child_uBid = 310; // underlier market bid at @ child order send time
    double child_uAsk = 313; // underlier market ask at @ child order send time
    double child_bid = 316; // market bid at the @ child order send time
    double child_ask = 319; // market ask at the @ child order send time
    double child_mark = 322; // mid-market (SR surface price if option) @ child order send time
    float child_vol = 325; // child order volatility @ childLimitRefUPrc
    float child_prob = 328; // SR probability for the child order @ child order send time
    double child_limit_ref_uPrc = 331; // limit reference underlier price @ child order send time
    double child_limit_prc = 334; // parent order limit price @ child order send time
    float child_vol_atm = 337; // atm volatility @ child order send time
    PositionType child_pos_type = 340; // child order position type
    int32 child_firm_opt_position = 343; // effective firm option position @ child order send time
    ShortSaleFlag child_sSale_flag = 346; // short sale flag
    int32 child_firm_stk_position = 349; // effective firm stock position @ child order send time
    int32 child_firm_open_orders = 352; // open sell orders counted in marking @ child order send time
    int32 child_locate_quan = 355; // available locate quantity (if selling short) @ child order send time
    string child_locate_firm = 358; // firm granting the locate
    string child_locate_source = 361; // locate ID code (if any)
    MktStance child_mkt_stance = 364; // child order was expected to be marketable @ child send time
    YesNo child_cxl_attempted = 367; // cancel attempt was made on the child order prior to receiving this fill
    float child_cxl_fill_latency = 370; // cancel attempt -to- fill report latency (in ms)
    string child_method = 373; // execution method string
    string child_source = 376; // execution source string
    FirmType firm_type = 379; // child order firm type [Customer, ProCust, Firm, MM, etc]
    string pri_agg_group = 382; // primary aggregation group
    string sec_agg_group = 385; // secondary aggregation group
    google.protobuf.Timestamp fill_transact_dttm = 388; // transaction date/time as reported by exchange or down stream broker
    double fill_ts = 391; // fill report ts (seconds since startup; 100 nanosec resolution)
    google.protobuf.Timestamp fill_dttm = 394; // Date/time of fill arrival (SRDateTime)
    string fill_exch = 397; // ExDest code from child order execution report
    string fill_exec_id = 400; // street side execution Id
    string fill_exec_ref_id = 403; // street side execution ref Id (only used when busting an execution)
    int64 fill_leg_ref_id = 406; // legRefId for multileg fills
    int32 fill_leg_ratio = 409; // legRatio (if spread order)
    float fill_exch_fee = 412; // SpiderRock estimate of the exchange fee based on liquidity tags (best effort)
    string fill_market = 415; // usually from execReport.lastMkt as reported by child order venue
    double fill_price = 418; // fill price
    int32 fill_quantity = 421; // fill quantity
    string fill_report_detail = 424; // extra detail (if any) from child execution
    double fill_bid = 427; // market bid @ fill arrival
    double fill_ask = 430; // market ask @ fill arrival
    double fill_mark = 433; // mid-market (or SR surface price if option) @ fill arrival
    double fill_uMark = 436; // underlier mark @ fill arrival
    double fill_uBid = 439; // underlier market bid @ fill arrival
    double fill_uAsk = 442; // underlier market bid @ fill arrival
    int32 fill_uBid_sz = 445; // underlier bid size @ fill arrival
    int32 fill_uAsk_sz = 448; // underlier ask size @ fill arrival
    float fill_vol_atm = 451; // atm volatility @ fill arrival
    double fill_mark1_m = 454; // mid-market (or SR surface price if option) @ fill arrival + 1m
    double fill_mark10_m = 457; // mid-market (or SR surface price if option) @ fill arrival + 10m
    double fill_bid1_m = 460; // market bid @ fill arrival + 1m
    double fill_ask1_m = 463; // market ask @ fill arrival + 1m
    double fill_bid10_m = 466; // market bid @ fill arrival + 10m
    double fill_ask10_m = 469; // market ask @ fill arrival + 10m
    double fill_uMark1_m = 472; // underlier mark @ fill arrival + 1m
    double fill_uMark10_m = 475; // underlier mark @ fill arrival + 10m
    float fill_vol_atm1_m = 478; // atm volatility (options only) + 1m
    float fill_vol_atm10_m = 481; // atm volatility (options only) + 10m
    FillMarkState fill_state1_m = 484;
    FillMarkState fill_state10_m = 487;
    float fill_vol = 490; // fill volatility @ fillLimitRefUPrc & fillLimitRefSDiv
    float fill_vol_s = 493; // fill volatility @ surfaceUPrc & surfaceSDiv
    float fill_prob = 496; // T+10m probability for the fill @ fill arrival send time
    double fill_limit_ref_uPrc = 499; // limit reference underlier price @ fill arrival time
    double fill_limit_ref_sDiv = 502; // limit reference sdiv value @ fill arrival time
    double fill_limit_prc = 505; // parent order limit price @ fill arrival time
    float fill_ve = 508; // fill vega
    float fill_ga = 511; // fill gamma
    float fill_de = 514; // fill delta
    float fill_th = 517; // fill theta
    float fill_pr = 520; // fill premium over parity
    float fill_ve_ratio = 523; // fill ve / fill atm ve
    float fill_beta = 526; // SpiderRock estimate of beta to SPX
    float fill_risk_metric1 = 529; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric2 = 532; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric3 = 535; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric4 = 538; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric5 = 541; // user defined (from parent order) [used to manage order groups]
    float fill_risk_metric6 = 544; // user defined (from parent order) [used to manage order risk]
    float fill_risk_metric7 = 547; // user defined (from parent order) [used to manage order risk]
    float fill_s08_dn = 550; // underlier down 8% shock slide
    float fill_s06_up = 553; // underlier up 6% shock slide
    float fill_s15_dn = 556; // underlier down 15% shock slide
    float fill_s15_up = 559; // underlier up 15% shock slide
    float fill_s50_dn = 562; // underlier down 50% shock slide
    float fill_s50_up = 565; // underlier up 50% shock slide
    float fill_brkr_rate = 568; // billing brokerage rate (tier 1)
    float fill_routing_rate = 571; // billing routing rate (tier 1)
    RiskCode risk_code = 574; // SpiderRock Risk Code (if any)
    BillingSecType billing_sec_type = 577; // SpiderRock billing security type
    BillingCategory billing_category = 580; // SpiderRock billing category
    string spdr_liquidity_tag = 583; // SpiderRock normalized liquidity tag
    string exch_liquidity_tag = 586; // liquidity tag as reported by downstream venue (if any)
    string fill_exch_detail = 589; // other fix tags (tag:value#tag:value) [additional detail used for analysis]
    OrderCapacity last_capacity = 592; // child order capacity
    string exch_firm_type = 595; // used to reflect field from a downstread execution back up to upstream fill report
    string ext_exec_broker = 598; // used to reflect field from a downstream destination back up to and upstream fill report
    RelationshipType relationship_type = 601; // type of SR <-> client relationship
    float cl_arrive_mark = 604; // client specified arrival mark (passed through from parent order)
    google.protobuf.Timestamp parent_dttm = 607; // parent order creation date/time
    int32 parent_order_size = 610; // parent order size
    double parent_uBid = 613; // underlier market bid @ parent order arrival
    double parent_uAsk = 616; // underlier market ask @ parent order arrival
    double parent_uMark = 619; // underlier mid mark @ parent order arrival
    double parent_bid = 622; // market bid @ parent order arrival
    double parent_ask = 625; // market ask @ parent order arrival
    double parent_mark = 628; // mid-market (or SR surface price) @ parent order arrival
    double parent_surf_vol = 631; // SR surf vol @ parent order arrival
    float parent_limit_vol = 634; // parent order limit volatilty (if any)
    double parent_limit_prc = 637; // parent order limit price @ parent order arrival
    double parent_limit_ref_uPrc = 640; // limit reference underlier price @ parent order arrival
    float parent_theo_vol = 643; // client supplied theoretical volatility (used for markup only) [copied from parent order]
    float parent_theo_prc = 646; // option price corresponding parentTheoVol
    PositionType parent_pos_type = 649; // parent order position type
    ShortSaleFlag parent_sSale_flag = 652; // short sale flag on parent order
    int64 cross_notice_id = 655; // RFR / Auction crossNoticeId (if any)
    int32 num_make_exchanges = 658; // number of exchanges (1 - 4) on which to publish public making orders.  Effective number might be less than requested number if sufficient exchanges are not available.
    PublicSizeHandling public_size = 661; // public order size handling: None=use default size handling (usually limits public size to 'typical' market size); Randomize=randomize public size; FullSize=expose entire order size where possible
    YesNo can_overlap_cxl_repl = 664; // can execution engines overlap cancel/replace operations [order can overfill if YES] (at most one active overlapping cxl/replace operation for each parent order)
    ProgressRule progress_rule = 667; // Immediate = all size immediately available;TWAP = size released in time intervals;VWAP = size released in volume intervals;
    YesNo exch_mask_enabled = 670; // exchMask != 0
    TimeInForce time_in_force = 673; // Parent order time in force
    ParentOrderHandling parent_order_handling = 676; // Primary/Take Algo Handler
    ParentBalanceHandling parent_balance_handling = 679; // Make Algo Handler
    SpdrLimitType order_limit_type = 682; // Primary Limit Type (Prc, Vol, Rel, Market, Smrt, etc)
    SpdrLimitClass order_limit_class = 685; // Simple = LimitPrice, Surface = BEST(LimitPrice, SurfLimit), Probability = BEST(LimitPrice, ProbLimit)
    ReachRule take_reach_rule = 688; // Immediate = reach room immediately available; Delayed = available after [1-3] seconds; Passive = available if contra side aggresses; WeakOnly = only take if available size < avgMarketSize; ISOSweep = Intermarket Sweep [requires WaitTrigger]
    OverrideCode override_code = 691; // SDiv/DDiv override rule (applies if LimitType = Vol)
    AlphaType alpha_type = 694; // Affects limit probabilities (applies if LimitClass = Probability)
    string parent_strategy = 697; // client strategy [usually client supplied]
    string user_name = 700; // user name associated with the parent order
    AutoHedge auto_hedge = 703; // auto-hedge algorithm (if any)
    ExpiryKey hedge_sec_key = 706; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 709; // auto-hedge sec type (if any)
    float hedge_beta_ratio = 712; // portion of executed $delta to auto-hedge (can be 1.0 / Beta for beta hedging) [-4.0 to +4.0])
    HedgeScope hedge_scope = 715; // hedge group scope
    string user_data1 = 718; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 721; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    float years = 724; // years to expiration
    int32 underliers_per_cn = 727; // option delivery underliers per contract
    UnderlierType underlier_type = 730; // type of underlier (affects $greek calculations)
    float tick_value = 733; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 736; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 739;
    float u_prc_ratio = 742; // UPrcRatio (SymbolRatio) from product definition
    float min_tick_size = 745; // minimum market price variation (dnTickSize if on a boundary)
    PriceFormat price_format = 748; // SpiderRock price display format code
    PriceFormat u_price_format = 751; // SpiderRock underlier price display format code
    double live_uPrc = 754; // SpiderRock internal use only
    double live_mark = 757; // SpiderRock internal use only
    int64 src_timestamp = 760;
    int64 sgw_timestamp = 763;
    int64 eng_timestamp = 766;
    google.protobuf.Timestamp timestamp = 769; // timestamp of this record [not necessarily the timstamp of the fill itself]
}


